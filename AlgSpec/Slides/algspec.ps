%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: algspec.dvi
%%CreationDate: Mon Aug  6 13:13:52 2018
%%Pages: 95
%%PageOrder: Ascend
%%BoundingBox: 0 0 363 273
%%DocumentFonts: CMSS12 CMSS10 CMSS8 CMSSBX10 CMCSC10 CMSY10 CMSSI10
%%+ CMSSI8 CMMI10 CMEX10 MSBM10 CMSS9 CMMI9 CMSY9 CMSY8 CMSSI9 CMR10
%%+ CMMI8 CMR7 CMSY7 LASY10 MSAM10 CMSY6
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -t landscape -o algspec.ps algspec.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2018.08.06:1513
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: cmcsc10.pfb 0 0
%!PS-AdobeFont-1.0: CMCSC10 003.002
%%Title: CMCSC10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright:  (<http://www.ams.org>), with Reserved Font Name CMCSC10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments

FontDirectory/CMCSC10 known{/CMCSC10 findfont dup/UniqueID known{dup
/UniqueID get 5087402 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMCSC10 def
/FontBBox {14 -250 1077 750 }readonly def
/UniqueID 5087402 def
/PaintType 0 def
/FontInfo 10 dict dup begin
 /version (003.002) readonly def
 /Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMCSC10.) readonly def
 /FullName (CMCSC10) readonly def
 /FamilyName (Computer Modern) readonly def
 /Weight (Medium) readonly def
 /ItalicAngle 0 def
 /isFixedPitch false def
 /UnderlinePosition -100 def
 /UnderlineThickness 50 def
 /ascent 750 def
end readonly def
/Encoding 256 array
 0 1 255 { 1 index exch /.notdef put} for
dup 0 /Gamma put
dup 1 /Delta put
dup 2 /Theta put
dup 3 /Lambda put
dup 4 /Xi put
dup 5 /Pi put
dup 6 /Sigma put
dup 7 /Upsilon put
dup 8 /Phi put
dup 9 /Psi put
dup 10 /Omega put
dup 11 /arrowup put
dup 12 /arrowdown put
dup 13 /quotesingle put
dup 14 /exclamdown put
dup 15 /questiondown put
dup 16 /dotlessi put
dup 17 /dotlessj put
dup 18 /grave put
dup 19 /acute put
dup 20 /caron put
dup 21 /breve put
dup 22 /macron put
dup 23 /ring put
dup 24 /cedilla put
dup 25 /germandbls put
dup 26 /ae put
dup 27 /oe put
dup 28 /oslash put
dup 29 /AE put
dup 30 /OE put
dup 31 /Oslash put
dup 32 /suppress put
dup 33 /exclam put
dup 34 /quotedblright put
dup 35 /numbersign put
dup 36 /dollar put
dup 37 /percent put
dup 38 /ampersand put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asterisk put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 60 /less put
dup 61 /equal put
dup 62 /greater put
dup 63 /question put
dup 64 /at put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /bracketleft put
dup 92 /quotedblleft put
dup 93 /bracketright put
dup 94 /circumflex put
dup 95 /dotaccent put
dup 96 /quoteleft put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /endash put
dup 124 /emdash put
dup 125 /hungarumlaut put
dup 126 /tilde put
dup 127 /dieresis put
dup 128 /suppress put
dup 160 /space put
dup 161 /Gamma put
dup 162 /Delta put
dup 163 /Theta put
dup 164 /Lambda put
dup 165 /Xi put
dup 166 /Pi put
dup 167 /Sigma put
dup 168 /Upsilon put
dup 169 /Phi put
dup 170 /Psi put
dup 171 /sfthyphen put
dup 172 /nbspace put
dup 173 /Omega put
dup 174 /arrowup put
dup 175 /arrowdown put
dup 176 /quotesingle put
dup 177 /exclamdown put
dup 178 /questiondown put
dup 179 /dotlessi put
dup 180 /dotlessj put
dup 181 /grave put
dup 182 /acute put
dup 183 /caron put
dup 184 /breve put
dup 185 /macron put
dup 186 /ring put
dup 187 /cedilla put
dup 188 /germandbls put
dup 189 /ae put
dup 190 /oe put
dup 191 /oslash put
dup 192 /AE put
dup 193 /OE put
dup 194 /Oslash put
dup 195 /suppress put
dup 196 /dieresis put
readonly def
currentdict end
currentfile eexec

D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C545D25FE19253
9D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB47934F62D1F46E8671F6290D6
FFF601D4937BF71C22D60FB800A15796421E3AA772C500501D8B10C0093F6467C553250F7C27
B2C3D893772614A846374A85BC4EBEC0B0A89C4C161C3956ECE25274B962C854E535F418279F
E26D8F83E38C5C89974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F024
867411453BC81C443407AF41AF8A831A85A700CFC65E2181BB89566A9BDEC70EB4F2048A6EB6
31F05C014D372103E37FC3FA317EBC9973565A638403DA02E48B7D31CFF6C241DC5CDB470561
002FF46437C06EF93BC99352DF04393C661FFFBF4BA20723ABD9B3E9CA9E63BA57EFDBAE6846
55CBBDBA15ADAE43E1A2C98A3CF060A3D16AF8FE3A49B50A24C20EEED716E49AF6013D4D38CD
9CC41A91C17E4D04D79D567E1EF49110AA9C34464E95D81A730ECEB2C9AF38FBA6B45E253288
438B4CB3DC75B3A906D4357293BA41E59C35223A6C9CBD6FF5FC90C2D07CBB376C7320FF435A
6251822BFCBB612CE630EDF826C37E95F541C21B93FCE10D8F3CA4218B9A8FE8CE77130C4DC5
C8AB724A04CD26A3B5ABCF422522BD6D6C4CDA508285E30FD30AA8083552F15B367050B62297
3DDD1C6BA6E6338B00AE1F998EBBEE6E2AEF1AC1EF1B649AA82538290E0C1251399B2E1A73DB
672EA580B28F76F4A75CA47FE3940832A522A3CCE35ACF62988E63E67DD2408E2C22B0D6A503
F1F01C1B3AA9BF6EA45DD6AD75F1E02C72ED44A3869543CE54C1F08C769EAED10ABE0BA8E186
159623D3F35ED06D889C947CD18EE443260ED7A61AA08B09B6E1A246EE8EA6B89685AD1FE94F
7BD87F4F23EE64789BB62814B375861B04B6179673DDC6F438806BECB57C84EF2A3B24A40862
AABEFDBBF3A70029AA2B0E315629159A8ECE66F23351D410AE2CFC9C53820326B85CE3A41285
DF0C48600E4F9723D0BBF9F2020B3AF468311496DC38C9165C4E4DFF145F22F8A63A0C30B09A
654A5A9CA43968A524B7F4D204C06F82E2FB03DA74BFE2A9CD06B85644BFC3C4C8AFEB5F1DA1
2E63B30B00CB96692424239CD18EEA1E599C53C8F4388F550C92F7667C151D9DD13F3A9B7557
50CE577F5C0D4B222422F5EB76978216AD3C28D3357F7CC822736EDA22A680476B333D94CBF6
E6E600318255524B8664A01F5E73BC2F4473E0F30FCFC7E92AF98F88317E513A06DC10EBA262
4084DA48174C2B3510872580CD6E1C2ABE2CF18327E3DC660793DC74A647F063C82B47A628E9
F042B2B7A1BD410FF4E2203A37FA8CEFEE099369FB143C7A7B217917CA7A24ADD0096DC4B063
84223FC9C78E8F1C4B9A865EB3712378C72C04C594E91E9803F58C078344F12949E8F85C850D
6C561CCA7896675CF7FE38D4C8C3BB34AFCB9F99B893F6242C3000E8AFC0D9D237C1E271BDFE
691D167760080E304560DB47245C644A2A1154A5FDA041B1BAB29F68CD57DBB69B19AD1BC6F8
9DEB9278E355B8FC62150C23BB7AC459F710077F199D258EA80DB405A25102A1F9C38E45D206
784A78395FA7CDC6BFC51876C81B7C189129D7BD16237F605E5C1CFC6BE98A6C2D6BDC125491
4B571CC03FBF7545BE86E9956C9CF26FCFE4B9A4FB3D0D2B22DC218D475B11D7822C1BA6316D
96B0B1C79A7CCADA5FBC457AE7B81F01E50840B337FFEEE5F7F69D8D060427F86F2495AE1C3F
6EA62725106ADEEE2955EDBB30A1C9F4AAF2F8237F873CF8E858133F415502EF51359C2FF9A0
058330C2A6DB37F7BEA1C7E7EDC595193FC1F9F943035135FD8EC2B7E8AAB4BE2E3EAFC6DC6A
E2F75EACCD23F6BDE828452FDEDBCBDAB39CCA496219BC5249BE52C39DC98110D11055274548
C8EC389F138BCE2F260AB6F49E0980CD130593CB2AD990F061476ED0B7525DFEF225DBE5E72A
5E2C0C2C9E29DED782B8A7B6BBCF6E9766124288DECCBAAC20D75A5FADEA15DE29DD60802AB0
C7900F664F19DCB6154AEA1633376B566061FE6C1080D2BF7B74E3BD59137BF9D8DE51991E84
7F0DFEB34E51CC2019917D24FD7669D812E163670C7D91372750020D72AA7B0965F62AE668DB
280B3B8C887CDB46EE0B1B129380BF76BFD659ACEB92B5364165B684021C6468BD5862F130A2
0492AFD424A0AC02A200F59B25FB4D1718F129554C47F379EBFF2BDCC1CB2FAC1CB289DBC3E0
76B0C56DD99742C1CF0BCFBC39CAE8D741C31E47D6CB2F8668FA01FBF487DCBD903AC144C67E
11C454570DFFBA539C28C0C0AAA9FB8017051830153D0C53BAF826A4B51EA65F72074F111CC5
982CF377A48888F789D08C7216A364BC9C1CFA1B85E6D025E69C3CE889D50818AADF80BB9639
C9D506B807EA6C94714EE47254790628F44E3C5D8C20944E4AE6024EDC6FA8219BC3E26C5E17
08D61ED34D7EFD76DA7D91073EA529CE74650019802BE4EF5CE2C5A543D55EA063282266BB78
4A42EF0E794564BF784AE786CCE04CF0BC6073F3CC3B52918C2599D584220D21C8B96A07A5C9
54A7E9E640518ECDABDE6E2EE9B85D53463A0AA07A20932EF29E97AF77F147692EFBDA2EB385
44738BE9C1652CB6796BC50BF1B3F0A60C7C9469153749D74EB31076BEC5998C3842462F033E
3CB44B6E778BD9E14046234C03A6C18E26F7AB9CE96040D382217169CFD9A29CF4556EDA7BA7
6B920F6F27307B46C174A7202201169508C735DB19D4D89EB0206F4FD67A8B6C2C27AA0456A2
CAA4E1CECED0E8B2E6E9553C609D02651A7A5A2448375B1C5213734439D934AEDBB5DF8E8969
F718F2930B91367D5C726D0574DC22FC5560B8AFC0EFFC77089E62E80E6BAD447656B8BB43AE
029CF91F80D43C3550B378EC68906B09A6454EBC7966B066B7258648E684D4F00E6292F9DE0C
BEA61B866B83DF4E321A301D06DEC171C95524FC2FFB6EBBAC19818DD29094D89DA2637C9E7F
D847390A3855E2313AB217FB6DFD1729CDA6DC8DE85C9DDB20CCE685213623C491E6EB0308CB
9BD480DB516F404FEBF60F2C4432E0E8419BAC78B5280AE90591C9997C9DB935FD64203C5B3E
F93C060284C3274E8242BE629B96EAFFA886D34979146342761007CBBFC78018DFBA38D55636
34146E94FD94772FDE288CB49634364CBD687423CFD3262F108B9C5D9A71A3BC21F60754C549
C2C5B95C23DBE0D9B6918EA4D6DBC693107D3101E8D68FD6C8036766DE26DC422A0EFDED57DC
B161D39B12C0C37FFE6004E3A7E37B1E25BCF482F12A93BA85CFA56D56379126E325BDEFE08C
D83AB47F0979DB8939407443F7ABE9D52CAE7600176825E9C0DC22ECBF11A18F21C59823CC45
770274F9D3E24282A487E1900A6F54B4A6B511809F606AD0BF8440DA8E16FB9280FC0E81ABD3
487802D38215E0C5C741FA3242D77601251431C671E8B1EEE8197839B845F4D9CDD823ED0A89
1593BDBFE29488CFB58FE7DB6B65BBBB8F6D747DDAD90C872F48A3DB3F0773F775E29D2A0F2B
CF5778A2533B6AA66AABC7D999355B047104A8A7DABB2ABD31A23EE03A87025ACFCA9C1DDBAC
1EBC02A5E5CFFBA6116538BD6A30523E6494F48F30CDA6AE470B713FF970E905936980AD5CC6
6DFE433A66AAF0310072B195ABE57AFD5307004E7B2C6A251BBDCAB86D7A1A63B5D3C79AB0EB
787CC4E2F6153E5B77C66FC94D81E804A5A1FB949CC0880F12280B444CA8FA613D36FEFC5387
39B67B15877BD3079C12133721F5428F148F36667914EA0B91DB3A58843E700B82857E0C57CB
E3970CE645B09692F465BE578CE56EA0EAA6D824102B3001C62C575B0B42742323878960B9CE
F44C5ED4940250447ECC3536BA135EBA8AA278FB3E2F3D65887407107AEB96A5E643CC38BB9B
7C79D7C4DF60C50CD2BA5BB02DCEA78B7E1F538F9EA74035F86E66A104B6B1B1C07F5175D072
E1C248F3577BECDA8F3D108CBFD037440E1F4B11B92FA2F72FE771C7F27B4501541ED32D21BF
04FADC00B4A7208E61803146CC89306C00E523A03A84CD9EC15F16DB99E343D19B3FB9C6AD52
E15F40D9F9C01DF22411DBED84FFDFD3CF92FB6165374FCBA541CAE583A9827D214EBD5C717B
C16BD0EE02E4A3F826DA8AA1ADD90189FAF85EAC52F1BED032E2379888B9087C97870DDFA7AA
7F0234CE238E5C99F8B9FFE169571327D4771519AFFA527A2347A7F41654FD492D28AE1E9425
B239A3CE98116DE83651BF947085B523156B1629FEA828190EA00F46AE25F76BD63F879EEB6D
C4C0ED03887F45C4F2F8CDED6E5079B900FDBBB04C001B7D04B5EFB94C4817C05A4964E68DFA
C0BFB89B19E6D87FE4496D3EB3C086996D50FA1DBDCAA1E794BF728798EF96C7B74EB3853BFC
0C45142066260A85C09B5A5F7F37BCA72C6EC6F63E8E32CB27F30CAEB820A1F7BAB92B5596FE
5B1BA2E3B949065DC4991F098FDB0A8A9E546F5C4844499A86EF260B5EF929948304C6D8E5A1
A3B9F41C76BE7C5BF0CE931EC8A1367EC167E68B88CEEA21C00FABA4E3CE8C4A117D494D0F82
B7BBB5C34C5C754F65A1D791DF550005775E7E4476573CAF59DA0D4036135C34A5AE55C11D3D
7FD25FE51BA86CA8864FDB41B7347D0ABA8C70BD7A48C5C72CB114E479BE36FCD3FEB315CD7C
237DD2BC2863FB1B214503A96D7F82A36CE2FFDB728DED7677B2C926579B074434F59FFEA0CB
C99297065A89DAF81127EDD444ACE8D58F17623BADD2FFDB763A053012F4265293874F36B7F5
B48D68FBA52FEFFB17345CE1A595062B0D6ADDF3B5238D67EE52A211FA990C7E678D4A13BC52
75804A0B1965DC49A54E2CD96FE179FA334E34B9DA476696ACFFB2160F8AD45604E51494761D
C2184018E99460ADB165110C4DDBF7AF9E76E9AB2A653BE47553550C80295F7AFF008C356DF0
21D28B8DF95CE859E1B94879824945DEEDE9D1BD90652EE7C1C57E7C444924F3E4A945539C4F
E7B1C1FE7EBD0E005C7188078BE16FD26001708CD98F9D59F638D8E2C21A72DA8AE00E7FB022
0C51A9312BFF95F716CABE2967A6D8667C14EFDCD30EE04D87E7B0A0A5E83B81FD4A4F0B9C58
930BDC097736FE8BEB6A7FB6EF88B49CA6A91387D4AD80CBA7C5A9B3BE02352DAA123AC165A6
9763C37864909BCBBAA2CA81BB34AF52D0F9C203CE748276052159300D851D9FBC73E22A32C6
C3A47C8478603389BF852C2342D92DAFA82E0EED593E3E666BD8554C610753E0DFBC02BF44E1
EE8A9B897719882926D860222AA9CC6F04F1A149BD1BE2B14A66421149EBC60AD02CF6D9A65A
C84A41C02EF7DFB70E75C5F51266A7F5ECDD2C412E94623C5E0E95F9CFF6DEC69B5294682E60
65F39EB434CFE6B0A5EFB913850B8320E4407DAB555EAA51BC92EF34B49ADAE54980DB221A0A
F360EC3F79E59D074D570AE07AC69D4EFC54463B0DD25D6946E9A91F468149032718BB050213
564D6111E61587EA14AD263564E72A4DA92EB8B1EE3CF064A8B73CDD356552A86DCA02A020A1
695208B140BC1DAB8DD608D8FC976EF3DAF98CE00D91EFE930074368736B2DC19E45DFCEC94E
1BBDA941925982F544E04E7F6C4F5134F3D203788DA11CBAECA1A0AF3BAA1DDA3D8539F59288
001B553AFC938A176352113C78FB8BDC18EADF70B1D4CEE71F71743C50527BC9D0A7E9D12BD2
5EEE940981F167A64BA10DDC002327D8B414EC3937CDDAEDC5FA77ACEC0ABDB4BAFD8DB86E77
62985BB5F730D9E07E7B01AC234E892531C107C637C0A2C3A8F38756D5E98FD180AA82E95E4C
241B6B55FC8304F9D93E4536A393338550CDFFBEFCED1CAE42CDD8D44C7E4262E0DEFF5B77F4
0F731390F2C3E16AC846CE67E3F6606ABE1B1E1B439C867A773F82A6DA325F5EBA3469A1FC79
8213E26DBD8911B15EFEA4AFAE8B9D876C847AEFAC0F6A48C006904F98554782AAE4511ED545
3EBE75CE983AA949A9A71BFC13A4E732BC67A870D349AA291EA4E775669730B6C2449E629A4A
0297104004F4AC6709EE91C101AD7BCACAC6B06B6EEFD397ADB2C12D8392DFD23611A9A5753E
19C5C856E84F1390D426ED06FA5C525F2F0A83D2F3F30FDE2EA3EC537FF38E5E69CCF1580BE2
D7EAC0B2C0F41FCAAAE2A3E76416767647E455BF0EBB6E35BA91988D1F0F8C9E81766F40ABF7
7409F7342B378406734D462FF168537B586D15C1B7EA0BD5C4975E6B51ABA36652F10C57477A
30DABD7E6DA3810DE175A06ABBBE237648DAC40426268958058AE1DAC62A92DE92017FEE410C
CDD282773562DE188704746C01023F589D59D83EB386D4536CE073FC67356960897E4F8BA482
676711858ADF246E5B34670BC5B85B3D70FAD010BF13FCE42A297E9FC37DDF1E1C5BD4B9B4D0
10FF6B0B5F7E4984A1CA2FBFB49C4A3B23344B4B4D959C4D981B1DAB33CE0C41C6F474DBB3EA
F06CB7EB42903E486933839C6889E40F0457832257A55817829851A97643F75DE9F136F15381
8DAA9984F17BC3FE144E5E8C2609C0B248DBE38F27F3CCE5DA5CB990442AFD61F6EFAEE67EE0
5C225BB539ED42B958B042509DAA707CE96E71CCBB43885888A594785E5D6FBF5C63DDE688F4
E409CEFC4B54A20667C961644851CD0C9CCB93DCCAA20223E76477DDB35642E03DB6C9FCC324
C5663FEC81D913CF613B0D10AF6BF103709D786AD6C89A4D9ED96DCF206E04382FD968FF7633
9D879D0049C40EAA95591DABB317BB593416B056C3782A21FDD0B2B2A8EE3AE58FFE90636AF3
BD3F082CE2618F6B28D88ECBE209C5EA21D725FE206C538F0727FC1C7020393C950A256063E6
6FD54A9ECF85D87989DC89DF6E318D512369F47D63381A644E2396867428F6188B8C051970F6
5C3E612778CEF1FA020C58BAEB685226A3ED939FFE3E86F78AD3C1866D8ADD4FE0519C28E839
2A7F8ECDE776F92540AE04660AA3F1F90BDF9DFA159A039FB95BDE63DA63EE35680B855DF3C2
02A99BFCDE92AC0729A55A86D00976FEEC60E7241F3446B19820B951EC272ED01AF7F81CFF7D
F47DC0CADE59E4D633A5F7C1C7BE8535C52D07E75B127FB82199F3349B1FF478F774166CF933
F49DD0AFC57D1178CE64EA98A4966344FCDA7E8B47BE898A4B42AAB7F3F2BA2E00834D317A78
8C7DD9E7F7F1D055362E760BA703D544A11A63E5B7A427154E03DE019103367E1885DF3EE934
8E6EF2AD70635DA71053704AC4038663343AC9BBC4B99A4DFD5F48986DA9CF44B300FBFE6765
A8B6C3C462D0900CCD091152DD0B76C366B16ADD394B60544411037256C223C4CFDA0D6BB99D
94A8700952A00ED93129924AB8572169E06F9C7EE5CB46F0E4D41F1CE347A15636C89614D036
55D9D3E1F4FE2FF9B60E97C648ED0A3DF7B208B25FE8BA16A0FF3C36357D7969DA2FE2471430
18F5202F2AEBC437ADCAD7D64C898491F2315E5E7756A9FB716B66F5F970CDBFD2D67F47E5FB
3094C43B2AC52BC50E9DFC57078CDADD3803F2BB4A72677393FD36807F51A6B4EEFD517D4B94
3552461504ADE980AD3DA6E7EC13DFCC1844CDCB61A2C10D2A000EB259EA771832C23BF8FFEF
89F43B3199F88833654020DC0B703003E03835F7D6D58049367CD4FE202C46467182F7EF56BF
4B930FB49E5FF2C89E29AC95B2E7445F8125603BE3538C93CEE4707412202DABAA33A0DB32C3
7A71F03CC63D8C6637ABC4E94B5A8254664055A8394728B0DA3AFDA640399E63DABF4776716A
A0DB3D1CCC9ADB7FEC8D77BDD50A5EDF06BE50D33C5EC29843731AC2F8403C657B7C5B9017E6
701ED72D9A94F1C83DF199B48A1C20E7B77854DA4B4B05AB928DC1B0DF1E3255C881D652964F
31FD690082FA02D1E2A4260E5270EF79967750DCBF7EEF9B9448984B66D0AE83D7F31DA878D2
0968D88F8038E776781B0672E18A012390DF6D9D25468C1EC1B6C4D0FA2C6E35B7954447C52E
96937FEABC908746DD48BCAF67335C613727E155AED84989E78792EC3F51E618CD559F65B172
8DFE59F750EF7F6A7B729380BEF8AAE755BF9736395C609B315ACC4F49566EDF37EE388C76C6
3C35637CF0AB9DFC59772BA96C4758629650F5FB9B42ACAD3609B12A6FE6231E3C48243AA297
85E3852553E5211590AF74080F00418761B999C45345ED0B16F9453BBE8FD563B46384274DF5
FCD8601FA561B0A79B134F530C5CE89BCAE148803B0A0A40046AB9306578E3F6108BA2C364A9
7378970975561A4D85AF0220FE72240F197CF299DE44663FF5DCC858145157A5465ACD50C269
F967F3ED0BE266E2D9707B7DCB885D6B72C0B35FA773ED99C2528933F0D4EA88D6AC4187E1B4
DD119EBE7E37AC81F9DF993A8CE6C799AC0D70D2DA0931390A12B854F1DAE15B0F0201A12FF1
5BD010771FC32ED7CF56AB06140CA983FF91F8441EF3DADCBD623C583741356BC5A2380B4C95
188629BDEA477FACAB7056516B9769A31460860E2779C1D86B1AFEA523A21B250F0E798C164A
059D9AEE28C7CF7AD74A0A56416637EB9809308173244D83C443965718E75401AEEC87368C46
80F8F526ADCA7F96FD1220119DAFB19D6A9DE12A5655014B26DBFA0AC4D2824C807F00A9043B
5FC25BAB9639EC5276C0F1CAB1A1A0765A78592FF9E3010A95AC9261D30DEA8F91CAF5C555ED
069AC7A5CA90C476C6C7BEB4FC61282658AAC0425BB388754AE1816028CA38F9B9A07F8F3CF0
685454DDE1FE1488DA51896E3066C7385FA9BE55FCCA6FB800183913DB33B4D5BD7CF659C943
4F7114DD6B7706EC735DF255C2A71183B3DA3C296D592DA11AFBBB0F4755E85DE7D6C89FB41F
115C81E8894F614F2D7FF4DD8DBC0FCDB5AD7AA34F93D1D56C717D3F83DC12698ABCB0A77441
1823F23F527DA1D587CDADDF9D8CF9752463E3291529FE936CBDA063299642856624131ADFDF
FED6232965624BC8798E3ACFA42954D090C00BB0C1FD12BB7C5F63153094ED462A98F27666D4
37984B94694784A64D85E062626042894D2B90CCC2CD52521CB0D366148180D040AAB0F28761
F59D8BD34AB8D7BCC416508A770986B96BE929DAB44D0AD3E58D62041426D9030CE86B3C3D43
D4B7F9693548FFB34611F3219D5077CB51EE81A9D105B7750E3000AEA0BB7DDBA9A987A77AB1
DF7CB4B9A74C8B499ADFE24E29655E487EEAB7641CBC6A85944D53B8EFF347467D727EDDC878
81A72D922116D291C3B026442A481A822DF9B5C2FF7D809AE36CD5767B0E81393AA87B79746D
DBF14D5987499067B5B8C281C21CBE8D589CF50BA27C5A814EB51D2A74E12A72DA5238794D8D
E55F48CC27D379836764AFED41CDD9550DD11F805C58D83420F4B02BD74264A8EDAE2F21FB94
C2D83DB81AF082DC733CA4DD94B3E1E8BE65922315729DDF37AA7585D1B5855E4A02397475E3
2C011D0C72816A37A90C81CD3942A7CEFF6928C514C6AFA64961B5AE46E3418DBCA54D391E2B
0875F4818E597F1A5705F4332BDF6B56218E7F536581362A02A633FF668EBB8778FBC2CB5FEC
7C8C36433B281DB32EC5C1F4621DB8827664041EF017494238AFFE3A78426A4303FE1EAA546E
897DEA51417801CE7A208880B7D8908C67C6FB7F80DC5B4613CF17910D9D33AA411597CD25BF
308818D2450B77D907055650B89FDE749D7AE19BF2E13A3F9D6950AC490A265E06B895687A3F
0DEA8BB6634AD0DABDF70A76FD4D2E393B52E5576389ABC00A8BE8A08FCA3EA1EAA65BC6A2A1
1F3877AB60FBF1A66E12855344246859499FB0720705D18F22D648B395CC827D7BEC5D5306AE
B354581A46B491759F8740E9ECBD31D0634AAE7E45376CAF8BD6EEF476735C7D360D25162581
CC15E0517D6B6976B9321AC32DA2FC8A11D58781F85731D960259DE496ACFA943537E0407DAA
C0AA2542FC1866ABB7380271ECCD9C4F9A20A97F7E61E7661DA1286D8B5DB86E03138F32EAD3
966EE3C2BFC5B275729DB0192043F5B716E44F012B89D2F3DB6D1DCFDED8A8B53E1B592E4574
A37CB9A9B1E72092109E8947E5EC8C2EF8E5F422C3C27FC74F229B1658A300AD4D07E645ADFE
E1A266D1B657EFB78DB2E660F8D7823747DF7CC283F5C5991F29DBFAB7419DE2E36C44DAD5B7
3BDED61BA7CE912EB54916335FD28AEE1DF6DB88B80C38A8C80FF046F880580C5EC642B758A1
8C1D4E977146BA3DBE7DD73E3254BD0D12D06B920CCF9ED0C34A9E775741E280311FB6537CD1
0ED5D98031A290361144079C42C5DF4B0FF314B8C504C507C527FEB4D6CBF363D6AC2E9BCB3D
01544D3127147DA3C4AB4E682D60466512BF8135CFDFACFA9BD61CFB8B45B09FB65B44E838E6
514C97E3CE79435B7FC3463FC8421A830E97F0AD7CE9282E23178C52AC9AD826E3E26CB7C18B
92DBCF7553EC161A2613B15D9106D63E655610A7BEC0BB9AF57979D22DFFA69CD3C8A706CF21
D5DF0D64A78486690274BD567E5B2B0C25CF9B6DA99CE82C698D4CF0DDAA8C4536F912FD44B7
C31669F4C261E06BA90346F5C56D884C62EBEAD83266A1D07A71D7FE7C4F8DAA041FCABB45F7
F9B1BAAAF4B9AD814D3E051002BA4D1088BEC8B72B46F55524BE4C089FDAC55D07DE76A7D7C1
4E6275FD8D43A3098CD64D337E206D12F2A0786896B1C0D425D8C33E3999486DF944ADC045B0
3B642F9FBC56998CC5160847B82E65B42E978F9D6A0FD7F937349B188B96E2DB8848752134B8
D2806C1663C7EC284F1F7AFB574ADC36677990EA2E0C63A7B8A95933E7854EAD8FE50AA49F25
B4D6510FE65425738A964B08C7E6760FA87EFB7683D62E18D34135AB9055A9B1E05C177F4878
F526736F0386CF8E59E28F94D9FA38B86EE391894D0571D5D9D0C6EAC5219B20503119D1CFFF
8B4BF3CD9A00B7B345E789502D29A243C2C0A2857F978944ADCA23CCCE4F5D0B8BDEA5EA9AC1
2573C88F74509FA0CDBB551C46A5759D88D334E32D2F6292A0E860C33F8A7E38129019BF411E
4B89340F8B2E18E7773F192DF8FE57E1FC14CB9C5327E6E7ED9931B0DB795F88D0ACA24D3C9A
95ADDC5AE805206A48EA14E72D33B6F4A58CF00C2A29F963F92EE4A21D2AB2C0798F32F61344
25AFB3CEBB64144EDBE038E7905CA2CA4B7C9CBF27E97C249362C3D66798FDC4ACA50BE36FCA
8B51BF53FDF9C75F006E950F7C934576534BCC41B38D69940F56FE08EC9CB9BCEFABC16943A1
406B027B0E67F03FFF1253AAA6A198F235D26D82F87FEA64D56A52BB620D29CDBB08258FC35A
C43B1C2438BBF457D4426992C9CF082C249EC90BAD5B323A2EE5EF6F46D64F364F92DE349B8E
4D5D5AFAAFF9C812F170CB6A7865AAC72A5ACF02D6B080B6E2379150398C2163F23826E60BBE
DEB5E365AD95D927C826BC666AD0DC1C4DDDC64993C5514A8B854A0E7231A2244A7E1562B950
093DDF1A8FD787D2DB6C7D78AE6B28EFCAC105078060A4E8F19DAA4543F71F6236A237C34B4E
94ABF3B4AA0574150E8617597C7D32F3FEC01C99C3060334800EB6578812E7CE583FD73A055E
D87B1BAE29EC5B80BB5CED3B587E0D5FB08BD934B7749655AFE53065F759DAF8D47E245A6640
BB57B55552792947B539313F11DC39FEFAE5E8E68975D223884AB0CFF0241D945684FB716537
4505C966B799302D4AB83E8437E0FCF395421774AB24D098E46AF6C8D5B3445832E46D1D1EC2
FF218EB64959D0933CD37AFAEC4384061D2DFB656220F90DDA116BF84A7719AA671FF50094E7
5049E6F9A3C3718FA1B5447C45B916354F49B430D6BE382736704F46FD54F4F22932FB7393DF
283E2E50AC03D04E4194738B58D8A06756330FF020EC77B00E08AB43F60612EC0FAD787D99F7
7EE4339403FE25624C075CEC3E62C60ABFA1942F2644D3FEB86D2C8D5DAD9DDFC4A8E8D927EC
D3B5E0ED4C224EA4D2EEA3FD1AB087937D913DA584335305F527D5A6A321CE91E681CC108E1C
391134246274F48DB281811D81DD62B33E903ECEDB150A4E51FE70F014FB717B5625517F2E54
7A69D2AD8F6F3368E074F781E0266FB0DB8EBCCB1514AF2535FDA7657F73A9CB922ECDC84842
FC38728B9C7BCA3DE32DC0A7B33A4E22A4457E08808146C53536FA033F465079E95B661673B1
3E3737A27464A9413DA36C323AEF4C5475C5D508BCC83E3A5BF384D4662B351CF21CDB91D2C8
960FFDCDF773C7988FF9B8F8FB606A6704799369D9027BDAC6B53CB9101E9C331104B77A77DA
33000A1EFD94148791CB96432980060A3ED24D316AD0CD1A66A911E062FBF963D275254B4DE6
52AEDDEC86217A11B07DB7CA8A49AAFF46C29661DAA75453B3D87E5BA383785D7623EC291D04
80C1E154BDDB88FDDC88FCF8B616B69C033C319F733B9155CDA62FF123FEE7ABA42ADC32037F
971DAF70973560B8B14C3ABB5AB3CAD294EB74F8A8F1D18F68B85B288A0E3F3D51A9F7C94F0A
C269C0308DD9817CE43ED8183A4FB11894CB129A06E5943BE8B69210A934151A60D32025D1A7
05258FD1F469D09363116AED0B4B13605B6ACFE038083B1D76223C54AFB75C16E27430CE1214
DD70B855A961676BB8D824C6A79DB2BD939A09E0493EEE5D064734F8E130512D4BC5DEE31925
90F1A0DCA0454228F2D069AF8335949043672949A488A9EB42E63FDAD5AE1659B213B3CAD995
6B09482BF4A99FC765B98D91B8B16267AFABB442888A04DA07340D750420F926EDE9813D4BE1
FB6557B150704A6C568A8CF7E4482B3B06F5C52EB3CA89CFDE1B960A57C85B3DB544C84E53B9
56B9214B99011D617227A4D6D50F9813F80AE568F64AF7971176A0C70B52568AA3D56CDDDC09
8DAC87AAFAEBC804FDE3C3715EA47559986DF06A16364C762D5C8386EE57CDBA55D3945728BC
0AC1BBF62E8934AF85270A530242BD66EFC4E95ED84873ACDA36EBF62B90D0B09E6A1B6B9A0E
BF6A0E0B9CDE2559410A67A89278AB6651D31F3FCC1BCAB537D4902F5DE80181286B7FCE2573
20371AE90FF49ECB23959C9D4BE874484D3820D1CAC79708377622DBC65B880BD77936849438
B46CB5BDAEAC969E4D6CCC5695DC9943A08BBD39B23BF75251C0AF3086C6F0939EE94BB7D9A1
82A59A1267F5FE09037D981E9E7F23B3F33EE9741F1E6AC620D92C46F5FAB3DFC98082A0B7C9
F06421A1C39781BBAA9FB959DD9B7C46DE34AADEE496BCF7A087A2467D60BC0C4FF95C24DC0F
29CBF153FD3F7E0023FF7FFB852EE6BD321BB315B382B86A973B0D04A441BD9B4D9B7FBA221D
7BEF8F4DDA9F7F3EABCA77CEDC54A64B6CC314E2EDBF24BF83F75B095B9A96FCE6EAF0CF0D50
9721DA57B0C98F758915784EF5540B3C693F705DCC3741F60D7887FC1824EB35505F8F393EFA
7EB7C88CDE8E966B5F806744725B308DB34A28F256E4B86B6C92A86248AA4005C84E86C97330
36477C54DE60E9B659F02DB87520EA16C6AA6653E716413C61389ACC214E61E8D1E091521436
485C63F4A1B78C56CC9ACCF4890044C5EFFFD5DD88BED43D8C9E6E10F4D591FFD6E91EE125F9
E7478D6A834FD389407D8F58A64F478FE1ADF148F08B39D7383D27131E5B43D76489655EC271
F7DF5A5940EC8A05042EDF192587B64D570ECDC629D7B0CA531AD10CC76CA799CB676A552368
665BD0ED1B9DD5DB1449E29C8BF8E98A4B3C055C017E5BCCA81F4E4B1AC49D050B9A54032E90
DE3F00DA04AD1F18BAB9BE37A72847A38F07031CD02AC3DE54840233394BF7CF365278661E65
06EE7EFA0BDED0292E62934DA4A4F1EA7D997579C3C50FAB5812344B0522419922575F0400D5
C6FE77E2EA92F9C5B59FEEDC87E946489F4A82D3ABFE95EFCB26F2BA42A4C6B74A295CB1A6B3
B22358FF018B9790210993BDA35B8D4A43234E5DD2775017891991A91797B486A66E189696B2
33427AC1CEC4BF67CFBF72D17AFBBC17A93D710FCAA0C1B94BC1DB0B1E97989E459CA3BD8565
B0E63929AC9E9A6E601863ACE1EA2CCBF7F10E9723EC6A46D89FF6C8FC55AC8B140F1ABCBBEF
AAAE337951C65EFE90F9CB8835CBC250A2F9CFDEE17B07389549CA23CEDE0D43F5248CD7CADB
4D4AE03F815855DA701E681EE90DE419172B498DB299064F5A3E57E8245E8089D4AAFDDED5A2
3E75212130D1A5005493850BEF1C34504E634A4D28AA121A535023391B79812F20E136A32CD1
7842C373426BE65CD9595C931952C24F4988BCAE07F4E3B8BF310971DF2830713BD32E712DDD
2D355FB141494C72CB4125AAFFD04E304BDFA2C8B371F8A6EF0438D5EF97C7B00A6998D9A1ED
F5C344FE6B56A773378A9712BCB4AA364C93FF33D7D6D6CE0C6C90384BB3A32BD43F1B12BF64
44B9FD6E547778E27459820A26914A34363C236C867824E62D2DC59A18FEBD2C931628D4EC95
F2A1A1BC3CF2E5178B37E49EF86C48113F95252227668B2F7B1671CF937F403EB6F5BDD20E7B
E458834BFB36C638CD6651F543DBC4160710461DADF9FDC51E2D9A60BBDD4B4206047EB5A0D7
B04D3715FB7516FD4BC4BE7CDBB243090FB70FB2730D5FD1FD7B517E3CE78A0C6044B0687305
E77A61F55248188A6FD0EEA4171D62294A4B313ACE799B200EA0E3BFA3915687A5B2B4FF78CD
7B58213193DF419818F57C5DED5D6542ABAF4FAEB8A969D4068C43C15C730EC917D2DDCA4628
B290126DC3FBC8E8847E77D0B8D3B9AA8BF363E40FD721FBE3E04E85C8267AB501B2E3D5D879
337AEB3D85A1482E318D0D6C7B64D4A82C1D4736D22ED418621483C22D9237FA53146B03F96E
A21EEF7804A8E75467FBFBA2E7D95137C3C6220EA136BF161FBA786AF595542161B2A64AE44D
0E416C64E67318F05AF487BD8FDFE8208585F38685A91248F2DA3B490834E7763BF4A3912859
964B62E8758DDA6B260D7F46558E21A73D5A15E4F97EFDADA03A4EA4828B3709FBCB105461EA
F062CDD3E8B34AFF103CB1008557FD27FBD6DD83C4055D701EE6B5D9A336649297923987BFA6
76E20008A5872869D3F1523A1B8AC81DD9A3C268994924AAF68008B2B62CE507637915C02647
67595E031A5FED09109ECCBDB61D006C2B0745AA855BAC7D5B3219B3345DC1D3EEA9381A4DDA
BDE1B6A504AED3C43B012B51BA8221ED83F93325E56D14F17313A7B1D88189BAC87022CCBAA8
F998AA1B43A01CFC698E68DEAB7E95AEA46E8AB1883BA0BB1A3F83083F9B8A00B876BBE95F2A
AFC5FB24C1EC6D84DC1431E1BD733E39A85ECC542692E628A23EC2AE637CA9487CB03FB67900
FA4BDA9ECB15E6DAC43CCD9FFCA599247C8AF9A52DD54E83D915939429E91F83B44CA20C77CA
3560B82027FFEF3A2B741D103B12863C927C56E2571380ACA9F0080524A48A9DA3964E9BB325
95E78A44E81CEEFECDE8138551847F47A003D71B7474022D620FDC21944BB5AB3F543575F324
4DF4FF6E2CBDC16B6AA5D1DB13CDA777F466D212FF88DD98D0BB4AEAD3FB6AA0B4B2B4BD33CA
349AEFA4003EEF18225ABA664FF2147EF98F0F871F2E73C244D8E2356611A1E99A0AEC503FD7
5EC69BB41E3ACB1E6ECC0DB13E2796D8273C2F7567551D7B5E57E7537A4557FA4FE79C1E943D
0E243793E0B38B92DDDA01EFD4D68A89B19023663835A8937E5BC26C05E14D941FCE5873C628
2C0F4FE02373F315A39D1B03C069FEA8C002C0FBB1305B494E09B4A742A65F816B800385966C
ED365F47D575D6DF9378FB7BD8BAA942071068D94AA6E33DCE51E7304B888671D3094316EB23
AE9E63F8A2DFEE0D2AAEE78EC377839F178CC1B15ED9127C00C877A46674EEBB96FA1AEE3F12
92E9514564355D6FFC3527DE8B53D881206282765921199DF61E9AB1E0EDAA6C99ABC88CA1A8
F5DF149CFBB4C9371EC1DD494C7A591D5545D97A528DD96CB802C4B3565BCEEFB50AF105D05E
F39C2F5BFD00D622B935CFD11C641B6CF03961E85A15BD8DADAA68FB5682D9A08D40B748D9E6
F563CA9D51C12E6DB826F763C31A282C2EC215C69AD81AF1CF072048748D549C122D639EA8B3
67CE9361BF952C094EA0737A5263ED4820CE2692A1C22806061A186EE97DA27E23C6DF43BF13
53EDFC673A172F0EBE0FC34AA2BA6DBF9176D2E877C9D142FB48C83A144A7AA2A452D88234BE
D478D910CF7977C7DDF80E99561136E6C9C1F3810B5AABFC33535BCFF00F3D2D00A2029314C9
BC018EAAAA1B90748C719FF01051B373F8D223FADDEB2E4C4C006723329EF86B326CFB4A17A2
0599F0AC20F66A8B6B84BB55622C7E913345B8498B1FD7827D903DF01A05A4623D43F2F471EE
034C483BE304657374F412C6AA75065D6F1FAEDC2FDCC8E6AFD13885FD88AC0C591F66241E77
31CE0587B8B7CBABA989E0EE7DB381676256CCB8264AE6B8DC169D1379DF60CAA58893107663
EC7BEAF030F2B625D3A4C5717F842F5C9A6FBBE428B254F755252CC1AB980059F2236EFA1A88
4CD6BE2838E205A5F3AD426C2BC96F2D0C3E3AE533A7EAB2EDED38D0090482D624EF3FDFD716
174B17A9DEFB69D8CD61A428ED5B3EDA32DE39FFBBE3AA6552D086AB502ACB529E7EBBE29A57
0A22A98C550FCF60E6E457C259A83CF2E6086F72C1957551FD696EF98A3C360254ACC3359FEA
2457831A92A96C8D3D7ADD11A8F693D3E912EE033600D311147659CABD4EC87383CF4BD22380
631D0791E2B4D69915524EFD1014C18B5DAE94023DA2464D33B5AD1939C66082F87DC99FCB94
E7F33A1708817547D979958F88C2B4D7BEE6293B3D5B34CE5F736189C7A002365A57544D4EE0
C5CE762DBA8D16EB2509FFE6D06B5A6E58E934CF7580A50065526626A224FAFA1F759F2B42B2
3DD578766C58F4413D2D3CCA41BBC75AC9531283A57648729552849ABF4507E807BA347DE89E
28495E88E9B7C5F81AE29F955A9959615E6E5DFB41852996D85D498165946F8803299AF53D02
DB04C7E81E2801777A20E2BE7FBF5E0D020CEEAD4EFAE6160CC2B113F5C92CE545131F7C9F99
452F0761B93E38DBC28EE12C5CC7B9559323DEC2FF7ABEAECD7FAE9F7CD819F960A8AFDED243
211AC7D8216F83BCA0A8FD16B53CDBF1774BBD35854646632BF18A93EA191BDCA0A31B62275F
62887BB03060145BAB2FE686B24327A632629C2A5F8C8DF68E0FC1698D78908543F878E64A64
2636181E732DB041979F99911880AE3841C604AA220423E241EC17D0112B719025A017BEC43E
FA26EC2CE2355022594D5881ECB485BF775A277F5507E7CB35EE837EA78D8428E12A0BCCED62
99EEDA1110C08D06F9AC20AAE45DF9BD8D434351299098EB17E452FD89CBFDC1CB3C45918E92
417FB433D05613179FCF3AFCB746E08C39013811F8B0512F5CC1F35E43D04F8863E0E64231D9
CC88D4836BB04C6C1A5D28000A46B3FE13A32E695A81CEA3784869D7F41D201FD4A0BAA0A0AE
4F4F8D03ACF81DD4E365B1A03284D3DFA1D562864B56B4423368E1160D48A23C0E36D4947D1F
D88E92D582D78DAB82F60C29ACFCBD2B3DE9E9BCC47357D85FDCD10FD57A5A05D313D14EB93B
F2B95F69F37897893F8F4CC64B7680EFD9A3A15B086B1D09428F1E96CB1484BBE74E7F6673B6
E00057898DB8B104D3B9E546AAFC9984D49B751E4CEAA3CF90E289765EA282F8CEE8A6474650
4643444F53A8F4983617B3601DA09021058905B6682862505C915E38C0517282B111958ECA12
1D0910DF2EE50897C3F79ADC23489B622B28AE7C48F040DD7AA00995810FFD9782AA0FDE05B9
28BE428EF8FC03FA257CAFDA83A770C09921E32DDB49D3358C1116C5733104A7CF66A56FBEFA
6AA81BEBF676B7A1FEAE68067659E33C54BFC283F1A5ADFC9B596CD28B2DBE64FC9F5589CFC3
01BCD92F1DE7B4AD217E0FDE0FFD3A886449DEA5F25CF9C578707F16B84926A64F57E6916473
4ADF319C834F5A99E09DA7B3C61C0FC0219444C27A1E86CA58A9DDCEFA7597621CF958E94E3E
859023C4781D3552179654FA04C82F9431A50B6C4DEA1DB0A47889526403E2097AE9E932B7AC
F813D4B3A1036F89B82FFB00C9C70FEF8F400C36BDE4DD07CF591DD4935D11DC4062427CD385
CEC69CF55FBDB237A694718AB9766F01093FE04E1D2048E86E40A32C7737A61EA5617DA2BEB2
1C7593489F6191FACBE9E91B081159BCAF8749083A29203E65D6CAF4BDBBC7C67C07A569E790
FB24DF078EB4199E5526FA591CD1D6D486E8985EA7891ADB1CFD2D92B2EB919D28FC1F2180B2
D6E2199D1A3641B3CDB63586FE3CE6D4D85F69A28CE4ACE048F4687622CE8C4FDCDB0A805112
128FD7A42E4EDB3343E1B9AD54CD1EA05F5A46D174A1428AC9E26584493742E6A8F231902893
EE09B75EDF6EF231B71FCE0E63496F718F7FA64EC8A36CDD0E15A7A4F32A439313DDACB068D1
66D9DA4EA1B25A91B8406D37526A38AC8D54564E9091CC80884575F8E0878F915CF508B9C10A
86E270A3587125CD917B84468B68B16762BFA910EB64CB5635B952F3F006AFCBC0358A239F04
C8C2FDF77B57F577C37FD3595260798ECAB7CDFCC87CFFC32142DC8A0BBF13E1A1705221A903
BD0564F726871BE198C0602D859FE48D8809709660224E38EEDC84CB5FEBBFF637B747E62C03
0C8172E8A330B2FB1997CB72C7AB0CAF8C60F273028B8886C4B1E7B1583179B66D549848676D
A4BCD36159E6D549E8F5BA6735D40304C536CE4FDE740DF0D6F5C235D2F4A35F146919EF655B
1C3F7D5FE468B398322336A2B09FF81F1743F2123036BBBB9F2FC3CC9B9CDBC04317C7E71F5C
43B1BFDBBD3431F1262CDE85CE3CC60B0871AF5508253CC8F5F15C7F78252948A9D03F57C155
37E001E25308F60C77602CACD23A0A5B704062B6786F0BA5C557B4EF2ED4B20AAA56C4156EAD
7E02B2D49835C34DE75C5129EB5A9B74BF86DC0DF4671C61F434D1231D4F2A09B53492113D89
3B0140FD03F0A113CD855E63626B707ADA07097C7FE417BE935CF9AEC3F4ABE7DED498945B59
F92ABDA5DDF60F7FE401E79D57F395C2D48EC8F19465B6D4AE9A5651A1EE7E96B5F13D549681
2D576979D0E261361DFC4318970C195C3C393D041D4DA27968D3C157A865295A80BC736A2879
B7EA0AB0C1CBBA6CEE4BFA8614464B900FE76F712446CD40C7BFBBA5DCE13C385CA79EEF3D49
74B1971EB9A1D7956F83AC0AFA4C09C559A115B684E9A27A44EB697F027389B9EABED14DE232
9C13637507ADDA9F176962FD4AEDBCFE176510A2131D9C96FA58F357456323638D19869AB506
549F029BC108205F86EC368F3187049D3B165CD9C87C5DBBC38DBB19AFD942471E709FC38FF6
72B5E26EF63714E24AE2625E80C939362920A48CCFA0277153F6AFED2E10C79E0D8766A139DE
CA324D0C79BF2CA7B136452FA539E9FFE7532044961C0E2152387825724B344EC93A86C40F71
AA14DFC9FED630B05EB813AF29BDA57188956F3F8B81400F10CDE102672EAB3681063F3F1E50
1A02100A9CF06A07DDC889D26242C1CBF381AF54B85A920C7E9B786C398C94E5A0FBBBABADAC
BE25AB650C264621FA8D2131B32CA33B9EAD2B57A35AA33B5BF8BE4EDB3FF2D8CCAEAE65267D
E35A550EC1BD450AA71984278E884A10AF191C8E21173BE554155B4127E2403201917CA67B9D
E2E624C2AEAAC89AEE39FA7DCD39079EB50F16C7C86D8C6DE39BFDFFCFCE611E1F57EFE04F26
F13AE6CC514CAE778EC6AAD4E01C9001DEBB10C7818646D40223A3609CDF997F69961568AAC0
604FD17B2A2F43C01421CA6479F844A00D9556D5E375FDDC8065AE5B5A3208AC5F0935FE7498
E98D12F47C89C2DEB29CD672098C01890B08457D24F19EB26D79553116272A715E9420766A81
F1F86A3A0C1A514281918EB84B6CA876F47F143BDF209AA884117BFBB2763024440484BE63D2
458C41D2FEA3CE5D61828F6CF4C2B9527D0F26587708E8DF1CC24310F18834701143DF58A8C8
9C9D1E6EF571E6544860D688E9CDF290093DBD5628B9EA8148A5552676810C1BF79D962DE02F
25508C9655D9C1A423E69967280BD589A867AC7CA460E7F7BE622FC2FC11F2FBBF5AF67EADED
AABE5EF2EABCFA27245872E40C48DC0309CEFD6CBD9AEA6DFA57766F04C6498253DCE014C158
5804D0388033C4AEE33B2E97DE27A8619D62C1C951B18B29409FCDC8F8431534902E52FF6F84
7E11D429AD992DEB56A3892CC34301AC652212077DC16925CAB65CAD01596865383F98DD9ACC
1DA0DB95AD49D2958D1F431E250B36C0F86B428E84F8187A5BE8D40FC056DD1C6AE583052B1A
F77A1FFB698514675BBC655419C044C79957EF73D6F722E27517BCA837D3E33734F4E5151F54
490CDE88D2FC512DF002EA9720E22BA118539E6CF6500310372834BF5BEB3FB90232FA5E990C
53B9FAA1FD63E56D013A12A95047F1C24438EB56ADDDAF9A8207BE117D94851A619930595239
52A3B3301CA9B795626F8E79CBA80242E2FD39A60F75DF3C940BEC2E218327C90E65E094674C
1170F33BEC61F872593888E73CA66704037257360D0EF98756DFF142847843F5A3ABD91726CC
F15E46427456FEA929995708D233B9AE72E1C51E39FA16576EAAA14AA659232A5A18DFF2427E
0F0DC58C228FA04AD00061E3751930BA9BA64BC22D6885994A16165922689877782447230E4A
A6606AFBC8951407F465F8527FF9389C592E8EDABEA2ADE36D993109376CD3482C5061F17DC0
F2BFC2111A2023011F02F232E95B1C3C074ACDB850C080D414F3A61388AB10EDB0FE648DA1AA
5A700EF74FED94093359C38AE7225FC988545D9AB7F55619D54C6DBDB574720B5D5B79535CC4
920829F6797369D5786497F05A812804531A1DF1B0837A67EA31F41BAD09BF528D7B306F37BD
E400D275820370E44E0561DC97D65559F2B3D2C8A5AC2582612744EA664F4628FEC8747FBA48
A1E90D0C13E2B9EFB26B915DC22C6DF95A0E6B46CED10C877365AF5FF795D70C0ADA8499A96C
EE812F3CDAAB7083B376ADD72C4C21A39D9FA81C0B0A6BC9DD68A2BA8123CCD2F3109D11CC63
B0C2D41094691037F24988E8A9A47FC6C0DB30AE5EB78569A34AB0471FE2F31A7E29E7282919
A7167986F6525559292F9E68871AA5865556493FEF266679DDC1220E3D227763071590A679F8
594A8DD1A9D3C1C95A3D014C3E8018A951F74F9F335CBB0130925F1020D3DB4915F722CAC04F
BCDB54039B2CFC5EB3EAA9DF6FE67AA4DE878F9D2439D9C6C3907CFA38C6ACB2B2DE3206D402
C053AB8CC5451DA2961B8B9DDC17C7A492D6667269058D6C4E21368B936F29988B0C276EACA8
A73F8392EA3CD1B64393401472203693AF11A2528BCA4D37EE437F93056B30CFEF8AB8ACC667
9763556A93D81A5AD52C0775623840C15DE887C70109C154959DB746B0E95C6057A59839E1E9
DF389480E616B667887F864FE14B576EE1B57F02D516303A77DD15D4815FB20DC2C1ED0CA0C7
31326A991A21B04892320190CB035EE4A09BF5ECAF9A2DADE3823E8FE491798DAA0F87CDCE6F
491158199643817178F1BFA3E46D1A4BD1FC28AFF47B728E178EEC6E72E6A089DC8580593BAF
D4390A6B550A7440537E299020F5C8BC1EB1D84009786EC2560CE88E703043C12187C7A892DB
B447C88DB968AA089740F977930DDCD1FF7915292A68A22C133D2E488DE3058AFB6E4A7324C4
EBAB354F4258DE02CA937D4D9088779546CB7D8F9D9C43AC01B930A5806F4E336687B064B7F4
E2EBE01D2BEC79F4FAFCBCF953AAFEDEEC6BC123511344B963C2233052BBDE1A4FCE35B1F4F5
5EBA67F74C2523ECB2B4E78B7B8BADAA0AD1EDE238D56F025FC1F81ECF57862249AE023ADD00
F34704DFACE6B50D4DFD4B04C1211396CD12DF18964AF0DBAC66C0A979E6B6656FF1F1076974
6E38FC9D80B27DBA36DB3F517908F58E5E195C1FED78E295031DC76628061DEABDCCB57EBE96
C9AAE3DA9A08035B88A070DA3FB87015D7F9A3107E39CD5A66AF1062C6DF77C3B288EF212A93
C15E88F45430E0C5657691FAA62D3BE8B2902B3D81B43260FEC58D69C975336EE35CA96983CE
2566F64058A403CC63CA8DB895DA1EBCD0731D42134A8EDAE605AC8EFEC1D6FE87C17E9301FA
F0C15B4A28414BC0FA33039639F62BA1623328C00BA21DC7C4813893EC88F4ADF15362461385
9AFE74EB08CEB0352C7110DABA102C9A1EC4DB5E8E8F52B8E80FBFBA2FFF1155166332FEA71D
1EBC5B220AE0DAA5F875E8BFF00B0F1800D12082479358730447890CB0E82C63B0B1BA05344B
CC2C9EA46CDE7428BCAE88FD2DC3C342ADC76D0CB98F6B76B890205F941FE40C0E71A5D67AED
5C7CA0FD3110D3ECB1E2A318314B1BFA17CB981F04D6B0D0E5994481B25021661CC63E8119F4
C8B18530B97B51122F59459A47FC32D3EF2B6C30459E403E0BE9FC41D7074A5846303FCAA8E7
6887B0C770E71F58198D7440B180E38420810120EEB7C739EC9DD60CF0DDBA669BBD1C858915
0B7C4BC3094462D098487A738182E2DE8E5C2293B3CACD0FA13F643B1130AD9BB3BFF783B1C2
997DCFCA45568B213BDDB41083C4EF1A1239E269D94A92AFA41B6D67A479E541A03EA6614100
0FFEBB668F44706E0E5A9732EB901928A0BD9D750352D45BE8AB927B3587CB15195D53F69A28
7D692946A36D92344542CC7CEEA4EF0FDF4D47B00914FCD2EE27BE73E9A8E233DCE083579086
D91330E8C99B5122862C8456231D68AB110E8BF8256442AA1B2F176327C9EE2553855E2D4155
99E0767295C1887C1B1919511AD064D5AEA9AC49CFC34315148CAAAA5A7A7D8AAFB591A7C6A1
61EA6BA15AC8095C178C36836938A60DD06642F52DEF86E30964F79E2438BD67BE36E22D02A8
DE00C92BBD86AEAFABE6473FB8F6916982C178C8ED89DC6A38AEF60D739716FC6AA95252E9EB
0D2EE7B7CCBA342809DC8EDAB95A703DEA4B951E40F8F1CFC1059C09572A5C7A83A8BC1F2CCC
1257936AD83AD5321E643DD9373C1E6FE96D71366756E0C1C225C08584445123B4F0D36F2A4E
58E8880144D85CC3D5B1977FEA3410B0F0FA6ADFA7731A081D21D5EE11D8BC35F0D2280CA5AA
D1E4C5BB3EA1D1F2B2C2954EF17541E0C416F5156D248CFB3C842EDFD770811E0E5C0CDF3D24
DFBC2B76E1305DD7C12D277165E272530FF37FBB43405CB48C96F59E9B06C8D9FA3691674C88
B6A0DDE7E167DBCA1D6162A3ACD6CCE0278E9745777E1E60BDC6523116B292029B671A199342
63B603E8D47C406D7A7EF6263A06D8E70A13B4009ECC498BD4E7B7C6F109C4712B72F9E89C72
28ED620593B726DC4CF62CCB235EDEE47109B7E5CE709BA5DA388040D6DAC3360B5FC0D50027
B0A59EBC58EEA0703CE427901D6A49D144B53D75C96D9B5262B439F379186845F0E0C3AFAEB6
AABDE72B623BA1C3B179C856F92394BFD700C057BA1B57787450273C8484A3025BCCD6B7A727
742EEBB6C7C765C050BC2848C0DA99BF2A0EF9E87F75B5BA745ECF46FC97B0B768B505E22575
B90AE4DD03703365BE82D5D3E9F6EF66983E629BFC6C73D1D51E4DECD619F841ADAA3FECE1AB
A334442C6EEE4C3CF6239318AC667BD186898A75EDFCBEDA77BD3B0AB7AEC7B6A2E9A6962919
5EE8C1E27D3665A8C5A34996804B42AF0DA575C1CEF56D73A5DD0DF07A843AA41FD2A7DC028B
1BD4BFBC00F983597941ABC2805CBEC54B43320B693ED3B47B436BFFF1296EE8915EADD06845
9626F795FC76C31A94EB0657B5CD77B5332EC3D139AECB0F4EB12492FC234A064922CC04AD07
E8960F8C144C3FFA612546D7FB9E6E96A5B06B16CCFFE04BA2FCA18BBA02D0A0275F305DD147
3B4A2A6C25685E8848EB50B74C89ECDA3A07157E524771FDBBEDDB2352F16401771DFE1F279D
71F856E1FA6ED98DDC907BD9459C2BB736B37411D21201C6C617EAAE51DB03D56AA3D2AC6371
38F26F1F7BF547AA4269FF73BE1016B8883E123F0FD7800D8E6ACBC77A07AD2A2F219FCAFA12
E932B7EEE9CC134D09058B5841363C63992D258B9A11EEDA2B5FEBEDBF60EFB4A2CEF1636276
F71990B339AF758E0458C5EECDEAF82C208F254C2C55368B66F783180F2D62F8DB00F242DDB6
0147352AA5C95DCD388C03F4C19E324CAF87052FCEC00A906845043144D52CE3393737DF18C4
7313807435C07E8FF8829A686C14534F4D54FE40DBE30373E481B88C8EB99F8405888BF9E6E8
BD46030B27293973FAD635446C49FFB7EB409C9CE336C39D857C472D56AF82D0FA2BBE908611
AD49227103C054E78CCAD256C5A1F36F2197674B2B83DF0E16BA13E4A36F4AE7BD62E514FB5D
D9254F0500D9BA474A7BD55B54E011448444B6AA774067E3BC3DE345295E18755658BAA40EFB
120E4DE1D6B34629C1999E35C39F3AD277F299A6646BA94F007D69EAEECC6D9609B6B058FC7D
8D33B38DB65608A0629612FCF4802644F8B2BD86DEC86F1DF5E7A610F2BA35F7302FACB926A2
C55FA8565A40BFE716FA8AFB1ACAE951FB5FA46FC62C5F9CAE2E9F1E68B994D5F207406FAD7D
4A0D78E3195E5BD616EB965EF6327FF95C99525F2479D77F2F8A21DAD2C86816746130CD269C
1F499329DD02DEB55C3052048B9E31E09E39135F2851B6158DFAD97F75191B08E2F9AE5912B1
A54278BB1CB22C8326DF9C78A438AA4268A27866F52BE2920105E04C734CC61C505EA6A96424
BDFD76BDDFF08A2D60E6AD0CF1CB737D8EFDA7A4744BCAD5DF57C175AC9F89472245AF441CE2
985C6365F978A672D4C2CD123AFBEB4C33C4650B51881ADE77DB96B71947D2D5B8465B208C56
69CF121FDB4A506DEA93482976913C3A26EC4D98B24677A87F9990A7184BB98213279F70C199
AB8AAC5AFEDF54A1000CE3B862A52ACF24CA9F09F189D897B7BBC4686443FFA4EF15B5EA9B79
FB7F6E5ECECE81F200F321D9D947AB1630D2F5D460DC12A08B0EB74E4167496D71F546C0FE66
234D697AC0DB95DCE1476368F5B0794800250D10F9F7B674F8D2DD1DBF0B539FCE0D036CDABE
CCDBA6E6B954951CA810BA4009D90648959DBD9A9EBD2EE5F7F9BF42EA170FF25C9D6030968A
27B1B29010ABEDCFFC80105A6E97DE36C7A56FA431C45FC8CB8D202CFDD8C1949498F673AE64
EF261D905519C54AC3C0BB1FE9A58D38670EC4016EEFA07C128BBD7B92C62FA4AAF056E27445
8A1D224E5BA7DFB4739D52866E359EA1F6251D8D5B2E8322EC9307CE756270786C4C9B6B0E6D
89FE9A98C71D4840C9CD6D75BDA50720CF1B02202079E599A6982CC555980E5C8A568AC2D39E
FFF50C2257AD918525794D2BAEA1E2AF62C95CA4DB656C6450DC69D4D831FECCA72E7E14A2D6
D9D0C416D9FF67035E0654D30E8A5D6A9FB547932C07388A96CC33501D478F8982BDF8B684F3
E50879058AC5AED03BAC3D05218E1E8B5DF16B3BE113B8935A8393BAC4850216022013715CB3
E6530F8B75EEE04A5AF3A2FBF9D548803DC0AD8E95F247D348D34B9FB01F93260A8039094375
32A5BE370A5A4FC7C2EA4262A17C8D17CCE0F70DF11D634A25DE5A33828AFDA8DACF1A20819C
63D718398D9B7B4328167AFFD65DB1BB7CC4995D719034F28BCB96D221890EF91C72F9875839
42FA62D1A260FF1B55884308643C53B2EE1D411F734ECD3F8D651C18AA38DCD70E9A3558F9A3
A58A64E14CA3E3F2E6577838189A8FAFD31A601D3D63CBA0B54C2CDB23BEEB21AD6DF0509FD9
D5D1705CEF9688181820F1DA5FB9A54A68233D9907C895567E5A2BC160AC87290306C995FE8E
7481B41A48A3892EA0735F79F67D6A6B4B01F7999590DAFA186EDEE1AD744AF1CF9C4D46E8B4
1028F9D1739529472A6D40F27AD9083257A58B9805A5E38055AB9336F47D8B4F21B3CB0E2AC4
7E0F5F4B53060A3EF5088EEFBD8495C9DD0F98AB77464585EFA96B8C193ADBF0E8D5B920CD16
6C64E06FDB0C649DBE9C10D69BCA92F3C06826D4B4C29718D3F2F9DD1DBF82A76D17F168550C
5C73D8A9AE18F61D907298C1A7663415080BAB670A8A9D271E436134EE2C11D8219B65A145A6
7C1C14418A5EA1400490D9B31A443D88150AE47DB6937BF667F7C5096C0C79462D4B9F9BEF18
B4AC8A3CEC5CBA1508872D9C2C00D5389C2755D02B699D9420B7F1EFA0EEF1DA235951F69DF4
186BE9AEF84698C28B5B32C1DD28723E637D813C61C9C616BA9F1AA22C72B4C9BA364AE10253
14BD187AB5E76220A5F91F620D70AAECFCB96EDF17D992E42489D23E066BB0A5A493E038CD29
3293B401C95649047511F8CF275489C0045523D0769F39BA458A3CE956927A82F074311AC982
F6479EE51F92D0F7359CC8540C3BE4F61E706E2E0DC8173B6257A7AD426618D6FBD34E426AA7
E4E7BB484745975C7E6F7DF7E88F29343E5BAE399EFFC2F0DF5329FE28D55E912AD2F98880F9
EBF3B9A3198D67592573237B2AC4767D309365FF02E605C30F734A505341495AD539B3E5A345
5B6CAFC2DD32678F0083C6BEF65C07E572807D60AE314398DD06ADF6463B66CEC18F41B5EC7B
6DBF0A0F239D36D31E5808B8BE9AC0FF5F48C1F3D96C67492736D1F2E952C7D870517CCBC16B
B49BBAE50476FCB91E8D9AED491495A4128A7296F5BE2AFAD8299B7DE90D28EC48983EA5F50C
DE5FBD2FF42E93089ED9F2D2509FB8867AE8B67FD2E5C14C9CEF8FE46B85BB8652C246C3E2F9
8918A6814C2922EF1811221A13BB5DF761143E6C6D1191758747B650CBC8C65370E7D7C9627E
2B036F04581D73B6CF02F5CF08E14B13E561F613D19A740EDF7A4A2F9B45BD0D13C93A6636EB
6D4ABC5C2B12C0A39EC19ED12FA0E9024D7CE66487F30B2AA1F3C3D1AE50A44DAD397382339B
2A9BA8EFCF74774EB7FD67A33057B0694E2E3B8D8D2F06F7094BD0E318B38BF2FB19EBE94619
EDD2A37A180E34F997B5D2CC78A210169162123EF09AD9DA6457DA0DE95BC288FF1D9C3BA73A
8A4AC506381AE8B6FD92EAFAE226AAB6DEA8B9AEC2C9044FB6100C7B3357E4F0EE8BD7005EBF
FD3BF5A2BA18F9F11F936B1F3B1134EE6CCD7966B60223D1EC36EFAB2F5D5AFD49FED88A39E2
138758FB8D1E4C471AE128FF3AEE6D46EF04C706EB2F97C0520788A2C148F5830664805CDAD9
5D9701F74ED76F7AAC3886E154460D7D30A1F805EBF1AD3E2CF81D2FA7C5A76A551915A64937
23CAE057491D2262D16949C9937EA9FFAF8C07A25FC61DCC10F4B60FEC5FB88C86B1BB6709CD
B169380B0E1566DE388EAD0B97F9796E56D2278B989FBB3156D12F5967114C31C495203739D2
4E0DB10ACDB7956AA2AA9F4E4246AED9EA3AF1BA9427E0D7EC06461E8C088E1E090AE267036D
D628F1D436B1B9ED0B8397A9E41036A87E3A140F01EFE180D4C0D201A9EEF53BF64A8A4E56A1
516936E81035508218688FD5FCCA4B47EF17979AFE2A259DB227256E5445735A07B1D10B2FB1
451295153BDEB7935351CF451CB7DDE52729D3CB94D918A4E744FD1F1DA4DDA1A34081972EE2
3870D8AA84933F48DE88FBF2D6B94F122B4D4000180738ABEF58760C222ECCE43898399EE6B8
F36C1DF965D621670DE1EC32688F9FAF172A4A42C1BC519795129A66703C376B24737ACC810C
0AFD9672986290D192E7130D1D909FB5C3C0D00206293C0E82E3ED78138BE1C71B75A76BF48D
E81FD4C53CAF1A8B09B0BF878E67AF6371079B07623DFCBDA52D0EAE21A2B4C43567E8989E84
38986D379BC4BFB4736B908B22405BD7CF27DC42E9DE322F9203C78D7105171D0F5B24A9ED05
F79745850A9C52BD08095470D8F0A2BFE2625FBDDC2F49C4C27353C40624F233FDF7585BAD27
4C751EFA1E4DEF66EEB9B11532EB41B392D86720081FEB6EAD9EF3542E06A81E7C7175903003
784024ACD31BB9699D7B120266564A37AC85FF2F802982233586ACC543102A6621DFAAE59EBC
92DE7EA40982C770C96EED089570EBBAEEDC30377CE561665BB4DE7A4C622A3F1DDB6D34E44C
CF78B99B0D7AA337475DB44F0BDCA82F775C95A000A6D8B01D222387A6C807FF0C16B1950493
E95F0190CEF799F0766F08C04F39A1A48D4BBAB5A21D40D6170690EF1DD66020B1E79398BAE8
F6E05EF549337610993D8E8C52898C2082BBC3069C245C54FD4334A3CBB6D8D926B2116124F0
28836C7322EFBC9CBD3BDEB81C6733046361C84BBDCDADDE43433B6321A268558C0FBD132B79
590C56B88A81E00407B14A2E17170BCE64130C5E031FA5049ABD066B4830B704268494E4DDAE
CF6E7C204795DDC5A66301953EF6E0D6CB90D09AC5F4FF81E38A47E1F186D3D8D93E686A49F7
8ADF24F3F0F8950F41D1D5A17C16243D466B6AEA42E45ED5E70084BB67650BE241DAF7FA7545
54FEC10E3C44013995523D304FE9D2C92DFA6E5D749649B582C06398E1044C9651469323B2DC
03A31907574406B4AE0C9823125222413831E70006E5231B3E6057A933176F161BBA4E231343
2D2983A0D820E38876CC7A3470A6A4C0CF89AB24A26A328E25CD81A5119A8D1B22D1FD2FEDCB
F99E9DBA54B96F5D8C23645DBB0E377AB4D43F2A10A24AE6F0CF92BA0DAD6CF17326E5D5C951
F8DEF22ECE9344793E25E46CC77BAFC14511289D88B4F2E81B0F33318BF8ECF9A85527FBDF8A
5D686199319A9E4F2E5D3261720A5F58386768AA3DD6270F6C80FC4080AF57723E6174779CDF
1D7F74150DC241A27A8571D1C5ED78BEB96F5DF810FB1AEB2B787A6D369117298C94E273E0B8
70998FC1CFBAF6BBC819F78DC9BDF4C3FFB63156D72146BDB04F6DE7A34EA9971FA17CAF13BA
1706BD0713A30DB443F7792DFA56B3F3B4394595E38089089E2D0210928B304E5699ADF723C4
57E6C86AAEF85CFD66C8B7304416C6D1D663CDA2FB5042376A785D45C8E71D5F1E4613BF8A2C
D7EAB30681441CF31E11122F07D1AFF26BAACE48A4274C90C40BBB27C43518E18C0D47539F45
5D17F02F397615BA7AA3BCEC0FCD1C1A4F03D12A062791364485FDC009A633472707634B037A
6F6734E94AB4C70ED05BE5DCA450E1A0D26C297A26E42C9F70DD7A8DD12546D07F2C1810B187
7FD8EA8432EDE171D3EDEA034424D0CDA5D3E775A0CC4299675AB4E99548EC6F273F1E2B8822
8094A3C197A8A559F2A16A7C6CD1B0B87EE7429BAB25AECC7A792F1409E6A13CECE6C6DB4F22
6690131478BC9F80F5F93801778192AD28E82B24E5F81C2541A40F4EEA3C63FAC503D958AA8A
37831A5297336CDA31B9D53570F317188090E417ECBB51B259F21695684AF7141CB3DC834FAC
A59BE02F2444EFE40ECF9971D427D4B1C3874DC824E800C335EA70C988F06C17AE56A9092693
9846B7E23F5AA176DAF5C746B3A4B876156382FC92E35509730CAA7CD5DF9229FBB9FC8705C7
15AFB61AA9A90D2BF314D9BD9C9082BD80E9B64027C43C08B7B723B9051DEAF77D78DECED20C
3F27BCDC3D54BE3B856B38F7342913D7B6094871654A665256BC3C5EC7EE74145D169487557E
ED4734901B65E15E646347CBE134C7A616AD924DCF6A9D67CE461130F335C6A09DEFF02DB8CA
8DD08236E08F1BA9AA19834AFE25858D520A5CB8B80CAB07A10B7931FE58273322AE0ADE965B
F004D0AD0E44C7B8A0ECF7FAA22B1A2BE0C56B108A50B638AE2F681C4633806789F8698B2B93
F471852692E7D7F8C516952217CAB6EA346F0DCF9B96E582F453B88517955522B28CD39CEBC1
0671335313ED6A20417A031FE3A9F0207BDF40B4D2A41160B7B48E15FB1728668116F4E5CB1B
EEF57BD3A1D0CACDA29308A46F568465BCA4AAE866200BF9B7545FA46BF2A288B510CEDE0EE7
01335876118B36A8BCD6F47EAB1B30AD0BE96EE91F3AB6DC9FA2BD055A60DA8F158104A3F398
F2B2F6146E3C2ED9428FC25ACACF462F602D5705AD2E6124BDEF9A2A41E310C37AE06BE77056
B2D23ED8E7836DABE876222FB969DBDA05B027A041759E5F7EF1D7F8553C130C63E35BDD3960
E5B73B942DA8457C0C01CDF34F615BEB084B59781E8AC2654AD4A3C1DA7E9C7BC7535062C9B6
04C13F25C7EF01D41EB951CE3FDD7042DD71A28A575ADADF1B5B4AB84BFF2A75B3B82BB90497
C6F35E72ED5DA402C92A36F28BC2340A3088ED7C8F583E303B463757F0AC29C1777B1D62A6E1
4B738B9C99ABF35508BB4F3E0FA3FAF8F3C3082E714D76870B3C880C0ABA3539128BDD3F792D
B59DE5547AE84B020B944CA721A5326AE69CA6466AE0789DB02C7231C71DD0A71C884D80602B
E6EAB756AB7BEFD5115F355206375B6BDFCFFB40DEBD8A45262C6D41E1A9337538B092B8444F
B37A7AE4D709E53208AE8A5267B93BBA88A3770013799272428EAD5B467219AE6C5AE87E5E86
DB3C359FE7457D813EECBEB4ACA526C70A25CA3C4B37C12C787BB31AB99441E557DCF53DDB2C
98D229925ECF2503EDB45B75F1A8C8DBF59D06DE66FE7D9C065C8F11267FE20EA7A111A44349
B2DA1E7E908F1E87ACB9C8C8A61DA29A6CD6397342418E68B2A9B7A10650CE7EFF2926921A98
74B7F10293756E9F86BCECF72D8077490F9230BF4E1E34821006ACBDE624A29A16293D562333
0AA5C8BD15F3EDD9D31A1B4762BB53A3CB44C761372E4B716C24D0A6C09AB0244C483C42A7C7
B8136E574C38A018A2270622DAB4FEDFDD88E87F7D993C06911C2916547AAF90FE6E559A2B06
D43A4321B5DCE8B92D4ACCBB7DA9362E095898FB218056EBF6DF9315118C3A3532344E37F91B
322CBE7EEEFA420F945D9028D46D5586F936B415138FDE89B7AA568A6BA1FA24BFB37F0F21F5
09705605C63D865BD5CC4C121EF7A9762206F94C10897FC6B45D6A20C60658D61E2742531F4A
41EC36899421D5393019C959E0219A9C9F6C321F8F3B74849AADAD188A59CE6BB9D75F9EFF92
608D3C410992FA5D39365055476E9B42C383FE0E07E73127ECC1AC10CA4E96A5842D6700A828
03329C4A695E1E42694EF84A1676670339CD8C131732F0B54D688600EBA052B22536B99AC938
9238F712AAAF98D845F351BA59F086E96679E0855BD9DFD1D1371D90FA8B8063C76F76EC370A
990CCA40526C5245DEE4D0382C26A84EF7583856699FD0D7A2B5C078E7B24AC9F24999A25C34
9B5DC84EB12A2BE71DE65F5ABC7B8BEB8E98D67F6481C238B94E6D6A138E9BE3A6E23463FDD4
4C6AFCCB1B6794224FE5F8E12599A6D6ADB66EBA5A8DD856E178463A4BBC2AF51293BCD42AEB
A7EF934D7FDF8053542DD276C82E0E2D136DCFFC31E9C9379F2B34401C3E918AC5203C1DB743
A62B981C32A4FFB6DF0C0DC60F0344F42E0C6F22DD9EF8B0DC24AA31509C254ABCAEAB8AE611
DB24A4ECDAEDB8B81C386117DB8EB61BD98E7FDBBCF60A1312FAEC29114E1315EBC88883A016
36EE4DA190726DCDEBA7B763BB9AF6A756F3ECEE7062BE7D3CB46CD21281582DE2DC96DD9089
E85B052E5F79D2E1CD9FBFCACC012948A5899FE940A25B9C4B67097D79AE5F3133EB0854F82E
4395FF4D74AD4CA046A9938EC5F730CB3992EBA8DA693E1022828A941A42E1DE65BF9DD8BF93
10601F114DCF83B648EF5A459957109AA94766B5F2604F3ADBB6975C7D12553E014820E85F75
BF00561FEC1F81842810C1B82B786BBF503A5AB31D9085D1435CE1E748E33FE29323EE002F0C
28D5D0BB7937856C4D35E275636B41A90652D4EDFAD52E4F29805FE1DD5517E27BAB602EDE76
FC9A94F6793822A9E0513AAFE3EE166A004B4BDDEB37A4BD482FD6FC665E26C2B053D7191D6F
62FBBCD33526690E23E1CC4CD4A2AD134C4F8553BC53DDCC0F010A8CEA4CE9D5DDF0F6D12FA3
4A8D576FFED29956AF504274CE05270CD0F9DB9473701FB194A7835F36BEC7D46E30349B657D
42F00492E7DB717ADFDB99CBB6A7DEEA4A3065FB9DC61CD1BFD4A77AB069740B462C4EF3A3A3
0BA4231B5EB772742413F4A0054FC8777C74981AE144A66D059BA2430B8B48B709CC6BDF9020
C0A8D865EBB6E21E61BEFF45AF112C98274E8142ADB6C584B4016B3ABE63957E076BD945DE1B
93BE70CD3924408650605B5389897ACB5A7C4EA51C49B6340CD4D79025A29346066A7267D7EC
B7770D0DB871F20895B9DB17974DF6F4BA5753CBF57AB2D98C6637D0DDCE48E0D81CECC10D66
6D1F9203A72A835A68A1636D75231F3EF67F08FDC370011CD63A193CE7D98BB6D15E5BCE7116
C7A3B82DF82575598C79F190C1B59B278AE275C2E8E3DBFA44716A08A2F90FDC52BC6CB2BB4F
836D9B94506A3905F0A208437AA5E7CF174EB3D74860DC0876560AFFAB9B15D561F52BA51A88
7D87A5692579BCFE198DBE67C41B36C0EA6F929F4F35E19A75F08CA2A5780BCBF2543A0BEEE8
8D618817991A90E9F094C27058CDFC0AFCB0BFE13DB659611303948D4FF51CE92262B446CABD
29A10090C3ABCF279B9349B56FAAF1B1482EC35DE4F6975DD296B569B8910CC4BE8BD3253061
707D3888673A66005E473796D9FDE63D0CF2703578D0E8DA7C57714EA7A1AC1973F5364503E8
846BA6A02BFE8DEFA64CA3A285116FCE7CFEBCA4D2760805CD0BBAD590A2843BD06773F14F1E
CED4D98154401430119AC825F068B486B6E47DE94843A8EF2058815BE7BB66C1B7B4483F9FCA
91B63FF1F7CEC3BCF594EC0A35A2D8083EB79DD4DF657F83D2073E2899C0C8D327AACC1460D8
90B9F86D41D29724DFA78493BFC62EC31B6408B865713DB578AEB48742342EC36C6CEDCA7026
37A02F23040F8A6707D16AB2E00FCC311ECD907D5575224EC6C76A847386F7502DDF07F315DE
B23DF02DA436A3B9CAE31547ED2E1CA6A2BDD295D452D150235F235CFAE75FBCB6B2E4BFBA25
8B4FB7769237F026C7A938BC561554E2711DD4CBD9E300783142CB3920294B9430600402F0B7
21208D21A4AC7DE5FF5B0F676BE9297DAC0CF093A167FFC01F308C8D071D4CE9D9BAECE4AD53
74668C620B614668C4846D56ED2E62BFBC73120719DF33CF7126E90FE641F1EA38C7BBF83BC9
099EFAC8828C25C7DDF8501C4C41451450AA51F431D7BAA581CB784398AEC5F9420930068049
9D073F1762AFC73420ECC8466E6756C8FD17FA249E4A5A54E9C4BF2352505EE4325EF17887DB
A5D058F6BE2ABD889BD8AE9B7921775DE49BC8AE88C5381FCB45675471B023185B78A54166D3
38D1A0DDCFE1200ADC63AAB89B817C6F5DB9096E2CAA7C60E78DD5BFE6C66E7C1A15D1E0E85C
83D636AC325C8826ADB4D9EEC15B212B0FA509F4754D5A9E21A6B0985F1F52D4041452A6C8FD
CF3DE6A992653A5281FB56A131361309E8B8A9D54812734568781D00CBD72626480E715020FD
3E934BDB5015DC30C631C1D72F308892710833A5DD00502567CE60D21F0D5B629D34AB7EE56C
700BDAEC7C289193B2FDCA80C916933130114CEC0E80BC2E650A896D09E295E49C2E677C1B90
659D13B1CE3D1B7F25EA3F84A130F494BC05858B9A0DC74A4E89F0EB991F9F236698DF731D74
350A2143F80CBAF87D30094759075437E3A51E84E9703EBB45C26C3D49B9C4F1883D2C5D5DA2
B5D52980DD8554DC167FB29A07E5B3B4F4D9575D1B3D32A58D3C67AD8719955E1E424F12693C
EA20FB4D272691C1DD086573BA56CB1696C3D0A80799C2559CDDA74DC54449B47035652AE0D2
77428AC8DF7ECC281D9BAAEABDC9FD077A3AE220953DF9D738CAF1519429E38186338C515B6B
AC2E0A345FDF5396CBDB0396A21FD7412CDE9DF8B1D6E35257A6077A25497999301EB0E92E6B
1DEB7FCD05662D29F2E23456738B5ACCB31FF2FE20B18F4A8D0FFEE9379931462ED0CE5AEF38
5501704AC55B57BD5164247B05D7EA293C52DA6E655F06D8805F413F9BDD23163BEE59C6D2E1
F251ACB84B640DABDCD4B2DEA4CB84649DFE4338A5D86959F2603EC53348E9F5011DB5923CE9
562405886B9E24269FF43834493A5EE1F460129CC05C4854650840426B66B13C728F23953CD3
1EC0D443FEC21AFAF10307491777B92C5F2D8BDD84CDDB16C3ABE62F18BCF2592A998E60E61C
E8D63D39CA7334807A185BE00B5E5E0BE7DE6BA590FACF238C8A9D027605795A01CAB9DA6A5F
6FBDAC53FF97238C47812B285C06A78206FFE1FCE8B9838C479C0B13D488C368532D80F76291
E78F49E31C3F1E2B9F116510E11C6FD1F666D8C7659D28807FB68F8531EB5A7E7760E8FD79C9
E72CD57854EB002D234C076EF0EB22932DC39DA040BB595E2A7CAA91A294D6455F9D715AA999
550FE805F23E30E700C17E70FA72A9191255D9818F8D3205F7F1273BAB49F1E8E825AD812B88
BE8129C5C483F36459F2C1A8CD0BFDBA2171D2891149F7B3C2A435FB3A584022C18113BC143F
63E546693FA308FD715422768A5B342F7865CC9A8836EE7BD15FDD26A95DBB4FA2D09E4D555D
71F01B257D2DB9EF6161D4D5520562419251A13119706655083E4A141D8C7E5861448A019263
6181744BBC810947304710965786CA3451B0B861663A6479B64E2DAD00AC96D316531F0193A9
E8B901006952D027447213E6E33A8B55A43AEB180777233E9F12590B6EEA0E1A19CDA0DA1CFF
F8E206E60E71405A4755584B874CC6CD49D89C2B2069367C40D85C68E9DC12283B8268986A9E
16E9E8063058DCFDF617A54815DDAE4F9FD387A9A00D357591632C5CBE78BBBAB5196E91DBB1
AEAEE46B1C87ECB3FF6D3AEC6FE57420A599AB430227959BD2730981C6F7E4C704F4AEB9CDC7
70DFAE3A022EE368C9FCF5DA9FFEB2D02F2F05560F379F93A8BF2ACAE9A1A9CAAA2C84245C7A
402067577BEFB8FD1AED7ADA5CFE5BDB742C00440939B2EE69D79A09128369EB810AA1FD22DE
867E699B7FA40DE13F3489C88BF418466440A6D84A8473740880C31545F51E894DBF7F351E1C
9F91932020BC6DD73B220B5C378A92E6CDDF2AB1364445A091FA72622B503C969C13F20E6F7C
B2F5203EC31EC197169CB3F054EB63F1332D64F9B790B6E26381C2336FEA93035A029B064B23
63AD4C652E059065E526E66BFFB16EC40F2A4FEF61646CFA81D4671A1F91BBB1BCA5CC21361A
CBD49F3EBB81465ED2C9C71635F9AB6DE5A026931E4C7AA7617E2C8E789CD10E6BAEF709FC6F
980EF9777A767D2B75BED041A9790A6687B9118A646065C5C19B71996BED4F18D799282DC821
042AA17D9632A1C18B6425897F7F51DC0EEB53A1C2D90D6C8A932D0DA4B91FB849794ECD8936
6E2BCEF81910C28C70A1B56A38BD63E15BF2218677220A21308DA126FE7A806009CC32C0015B
3D5B85F32447D4C7D3B0C716165FCAE59B60FDCABA6A5D14DC4C797FF7EBDD7EB8697CE8349D
CE5F6066B7C34B71C0CD35642F9AD7BCC08D7ACF9420926D659EE27470A3E47B9BDD5A0BE8A7
3956B259E854A98F77BE04E6CFF0CD1A3A4FE3B11AB2D7B10991407BA9E7821157522B5DE7AE
978112A5712E62EFE2564E274D4E02B9159C6055A35975FF9CF3D5F4DA9A0824C988E36EF9CE
8A1A3765183FF8B02813644EEB7E9A7AA70F94EAD55015829BCDCC2645E41CD253D1F1FFD6E8
69B495E261C62FD1F944E376B0759F4349A81738E877A005251733F93B0F0896E0B8CEB8B763
779789F8259AD4A2A34D7E1A9B642E8D3724733FF3CF15F0748FDB6D395C8F70BCB241F9109F
7D64EE4C3B4487BED29A711C80E7A4C22F4B6A96EEE72D2CD5E415EAE1F1D9BA3DB5E42EE117
75D406051FEC2CA46A2EA2582949DCDEF71AB20E462E64B5340761EF0516E1B36A8C5E871962
F865E4FF13920E4BC45DC7CA5CB87F75C7E3B917161402EF8EC79F728560444C64CC35204873
CB9AA77BBC314F9B2584B257FD1C1EB571243827A3065CAFAB27E46127B610143BAD5606B346
7442691D0EBE3B9D3444EB73CF5930C4EF70848841BA7F5785614E048AF07AD9A7316528F62B
7D8563C077B6E134C93F33F9D56E32C9F5B9F9384707923CADABDC63C89EDAB68AF0B8796606
66CCF6F02A8F1BBEC1E62BEF0E00739399B9BE486E19F197A7D49BE77C49B60D34612559035B
CC6622342A27EB2050F43986F47173A8C979FB7B492BBAB53655F4B1BD246CD668D937DB7345
F79D0784EB6073C2589D59139A54DA1F0296BAF6994C44C75DB5C0BE12C536C702021B724886
DBA0A097B8B529EB829877EF74E77B8620A4AB6ED123B53DE8EB2899033BFA46BBCF7DE00A0F
C2080C203A91367C4B8E0A3AF58CAA34DAB48333A27675E51AEC94E9C05BAEBC208F8F2566B3
562EBCD1CD7A229418B1FAEF1486157E067B86EB7F69F7AED523FA434714B7C889B886EF320C
F8588F3C6994BC9F241F13292408A43C9EC981F4811BB72CFB6ADBE11C8528E63D55E74B6BE7
7E26715BD237C888819986FC109448709C1E13CFCDA5A4C4E4492098C19A80C3DBE1F4433EBE
8D24E1994015831C7CDE72E3F596B4DD0538B579816CAC14F37DAF72D7D17869ADDFF2351752
DCE4E0D80C2FA20FA177CD892C3B2ED0856720CD1669BA16329736115384E32BD16ECBA942D0
44BB22B16C7A994627CEDCA557B5690F6B6B588EA3D78ABEF15AD6141E24E41069A0F4CBD026
7F644A4989BF0B41C91AF5861133FEF0798797F9747FC0F8FAA112B14F5B960287FA60921013
E823F67EC90BCB9848DB30AD059837F4CFEA772D3E3CF66495D5BD4E0A28850A04E0A2E180BA
FD81656F7142D5A95EB7B0FD69980ACF8DBAC0840F9562D8D8BC6EFBF708F887000721ECB471
8E70CBED9AFD48111B231974045BFD8B819B986A2A9810D5E13DFF526AD2C1514DF3E9A5C345
1C876CC3964859D4012B8B4D5C30F7678D88BCB85445EFDAE0238F47EC7F315F05874E3E115D
A685E411149BAF96CB2D07E11AF36B701986997AF3656B87034399CBF0DEA055B3DADE2FFBC1
5CCE1E60A923F7D969923B56DD895FDE7E731E533B54F7C51FCB1262B743B0C73F91712C8167
92EB70DCB81FB7B8CA522A4384662683D159C003684705B38FD54157C7E39CC4E716834609F5
D229C3038292FF79812AC85D46B1D323F218B2D24FE0E7CC5B3959456B6CDF0831D9841AF6A0
7BFFCC7C6A1D5AF5EBC007FB4CD8F2B34B6A2094ED0A4127CC7312E5E316358035979B0E0FB8
5D6F410E0A9EE6D26839523920CE5070B7D9B7A4B28FF8BEB4A83D723846C712AA8C048D06F0
F52563ECC9E50ABA5EB4E2491D207057F7B390F0F2C148122CE2721DF837A64E9985C5F1DA59
6A60D74C17DC8A5C8814031B66B084A5A87AAEED132F3D2BF5C1E7E5D30C2CC5632FA2900A6C
F9C692BF730D6EF09BB22E101C532D8B42CF07B2F8D2612DC05F173C90614DD16510E1ED6E81
54EBA71B5A53A6A7D8B01903C6D1320921EB39672C0C8DF79C57EA3B27872E5962E06CBA020E
4562DB0B4FD4FECE0D768A6A3DC0AD429D4FC0E81C4B466628C301C0F0F3033C6B73F0E1A65D
F30ED6598178D0856D6068B4655A7E44AE7DA767195C2F64A6E777C965E46595337BF4C4389A
5FE9A246D0BFC54F7A6901B5E6ECB29F14BDF0BC18F332EF3BDE13E79E3D31DFD6AC498D8DBA
B5619E84573A240E45D631D13A802CB7B66C437309C82F0B2B66CC78B07CBBF247814123E4FA
3B46CB699090EC327DB5F8B981523CAE1950B0589CEC2EFDFE9BC0782B799FFF5DC39D81731F
8BCA8EF15B3EFDAF3D55F0429B5AC28B2F63DCAE1DE55EB91A2E8BEBD8BA53BCBB503A76499F
B1C5AECB614108BDB17E13CCBC9CC1FD786962C826DC67FDF6FC2F8E859D581B39EA769E8288
F6D9AAD0EE3C8F2F8409B716E532544D02465F46538BA5C30C18F181D16380EE99950C348E95
DA180687C2EE146A057F6B8EFCACCE936EABDFF1EA80030B07A35D366BEE571F1E4DF9EF7A02
B92E75A56B53A59C8452A276485E984C25363C7128A9E4ABCD25E63750B4E6C198220996ED04
667D9E810A1CBCC2EE3EACC070A58D5AD92CAE65BFA66AD1793A37A5F801DEECF76F00B33694
52AC935674DE3381DA560DA38A5FA7D91EC5E2511A36138E9CB18A08BC0FCA1F7357A72C76E7
406F861FB0BEB1F605ECBF3D56318F657F9C425B13F84C8290BD18FBF657FAF4A21ED9608773
9E7A658395A8078E716ACFC5623B7B920E955023A65658C238CF96064D1795E7BA944B06BD42
A2A3188A27D9D1B1B976C5FAAC6E43DADE8638C7B1E556E68752E034D4273BA5A27C28648095
B94CCE0BED4BBC592A09FBB24EE29F6185CED1820BC8C8CADD424090D8FBAF674F65A3FAB75B
2F955692EB4034FA39274D2E49C555ED63C05A1EA385C5DE6155DBBA265E0F8E5F584655322F
DDB5EEB7D94B979CE0EAE63DB0F54C60D5C6F1DE13BBED71956CE8779CB0863CAC5B9738A817
7F5EE9C52099FDBAE244AFA7BB2AA3690E0CDFD5C4B65FBD82D7BF2628066F8E7931D50000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000

cleartomark
{restore}if


%%EndProcSet
%%BeginProcSet: cmmi10.pfb 0 0
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright:  (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments

FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/UniqueID 5087385 def
/PaintType 0 def
/FontInfo 10 dict dup begin
 /version (003.002) readonly def
 /Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
 /FullName (CMMI10) readonly def
 /FamilyName (Computer Modern) readonly def
 /Weight (Medium) readonly def
 /ItalicAngle -14.04 def
 /isFixedPitch false def
 /UnderlinePosition -100 def
 /UnderlineThickness 50 def
 /ascent 750 def
end readonly def
/Encoding 256 array
 0 1 255 { 1 index exch /.notdef put} for
dup 0 /Gamma put
dup 1 /Delta put
dup 2 /Theta put
dup 3 /Lambda put
dup 4 /Xi put
dup 5 /Pi put
dup 6 /Sigma put
dup 7 /Upsilon put
dup 8 /Phi put
dup 9 /Psi put
dup 10 /Omega put
dup 11 /alpha put
dup 12 /beta put
dup 13 /gamma put
dup 14 /delta put
dup 15 /epsilon1 put
dup 16 /zeta put
dup 17 /eta put
dup 18 /theta put
dup 19 /iota put
dup 20 /kappa put
dup 21 /lambda put
dup 22 /mu put
dup 23 /nu put
dup 24 /xi put
dup 25 /pi put
dup 26 /rho put
dup 27 /sigma put
dup 28 /tau put
dup 29 /upsilon put
dup 30 /phi put
dup 31 /chi put
dup 32 /psi put
dup 33 /omega put
dup 34 /epsilon put
dup 35 /theta1 put
dup 36 /pi1 put
dup 37 /rho1 put
dup 38 /sigma1 put
dup 39 /phi1 put
dup 40 /arrowlefttophalf put
dup 41 /arrowleftbothalf put
dup 42 /arrowrighttophalf put
dup 43 /arrowrightbothalf put
dup 44 /arrowhookleft put
dup 45 /arrowhookright put
dup 46 /triangleright put
dup 47 /triangleleft put
dup 48 /zerooldstyle put
dup 49 /oneoldstyle put
dup 50 /twooldstyle put
dup 51 /threeoldstyle put
dup 52 /fouroldstyle put
dup 53 /fiveoldstyle put
dup 54 /sixoldstyle put
dup 55 /sevenoldstyle put
dup 56 /eightoldstyle put
dup 57 /nineoldstyle put
dup 58 /period put
dup 59 /comma put
dup 60 /less put
dup 61 /slash put
dup 62 /greater put
dup 63 /star put
dup 64 /partialdiff put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /flat put
dup 92 /natural put
dup 93 /sharp put
dup 94 /slurbelow put
dup 95 /slurabove put
dup 96 /lscript put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /dotlessi put
dup 124 /dotlessj put
dup 125 /weierstrass put
dup 126 /vector put
dup 127 /tie put
dup 128 /psi put
dup 160 /space put
dup 161 /Gamma put
dup 162 /Delta put
dup 163 /Theta put
dup 164 /Lambda put
dup 165 /Xi put
dup 166 /Pi put
dup 167 /Sigma put
dup 168 /Upsilon put
dup 169 /Phi put
dup 170 /Psi put
dup 173 /Omega put
dup 174 /alpha put
dup 175 /beta put
dup 176 /gamma put
dup 177 /delta put
dup 178 /epsilon1 put
dup 179 /zeta put
dup 180 /eta put
dup 181 /theta put
dup 182 /iota put
dup 183 /kappa put
dup 184 /lambda put
dup 185 /mu put
dup 186 /nu put
dup 187 /xi put
dup 188 /pi put
dup 189 /rho put
dup 190 /sigma put
dup 191 /tau put
dup 192 /upsilon put
dup 193 /phi put
dup 194 /chi put
dup 195 /psi put
dup 196 /tie put
readonly def
currentdict end
currentfile eexec

D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C545D25FE19253
9D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB47934F62D1F46E8671F6290D6
FFF601D4937BF71C22D60FB800A15796421E3AA772C500501D8B10C0093F6467C553250F7C27
B2C3D893772614A846374A85BC4EBEC0B0A89C4C161C3956ECE25274B962C854E535F418279F
E26D8F83E38C5C89974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F024
867411453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC21EF6CC52
7FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C7B0BD3BED7C6D8F3D9D5
2D0F181CD4D164E75851D04F64309D810A0DEA1E257B0D7633CEFE93FEF9D2FB7901453A46F8
ACA007358D904E0189AE7B7221545085EDD3D5A3CEACD6023861F13C8A345A68115425E94B8F
DCCEC1255454EC3E7A37404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF
07BCD13378CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFFA1B6
F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E4062C6809231B8C670BAE
3702AE125F9780A706EDBEBD58ED7CE6464ADDBA1E380573B133BEFB3892A0420054E30C3761
851A1AE79D6C4E175B392AC53B76DAB7CA35ED409DB30CA2510DFCF1D58B730E450B533F06DC
31539DF79A10B87E47E04EC6B1CF1C46F7551A63E736E27AE222C4DBD3BFEC3CD512CB1DE002
A8D5E6B3A1D19FCBAFAA88DBEA497988BBD3DB60A671B3221302F55FDC4D3693F72228229743
E0C9E77C581B6818198778A4DC377D53EEE0EE329A4D807AA4F213B5EE8043DB9D0C8CB27071
4A7DE096545CE5C2C4766C89474D325582A907724C6206E1D1579CCCCCD755F449B08DA43DBA
7177D082719CA3D363C3059F1A90DBCB7EB0DA4B461748D39E5E7A4632E5CE964EF7D23A1117
DADC7E3B5C789E25E10AFD91B35EBDC85BAA97FE66678DFE3007AF95F2736E54BF3178B22CCE
1F0A4095D39D7070F140962D45CC6170E79B4FDE215510A0226EFE75F24B596436BD4F1B4507
31CDEAC504B7954D851E16ED1C28C1DED3E96000E2718CBEB3476D300F67CE3E9AF3A0A62703
A2C917F7CEEF7E12914F417DFBEB3FB510BD935973B1FC224CAEECC104578C61AB475A21E0F0
E3842AE875B0D501BC007DFCCE09C1683FBDFE6CDD2D18BCDEE417FEC839407443F7AFBDF059
E22A2428352962F28E12994D31EF011D44676A64D47E385173298186484D446049BE5DF92095
47EC7114D10CFEF53DD2078C0528D2DDEA99DB803424845BB971B9072EB7C4B4C21C3F10943A
91BAE4092082F9A824B03FC6BE7149ABFCBE4A60C300EDFEFDB3034969096DB3A9EBEE77FA38
FDD982BD0FE8635DE5CB9E7A0C5D1A77DCB92F24E081C131089562062C32DAC108E364713674
438733DFA1204BE8721AF055176D8F66E7C426F9EABB581D693B531844266C3AF03D29B78557
F7544059E3E71141DBB5F756D22740AABFFAEBC65CA518C40CB0D494E33F2FA7A7343BE3F8C2
3D43F76D4B5C75F93A4B49EC06A933F2168A3BE687031AD896523CAD3B0BA2091A168F9A09FB
DEE232032C6ED2F6D167E31E62B4B2258A4DAF9B61A9EEAB1A944F1E6E6FCE1B06E6F6C5EC7E
947D99BE91592ED1D6428C63D72575E5B0DB0D83C5D68AA7D48863932FB46219412214BF4E50
7408EC6C1756BBE41DFA293436589F032821455BBB852F79B8B5CECB32532EB9F66260E4B6B4
51BB41B911E70E58A958E7A564BC69361126F8C3E61C36D2E216E9C0581CD176CBA03C66EFD3
AC62DD2A9E01244F91F7FA061E909B6241BD53651244BAA2A1784BE07B059FC49AE148A7FA58
41C5248390B3ABB8255B8292EAC87598B6FC55D24136F9DA482552BD8F2C53457568DD1F323D
0211EFE93156AD021E8622F792F21E65862DDBA5EDBC94A56E426565D47FB9586748A311DB55
816F2EEA29ED07253B440CD6092D7339850F32F9DD1D0E218348A4AE2A73C518393F19FAA57D
BFC9B8F879939557A744005878384A0E87BAAB534E5B3FCEFB11CF19C865E97DDFA3FD3B826C
32936EFED8C95D58260E95ED42FB787B1A98351DC786028D978CEB9972E88B9E13B711DAA277
796188D20E9C7296D35ACBCD4D1CD7D19C3BB3B5D572F1CAF8A5D6662B4B8664878A86E3B051
ABB6AA9D07C292C3EB738CEF804B227CAC1E63753CF8F1F715EB9CA50981A56B9B87918D60FF
03BCCBBCD56B48F542C98365D76067F6A9A4A5BA39BF317A88BA20EDCD4844F4649218E7EB03
1F545933E2696674179A7E0475C42DFCFC52696ABF07E5A6F0267EF858BF733B13C78E49FF57
1E61344FD7EF13B48F29C08AF31EFCED0A89C9D9BF270947EE262B3B3CC5CA827D7349E62620
7F7A277AE4E48E0D364AAF82CC718868F12B9437754993FE918937D152B509F0F7CB714941B8
56F71EDAE36137F8A29693BCBFCD9D4229E4EA87B04ED14382B8C671E518249CB4027571DA99
0334A3F83F5F57A015D0FC72E7158C548CBCFF50664B0F8E0D141FAE922C989779D4B82252E8
69AC9B34F5C2AC136CB86EFC19C7555AAC09422FE7EFA15CA7138918F809ECE45E33AF72B9D1
853CA35C187AC67623AF11DD21EF46B8336A38FE7B38601E40EA0DCA314BBE1E98FF6991E9C8
A1B44D5EF00D5BEAB8E2E79540FD52ADBA0994BC9C63DC3F010E10D4B4838E4197885A7C01FF
661976F03186BBA8ED2A3E0C2082A53A60CC6147B17B6D88C4ECB0BAC71FA26A727E50918CC7
A17A5D617499B3ADEF13E131B7DA17C25A12F6C7C135CB71E89F9221AD2BC92AAA14F2E6D8F0
60763F5CF5FEF92FE4B5071D34AEA90F73B68FDA8BEE03C2FD6755A297664BD74DD9FFA4ED90
ADCCD20DB68C868789C27C9AD6D1D08E1D26C5CEDC1853C358666B979C95C0DB0F92DB44AF8A
1F8146C500BEA331B2A79CA6B90BF57CE7F9B975FA42559A918E1B27E595D92D588896464A8F
6A119AA6B88A69454B0ECCC10C2A2454C48553FEF9E5F73DB77277AA39D2D21723DAA7234185
D3985B0DF9E4295055D6EC44487DE4D9770BB51D4039D957A97D60E7FBB03F185DA2D9829970
BDF0AC31C0A5E4037DA595C67FF45174E94BA58AD7972667ADD43A80ED37CB809AB4F89AEDCF
2F4A95599956E49FDC6587024E4DFCCD30F46B4DC205101E026BBEFCF4C2F30B2A05DAD35549
0EB296F8BDBB84D6B2F035199D1325E1E54498DD98D16E6340486D2A57F70DFFCC9BB3E8E416
FF1DEBC2098025B985206EB0A5BA79B9E73ABEB0362EBBA8323F1DA75B3047868CA6C6412A38
78DB9F52FAF52219F63D505DC87852E45AFBDF441B0D8E47716D800369F86C4C90338CAF2981
C77CB506B690D22751C87D0352A021FC0767FE3AF39D42A57A3A3357E46A36B9A318D0C8A0A4
7C1C3FC8868545D5B2CD42EA573619AF5AD385F3917756B82F60B16E7A33913D9144B2FCA93E
9C75ACCB70DC55DABB5B1E84F0BA757954593BD61A53F41864659D9F1BC293417B4D605F2F67
D24CBB745CEBB7919E9BE1D93E9461181A3888A271E7E094FA64459385FDAE96D342ED2E593A
EF5B0F5A2D01686B696461091A16DEB9FCAB20F2632732B52637E81E598BF7C8F17970B6E3BB
3822F2EDF69EA1746819413066EB2ED7B43F1D450799EA12EC58DED38B5143A90896D806E37E
F1373011E180D06231829F6C2E8433E9F56D7A61A96C55463EC5E6EC36695BECF3E7A3A4DFB0
63C30986A5C0D1103F31803D4457AB0D72C44B1BA2D1F0FC740D98AF3E9EC01F84FDD6EAF479
48236D988B400D94DFE926EC2EC38AD6DA2F374441620990DAC5593CD34E154C3FF004E9536D
6B9B8B41CCD0C9AAF237299B91524E39F867DA0C0CD33B05646A10B13CE1DB4D9D82FE29D528
8E761F55347DCD040928D34560C87C7A93ECF8A1D31086A33D2BF9F9E4CD06B11F0F197E8EC2
132AC23976CB80FEEE0D68A30434C276E4AE9D46468397934F8856EC2E482B2381AF05C58AF2
ACDFE0D758DBAC363F1817030BBD26FDF5819633C9827E27B1DDB43A56DA5001D17B59A6B218
D2CE2F47C5308235C60EA08B24736176207EB3944C0C2B0A2F5DB51EB2DD1EA27E545A4DE795
E16061FB48496472787E4D06DB2927700CFD5C2BE68FDF12038F06FE86474186F647AF4ED1BC
1C8B446C5A9CF538A9813EC2142A9781A88D524F8B03B26D2B3C5F66BE569717CBCCAA602876
7D5D7A4BF00CC49827A766E67C6E98542A06B479D831754AE7A895F6CE275F3F03E8F09A5BAF
9403B9030651336D8F4B3F8D0DC2EE50CE8593D2A365652360033ACE6D449BCA26BFE2908344
BB6D46AE7EA36AA4256E0DB5E5EE1EE666C302F00C782D02C2A251B9AAE9DF91EE1E58BC17A6
6AEEC65A75A8BD1277B3B3247F57A9AF643ACCC2AB63462E3035B2E14482B625A69934744B0A
A98113F919125346C854C73F7E24123E70FBF97BAB700B8146DD010F4470B08E4F95B61675AC
033198B0871766002B6688B17BBD2C010A44CA430D763C3B4E7F005B7BC21A8F91072FB3CDFB
B83F5B92614683730F26AABA94398A506BE38A2A6393FB78C46B12E2665BFB3C543EE45EBD37
AAF6DD641BBF996869ABE0983549A76B1BB226DDDD7BEF928E06EB9C1B185BC3CB9BAC42B9E1
63DC13193F824CCC82A16907AAE7352799F2510746FE287BCE1097AFAC2C5CB2E163637E5626
75F81AE43647FB2FAF61F0572734D41258E0F290D2F16E653FA7451991CA7149CE3911A0D943
761EDF2F1045F274BCE511C8F6BA6AC76EC5C36CC7D18E6D1FB151ADB459D5D18715F9DE964B
4FF2E7529000A29DDD0A80081D3E66919A2CD2D2246DA276E42465CA9FF24BA1112896BC8B84
2424E8743153B0B972BD829AAA296AC452ABA0300BA89EF0745CE65102BD2B5C74CBB0963D83
E1EF4B3C2A58D8055E696DAD94861DAE50234D6565CFB7AD2947727D76482DCD5AAA516088FC
A6AE15D1CAD26B869FE82AFD428D0A077C2C490D260A75BA834B7433A3A698FEF7CB1DCD2723
2D341939409FDD8FEECC663918FEC5CB68E7481B9C97A90CD7074B2E972D87CFEE0F3C2BC0C7
44E1F720D7F33B88B2DF064E121074F338AE0C57AD3731855519BDABC623AB061D027DAB1B8D
5DE267ADC44E93A675680CC40A3D1CE638F5C565AC3485F048BCF9D485EF2D72D29A0CFC31B1
9171307AC6901B2E2F275F6907E2B9DCFC471133A613F62ED32DCE4A146ECE788EC534D5C084
4A08C1BFC8CDE3229DEBB8C4125B0D10A1440FA313B0377074A0D890EBA590CC2207C3D5F825
CD0C846A1B47E885EAE2ECBC583798754A64702BBC3C032D4A489FD986CB7FA37CC4B633C8C8
4CCE56EE6A9C53D334E18DB204E43F2D084B0AA0435E1E5009957AA0487C7B654008F1B83B7B
C5EE4290986F106279A994116F2BC3B36ECAB14E1E5A6F57383983E0D48520AB39E999D248DA
7D1D376C28BCE9B74DB2D38E6FC89D217F948971526087C02D1B4421D2B81204C1A210F9DAD5
65EA8DB2A23BA3DAE525331DF23748802AEAAEB7C457C9595580E1F903D6C4718FB1843D9C92
80FB1750EEDF4DF8D18E168ACC025AAEF11E7D57D03D3DDB7B001B7A6DEDAA0E443075C99526
BCEDA1F1EED6717BB775A141B925A27D61EE376441206E18B23B8EC62D755A250EE1520CC279
A6F67A3587F4A43439C194BDF6D9D95730CB744F847EECB180A241D1B3DA379EDAD4C43B7838
5FE83136F4091AC9313E40F3E39A3EF1C5CD95CFBC350369E6F5435BC36EC337E8ADC69C2BA1
EDEE45B6E858B76A10FA145B9F029FE3DBC669A5F91ACE7ED62FE70AFD4EB2CD683E50B5BD7B
2EEA06D1A2F2EA3F2509CF8C5E19219405AD7FFFAE0B22F738C4844D89EE709021E9F6BD78AF
46FC120C37AFC3F29A315F801D6B2E354448D5EECCEFF62C43A016FD810052104CF9B0193885
BFB7308110B285F95599B5CB732C856C70E665860E1F88EAF111B2E3145E5C9BBAF4C53D789F
7DCE86D8700B1F741D342C6E8C17E89B3432EB47CF263D11486AE3F3EEA479CD6DA86D1ED0D1
403E5139C0CDECC5889DB49B24EF64E06F9619522358375FD54AEEF7984A7B4998058D23B065
BECE937C9638B9380C4AB40BDCE27E0F09D160121DE52C7A7FD8F9DBF47D78A3F89FA2778FA8
65CA61CE2E64A420E60E1AB30633E632992EC7CE37AEE15456446664AE34DC0DA2BF08AFBF6F
6BE4DACE7067BD1EF1B45646F99E34754A4C434DE88507755207C31BFEB8CD8DEDA6EA06A719
22A38FCC7D33E6EBD78B970FC94528A8DB5D12D2B8222CD5AE9703D256E8D75945AA5B7E87F8
07981E551C767DA543AFB0F87CC4D9D35DD3D790AF115E9688732FA2513ABD5E001F237565A9
078B782198971F8599C23BBAB1C8ADC098688B59619C07DCB2137ADAC3A0F83AF46E7B9E420C
70D92E5588985D94DD7D1DD46361DA4FE7B3CBC1F887112F1ED0D5BFABB41C088B40CBB45D2C
1D0A6114C2D613A91BA2F1CEEA5F0FAAD1D4C32AE8D0AEEFE4E3EC36935C209DB4F8AE49E279
18924F4E9BA0C813519B7E0A8C71C3910BB0970E7E3980BCCD990245C28F7676A77934A03D60
C634A478BFB1C7FC811E65C5770E74ECC042F51183A8A570B986F27D5DEBDE77137BE74BF14F
3B92C30A9C1B1831875F795A0C141E0833DCE32A2F396DAFB4A3ABBF023E5795BE3417AAA442
0E1075E8EED1489A8AFF4FD51A54B517E737B7734C4ECE1721DE9D7DA8106BC326C8B28F6D1E
C46B903F4CA044F663C03562132A08AB8CB50ED917470EAE0F6565BD507B02EC06FECB8F53DC
B01651EB79EE4640E8E1985C2ECE04D3CAE9616753555F1E34E75EF364FA93711DB9087C713B
6A69CCED8A5185F54D3299F9531BF7EAC47BA0C27ADBBF90A4955C986C38FF8EDAF559CE3095
BF7A695AD178472BC5709D0ECD90C7C537A4F65DAB6A81E87E2355D2854EDDCBD9173676C779
C5AB91DCCCB74A35E2134D2F19B6D495280BD595CAE39BCAC779CDA2C61A3B6B62CB34DE7D3E
7AB665D6E460DD8522E97B27EC820A6CBF1FA75EF0768E92D3CC78B8A78D25856E371D7B9480
68E17D071D62ED07E307F73B7ED49C46D9DBB212FB89C5079FE0DF25D2D18D5FFBB8E82CDDDF
B72F1D1ACF10AD23F2CD2CF003235E3E1518A2A46C95C7C5EAD396D0989DE2DC6F1EDE08D2AE
1C763D2528F49EB3C6E5ABFAF9BD05A3D9C5CD27846A743EC6CC11839AF6364E6742840420A1
CD3CB76D9A1C548ECED1911A4F03E5FDA3AE0549AEA276EE16A37F31E1485BD5AAA9AE3AFEB9
540D08D43DB9EBC456BF648B6DE6A53F64AB5A65F756AD68EF9B5A01B8AC9E54627ED1A6DF8C
FE87DAC019A6A33603D005C6B492609380D388FC68046495C8CBC4C050BE8F6260B578BB4150
5CE0BF93FBB5E75F6C237C8EED48AD41F91BC4D9249C190316710225C4C3CB3F3BB5CE41A81F
9E885BDF56744CE20FE1E134F31793C8C92E671023108B9EAFEE63E93D8E2E083ABCB78F029A
28BB3F7360C510BF86A0F5CE584C959E80AE6D048D250A0AB3899694EC569F5A60FDC91CEC7A
A8D06D3F20E4C5EA037ABD6A54F5330A04DA05617BEB1BA01A8EA4CF94F1318D6D58BA2F4980
242F2F39BE32A0DD3AEC378B08C916ADA5271ECF7AD07B0BC2D74BAD8F21D6963D5A44B80ADA
5B7792642C6ED391BA1D8C26257C8FA2C9628478C1D3A04583F3DDD5AA9BBDA20C8AB1CF2429
2E3DA39F0AAE89A2BF2707A2A0B9F99A7E4AF7208588A0DA8C5E58E1BE9A934F659B3FA24F8B
C762447A1249CAC524780A1F27EE4F3FC039BDE351DDBCEA00EBD4A0F65FE6AB022AE73A65D1
162C95C48E69C8284A8300216035F189CF3B4A051E3DA7AE134145C93A9D36BD71887DED330C
98638C065EF056061AFE4AFA9B8C5422B1DC82FFF65B8B276FE9E560BA16573295F76F7C8826
0621587FC16FF6D48BF9B8D258E120C3C1B5385962B6DCFC453DEFA99DF6B76D0987DC232178
A078C99CC3DDC5ACE95A878698D5F83792BC666778465919400C21CE472097DDACA38264B4EF
2F0AFA898C8137404E4BA18F6CE51FEFF96043D0015AC61D7671A40A13FC7E10ACF9E778ED64
5AA1184ECCA49857A84C6D9CA2A0817887BCB9F55C882CC665A6AA8FA7988FD05797AB0DA780
23E249A6D758B036E8DA6C035AD861F21616CCC988E29D5060813FA27C1D9884BB0FA3EB65D1
FA0ED45D531439F600F61C14247E632909EA78CE4568A3642551DFF34F1AC5DA759CBE317F5A
44FB1233392D62BAC0126036564A37F263BC1A45093327484763281758727B11A4A8A4EC4EEB
85A418E6D008B2DC93191346042AD7144F4B9BF6961A45071055FA029E53DE2D2FA9D92E65C7
E7D14E7568A003A88D25A09770456DD457469896108D4EA5F62DB179C9EC05D87566D0FF64AB
D151041524AD6BCA0EDBA36CC2B96315572528C63416BE8EA4B48402844D7453035C1D46E821
750FAFBA9CC104D0E0E770FA802BE0D09B56C556D32CCE3268D06EDC9C961F8F34A682439A26
B12C076D2FFFB098EA0116C08164A673187892078979BF133A59AD48821E93584774ACFAF0A4
00C8557D7C0D715C712D4EACECEDDC049DC8A0C019435EF5E5B042B64B376B162308D41EEDFF
2FF5F7C1B2309B8F86FDB47F905A0453FF2DBE0EF364C1CCC438A3EC818046F07112EE3CC218
15CEF16A7AB1D6BEE1625C57FB3179BF7B5701D0B47EA3BCEF53D6B455F321254CA5976CB3BB
53E381AF19769DE275AA44CDE3BCF83F7C337E59058A2E5A1F50894F78EB461C37C9E3E63C79
F31E76BB68A767AF96EB097A8D930DA33568D47324B47C81CE0DAFBE3BF007C55FEA4B0A0BC3
908A2FB97263FE5F2837DC90C1F81F56A6EB014AF134E0A8E36E2A8CDEED7725755F776464C1
86E92D66DFD5E59140AA63C141374E1D883916487F33FE14567F18F10C1F39290B988399B275
3802A1E28F5643412C907A02AF184F44CD506CFBB13CC7413CDACD2EEEDF3B160B01FFFA5222
C4764E652EFBC89E44E7AEFA9F275F2DB1E5B95AEB4A7088D1EDE5CF40D7ACFE4A3482A1659A
570971CD5997F89AB3D20E77398215364B5814FEA406ECD4BE1467A41BC9CCA2D48E382F447B
386AE5495E4486B02871406ACA754A3927FF0A63CAEE3F33CF6334A1AC3E2F7432747CECD5A5
C39ACDD151341A341DC82EC8E951A2F5356A75124911FA1E9AC9029F06EADE0D2D5281A2665E
0E14A8491FBF84A24CABE27D908B7DBA52377C6E95AC3B7486902006C5E40C4B235444E30715
3AB4466756B5B3B45D77770DA48814B2B908DB4665FA90D14872F8A82D452FB2264195EBFA0F
F9BF255A9B773CED969F9072CB9A69FC23092E350287FB55F5BAF7B2287209970714623A8861
8780F4A52A63936A009A2889454022DC4B88121BEAD8C1029208CBCBF43DF8B27AD576AEADB5
887B5C3011F9EE757F7082C8280A0DF6EFD62C5748F093F0EDA116D0915BED54C87257961D49
D9A78BD3516DEDDBCE1995D8DEBF1C0021F2ED25835EE7FDCF6237167399069075D892E33BA4
C81EE7537EF02190ED04141DCB21DCE6E4978A86B94B0BB3C08B9CB270E50909D780B0556AFA
77409C168B61E4D6B81D4371D1667C6744A55EBF628154416AAA6EFEEE7D0BAD3F5FA4AA3237
1893D9952BDD20ED383ED83904821B1834BEF0CBAA0B00EA1B7972990686477F6C233D2AAA9D
A87F589446A89FD3C83647A8F86AB1EF20E3E9435374BAD83E13388DB4ADF5D211136474109B
DFEA1EBB21B97702EE3159A4719F169B0CE3A141CA48316EDD73C8AFD576D7A4826677A1ED61
4CDF61164679F34FFA68E40A0476CDC04636674AC36AA22122376A0299A18DA803363D2C8957
3E5271C57DE0F58750E33867363653E1A717CA0262D0017F6DB8B4A8B705A084F0354708A49A
03F0DFEA45216E50DA8633BD448F4109AF8864B7749CB7A0E8EA4D9D28ACBC7BFBB42CCF7D10
5488FDF1D814FD6B2F47A9569293814D6D7FDB952F5D85C4BE0E437A022A394678D2C842120B
4A2FDD89516C5F00228C6365B7F60151D451B272A206BAC3255CF5D68FDBD4B89C92897D1736
8EB84C740BC0421FFF27A307C640BA27C4EE467ED3BAB502E0BEB8FCB8946593C70C8A21BBDD
6B77F21DEF4AE9F2530F51E95DA7B8A85134F695B8B16DF2E10ECAB744BBDF3FBFF4CDB9A091
767C7C9C8D3656A1AC5E277353DE528943ADEF524A41666DC5D10276F404C0F1F1606CFFF798
3F52436E5A34EE91D0E4AF98561298430EB63E31C51C4BF9E65B9FC8C9158DB1918DB3984C62
9794AF50C43C18611F59F1E3DD200153EC9A6B628D56A46AAF1276632A53453EB3496DCF4F21
74F3B86A5D4D14E67EE18F06C153F88DEE9A91AD36A793F2B3D11436CBAF71811B3742C8C578
1A692410F18BFB5A751BA7E977A37A270187FB97EA44ED468AD03E0050A3CDEEE397B377EC23
CF20EE2F72ACA6B5129C6A4ECA5C7B5C4C9A03BE54956B638B217D51D416D79FB3D069989A03
63FDF688FC3D61529B08036B1B3B8B0BE0101DD9F5CD0260FB45044E09FE59D6ED39F9C66189
A5850141D33CC7CF390576A052DCD55586C90188F50088D6F038C1DE31A636A042266B834F93
39CD152A84325BE676FC6C94312E6C5582E3D063FEFE33E321758D7CC38BAD25DBCE0ABE021E
7F17F84D710BAC4CEFF5F44BB036FED06B6614A1FAA68A7B175378D5409D983BD1775FAAEFC0
8B93C7EDEA64FFEB7DE8105F0AAA9F8463D0CDEBB37DA9494C42181A2AE778F738776A02EB21
70D636582B84DAA97F91ABCEFB09748B8660B4C59D18FC35D6EA7EABD2DAA46C47362B6FF034
E1E19ABA030E06418148FBC88F331AA341D4471940446E4BAA085867C020699401010626FAD2
8BB1344EEA338F7309AB42840D60648D1AE5C3FA516E4D96263BB411F5CB3E506F639D3C399D
6CE2CB00DD6E555A413D3D0A52265ABA30FA0BD32CFA9C890D5B0FEF16C98DCC205023CE26D7
6AB91C343CAB3954BBFC473EB78A31AAADF1146997BE3E214D99A95B32274F289C087E6AEE97
443AFDF046F923069DF8D162A2B4A9CBCFF1A98DDF00F13972378F76CFCA501FA81867E7AF04
6C3FD1FF8B4125F0385D78DE487C3EB1A4EFC0F0BD1F9421B0B3D38C48C5C54C064F4941F55D
46A06B8D4369421F1CDB123C143130D64D1A9F0D69D8CB77BB18FC678D5C4E41804DCB55AD7E
31860B855696908A2255A4D4016D0B547C7AD0029EA4B8F08A54FFE7CF12A00339087A132C5A
8DA7ACD499EBF4D37E73D3D3F6F3546348A9D0F842F0249674982FFE0713E1CEDD0313E507BC
85069D70FAF8F8A2E36FCDDD22AB9C1144D42D72681F464760CA78D0A8EA0EFD0797DB43F50A
7C044D1421AE9B41CB7F23F18978442E65A962F891A6E90163F70574236DA0F536AAF7402605
BE6D076CC70ED2935BEB6CDEC6725CC6ADF5DAC73052EE0D073E07E953AA9FEA7E88588E98B1
9552506D1F2538E14C1D80FB7DF3B7DFDBC348D46F285A1543491828B072F7D42EF82E9EC755
CF05A292A26715B42F56773BF86562F41AE18A060DD7F2BC5891419FA1A313405C76C056AD2B
22AF876680F8C28689B4AAD1AD71B294454F305FD382AA98405D6A8BD80BAE503C39D570A8B7
7A7E17E3982A576790634BABB2C82D33B1A1B25CE073002A15BB536D75233DD4D907B81C6985
768E76C54FB0AD83219C747CBBEF093B931EE5110237DBAB1305E6668777B3341748034D05F0
BB4547E485E975BCB018443A878576F9B85BDE41A7BB6EC20EF6369F795EC24597E7FFE309DA
42C01CC7CC46FE9DEBA8B8686185B68D37742B8AF331354FADBD843119620127AB8D3123F121
D88EC489CA76E0212F4A7A69BA6A1045AF054EE33AF6D43C46866277B947BC1EF241E556DBAE
8F1B5F5A57EA1E76A4EF1C06A926BCFA464610F93432AA880BE65213C15CBAF727E9174DFB8D
7B16A11C8394054CB6BF57A8D8A9FD840D21F9715773C05FAA10735C8486A2A67F925FEF7C43
79F3091A456622439D8FB7ECA200FA8D26B63043DA049742A4FD9E5AA5DA6353024606C9A2DD
6EB9A20A392A9D3C0B8BCD02FE28491BD822EA387B5F8831AEE6E419F8E7F7B2D87CB9DAEB59
7F50E413F78108C0EB03612A18AF994902ED5C91523E070407488DCE1A7B459F9C1C483C7F3A
C4734F8F979CB87344DE2F1E81560CBA80F940945787F375636170E2A16315E8526BD42AD8EB
0A1B00FA47BD3CFA00571A91BC04462DA38A41944AB6E6A762FD34E8B2085690CC934D4420EC
52269F6D7ADAF02D7A48464778AC9690EC14350221FEDB06055DB4481672EA0FF6AC2105A124
ACCE497431BB6A21490F8D76B6BAE99DFE5F4A1F91B68E23EDA04ED030B757F427B6D1734097
0943CC90E7C9356A3E8A49C057532910FC54D05C9F604B7FDC6CBA5C52F82EF7611D256C2172
7A4B7F7D2886430087D3B02D44B3E4EBF31D3185418224100C32A176DB8ACDD27A3828507607
B8A6358361EDDD2697DFDBDC928BE154BF1232EB37CED424BD55B2879DA7FE7C30BC82A512CF
1E654D0CC0CB4DDE59399B55BB9E53C9469F6813E1A881599B2F5A1C0CE63F694F288EACC9D4
D691EA5BD5E4D725C3939D5C2B4EEB1C27A2E36071C99764EB61C597D5DD0EAA594FD503ADF8
52D6212E92C4021D3D755B35FFFF2000E67AA8C8A8F887907125A703FAEE4701DE5B054D7223
389D076AF1E78CE229D2B7AAEDD3B83B9FF16C2F100C552521BD8EE293A019967F783D5E73C1
174AB8215BA5496520EF03ECE4E0CC189B3805209461202ECDDBFCDFFEAA81D73A3E2D7A2F0C
086417454D7F90449A7FAAD52A2177E07A2289B7A2A990FFA14ABE6D48267F2A3DCEDBF4F75A
A4006CDCB985067772CB50A88145BD8F799F545B6FA34AE773E25E48CA6C85320EC48560A051
B68E0E06F173133E2879369280C02172905879DCED8ECAECD8906F80ACA1DF9BF626F5510595
861D88C681564B868679E5522765A809B2DEC2A107A2275FB7E5B1768E27E0684CFDC2242132
5E1BBDAD855FCB0A4EC08D1F146CEF2CF68208F87957A6A15FE1E2755C38549AFE1672D99C2A
C75AB8F1A33E2907B78BA020BE9DC1BE3EC75982A5CE6AC241A050AE3C36D885EAC4E73F0CD5
E21F1773F8E147918D4CC694403D0EB8BAB0150B8CF48CA91F9BA174003D13CE9F410A5AEC31
296A164E6D611C8527BCA8DC71A2AE57C4D7C9DFB85EA5DA647ECEAFAF417B0F6A0F70FF771A
31FE63F6896FACCA9647D2849F3E6067308F0A26A151DA800F9C9902475E6CE9C73214B7579E
7C7A019798195C89722FFC804EAA1BCE0917DEA7C6461E7E6A30D27629010BE7B0E2D8770B49
F4C04D0FFE05FFF2AA626F05CC3D2E4852A9C0D61013227ED4389A3061620C8C1DE967D227E9
4FFD522AB24F7EAAE9BF4203E1F259F5CA16EFA197DDA8CA0519B6F337C5A2B53FB855BBFA65
1B729C88433561DD962B347294E8784C1B7E8ACBB856A567A9D8A2CECB86177C3E63864D82A1
F795B2B67E6FA4E700F0C64B051D830D5F20F214C109B6A16D3EC5DE0EBE8E1737162CF7133B
5EEF94101E050AE455BD4F90C9CE7B5AE34F114491BCC80B1422AF8921DCBD0850E30F986716
C8B968F77D7977F825FA32D5826C2F4EB3C0F7C78850DB3D0716F6A70016A7A249712499FC52
9B928DC66E388D47D00EF777BB0CC69965A4C4D737C1F9199D677552B91A9CF7FDB8C03851B0
8006861EB360998794CE0B955C16CE1F6FE86AAB4700CF6E2BEA44F92ACA4E6B779454E59FED
0768F578FC6856AF8BB2022BDB32B8FF477595FEBFD382CAADD04C695132A206D68A0CFABF88
C8A78063B2DA93B3D70DBF77F70AFBF179BB0E0B99B88D3654F7FEE3CA18A6243C211F297898
CE19D6A90D4C5744F11C8533780F6D6BD712508DB98966E163A9136991CA3066B8270D6A5AD7
891FC0D6C241B2085790B2E9632FC8A583CFDB200841E01EC500E67D3DB1E5EFE36D708C2424
C896FE3AC1A36D798C9BB027F3EBD7CD09C01C2A9B3E8ABD32044F0822C6B0FCAB6024AEE7DE
4AB5A1A5387BBF87271B5DC4615D28B825C0610DCDF0F7F4CFCE880F79EC3217C2DC72193441
FCAB1E76AC8F51881A10D67687E1168D7D5408AE252686303F20A8F5E40C45ECB3DDABE89582
98CF9853E5D0EB6645E392228EBF0C0071EBB8B239FEA5A4390DEE73C505B9699E44369EA33A
0CE909E1BFCDB5DE6E949B02163650D6ACD4E125D9BDF310368C41E601C26A9A150843CCEC54
035DB2101703E666EFA11F070C375511A62AF1B10E8E590661BEBA214606D093474DA3C8E0D8
400DA49745FF02BD1859530AC09C5E06F2AE5AF23858E108D0044DA583B2568EED4311DA1028
3A87A7AF3D486862C322289CCAE116C89CBA36C16FFEB2A511925A981EC533258FE80A6E75BF
EB4AF396CC664B33AB4F8A161E715410F55A702B4697E51898CBA67E345DD272ACF6EDCD9F47
4378D4A97E9140CBE2923CBAF1158BF6835C7F5E3E8A21649BEF43AB7AC13F481F85C26D353F
AB2625BA6A5B3A553D10D6495D2EF4868684BC25392DD3720C58775E693CFC4E7569F569A26C
B392AADF1292209F27ACE70084142DEFCF0E2B261D1C8C764AF52B63714A499ACFA62F010A83
8E77DDD525DB1C4C03D33D551A0B935566B37874B9B75B8ABDAFF6B68518CC581F32C7E2E2F3
D3DD3BF7EC74D28D4763FE1EE50813D9415734560BCBB5A52A823C1EFD8BBBACDBAC34E20861
63337C50945E7DEF65F949ED9EFF4BB11C36F21346C1EBDBB80D937BC7A485CE7D938D76ECA2
001274528D30301DBF65879DEE2FEF93B031E930CAD083ABC10545F9E6F5E65399B694CBE958
BE5273910934D9F58BE31ED7963E5A59BC8E40EF77AEA65A59B7778EA4AA54312B47887E3311
9BF3E1BE854C4282FA71227207B75AE763F8D5DBB10A091CDB0BA8E83E376FAFA00754BA34BE
EECCAF0FA84C68981D35112E483933A571F08D551AB39003B6484DBCFBE2396CAD864C02AA99
6561056DB2588BDC2175D21CEF1B8DBC9701BEC6A41B1B8E128CB3B17F4B17627F8088801102
170B13431BA9B1DBA850A74F4E5D1F69A9FA83D28D26E4C545E3BC40FA4BD52B93AA9D11A114
ED30134C05785867F926DC0A1462F6241E81F0F0D9C8378A9E02EE09F35528490DDABC52248C
12D0B070ED1A6EE3A59B7C6DDC563767983DAB24E9EA254FD2ED4344ADC6EA2E815DF3820C37
4C4C6EE05F0993FD864FF6BE3DBEFA77F5BE949C4BB8DC9511A5211BF561BC025A7372EB8799
9E9419D671FE53C4782510DE054A1BFF97671BABF428B0522E85C3010756B6BC235C07443E8E
27D00322C392DC724627284141E261CC83AB49B65B8513192F7B53A4F70E4A41DEE8A7662373
334B850CACA3CA53CCE3EEFBBDA2C041CC823725E2D5BC9BB8F33BB18E59E507EEFB1FEAE5AD
D86E77406C4F9BFB791D14CBF827A12B6C8BBFC54DC8916A9801FBA958AB26C2F43A7B927EDE
A84985C3624FE9EEEB08D0428519CF426847DFF0B7838C9C18A2EFE7C3E8ACB68E95866B8CFF
5E5E567BF1AEDDA3769466DA9B0108974429E7BFCE72A309901C67ABBC61365325EC26078148
8759050051D22F80915A2677CC2C27BCFC79C07B871D86340AD06E0E53FAC4269AEFDEBD3DF3
080CF9C7D96178C5299D8DB975572995E5350195BCF4C83F16CCC823825B8AABE165CFA4DD4D
1651606B834F6EA375F774D6961B39B501062881D70A15232749BA8A43DE23D3F4D3EFAFF602
7F6F1FB9477E2A1243CB2E7772AA8438D31CB3B7D11FBAF0CC1F0ECCB087EC67AE9E13632451
BCD534AC7B2CCDB5C6B6C6324002EA2FFFB529BDFB7A7E2E9BDC7A6B46A0D332DC4285639252
F3BBA3357590320BF8650389103771D430D8C79839F74AD77B27D3C230CC8E2D5FA25C582D72
3433C732CF0E53B066C56B7B4DFBA2232F6F21667BC6F74D1976D86E21C62447E8EF2092CD0C
8AFD8533965683E7B108CC8EB4E384727E36A025B786D2F1197DFF1F85AEE880145D7DDCB02A
780C87A53E51EBB2D2E99984AAD4E0D612F57F7CD72C3045EA63D9B648D72F7EF57B5E9687A9
354D468B8F6B35510C53AD8D9DE10186CA1ACE62480F6BC57FC9D26D831E9E9A1060B85E94F8
54A67ADBBDCE00D1BAE12B04654944A0C88A1BB6B95E73140E4FA21043F5ACB21B6A16598977
558A10532BDF3B604637801F9C7F4304F1F6C7C01C431DC8495AD308878D0BC8EE61081D1BB5
F1B60E0FB209678684CA11BB2B57E80131A410A51F9262F16ACE34A8E9962E903799D374369B
1DE57C3FE9C9C09C7B33F4AE3D02771CB79681FA4986A4381146A02509D8755324C32808C3C2
B41117969B4B33E29D53256D93C20B7F28BEFE788C2709229CC5D96F7C9761652DAFB0558946
FD6B51DCE07474F42E90AAF2B9ACBE87130DCCEF8F4D2720CC2A89FCB37DBCDEAEC7F44A1E73
230D9CD11DBC5A9238868E723DB31361E849EFD2C97801373FB28184793AA82DE22FA932504B
D558C9D46F4551F9A9D9C012C2A3025119285B17D7F0BFB1A71D988D1149C1641D6E76C1849F
F3E3C5D15B22A3E0B0D5D796903BC96A1907144E32263F5185BC2FEC93F82C7F63E0230C8C19
27EA8EEF440B7610408282D06F1CB8ED9CF1A65683C3CA2E875B269BE99A042A9B936B9AE5ED
7FB2F3EC1C01C50E512858709ED2154185C2CF22585B0B3643C7B642A7AC808B8F4930FFB50A
05875B03757886B66A5D1DC99AB3444A0631C3DDC29F794300736AECAFEE7D46FA69D7E39BF6
499B2147B7013A99378DAD5B1B3CECDF57A1B96A4B2077441FFECBA1924D326A6461D3D89C0A
DB6B9992285687E54372FB449B2820C94CAFF63B2FB49711000D44E3681476812944A8FA28EF
59482237F8DCFF59F1AD81AA615BF460E2466225F07A9BF084D348158C6CD4790598AB894E33
0D1758595CC2F4922C9D1566E8FCF6A8460A30977DAC988021C917E255FE0E1F7E0E6240838D
0F4D821067927EC46753C952CDCFCA4DA2A99BE0436BC0C70CDCCA1DC2B45789F8A95ADDE25B
752BABF81F9BE611161384D7EFB8B53C300612D53CFA142918850E72F2975169F6F7440117BF
0611F75469FA6ACECAD3A3ECFD2625223D70D0614C1EECB6149EC4A52BEC4A3F229E5BC292DC
9572E63D43202CF30FD1073DD1ED553C80E33B08DDCA87DD3863B7D28087F68251FD49EB3F83
EA92577457DE19452A87564A1257DF1796F73214D4688870CF681AB39BB0B1DA8D2999D93D88
F83B827E2CE58D46F84719ABC5F6D8FC62D48F4E74305F5BE732BDE8CAE001547302D519E2ED
1DAC157CFFC3FFB7DB7BC637DB052A4C3638B957222CC0E9DB61A731F9109E09772FE0591054
B198B2605C26CA25635E3AC337797FB9BDF5C9F5DAB3226A0DFAEC8723360362A33793A8753A
7F553A4268039BE77C53CAC5C462FADA77001B172A4437EDA49154565596AC8BC6288641FDF7
38B75DD6D841A200B450BA19F2D177E4CCEB6984F048C8F97926E207DB2C3215040877F73D2A
BFE79E813D0E1D5DA7B3ABC9AF94ED3F2F9761C7369EB5EA04C0C84F42A9C798BC35D6FB639E
99929A59C2BDED44F7CB3EA11BE88F115F12DDDA132F30F0B0BB544330EA3862D477385A3E27
D43747A7CC03185C5FC7E3A1B9816533C1EBE7890CAC78C34B5BBE6E20FF4B2D679911744B05
1961AEFFCB8477D61A5817F01E47803878EE8B2555CAD97E24806FCD5EFF6E703E326FC46AB2
1ECE67E60CA9899DA6B2ECAEA53E6BBA97F485F894CC08DAD3EDB8C08EE653C82076F60265AE
348E2414117029D250FF553B3B2111C921C5F468932995098052206CBAACF00EADB4186D68B9
DCFA41E59CA0182A70518FC0469C373983932D5C8D73182312D13BF03F8430EBDE31862D42A1
57372DE1F85EF55E5B994AA50C0D418262E1A7D5A7EC6B8A95709859509642D780107B5F9AA6
380A67BB86E17E3F1F1427F5826F5DA3C519E22D3F44BBDD69A60EBBA9FF91DFEC338BA9D2F4
132A097E0DF1E07804DB4A077E37DEF25B8FEACCE2A03678724C59C674D1B89BC0BB798F46A7
EA9BE7D5743C2F4003A2FB995A6E2FFF14BB0F6372B70E94FDB4BE0AFB203F6D724837C455ED
D0CD807AEA01F35122C5B047C3E3C5A2C2E2EBDEAA116C9E08089E139104E5FD1A1F6B4DDA21
B9C805A220BE54B923D9C790CC00FA72083B5C34A15C2527F30B5DB3DEE56A1AEB1AAADF98CF
CC174DECDD41D91A6AE1C423EA6ACB0F9ACF9E3B495619D75C5A3F6FE9B7A189D2A4640A7CC9
6BC19CA78C05A6C58B1B28A0020890552B798273F3BE08366E85BA8945BCD835DAC185581A41
1197AA294D9914D2B37F3B9F09F19E7C3A878BC13DE769B51BBAEC279A5BDBCE63E5813A85A7
DB0F2C275E242E6B3406238E8AEBA3AF160CD3AF0FD251878419322D6237B3A01E17A76D7F00
D5EF44D1B1166D7ED51C800EDA39FF5735C83F846B376AAB6C0DAE5001BE673BA46CDCBF3B91
986E935E9AEECDA483E2B76D3C639E08E27AC04CC9D0F6F9884A2CF9517DE7E1D1BDF872E184
0B5474BA4B974CD1F3C04A4A29B0A4AD26E166301AD321358AA11FAEF06A4B121532B21D2FD5
BEB4485C9C1D1019BCEC7407A24887A1441E18744D02665F36E36EACA5B9CDF3958CE1BC9294
0C590536E69D15BC053D3286E24A76711AE0E299213C543E33437DAC56768CFE4A190345B020
B8368F4001F1413DBD743C765F120AC0348A834F7068EAD20593769505CF891CCD3D351F3873
7F204EBA6EAD77CB03556D4E567A1390AD64F85F21B9ADF835518F5843A0EE6F0B15AA90A484
0181A0C67677197106A6F92F00D20F47D14D5C213B8A5D32E08BCA99277B9A8858D84106AD2A
F126E03BB893945DA9A8E1EAC787800B5A0506DBCB104D45398DBE06A2B1B20403BDAAD14B56
E3038A04F05DFC62E91DBA42F273C7A044DF8B7763A51F466E9B2C160BC033E361D40FAAB8A0
718E1339304B4D6CBFBBB21C900D439D5FADC69F5EBDE98D4BE4CB9DAD3BF9433471D004EF25
2CFB63FF8E03F2A5CA39CD213D5C5DE0A718E79E96FFF02B809BBAABDB0459FB67978662C948
DEC5283F92C887060C895DB9B93391E0067192FFEE82E2FD7C66167D35EBDB9FC5888DBBA45F
E50565A4B1543FDD89CB9C5E48157C3CB0812364E96F646E0746F0C929C499C05FA6FAB2434E
8E7081E2427E99D0B6DA67A99DD709C6BBBCAEC577DBD9BE6A8EA0192E0A4272DF08E9C67DA5
CCBF4FF38C396C55280BE9A7F7253F7F273629B94A3BF268CC05B12ED6DB9B9EB8C3CA62262C
050C923896B5D7B5B49BE5E31F70C75F054AB73129259D14B758E93C3BD651C85F2003C23A6E
EA4734483914C64221C244314B1EE691547D83934465823986A46503A7E13A3C4065E0CABE4C
2CCDA3E46EC297756FF67634AF788C5635E3EE3BA67905CF27131983E16AB66FC6AAD19CE73E
C51990AC752FDED9D25794E20FF0BCBBFDBDE419394ACC2A37E7EF0BFA8707BF9B193FD5ECCA
A235115FBE22A4F090971AF19E8C6B777D611A16842329E977DAEE443969BC03A334C616F110
C335261E9CF9F8270C10EE7166BD8D3EEE98E4E60C63693D398F903A801DDDBA2FAAE2804507
E8791D3E7F2194105B0A97A4A248F27172EF16A75CD230C04EA3C27E0474EF3A8DB470FD9F5C
1FB0A4A1C04AEA1A9AB3782DB8CFAED0EABC01F6D4B3F6C67575CDDD48F804B79E162A6FECD4
06812DF4D8F52CC88FE5EF5F74EDE924EF967BF5CC412B415F5BE193B95598669A1D87176C3A
ED3437EE11C686861B1E6F92891660FE8DB6805593D11C5F78B796F69CF8718CE75544C59A22
0703291899CC42955D44AC6F52BDDE513926DED284AD69CE596FF7DB262481F19C747D7DEDE7
165DF22714845B0F5FDBE177DAD835434CCE4830A283721212CE5EF708D7359D6B5D752151BF
40DAE4BD028C615E2E8DCE4DFC3E3D4FA35EB6E04F4394AF9B0B4D85EF305D12D428B3D607D9
FC5306451E4F7FBA6F9DF7D9DF6CD8D46DEDFA5ABC0D73599B46C103D3CF28828D1355C5C297
1CE14E1730520E4CF20F1E31501B2081AA1379AD31A018D4D7E3303BA31D07286666A0206255
F9EB2D2FA6036E9FF472D06A703A927F10AC76BFEA916AD1F0B8619ECBE9FFEE4F7EA9FEE669
CA4CD7E8203E23BF595B0C9202560E05E0ACFEB5B1DB40E7014DCC2142B2BAB6E0A7D14A9764
77F91CBD4434BFF24F3E8CD5DC5DDA34BA3B24B4A220FCC668D90D962ED169E39BEEC85FB63F
B473D86087600E41D30C853604B9B2B88E550E0C18E25A5CF7BEACDA6857F70FEF09E88CD8E2
FB9A54D9A060E33B608D5CEE327C32D1CC8C19578E65C6E17B8C982B8395B131FF55BD568222
3AD42FF5ACD42E1C6EA8F76F1ACFAB1C77825825CFBFB34752B779E56B2CCAD3302F16AAFF4D
73F812FE0E3B1CF60B2A977D65ED505AEE4AD27A7653C74B9C7F7C87B5CF051A8891B2986EC7
678C20B6F5990F2FA389E547BD5E0212FA608DF050D1B7BA12348EA8CC01B6818CFA54335D42
8752C54142596CA55850B3713C577ECD7230B3F5627B68AB7D3A28615676C5540BF760B99344
9E17726592EEC9D74E4ECA0E60E6CEA0B470DFBF98F9420F81707109D8D6BCD2BD2E0209AB41
D9C6020486E9ABC518D0586FEDC942D45AA4E76BB3B33D361FE7CEEA92A4B3EDF2F5D3A3F8BA
4CA4F5F6A76F3B825967CCC80E9531FCDCD097DC86205A713F29327659E3F5523307A73C43BD
72FEEBCA54DCE12C401B1BDADE58765E396E38CDB60CE5D5037C94BAA2A19784B5D169ECEFD6
56E9D965308D88BBBA8C9588AE8B687FE88156C7A10C4B6C064A73E47F841AA5A2F05C3C4913
E6257898453AF778B06333ABC6A3EFBC4915A0C0403F1780DF83549CD62F1541DC908CE020CD
E768D73B18CE02C0F5DE968B0223E83731300E2A6A2149284D310FE882EE9ADC96754724B574
D88176B65FA331B116451DBB80AB999F07B9B04AA66031EABCBCE4FFD035F8CF19188F6C063E
4DCA05AF15E5731F892E1E7AC924E7690C1EABFE7A5A5266D88B78A626CCDEC2ACA7E91E9ECF
4254CCCA8925C6B004E1D5CD056063419F9E9D105A1E3B866D181D1443107FF10335B4C4856A
76FF9483B4781F4AD63F015A117D22DB63912558B2F4FFDC8BEBFBCF9D44DA23438B99782B63
116A47D5FD1FA88C1035DD4B842EC72FEE1AE0C5349FBD63B7F8089AEB5FC2ADA226C3572333
516187BF3AF460FEDBEC607E56471B69FB616333143610CEEBF2040EB6933750415CA80E8590
F5831C873A92304EF15A18F9418EE05449BC5EDD434700E7993E5F291952A4D876E6460595A4
ACDE51FEFB167C90A83F49CA77961663AF955EF07EAD20C5A131F82E89C0DADD1E0AAC5797B8
B599B0CD16F1EAE45031FC390E10923DEEF75A803F49B7D7A9BD18A3F032DFB948D0D9AFD90A
EC51C7473B66D4D1ED80C718D1DA4405A3457C567AAE21ED9A6FF02925005861C090985BBA48
4D1CD3AC669FEABD34638881A54C4E33981EAF7A2B83AA286E7578269A9B9527383FC7EF22DB
C1D62F1A030DBD9627DB99F0668ABB8FFF1953EF4CCCC44269FD4E9F6F5747F204204DF5679B
17E8658A2E533E38CBD76232FDEBBD704C13CAB33225C03E7689A2071631929B3A7022C0736A
2F627B72D2D824A6C3A44BF227E61358CB70BF1D01C8068A367A804AAF4992C6C7708507DD00
672572DB5351BEA367F4EA323511FCEAD2101ADC50C569655F68183715F7334A7FED2054BC1A
EB8B92BB3487865581F68B6894B08FDBB5C2B0906C57304FB912731E102BE9A13EBB4F091E91
5A9C44CAA778B4F582064DC5557789242F6FB9851C9A9AEBF187BB25BFF4F61230E8600FDF75
BC0975505E57C1FF34E896A1C2E3FBB3ADB1C6627689D0F10E17B7F6662FDDC45E3C797339AE
E58DA4BD85940DA3C3F9626BADB53B6B4674FB02C8F51CCC9AB186BECD819245813FB0D6B3E8
B29A5828DD1E2C9F43769365DCCD5B8DED758208DE7347173D93EBE6E3B80D059A238F2D03D9
FDD97D8C53C50E1C954A8851D9B5A5880DB0DF8C531DB7D6AA99C6F801A431F491B2A3B3F9C9
5459E75F860F448CA3B1DDE43F908A8EC27A5DCD70AE6D38DE903097780576ABF33B77E912A1
229369A7CC41B036C2A1F94E667505D6272E5CAE42252F19C69C05DF283036E31DAA8F8BB862
6EC9C940CE563D49269BA2FBB13EA087D4CA17134A2ECD9CCD30FFD5C8B38A4ACC899ED3B4DE
58631DB3B240E1E7783868D8B1BCAB29AACD2741D93B60B358541A2336B960FB9AAA5448474B
EC223F4CC7D7716BAA4D372D181CE262EDA55054D22B26BAC4AB95914A6BE391FF77E0AF9F08
FE324CB387EFBD5C379DC77FEFDFAEC984DA46430052383FAF2938B170A150363250891406C4
87212466727685C98104281FDC4A6194353628976EF3F99AAF9616022E5536A7C67B62155EEA
BA24D4BCFA2CF2A6ED89AF3D71D5F103655D8E0158E66D263AC300491B2511A8C3D78DB95B68
E8EC2ECE2948D779900A4156930729736675B75A15A5CABA334D6FA8F5CE59BB442F69FC4F81
07FB59A3A4550D11A05641CAA8F517251631FB2FDC46982C18CDA7D910F0384C9C069AD424D8
0434E2D096E9F4B85783EE7CE5FA2D6349CE04E56B8E54D42824F1DD6C3DCFB49AAEDE74CD27
D7E4460CBFAE5A17963B705F8FB0752CC069E4643447CA2A0BAA72EEE8F29419BF09E353300B
13963F0B5DD22834652E3FBCF185635243400FD0A6F7B6BA64C604FA4BFC58CF31D6A83773B7
8FCC22CA7E06A519E691499C0BB44797A18579FF6595CB2130A9B9657074005FFBA690376DCC
DA69B93CEFAC268ACB43694C0C5E9C60A806E9C737F6184B36771D41FBC6DD601D17D38FACAD
DE8D7DF9D9D0546188388A17DE1212843C8751F13D969B13C680ABED16CD9A5CA09AD58F94A8
F1B5A3C18418D2C43F1118967C982E35B8436099099C36478C332DBBECF0A080801F9DFA9370
C8DC3AE9B1CCDD75CDD251FD0DF74C19EF2BB9AAEBB232E9A0ED0BC69E84B20B358912FAAFBA
9C4A26D32644C680768BD0F4F9C253E14748ED7FE2C095140492F303794D16D38A04CC602804
FA9C1FE1313ACA0F2937A7D30C3132215D32BAC22049BBDFC23A6D18E16C72481A3F372F64D4
035651B2DA10E8843F692F679A54F33B63FFDB1D7815213721460ACE8654665C7CD5FB89C7FC
E1360BF6A61E49602E1CCEEC94A18A2505D25D0CB95D12C247CFD22E467678692CBAB00BB15D
2355C62D0F793AB32A3A65A8CD9331F0AA794D98901D5424CEFEDB062E7F338330B9D95DFABE
E513C6B2356B10705B2BA650F21EA7D33BBE7DC522CBF711B2E5FA682FF91948367CB5404E0D
997F1A82FD1AA72D87072A6B0AE21627A82CC4486F753F84F4C01FD874D19B03D4DB4F9D7E3F
88D59F59FE3CF6B9E3A7E33F8A560F7EC0D5970EB50EC0942B01F83E23A25352FDCB5B19AFD0
5D2758B3200550114FA05BEF17ACE4C42A357A7A0055397FB666F2F24A28416B74C3A26736E5
0BC8463FF7BA58640A1AA29C95BB2B4E91D80D5CBB97C83BE135A201F20081C6DCE6825099CA
54C8583F61BA07CDA5D0D10943BFEC6FB073606521C1F31F3F23FDEC9183740AAFF05CAFF477
DD7ED960F45CA8A8A423ED3D48235250CD01AF906E05FD3A28FAE11492A3F0E5CC187602A29E
669CB84E19DA01500F3A38772BBB2ED0CDECB076272D412814B31BB78F5F1522E2F96111DE22
A2808EE2C01C7095E01D1869F6487F505132DFE205ED9C040A9A8E5517F7C143D82A990292C9
6BE59D5DA12266E264905ACF9FA9FA0741F0F4425290D369E23506CF92DFE63EC557819079DE
9D53553FE3CB6BAF59E7E229B0B5700BE143B0F215238169FF55204A15EDE026D31F783FE35D
5AED1852D5F9E3168931A180390C322D4F3C6A492042018C88B9E4AB9BC5D160A51167F1197C
DE0168A59915C7FE54863EF9CB147EACE2BEC439C9A518A2CE32CF88AE5B08BF5F0B5A87AFAC
3914CAF1EA4112D1FF06CB065267A624D70D760B80E4EF517071FAF91D108246BCD12205257A
48066EC3B1AB708BB50DB97A8A7F1D485B636E87AC024044F7F06737A864DED5A0B2A1798846
5A52E923322B45988D335F91F7BD4A181C4FEFA0A4CC720D8480AF4E02F3D2471A58D6435AB4
7BE415E8CBD37EA99E61CC21DE250F20BD152822978C70E624A27028E1F153A199B997988E07
5222026DAFB0354796A4B044714785AC0FAE6B0EB9536B65A0444036465A6DDBC5CF245A08BE
FC6E89B1A2D17C87206EBE479BA6395B422A3C33BAC43BE9B52FF5A5545E2033FED2FE60D893
E2991E9981F342BCB1E0F89A0D5881459E1BFE6BE3FA652BF5F5D432CD11C0674A23F74FAFBF
5F9740A81F9572B038A82F59FDD0784353BE17C36D763FBCAADBAA92F7D19B52987E6EEB11F5
E1CE1A6E57B4BD6246AE212633C643BD14B90BBFAC9EA2B220C8845F37D93560F31E5B19CE90
7052C9B3292AA1F24A6ECCFBC89FAEACD8FCAED983C57C361D81C420034255EC6132FB645DC2
7F1E5075D535AB33E72B347C6FA2F5A6E1EDAC8D8B40436D07A732BEEF6F129EE4A660FDC905
3AB05EAF292BC50766625B0AFA3B42D5E6A619D2E3D7A3374DBE3AFB1BCF9122CB54526165D1
D59A3DF54F59664E4CF5B3B2B26E585BA83C69FFE8C0BE36F56C90DDFD282D78998CAD5D3455
A52ED86F1BA90A8E18BA2EC097CA0A7634A2154D94B1BCC9473CD337BC412029734D1A0C2F29
872274C92659844E174215501E7607864A7ADF4AAAB1226541C71CFCF85AEA97448047DC8817
AE98EC5146AC703B48CFAA56B6AA8C7DDCC3416493DCF59FB8A3722C70B14751EC6D8374301C
149637A02CCFC1E9B28F4458CBA8DFCD3EAE3D1BC0BD8A3AFA436428C3AA2DBB334E6191EA8D
4A5A4753FC1F15620C12412C39B85F7D631C774CF6A423D79989FAAC69B46B4C2295BB8CE20A
05E411F87F33CFA7DF9A78D070FAAEBE4FF60F89BFBE3151856B3A8B4AC8DB98F335612BE65C
228F5EA60640E08FF51532340A998E017DA0415D0D906382EF33340793F1195432E2507C1B0F
B9143604CD056F150B12E63460E19F6F1DFD90E6FB50007961B589CF760AF92A049854B4A043
82C50208974AB808B2EEFD439AC69E68B1A42B69FCEF97E92B2272BEB13AEF27D58EEA02BFE8
687DD2AA1DA5849C077A4ABC53A9FD0DB9B3C5E14B7349591CD5890A42D6F72527E699B60AD5
374EEC51EE0E853A80D5B714B59B9482E758B6545532EAA43A4C39F846E518D647BA39F9CCB6
C46A8F6FDE1D2562EBBCA5018CEB9880AA90CD18AFA2803D71553857879813C8D229FAC466B9
1DF73F820B00E188F5CC9DA939A2FB63535CCF1E13B0B5ADE9E926A1AC7965253B6DF858571C
E2FAD605754C9B46AAF5C08D03AE83054AE0B356B89F374B3071D5C9AA62E487B59363B5934F
0953FB9B201EA5251089A2541794CE1301F2817FF53A55449AB02CBB81B8D1BAEC61E85050F1
0BA6FFAE1A8C2364FBC6522EB0311DD4BFF2A3B55BBDF4A971F70FC8EA6ADEA4D36022E3DE35
3BFB72726863E68B7CBC380974E6770442EB4B6112E4FB669A04FE36B45C1E046E78E41C0C0C
04BF734C70E40F73CB1F83AE9FBF3A1A8DFEFB80172AF4C557FDEFD3DB0C47C0F94E989DBE57
AB4919CA4F57F5E30F2E62E16F33B32ADDCFF587B96E44E533C2B5FCA428E4425F2E82E50EE4
97912A4ACF8B380E8F033AE89969C87A1942736845240DB752AB5641FA65047BF710D4AB8E91
154BFB6E2541AC80B88B8C0456FD36FD02A245A2F65308C6269C6F8A0F3173D060082F04A828
856F01D400E2679943E7C1C02EAEAFB0A57E820AB9D37F5F69A5ABFAE1898A35CCA442B114C2
9758B96C308C7D8048C1662B5F5876FB01D3BB063B23AA0F8451C35D055129D58FF08B5CF458
113549EB2DF1E991F20BEB0FFFF976E024B51678B95AF7CE9048D92C010EEB90D7BCE8B25434
1CBCE47B0A7BAC62CFCCE16E88ACE7E4160239D3E23206AE2FCA2D35BA40E5520822D3BAE5AF
60E26014C2C2A364E918DAB1E51A64C792D43A3BD711D7239AB21A362F1B31531ACE927A169E
D3D6DD4807F0C6AC77AC052DF6C915355DF24871DD4E22AC5EAFFCE6DFE9CE3FC110EF3674A8
B85A0D3447B6758AA86D96E09CC859A2617DDC0CEA8746A02D19795FF377B61A360EE9B88910
5CCDBCA63F47E448B70B6836F54284D6DB4602A83C96E8F352FC9CA45E5FEC18EC0C5F9682D7
D90CC91936A840F1320D1538CA11E47B69CCCCEE392D37C302154479DCECFD484587BAEBEDA4
427BC554EA4212E3BAF5562419CC1E39ADE481379F795131C6B9AAA8F780297E632C4BA29BA2
2087E48CADC58D8D2A4B5362E1D90F9B0654D0207626D7E53551A1B291B8A053E5CDD1AFE7B9
BD33A4D5208F5469357B87CA290E3BAB4693D439D003005BFD8769AE2274EC40BF80AA2D8829
2691603DAA72551C4C48DABCF8D7FEE0E765185F2131EA22F720DB27FC70A58CD69CBFDBE4F3
1E219F9DDC411448A50346504B4FC367170A1A3662FED42E57251E21283D0FCEA963CD62D2E5
8FA44CB0F342DA8706ADB56A2DEE3E184DA3026C03AF3243781B018DE4F67278511AC243EC2D
25BA814B3F242293DA7746C1D0CD0930708EEE1B01E0521181EAC01CC6AC73ECEBB1DCC23164
0D576664902989AF0F7A51AA874D3FA6C678D7204DFDE8A3EA1A97A550633BCCD6C85988310E
D65F784D130446D8196EDC260790B2947361349D64801EF5DB80E373DF130455D78EE8A1493F
FC924749FD9B8FCB657270072D85DE0066033D5F9F8A399571AD2D37F034D6DDCB1BE272B237
ED5D9F353DEA917FC5DB58517B0DE68F4673038A36E7D0D2CF8A1721D168C05324650B335528
071C139A47D9F88C432FE88B266439074F9209CBE70B1295711044946931CFB2A030D3C5BBC2
79A93E897F9428F36E5F26F729EE80045E6CCF0D6041C052D8323324FEED4127249DD4F54CEC
5CA4183BE06EBBA091A729F39C19826B8170AABE50D51F2C666D5C867E81866C6F68E7F57531
28B4EC241EA565D38704E41DAD62EACB31E078DE3BC0E0E14211D270C7CC6644EBD087B56A64
D9711C3F2562A1E4C5AAF37180B85E968374D7B6B059C3D5DB001F67BE24248A9962CC2B2BFB
FEC99FF46267DA5BA57F9BE5BD88E416977A9368D76E1076A9FB58264049CD6CD452957B999B
73088052A14285E77FC7290C43A8D26FD54726F493A53C3C1B3734A956144757AEC98C8DFEEF
C557992DF57303D673E3780810718CC88DBAB84F8673831AD82B5FB074FBE364604B2F00A35E
EBE7DD52661772380773CC086F12EDEB1FA63A8EFDAF5CCEAE27A9B045BCD12DB384114C9A39
5CA7DF68BBB7DC580DB1D88C611F7058277FF3605D20C61EF83D16AE19CC7B603D4398215307
FDC83480F32DD4AA7BF9D466CD8A761ECCD1DA0CC00D5CB420444EABD8555C8B2425150C5CC0
52391ABEBD670C9A6CC0F085FB079636681E8B7686C0E49DC6BC183BFC1FE0BF0D047EC3928D
A869EE0F9FEAABB40D18226ECFD03D982BE19A0A9DDA19E2BC0ABAFB208799BC9268D974AED2
BA576304226864D5BBEE3570BD58B5AC56D739AC96F429250F640DDA287DAE5C2DBBCA73736F
991BFE2C447A7EFBD64D72E6FDB06D7C98F743B37073052E7340A93E0C6DFB9B8B9B750BC8CE
FBF5445CF0255ADA1DD84F0959035C7A8A977128A62A8672E8DEB5932AA498A33557FD639AF9
B073452CC8C76B06075B12EBE168661419B57867E3FB261D49C4F6E9F67522C8B387284E7AB9
B3385B54C72D957BF0D6DCCACC1178356503E1CCB0BD590688071AB2DCDEBE2D63419E265CD7
0968083DF0A8B56FB86E7D6E1221F071F580772538FE3856090187E40795274374B8174DC0F4
E20B4B1D5A2449FEB466FEC133C0DA1B1B41F5A38104A5F0A9CC3CEEEB1CFAA18F7534DE348C
DF12DF83C8D4B695C0B0A82C5355153646B85A0EAF02CCE453286DC055FC48142F1DB5D8FD45
8342A35D62DAA9318B940ACFF349D2763C82B546745D627B34C9D5328806623B79C258729343
05FAE0D228A047A23DF0A893B6412C6B4C80C4EBD5917A38AD5E05B22FF05B84FEE897C28826
ED85FFBCF6C296141A964B85C08DA862053733830DDFD0B40F144C30A00A6E010BE460EE0B6F
97DBC59E63CB677D0777DDC8ACD538AF43761F14D030EBA29EBCE8EA43658A5AE55F69A73CC9
A17C999208D5B78F7EA0E80214665D3A4A63D83AF94443EFE46F31F929472753C2785696660B
E4FE514E4F4864B836F0AC747227F899B4A8D3FB00C2997135A1160B7B06AA1A131FD4715258
DD81E91C84A6A8275F92B259B71AC055C2FB889D309BAEEFDFCE2B626EF704CB94953AFBA41D
84D99B98335156E80A73F35E3C14902A5F9EE805BA04EF4D26E4E957F3CFB3BA9C53EA8B23CC
629F4279F9EA6EE86FDAF86B66E646547C9B492CF616D2DC32B030C13312557E8504314B0EDA
8BF857410CF7CFE74843961272F319DEFCDC22D57666947D2B1EC54544C6AFCA68294125332E
775CF03A279E271AB8C8E5C2DFD996F37FA37F96B5DDC6D403F120CDB06883395D80EB233852
CFAAEAAAB5588C021BA1F1623E59E68B90E2709C17B2F7FD1EC73B606654A145E10C5C3A4E69
7D52A071976157ED19350258DC7216275C34348E000A664ACF3A5D40149D82832A833AA3CC33
E9BBBFFBC913DABB75B7E2A026BA00687ADDBEBECDCEE7E4D5A62CB81A48C12A2B86ED304A2E
CE0CACA59900D444F86D9B035996234FBBF0293C77F4391F8A27EAF75D00A29A7520AF77BB0C
45138544F2A08E4DF0EF44504F51BBFB909F6CBA437CE23720DB1E2E97BE20BACEBF1CCB17AC
779311190CD7096AA90FA57D10734A752556B6ECEECF70AA3919C2C77F3935BB0E3F3B05A3F3
71A828A6A489E59F1EC773830C0D2666FCA9C2AECF3C1CD05D9EBA7E5745D7050451C3A733CF
D5B6DD359732E8D4E76908CA33652C0BA542CD6ACEAFE9061BC7720696CD19721F2B671836A2
AA5021ACB69A66AF8F580A9DAD35FA31046AF6AF33201E7F46A3890F0F8FE54485B5E81AB77D
C82AD90DA7120949598FCD8FA11DB42BD2FF0CD93B197207F0AEE1FFA49C05F4BF91AC4FD3CA
D057C2C790F87D997CF4E73A57F554994169B8B6C588DDD8CE0286912B39A94B0E234BECE8A9
6D7B4D2A8BBAD54734944A9A8A6DA9D1A24E63D059725F08B0331B782CDA087B39D5B693A0D0
4EEAE14801BB0CA11AC758997E7DF2CE0C0740F2D2A3BC7D07FD17263472B47BCEB74421D747
9D8C14A14FC17CF5CED09CF717D58E93248CA1ED631BD9B6FD4511A640569333729C1208A62D
518A6B22B1943FFA50352E1414609C70FBC39806061A41A81DE11E44C256C603C8DF3520B365
B07B208F52770F41D12996D4EB9CC4DD984DB10200E7CC75974D00006D691E8F2DC2D68CB53F
5E8BD817C7055F8EB4FE229A546801568CEC1BE7BFFF3FFF92AD5B0FFD51E5ED907606658400
F7D601C2865AB43231E51E65FDE075B693E0524BA678B50FA392E8295F6E9824B294F7A48710
2B40CDC7E3E461EACEC78ECAFF9F82A3B84E19AE54ACEF85DD0E56A357B7B302184B85B52351
5EC15888F0829F467A0F541F8E59C064BB411C5E77958F7D2D20193F5F0B3A01B01B5095AB6C
54D0EC76E243028AA653A7F8491FC5BC5B73527A42C7EB65BE5F461865A2BCD4D499D75107A1
88B6CE465676F8833F49E729061F060D402E6685253E1BFA892F7F1A019BA9CBC9452A08A255
C230140568C2E1BE0E6C4499025FA6E6DE28DE55C1BB42F6935D1B4EF96D25784C1CF721E0E6
ADE0F042780C8ECAA4D618366CF64636E722DD31D1EF37FCA2E2009C0A3FC6DECCB5D548869B
33CDAAB5900035192B0BE49578452F74828A5EEA7DDBE06FF8AC7181DD505B52F07554A20DE9
8EFD1F935B9E91BEACC12C4BBE29C0A6195A40D377F89C081EE74C7B317263FA73E4F17EEC3F
FBF34A12B73CA948E40DCD65329C9F994351E2FBB60302FC22B92468D1AA66767095382284A1
2727CF3F767A210ECF85C16F29D93B3D389F221A05A66F532B3EC6F6BA84DE0D465B17176322
735E6C27BF0CFB700F41014D784BB9B7B726BEB4C02EA22467E482536FA4EB93FC343BCDD31C
94095F1606A7FF72DB96B9E74A35869926BB98400C0E2C631A11C4A4B70AEB2FC3C3DACB6EBA
19E388D46FF725124D06863D79FFF418F86E8A2F8BCAF495D4D1B312FE52ADD646CF6339CECF
F1130AEEFF89C8024C473E4CCA55D93BBE1E446EC09C095CEDC11EE288BD9B67E4FB11B69767
B4F033AC504F2B9D36FDEAAEF8E64BFD66BFBE6BCCF97A6D36232022A3AB4F507DAEB9F6CF9C
51A367FBF53C216C540F70519DC24BE4E45B4A5505493B460A32233910029663DEBA50554E0C
231A0873F0C351AC44109F73E7E1B76BB99518E25AC4C5C4403C71A36FEECB05E355B424071C
5223D3C970C3E7DE92F4818443EE949B02FDADA65A8AC61F346D54E8E6DB341AE0F99E778373
F30439E80CC3C0BF1227BA997F0F8BFD1BB2A02C6B49A52E5AE2B83FDD5DF8E3CC01361559E7
F89449B5DD29CF46BC063A76442F8E1B722B8AAA5DB2B58C0FBA3E787FDBA29EC29B9F453843
F8F3BC6889EBFE5708639274FDB2DD8EE405B22807B841EBE9068A9C6DF281AFFD1612F46A03
EA56C4142C997080D02D14C13340FBF406600E5AB62C1AF1846AED0389715B4297AE995EB147
AFB67EF9B258C7FC1D0D4E050B57D190D626C8A262EF895FF7875A44C8591D9579778B9F962F
EB65467ECC9587DAA9DBA76F8EED6B9F96BECF5A281727FCC093412093ACA1F01DBDD6F59400
9B8CC665A15DDA79A7D51F2397BD6B4EA476FB35F82C480ED6F5F2CF6D20C4A9F590D399A9F2
AED79399B2F043D68F5A73067EB8B24B25DA77E905A711AA78C331B53BC304C4A89E00B2707D
F83DF080D5D461E710F598FCD130BE6FFC17A0225F03C0958D58FB48C1227F97CFA83077A80B
7DB22C8F1321E02323B2B35ACC70970BB2643D5E42795FA98F517F7665725288B185BDD1E689
7D8144C711EE9239AC7D1BD9F088CB5970F207C3319C911EBDA88C95AD36D7D067A5F208C710
A45948C0F980A3F308456F33DF4000117281107AC5B180CD420CDA53380EB1E273AA7A633044
24B8B94AF55B2A8987B4CA7414B3BB0BF744451165B32528BF3209653C0657838F7647183483
497FF2CBD25D4B3347CA7E29DD29EDE355FFAADF1FA2E5E7AD85E2F2751EAE55AEAE71A94907
22F6545772DEF80EE610C0137ADE25EA4E29DC9FA5B9CC9394D40D517F0C82E33CDE655BF211
2C0582E9DAA52DB442510429783189F9768FD17D6BB2F5AD9D48653D0C4FA24D7D62BC8B29C5
4E606519F688C0C4FDAC2C932ECC754A614B4CAAFF06F6838707517C4113D165797B722AE518
0E85064A229E57FB76DE3382F8A249770BAF8C86D1A24E1DBF1AD62352265FF90AE4F0B81CFA
F8911C0DD7A4687B35FCC2AD2238E42AC50D1B787B9A7230680457D6522B3F81F3A5E0F92952
DD775E6A8ABF546D28F678097946D41F100B6C949F652DF9DBBEF585DFDFF77336BD9375BF99
5DD6331C9368AD203469E2121DC214A1D14BC88E686F39F9232C97872EFF39CA0EA66EB2AB26
E7F6644ACE9E5987C272995E4D208F393AD8E1FA5710C433E63A42E96DFCB7B078A6B60C1BD9
24C7A6783F8BB420D070933AB28B2E234C49876153911770B40D646BE209F545323ADBC8957A
CAE29A936D4A1CA4CF881C27D212336EB15C0C478C0768491F4E4CCC84CFA9DABFC8A4E47DD5
391E8DFB148C2A42F5A3D81EBF09CC4E52936ED51210DC7D3ECB4CBCEB99C5507ED557D2CF1F
6B34134E6C1744777BD7E991A5ECCBC09FBE8AF6B584E2172CE683C9F6CCA44DDA58B04C8070
E6CC96A8539C2908871765B46C6D564AA445E377CA5E84CE2E389D83E8C4E8F6F63D5AC181D5
B788C903DBCC02068E09C643213B1DE7DB1E3DE58F85A96DB3B83E4A0B703373B6EBBDB872FD
DF8FBC0AAF38C93D0298E227F22043DFBBB65ABFAD3E60E40CB69F108F6179312FE251430AF4
09469F969FDF4D4E8543D1462753362E46F6E3F38F6B52718588694F9BC81DC256195B089C2F
5A8B8AE47E8ADDC1E169ED031E5253206C31E6F547FD3C9FD7215D4600FF361FF6BA5EACEA00
38803DBA4E660723A78E36A745A2BD809D613D86B53AC9312B11261F5EC792FDF2C1AA5D0BE5
123E11F433EF92635E0DEF412543B5D6011A9F724DF6E86366CC80359B4DCD7D393BC9C95B89
1FDFCB5325EAD88F505FEC98D957045D6EE85F9BCBE73D6AD83ADD0BAAD772FCABBEA7358B5C
82A5979D5ACC8B1FA26F27D2DBA6C883781BC4F6731E3504F408929DF315CB0EF99D6E4B0C1F
9B08F3B16B8AEA8B5C15DC5E7ABC429708A688707B89EFF5773C10AEC71FA3C0737056262619
D181226B9A0B509A73E1C70F55008941830D7193824935426658FC51377A3BED40D210AF4126
0C6BAE3F8631BB14EFD73BDEFC21018AFB810EC4E75E946A361681F4D443CDF18E9A848B0373
413B81379121DAA618C4DE6062974DEED48677C09C7A0ADFAB183C0D8548F668372BFB722337
CF20E0F19CD0CAA4375249E4E1C5DAB674CB6A1DFFD39C3FF10171257BD7E2D4577AC2E5C80F
D66AF7E2BFCAEF05172C72DE8533D61A8B3B77CA23E7BCF50CB351911481BC73A1C780D8AD80
9435FEF402FE31B76AA8704EA4A3D9246E2615C649D3F36CCEAE1C6C8C6602DADDB63BE9E7BC
7EB204B35B2930A3FC55463AE0080E2866608A2BF156BC00D140FEC3B04BD9675082E66651E4
F8ADEF53A14AA912EAE3FD16D5E29130F3E51C9E19CC5A37377E6C5906D73A88A30EAE6DE570
D45194DBCB048D024A3E803A8BE2627D3C8354DB7D844FD32F84257FFE52133E32B1B8407F74
C0FFBA764F329F27861DA3588773606DDC60B9F3A8DBECDD16BD8AEF5DACBB5E88D44C3659B5
47F18C454F35BA8DD7A9EA6564FD726D9C0B7BB9340A443156058CADFA37C1909720C2A978C8
F431E15EF229567139F9228B912E25F2218CAC594A08CFEA15171D72F978F03A49B4E3AE7866
B9960F79BF1D6FB5608F51298538FF56F9E0F403C9648D7015CA1FEB4C560442FE35E8E5D31C
646B0637F9EFBFCB256D2C741A23403D88E9E0486CB62CF90AEA0AC24EA5E5519FD4A86B41E8
92C54931CA061A4C93821451825776CC26B3409D8B3130C62D872A48A67560BE044F1F1697F0
6C0B5A11808CBB3192F7DE26AB520DF0039CFC58BE4EBF1A2AECC882CD293B87771306E3CE18
794A75AE6BE391BFCF0B8A59697CC507CF2C4A456B4B233FE209AC39BBF7155068C99CB2BE25
F0B755960C54ACD21CF9651779903E1C8E7AE7A5853BB26AAF69D43916E1560D54E40A14ADEB
ECB18CE848C151AAE3D16794D8C124007818545F022EF2A1EC7EA7490B556E1BC7876A46732E
61F514848A196E5FBD4142A341A52FB55AC8F5014791E5144CCA96D3D2999B3D683D292AB86F
C5D0CE9D55763D9DDB5FD6428B52423AFC22AEFC7F5FE1A1B878A0758CD4E59FCB099DF6FB95
F29EA45BCFF043D707D570B9F316929226BE1A54B23F28485A9DC8C809ACA0076865019DA221
9AA9FC70628139F8B8BD64BC29C119EBCD23413D75931262FE53664EDCD93DB31DCB25A2AC09
0B04A9EA8CF7833E34D1FDC26B3EFE65C086233A1A1A1C1FD5791D1F358019F7D098EA72EE27
0275CD522E72F4B8C5BB06C78224BE8B8056E11B2513EBFA09A0D155630EAF2AA4204F77ACC4
AB83C205DD0559DDB46FB0BCE65B16578830BDF37B3F5589CAE730FA6A11EEE8E6BAD3125F59
FEEEC295A5F2E05C2E3B6CE16758A080C5B6878753C7182050E296B3FDD446DBE10F9FF91E83
8B4B4BA0034E134827F941EC393CBC54111627B9351DA460D2A6D5D81A6F6144DC5A5638ED70
171594956A838661237D07D7DAEADEE51AD0F09771DB822299265AC292AFF7C49D4ED442A685
106F25798CF38FC48D5EB13F821A7156C850A20E9CD8179702C91B9BF425F370F5479CE97030
F369E32D2930658C7E4E6E4DF87A4EDACC66ACA3B3E6502F9CD086D9A10D9AC7B96C817A7643
7D9A5D653D6575B4FBDBB06510E996A0DDEF3E3012E9F948A464CDC28A352F999DCEBCD83B74
039531F46A7B43EFA9012C20ED0DEAB569F3905BDDE917BACBFEDFE88EE6E9832F040D84F7CA
8AE2E519A53EA988A3BD0CB16D3A3292C27EA51BCE3F84CF5371A7CC10512DC5CE2FDDBF7453
36B2A75B056FBFB763591481BE5D6BCF9FBEF914F1DD1A1473F8C8A72697FC4AD66AD69AE74D
A230EF274FC148E45BA67E61919BF46C32CC3D8B2E2889446E203B4040BF3FADA3AA9408F5CF
074C25F1BF20FF4ABB074592B054BA634BDE4A8062F63DE02CED708FE3A39085EF04805C862D
E1604A55CDD7B282FA910B3035FDB41BDC171D3D0781695DCF2F9DFC86ACB8D3CCCF32C83B6D
51C6A87FAE0BA5B527041D3B3BDF74C9545B0E9F0666D0C35F0C8FF84384876934FB6FBB6CD3
1FF26C386C1BA290D6C7AC672EEA424C44D84F1AB18D4FA41A7C8A08592733067371207EAF33
F13CFC4DAA1F5CC16F5D5A919127CB5E44A3E1911947C6C4FD86F001D9E0576221F41DADC527
35D0224F3DB69654A8C4B6CCFA9B4C8D6E92BD0644614857A06FD32FB3D98041794E01A39D88
4075A946FEF57FC8E566BE276BEC81F7BFBD5F545FEB3FE8B0C936E8D8C4128B418BC958EBDF
E5CA02901FB054B008626520AE6E64EF87C8B3D5A73B839A8EF115961B89AF2A71C6D0E14A14
1A5210F910ABFB1C7E83CB8AF3B2F4CB2B76A72F28E50F668948AAA20D0FCC6071E125888EF0
E1D420E18D33B4C946646348801AC42E6A89B117770BE3B067E8B2B9AD9F6936BFDE738BD5A4
568888D6C29A5FEF9484C735B766DC66002EEF699F91ABA21EA8778290899F335D794F691919
8AC9041BC1A9D875DDF91BAAAEE61A2BE1B80203FD7D7356EA2EFF7382F33CBB07D656F1A941
2D6AFA5144674E368CE1ACA4BFCAA3386933F14A3309E3E6B03A056CBA6852D6B6E617331F66
0B47B01BF60F0B2ABAD06BC2573FDEC871FDE62AD6A8DEDC3C8EEE9460220AFF30139A2FFB80
B222C3DA73BB69BC304B37ABC3B44DCBBB6EEAA3D9137DF428A56306F3A0C0F79F8665355B4C
B71A184533DC3D35F9BE1E5A9D5A5208AB5667465DC382C6B681C4C68101A0A46CE91B568D12
76822C069527FAB7329BC4D93E5BFAAB8C418904930E28259A6DB57F28C0EF1B85169A7B3BEC
52B4B34B51FE6F95141E9DC55B9516435D856ABDEDC26DF75B004E78492031CB5416FFE9CDE4
AF300FCAA08E8CFF6BBBAE0CF7E2DE402EF503BB6CCBE7FDA50987088460B150972676AAFCC5
C693B7D3983A60FB306094133197B58F916E5DBE3B2AEE1BFB570AA3CABB6B44153EE8AD9171
F6AE40FA8AF8821A617F1C62DE38961D4CF0AA6A6014E6EFA65D5586E83DCFA9C80481922DD5
FDA1B86CAEF2449EA5006EE07285D89C8A09F416DAF70F68D742B1F21D001F8D31C6A336417A
527BCA496CC4FD6ED7D001DE59A44326B53F06D1B269D4570980A13A5D7A8D48623235C539EE
6FC8564BF06EF0701AE2A8CB09BB3F72AF8634F11EC26F7383DFE8B72A09C3C335C60DD1FC50
3C4476FB0DB86BB858C3F148D23CD69F1FAA0BD8148B19D5319AF9711BD69C72072975C90951
E2B0BF44E0EBB7869AEC436BA402F32EF3CAE3D7624F2CB09A0954A8A802BE8F83FC29CFAC3E
0A15AD37A13D08FE3AB4C08201A3B060E22E4B767DA23E0063443A16E675C3E83867C0AB5053
7F126EBC5E276EF6554F31B89C4D292FBDEC55AE303F2A62E0226544EEF480DA35DE3CC606DC
71789B9538C10A9A1A87EFDD0127E243F306DF25F353AA35A149AAAC71B61DD55B30CBFD2B58
C4C93130766C9CC39EB1ACBF2B86822FCCD4E2B70D4FB4E6AC8E9665399BB5CDD3DF09C4C1E3
94B2B2515891601E9AE1ACD5C4FE9BA858C592CEC2D80D0F9E7D8450F9DF486DF1BC8B865B44
A2590CFFADDE516509752B659ECBFE98807B42BB1E79709BEE4117B2C36DA8D5D52A66738983
54422CAC1DF463CEF092120277146457B1C54BC3BF884B0077C97287B143A0A4FD9EC1F42A27
5D2DED2084FBD5026D0B75662210E42C25524EDD98DF8F374176EF4AD7C4218F529BF5772F11
5384F7B297611D6FC711AFBE43186630EE83512AEE9D61E84A2537C0CCC862E4B7A7EFF0D9BF
27C163D8C08E86BCF60B0C90E58DC43A105B044A1C53FA13439467057BC2C22E829FD813A0E7
A065DEF959F3193FB401D3D87AB7B54683D0DC3BAD4A530FEAC44A63E208382031BA1C8420A8
17C5C2583513633206A2DF738C9EDA192813B1AC108C04E05735234173EA7C14D12EA6117C1C
E7EFE367DD75B795B68A2335797EEC2EEA29A46EA272B67E38DDD5C2B6AD9E3B59C037A9914F
5EA5852A32818E3DCC65AE021F0D308080460EB7E1C410DB05C67E9FAD5773A93DAB602CBDDC
F9092AE538E1C879C0FF1D540EFCA789FC64358C5FB5F066BB6C30413DD3E90F5C1C28700626
DACD1E602793B95025D0D49153C1D36FDDD8171DA27834788B3B7F3F338E71DBE5A532D3C5F8
944844E70389B8392F8483A1F4E8590B4ABD566669E21EFC691E66D8703CA5D31BE2F0F5DA01
F3FF9DCE4CAEC9BAB0C4BD89621588F2B2A6A02E286CB4290B895BDFDDCB51316B248DE9445C
7E6CF4D18BF699142D6F5D682E0A069F378DD9A92C362D1C5E19C63C77F21C2C3F4462F60FE6
94533757F829B6F57D007843CB22217CBFE9F929D431E18FEB621E450AAE0DC90C10A3C563AB
88C1023FAA8BCA390E2597194E29DF540919D9382387F200F51D42F99928C9057A63777B3DA7
2F26C917054A964EE65C81D52E0914A7E0BF757B3B07B93FCBF4B9A39CE117683807965BA1F9
8DE922A226D564C8D19D48A2D51D7EEC607464A6D1F55724C33E35C905F71605B823C7A6D359
BFDBAAC68788CEBBBA77A41A52C10036C60E683F8D0316D8C8E37E24F4E80460BDD16F382036
7B6823B37F2581914221BD590825BF1B5A480AA077F44AAD68952E1BBF50A2D75CE489DC318C
0C21667E4E1466356DEF034026B65C27DF125B0B2246A1F83A97C75982F557F4739960F5426F
8CC0416F1F997C39D6A8C765FBDA9D9704ECBC480BD63FF484F5FFF2294BA6205B5C198BD5E3
5121E52DA9CADF557B4DEFDAEF6C657D4503D2D527D6E8FE6EDB084D6770572DD51A75595957
3191A719B4F6B37D63F2830EE459B9F323EF6D5F2AF830ECB7B751A27B6ACA11D8971A735434
B1DC2B1580148C18BD9AD265D39C52909ED8A57631D1D7929BD7A265A929D6E75D25B93ADB0F
8637753D79E886F451F41FC694D1A2A12DD723C045120848C3AD8E37BD1CFB38EE9B8A561A38
17B30DEBD83EBA10BFE5E07980F832FC4027985F273645E96C19C1A74ED0ABC0555C5ADF48B3
9147D72FDA940CA8D2B46667AECF1BBBDEF9892FDFDF3A38CC1C9FFDA83D9B34E680E088BFAA
8E39B049DF8110EA9937A43746B97DF67C86864B18F16797F266EB03C3B8B1D08FF7BAD68B12
6CB980B1D0E1955FD8FA8529EF4FA72E08344039EA5EA41F752DD3C66BAD15BC220091C5EE82
68F6EA9E6E684AC5A675CC671F6BAB30C56C6B6A4A7FD4955F6F28060DCCB5FB4B00BA077905
89BD05B2DB56564A1DAE5084E7EE33D2F7CB265F6D9CB904580809793B99CBCA69ABD6ABF313
028C9E8E71F423A5BC19851C5D5F0BC58BC526021123E83B4B5AD33694414290F4EADA65EC84
5EF90CC7BB784AB25549C28BE3140A289BD163A08D4221979D679A2735A34ECFF91FF7A4E58D
8A0DC2664B12E21642D84C06D5BCAFB5BEF0CCA3DD5443724932518CF9D855CFE752019F6B33
E0BEF54E64F76D88AF25849A46EC65DE3DA8007E4DE9D245A20D83598737B067070347FFD057
4211E0EB0552CDBF57EC468A63F9E9AF2C73FBDE4511BFBC66B074AE90371177948F40F6A300
9D64115977CA05F12A043A41AA699FC87BD04F022BB3BA9B856CBD12BA3D1800FCAD32251D03
E730C6F0872C28108F7E18A33AA6EB490FF27FD1162D9852114BCDE22ED85B4B67872DEA5B19
B46CBF794B9068953FB74E75B9F8F62B024238FE8D3D2AD952D6E0CB5B65C70F67AB2216FDD9
264ED3E1F628D7F662271053440C11D57641E9CD206AD034426AFC710C2261F2249BC53FAD6E
417C9FB4D2CF69EE988B19B128C6058B4400277C3334B3F56F922E9FBC79E0670A9EF73A1F7E
AD2782F305BC8C5413CB44EF6B8AAFEDA7BCDAF1B5BF749C3B9F799ED5C286F68E8D008FF9AA
8BE9FF76E3AD75D3A9D557283988016B89042FBF612D8AFBA25456D5660DA31C8DF25B94D2B2
EDB66BEBF320279E30B5483F99B154D0BA512C2069F2A87F902F283615737D694B9ADD65BCD3
0EF360FB82E9BAE684645619F3AF2296ED312C1CC40960BFB92EE2604DD0C13EC61F1941FDE2
275E59866B349848C9A18D032217807FFE0266E17AE653F41EDDA7E36DABEE2DFDFB197B9FBE
CF8C044B8792A37CC83A0343243942F8DD38EAC1D24B295F1942417A979959541C394972CD8E
8D7C675409F7D1051B1034E260390597D84E4EF8115623743F3094BD75A6D5438AE7AD128DB8
A496EE6B9B95C1DBCE8887EF1AB22E29CD17EEDA48B57206352EF7683794B8406906B651196C
13A6E9CE582E416B66786377EFA27955E85102D6730931D55A06F649340BE9612825635CB60D
9534121A5A66444FA51C4A09A30CC209F09FF64980E3E83F6B5DBBEC4AD830805823B784D9DB
4DFB87AF383760553AF30B5BB988E18C5F455A853F5D91D30FAB2172405214491B699F9C6EB7
D7368622C4810133D0C4B75C55363F38D6974AD27EBD5E480CFC0013456B0C54F65B51BBFF2A
A75DE3B262B05FA25AA1112DAACAEE9722FB241E0C4A966160EA9861FFF7CA13B4785A654E15
32CBB7118FA372EBD41E963C93AE5F9D4651F56508C1E89FA34548F72C946B4E384E9A08ABFC
BA3BBE1520255CD623EAA863BB988F635BDD9543B607933EADC0EAD5E119A11244CDC7470539
FD0E926F03CD32D9D4FECAFD3B6EFE823B3B05B94CF359AFD938575D2E733716C4E932C04651
0B0DF620E87F6F39B99D738E66D3383CC151381BD7611D0B44A1A40BC90340534512B3FEC4CB
E307498C773A253481105700216A5BE3CCE442E00219A0A3412B274DC8640CC4E759FD2823D7
F48E614391E5059A1A126D0A1626FEDCD738CDF6503D9B5C876AEA31298AA287055C7C24F20C
CE51BFB14B010C732F84A13B4A1DAC571DA1948668DB9E786AA9F4DDA0DD25528D785BC0EF33
CDDEFC80747C7EF0EAE30B4D687AC8EE8BE325A8E43627A2846CE3FB199F593CC83E320B8A34
254D8FFCCB45D04C4D41FEFB65AF2282D036AF8B614656EEEA10DE9409CFA0B3E6296030A0C4
91942A17CC43614A5D43EE2EEB2F2DFD2156100C452F1725DB3B7C649FCD5D1CE8080B148497
E8E57492DF0122BE6F1FEDB9B8EF8AFE2F119FA2767E9D451CBD637CA9BE588A0B876EFAB92E
5D238EA9C05EA6D92115BEC4614E05F83DCE5E70CEA9ED15936C20275FCF467FF3AAAC5DEC1C
EE55D9805A37AE0BDBD1EF8C6FD7A66D33E29828EB9C0BD6077F862206C6A1C734916811A2D1
89AD5A48E5BEBE377E000951BA74B979CFC719A03FFAA55A458146215A33BC58A42B6D535E4F
15B1525B8B29524188CC192F923DD9F8BAD3D203BE862F0193334CD2546385C55B5E5959F7E5
7B2C679D176823BEA88F86EB9F2FB5584A821329EC7328AC45EE0C992035D0A2EF6C71986E95
E0EED9B4390B39A3E9EA4A7D79E72936A0BD4722121722621A05662431444C0E90CDF102CE66
0D977FAEAE5DF63CB289D701A434F14BE992BFC1F336C4A43CC77CBF8843929A9A76CF768B10
0531FEA4712B37C97B1773A36E290182548FC42C2088D028A938C6A2647C74E5FADBB36E2AB7
5E07750A56F08F626B1A7C41F8642EEF04EB5F0B5ABF0A563C5DE626919FEBAD2B5297F58204
C5C5D2ADAC3D3136FD33EC5DDD98C3F521E53F836B21DC8A8CBCB6456A5D971C94414C7BB3E9
1F7AF3A1B6A7AAF71F95926B04C288C647E4A8080D91EF3404FA04042A584765523C6DB40FC9
6397AA843FF4BE0BCFEA2ED32B276328BDD1EAD7461E5FCE8D3AA3BBE3183A6B4F56A3D16A86
20010C88E82DB50E3F81DA8447270CC745B708E42034880C2632DCB85A4C6DA78116226D8571
68A6C9C73680AA674B1360DA8D17CB8F642D3D0CA2559B1E452B1D5641BE4A664D4528135911
0855E4F957762F536E4E8CCFB3D9CBEEA8C0E2AD2C1A47E42C878AB16E0DC111660F54349AFB
9BE5605C1F821BD68C941C42557C1736F7DB2D37B17D49C0A77153E99A0C99A4BDD125F3FD51
3F3A1A496AD3E17EF623979BBC10DED32E319C764F5DE1D1DA61C1D1053EC4822495093ADC33
FD9BDAB0A8BBAB65E0A24F30BE9D60048BFC29A832816CB6D543FBC850104B6322C14612FE26
DBA327A63647BB3C71D2F4ACCBBB798EAD3404BCABCFD85188E875967D677909BB797DF62255
5D7C5ECE1D8C59A5767257A08A6803E3CA740785FE5C0F3CD640E14CD8629FADD09522CE1DF5
7BB7A7E5C10D15A6435598D1F0D112B9784D4DA881251C245FEDA1104DB6D3A6DA5A30AE293D
14D346F93EF45D569959513063BE28C1048F98C1AFE5B1433B7097C0CD5711FB68CB54B8BDB8
C37046FE5505667CD4D4BC92F357D58458D5CB06CE517AAE44F596B83E7AA1CC8F17F14BC536
A6554D22B446AADD28EFA83E8469DBD1563695C781B030ECFCF3513E4029FBF6C109C79A9DB2
B5C7636ABAC5A4A282B74B359376DA840C62706EC64D7D41802E5065F5C3A364A01455BA6F2A
A1B2282E3B81CAF1B776B1D3863F6E02F68F0A91ADC7B9B6E3431142DA75663C9AC606D55514
7BA418E7CB2B2C379587218D8A7B71A4CE552C980E95DFD8F9AD95C429F66DA569FC5E1A61E2
DD1A6816FA54C7BB85D0BC6533A52BB1F4E4FEA68505D1CEC0751E21354412F72CB5255DE620
690676CD20596869071B48D7B8843E5D2C006DC2FDD4461C4AB3E0B1D16D16C4A270765AAA03
DBD1930B131CAAC997F41BFBA9C3220B972FD5B724582EBACD95C5C6BB2F8357DB8ED353D010
ECC7C586F2D25DAF23D8E38DAC200E1D3725D40D7A11F35EB7FD572AFF074E67C3C0A620F972
6D4CF7535741F9804885506F5D0311E349388DD8892B42A81058C34BC3F8E4AAB67590316973
0F448B4B890DFE3789EA67DC3A58A295367D00ED283E50A6B961CEA798C075B5FB914F6CFE0D
A8B183CB5CFFA5AB0CAEE6E321E08DF9D67949BF1892454ABE8E5C1ED844FA3668773C733F4D
0660575E2CAB415746B8255BAD4F8715A8F01BABA2F92DD593B7B60DD17E5CE0E3F8EBAE6A05
17079961C4A1F8B225C968BB3786581A277DDA386F3AD05382340EA03CEBCA7E0234444D7085
454B657F6F3CCADFC192B6350F241224686B23792341B6DD7A4B698991AAA3621EE07ED1B642
63D4905C112A0C92541E16875F7224B5CF48327FBA64FFED5BDAEF9355AF9BF50216D607770F
A79D33FE90BA99787F0077D19ED0E5197C5F3D839D74903D47C958A58B36E92345E84595D971
154489B33A584148B4E0EF976A66E955F8763052B5444177E960EA6E6D3802DFC402DCE6F405
4BA3A9AEA23FFB106F82285D1BBA6224AE9A5F33EC1901F93673D6CA54BF0F096C628A920C4D
97F2B78C010453F2A91798A07A9C0AEE9DA864044C6FB492483C51D4107663289BA772B77175
7603F4A3C5A862D7FBAE1467DCA7792A2E56DA65FBD8F35E67109ED12E04069A32368E9ECF65
1C5134A06616035C9B784B900A7B6B96FEE2537C17949B4CD471BE647B50A1BAE48FA28D7DCD
F8878B36226EDCF8B39F49AA35BC1AB0016A23CAE8C8BDEFC783CF35E43F76052CAEB4751732
6652B03FC748EBAEFB54FA2B5E0CF3E6D07A9AEBC3014EE2DF9165BF63253FBE3D0FF297EFF1
0E6B6260AFB6B09B6CF522BDDF10C077AE16ECA5B327CC6876DFDF38764FE0E7FC100A4A773F
BE2EEAE1BF68CE9095AD0FA4B465745E4F7B836AA7C59DE045ED5F9D99DDA77A7C956395E9BF
0B169AB8E649A4FC66954F2E65342FDE5324A7C506EF568008EB73D7575EF5B796A6784113E2
CB3904BB51B5EB93FC0960E6A5CA6A8DC3F7E8002A7272414676B237D224BACAFC8AA2303EDC
B48CF50FE71BEAFF551831C166BA538041D7F62B78AF227D153C673CDA5D841CE6F168DDCD8A
113AA4DCBB5118C51AA70961BE08DF8589595E096FB341AB47A1EB7887B0B430743E4AAC5348
E406CD325C3BF7E838707AEB3B058EA17CC8F103B2222A426B8EBCB6FE7EC44985808BFC64DF
DCB59B9C8543EBFBCC295A6945825BC2A3681C161E111F266DE158776EFB087C67A29373C7BE
DCC24272E4B28B6209CD78FACCD729A8A5EFC68DBC32F45799C581FECCA978D24D7E85B22F3B
B1926A9E9D465B00D5CE2BCDE26E37A91A212EEC76F7D7C43AFEC26B84FB1203FB9EF604CB3C
BB2847A09C2E04F6E0F9430860BA6837C18A449F9F96A51EAB42B1936C876208A61EC17EB92B
53CB01E1226AE96B7CF57ACADD4D2D76356EC420561A4CA88F5910263EC9178A3AAB165B15AC
C2AC07F908E3B6F37D88BBE780AF15114D8AC65D95110BC8BD9D25C7DF3310933D9625BE765B
14D1AB5032EE9F7D6FB24FA2AB57561AE1FB564D8D2705DEFC9FFAEF7303A99523DBC54B9C79
A20D5F00A96D5A21D2B4E2D1FBF36AD4440D6179F5E7E672E7BF45B6FF1C0787101223E91C14
8DA2AE709B7E9C6F576D1599DDC97DEED39831930C70CDEC4B47E899C3950D9D1EA3C94CEFB1
8080C6BB9D46AFFFE13C4B0FFBF71AC75C79879437E22E634602776DE13E175D9EC5FAF508AD
F4D443EBA749BB4B50A1F0808BE0519D977F55024212C4601B86C2975B96CB8123412A33F762
9916648A8097A2C58AD1258520D987CC57F712BE770BF1A118B56DB8AC89A3050E62C98F6D52
09C2A668E8BF541DF27DE2500994AFFE9894BB56DFC60D8C7579953269E44CDC3E2B63E5C288
8DADFFA3F9AD060D67A1A94599970279B2D45DF85ACAA6ED5A6B11A809C9E067739295AA2DF0
A9FFE09F07574252FFC8FCDB39DFB64B29607038CE4D6F0D7B84AAF5281F7414998398FEB89F
DF598EF5B2D7A617B373D7BF1DA47A7F9ECC5952A39A71B1DDAEDAA45DB4839D36A7A60047A2
1EDC798AD8D9AF7A8580610CE3A96A031A0C7CAEE7FB68CF51EAE29A899AD15410A692AF4CBF
CEC43B424A92BE2AA7ADFFCCE93AA8C1886476B1A72A4E9384B2B59BA5AD1883654672C5A93C
C2426959B1E1CB2F820A41002A4BC457D79D46D11697CF0AFD6B7A23B1A9F14F6E1166D59F99
6162243BF998B1C64CD3DE638187097F33D7C1D23F78D3392C9A9D260281045E264C342EE708
FE86466F6F7C1E8E4ABD455226A535236256F2056D5C6EF9D91F340557FCBF8393CB982A84F1
CF9EC1EEB361BE41FAE829A468459E5A995DB5E0FD1AC9EAA687F26BD04216E7BFABCFAFADCB
AB3A8BDABFBBB7BC47CE9EDAC7A148E1CE35027D8A5D573B13DA6FFEFE2940EA94C94B4903F6
A9DEDE03EE1723057CD83CE8834A3C8A29A14582CBC930990DCDFAD1986895F348036656FC33
41CE6FD4207C17D5A210ABB48372E73E5756A7E0F50132826FF9EF97D56530EF705944ED9A4C
26EAE0F737A50ADB2CC9099C90F2D54CD103264D93F4BF6B5A9C7D837B2C73C664AE9BF08172
805CEA546FC3EB1C71C68458F8153D8EF41ACA46BC314BE963A921196BE22E3162798FFD945D
93893BEA902309D7B2254ED921AB8C480EBAB7A389EFEE5694934D7FEA330B7D98DC67F13308
A73A39C7A9C87CDE598776E51CDB03C8E650DB86749EE8324BF66D1435EE53B1B7502533982E
474DB9F6A0BFF64004AD995065083A78845A4EF2755626CFF4D26D7D3D7FE5BFDC5AE420DB9E
615411316BC5AC1F5986DDDE4783079DD06DB4C9D2E28E523C054F741485CC99E9238B1E39BA
CC625FD94ACA6B54605C3273C142805D0BAC9F39A99359E52BC92C0C779C4A4C10BBF95DE79B
55CC736C80AC8F6F7CD6D0A316E7FF1946E15F41CA106A02BDF6F33C2B83016C121D9330A0B7
FED025FCC47554B50DB8CF7800DF1F33D7D5D52C2B238F0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000

cleartomark
{restore}if


%%EndProcSet
%%BeginProcSet: cmr10.pfb 0 0
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright:  (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments

FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/UniqueID 5000793 def
/PaintType 0 def
/FontInfo 9 dict dup begin
 /version (003.002) readonly def
 /Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
 /FullName (CMR10) readonly def
 /FamilyName (Computer Modern) readonly def
 /Weight (Medium) readonly def
 /ItalicAngle 0 def
 /isFixedPitch false def
 /UnderlinePosition -100 def
 /UnderlineThickness 50 def
end readonly def
/Encoding 256 array
 0 1 255 { 1 index exch /.notdef put} for
dup 0 /Gamma put
dup 1 /Delta put
dup 2 /Theta put
dup 3 /Lambda put
dup 4 /Xi put
dup 5 /Pi put
dup 6 /Sigma put
dup 7 /Upsilon put
dup 8 /Phi put
dup 9 /Psi put
dup 10 /Omega put
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 14 /ffi put
dup 15 /ffl put
dup 16 /dotlessi put
dup 17 /dotlessj put
dup 18 /grave put
dup 19 /acute put
dup 20 /caron put
dup 21 /breve put
dup 22 /macron put
dup 23 /ring put
dup 24 /cedilla put
dup 25 /germandbls put
dup 26 /ae put
dup 27 /oe put
dup 28 /oslash put
dup 29 /AE put
dup 30 /OE put
dup 31 /Oslash put
dup 32 /suppress put
dup 33 /exclam put
dup 34 /quotedblright put
dup 35 /numbersign put
dup 36 /dollar put
dup 37 /percent put
dup 38 /ampersand put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asterisk put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 60 /exclamdown put
dup 61 /equal put
dup 62 /questiondown put
dup 63 /question put
dup 64 /at put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /bracketleft put
dup 92 /quotedblleft put
dup 93 /bracketright put
dup 94 /circumflex put
dup 95 /dotaccent put
dup 96 /quoteleft put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /endash put
dup 124 /emdash put
dup 125 /hungarumlaut put
dup 126 /tilde put
dup 127 /dieresis put
dup 128 /suppress put
dup 160 /space put
dup 161 /Gamma put
dup 162 /Delta put
dup 163 /Theta put
dup 164 /Lambda put
dup 165 /Xi put
dup 166 /Pi put
dup 167 /Sigma put
dup 168 /Upsilon put
dup 169 /Phi put
dup 170 /Psi put
dup 171 /sfthyphen put
dup 172 /nbspace put
dup 173 /Omega put
dup 174 /ff put
dup 175 /fi put
dup 176 /fl put
dup 177 /ffi put
dup 178 /ffl put
dup 179 /dotlessi put
dup 180 /dotlessj put
dup 181 /grave put
dup 182 /acute put
dup 183 /caron put
dup 184 /breve put
dup 185 /macron put
dup 186 /ring put
dup 187 /cedilla put
dup 188 /germandbls put
dup 189 /ae put
dup 190 /oe put
dup 191 /oslash put
dup 192 /AE put
dup 193 /OE put
dup 194 /Oslash put
dup 195 /suppress put
dup 196 /dieresis put
readonly def
currentdict end
currentfile eexec

D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA0E079529AF9C
82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA9351BBFB7CFC5F9152D1E5BB0A
D8D016C6CFA4EB41B3C51D091C2D5440E67CFD717C56816B03B901BF4A25A07175380E50A213
F877C44778B3C5AADBCC86D6E551E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206
742D1D082A12F0780FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC54
3273C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8569672CF
86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E72907924A5AC880DDED58334DD
5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A2255C050CB39A389106B0C672A1912AF
A86A49EFD02E61E6509E50EE35E679448FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575A
D61BCDF42E2E421AA93E3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92
FD60AD26D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24D36E
FE7F5C4E5B5C610DA63A48E26BE9FC0C5FF9236372483C265681DD26303B962BF46BD2DDD7E5
AB42C609D12E83D21A55046C3E50E41C605EF2AFF78F91B20F9F17D90DEE6171AA799ACCFF77
E3E4D9793D1D8B51FC0E8979B8E2752C9E72A51720C018DCEE02736480DAAE55F5F1910727DE
3B9FA8D0BED2EFF3BC887AAD72838B7A894541D923D3D253139CDD747B185238B79E569F2448
3C423BA5EA55860289C4CA80924224A52B8E68CD15D47487340C7FC925100F08A0DB63EC18A3
2843C299201B3FFFF69059B10CED881ACB7D0115D735791ED587758150742B0A23AF8FDDE157
C4571039D537E52E2B4B069E0AAF299D4AA3A36EA316D2B55479B72886C76C1A876D7558FC2F
B0659E156CBB253B8466DA34ADE7B1506F8DC66EFE35DCAC71451F8A426056E129A9CF21C41D
7DEB5EA6DF7A72ACAD4BBCA3E4081320BD7B37609A4DB67B5DF63E25F490B8DE0666D17DFDD9
3AD510ED7B41BE8B0F4C4B2C1348E047C61623CDA21EF0E64B393ECA207B812A7D6F49CC29D7
0529F6829881A092F98C934D70CE3C5BD2E48C3C57AECF77B55DB937230737C3AB65C9BAB8C1
BE847A4C61D1C0BDCDC192C225F1FE28B68B279CF3633287286CC18FC886E8C711E558D4961E
D9B901920006C48F8795E1947EB63B4B6A63BDFDD1DFCA3E9A354C37AA33A24990FB70FD2D36
9D1FC5C89A6BF0851CAAEF43215B2201EC5E09432D1DF364F2EB570F8C001011A4FAB268E40F
B630082F53AA19FB8C3410E049F1F8DE85082ABDB8ECB5FCA536F824AAA39F968D3585E469CB
5872794236771BA5320DD8CCF58E545B9850865AA31607B8C7F0EFCE4A0B2BAC4F48EFD4B599
FC52C4B9FA6AD36E0FCCD3155B874D4FAC8A02AFD4CF6546842E31928A8806EA44C7CC03E03F
DC1AB9E47F4D455F69EAF32D6FE4A3070A728B225687761E0F2D48138DFA3B2735BEE1E654C8
A6AB0E136D4DABF9B695F5EA9BDDE81619A7875591A7F39B6493FFEDC7C4812E18C36C85EE59
7B7FFA207AC57ED8187F13B9997DF098620557843F7F9994FC561D70554B8509C137FBF881A7
7F86460F53CE7BFBBC9C94167FB3D408BBF95E7672E3DB32F8CC2BAA731D6CAF1675DDF0F055
62773D9F37E0A473FCB74CD67483B66EC7B42CF841625B26A32201C05AF07B1E0E3687F260A0
4F2296ABDF3E5DF972AC56470AF0B4538C0B4ACFFC2C1B5309BD8A2510D228D9F41E01783E63
AE1CD0CC827F15EE2783E818972E418C75B03C1EFB4D564A6D26FF8C8B0FF6DC625647FC5A8D
9D9EBC2B36EAE9C8DD412D6639278F6432C3D9AD4C6C478EEEA0D4A9F111908A8F37ADC0C4E2
8BBAA0E5556A8ED46850A673851DE8991338E59B906EE8506203110B315D40EF4A59133A6CD8
5F0FF35123176FB801A6464FF3F77BC8828B782C9B8A18416B6CCFE557DBF14856A0A3162A68
723D538F95BCAAF9BE7B369226A72C401612FEF48D59C927FD8265DF9D29026F732491709CA5
0B9FEADE55F701A62076ADDC0BD478EEC530F9119D2564C87F445E9B8C529AB3A207986F75DD
CCACF3DB48878853A1C3B27D8590E81CE20F1271DF019E9C2CE34847B2B69AE9061CEA57BF2D
3CE3DC261D5955E6B3BF8B933A345B3BCC7A302F7614BCD0C2B6E1F3078271A85F232A5B3B9D
E2E7F048CD36DDFC316467A01866276CFA8D0218ABCFB0C543752EEF59635F48F92EF7CAF035
C7363BE7436F564D1B4FC37D47A2096C886CFD6EA73DFEAC3762873E9BAC2FAADCDAC6D83D56
E4EEC7DED6B1B99D6DDA7CE8C35C6FCA645940DE0150CEAD4B6463EEF7EDAA509B463D0DBEC4
3E7C43F9FF16B6A8688723855B9937FAF16EF89688373C84DCF5A57CC309E14B7F72528B1209
E7F276306FCFEF4DF98C72F7A276840EE2280B88E8F20374B964199B6CF1B47E8D9125A85815
32FCF9F45E9E3491A9D5357D37B1C23A2E5AD04E02D74AA80E35E77847821B987E7C4FC3F037
C9E95CA50067EC8F16A8BDDB8412E7954BBD115147EC48539EA6BEBD1F3885A4D12BA3233833
7728A2C3A8F496B5CAE086585EE6ED1B20EA3FABD269D4B786C3EE0C3D9BEE58001D4D174AF4
E87A7FDBBE4C3D270E2689840E4C4B6113BDAB8878126DD066DA8E0251A6AF2EA6458214B249
809ED92F4EA6966D40D4596D86D6F05921C7814884501DB8A7941ADBA5702BF2B0B9A852B7BC
8710087974F2FED4A8D7B89E643A0950B0258A41A74AE4F84C004F9536CE1E3DE91E8E050C97
C32B0AD953D0B8F4935235F55CEB7727F9EE6E45931CD281D31F5E2A52772C4053687F7A2D14
B2F7815F8B316EFBE767FAE0636F44BDB1BC9B27AAE79FDDC0038A30C02B86D0E98B16CE7A7E
E8BE6A3DB03296C5B05A51FF470991B74CF893343BDD4A2CAB4B7E28AE4778B42EF31E789CB1
AE28A8F0B112E399D73A388D3FC41CF8C2EDD7E3E6EE21BF01A833214F2D2E278B8F701B9A90
68A34A78C34FAA85E60242233CCCC5899AE65F026DE91A4F184F0E626721C4CD3AFEB6E9A1B4
AB410B816A49A5E38B4137E36B95E2FF0EB3A3BD4337137096E4062BD7D13C5137194CE85A14
15C9F73095EEBAEABF2929BE8F203295A2AB6792D1031CDF4F96A58DEF44B848B687EEDD4239
A6FB1944CE6527523FA3641693B1C128A675F98C67C2DD8A3F1161A1EE2A7BF7598D3A9EB560
A94B4E8D58D1C38BA3D58DDE6D54A5F49AF3E03B9F7FB23617001E0CB03B7938BCF7681F7BD0
721FE1720B723A7DA0694B9A7637935655C5F147BD7FA15D1377500F7F192337A9466A74A591
7FD51163EAD5F26BC9867F2709EF15459F35710EB47B86CA032AECE26ABA9F79674E30E0A8D1
AB25099101BED7FEA68EBAA28641F5EDE00D0C15C4FDD500DB5C9BACDF18B320B14F7B836A06
3BB1BA30D382B2A8F3583CFBFDB1777AECB306948ECD8D8C9D3ED36FA733C15E4059215B3838
54846BF6F7596006D9DD1CABD8E331248AADF6B8C206534BB545F44FC7E4BC9F3761E9849CE2
8C0E9E5D99325FE771F931288D989C43138A805663A9E63F4738929B5B03123B6BDF0A135C08
CA3AC695B72E92B5667F6F0FC8A7079EEBD572CEBA5C21720961611021E775AD8DD8E6E7C4C8
5969282A49464913B85C47F7D3A875548FA3139CB5DBD78FAFC6B7074E59665A568B1AC49456
4515A3D8B64AD0B6A4CC6A186F35513289519403E937BE3FC969A10ED68694E705376B718056
047C006B73FC88C87B3D84BFBB15E7F874CFF12CC2E8E4A8B70F158DE0C15B4C5E933F0011F1
F654D33104AE72543A11F588F56D3ACDB8C83A5543C2D5B8B2561E56F53FA9749CC80D846783
80F55175C853698614FEB73B29EB8556EC0453A03AE894A752DDD14AD72776AB32D13D3175B8
44F643D04AD36A6B97149D9DCBD8B7F1F50554ACDDEB0C9AEA463A65AA6972C2C384CEC24344
C89DE7BD914549A9A3CF9139E94FC75AA93DC591977FC3519391677A3086B7F23351AD6B1FED
39E7129629880870D0BCB035C9F9BBAFBB1EB9A822F583439BA0A907B5494007FC9874B51CD2
7802332C3B411BCE6A544153E51D0458E56880367EF4FE6AA8A0970445FAE112A40F4C48B943
46F937F35AFBE27C244220406F7E2DBEC532C1FD99B713580ED318951F90D0E88314639ED7E8
B886191D6DD3FF0DB44BFA5A7BAC6102783EE01911E05DE270D41AFA7944FD6B420AD5BAFD3D
02C95FF77D231DFC977823262827BE5B601F4F3702A528BC5BD4D87A789F6C976DF65C4103A3
5E20352801825BF2AF07300F359A673FF845E87F391C058D8729F7109B379D8AE27506CB3DFD
16F6298EFC66ECB27A9D5F59749E6264180B0BCBBD4BE0B13D8D4C3344AF3D6BF4B73C29D63D
C19208C751F5F319888D7D4049A29126CD28E985FCA986CC33F2667F752A0B2F175A99F90D31
906AE108E82F5641386BA7F9B360BB3BD5D5952BF2167CE10AAE9D41FDB63F4E69873D633997
2A2B5F6007ADEA075C8EEC10C090C74647098439BE7D9F48A9F79C2104252009B8E6C44D7508
192D58DE42B0962DD1B7CB6255F4B67325A456C069CB52B905EB491835D92452D0781CB7E656
72DD43D6D3762E0FFEF0F1C8D63163631A71A2963D9617F96A0C984B7FDDB933456055829138
6CFD35E9736A942C7AFEA53E1E4937A5AD56E66E88E9A8AD46C70349173AB81DE285A54855B4
16DF01D8CAF03615014386AAA4C94903D6005DBABEF8F9BF283894FA8C71284293E436605856
D3C4C7859978286B021F0F696F43A1EE8F810E15C7882EDAF03C5B574BA492AC5633BEEEA3F6
5B521F12FD11CA4ED32D0B666253CA496DAA243108947445C55CEE5252335E6C43FC5FAE3524
4E811F81009F514442DA21DA2B4E9608BE8D594520B1062A8AE3ED07D00F031D443D14126998
92DA2B252299EEB4D9EA8FF3B9D785B4E490DD6EEFD55A77BD924AD6C289734DE20F59885194
050BA0A60182952CB292C18BBD65B784C913C0DD1E131A31AAF2C4892C664EC5BF16E712D342
25079AB4361F4C7AFA56E499CB6CCD1FBDAD41B89F66A8A82AD7963EBBF5B19F8352241C0B5D
F1E13343A4955B47E88DED9E0757651AD5D059EA86CE7DB05F95BFA92DB1D1F511AB1018AAFE
3BDC4CD6379D797B1E7654E5B772BB6C910C7C405D0264CB1275D49937C3005744092E5BB3C8
B40CB98F3BEB519AC3D3AB76202AF6E08D0D43DC379E2583342D33C3323A5B696759DBBF1B85
F638403A43113787B0A5E4F988123EC6EB768F4A745FDB4FA0DA70D2F610E6AE1CCE290C5FFB
6C4FCBE5520B43C36E5F966F4355E7D67662B4DDEA480E0FEF650C65A0F0660B608A61C623DE
59F75FCD9E5F47BDB5800E2A49446F0B142677694F3E8BA4257378FD9FA8C8A572C6A8EAFED7
9325804D4993FC0A513CA992F8D4A8305C2394D026DEF0262D173D150B2C662B9B9C6BA7CB2D
04CA83B136F9162C42EF686AD2A31F40066937D6A04ECBF632F1DDEE29F414DAF945E0FADF1A
231752FE7500E57FB0E22622FDF22E756DE999948162DF7B9BCB4587499613B6331E03B79723
09490642DE2EC4F72A1895DECE59BC117ECC2717AAE37EB52F1167965FAF5101AF2BC1C31CD3
DD17596937BF73D697F59A11000FC8FF94912DAB48134B39567817D9419FD0D3B231297D1723
331EF3C334582CC012A78CFF55FB19132D91A74353632270986AE645B8F5C0584564EB8C71A6
E5FAA52AB96FBB210571BF6C1A2EA223EBC7AED8FDE47AF489A429BCEF68407F3399A882A567
E70B4FC69AB47D6C05097DEB3D912CF1591C6B82CB6FEB1F72C135A4CEDA64C4AFC62DC84C2A
ED0B31D0EF7F8962DFE28D7E3A91314BDEFD9FA692422529A6679F184537FA92BE3E429C289E
9A1834F07117A0E7F1F4FE6862870165A43BB9E430ED07FAEBBEE0469EC79F9F539CE25DF296
5963D2268A0ACD1FD54BEEE6AB200D52EE7CA4D49A747530252164D6EF5430E4E0242EDDE595
5C5FE7E3837CAC40ED2A6FA8F9801F9986471EB57E1F38CB3A82A382741B4ED3A575C4967186
E99D2C3C121B4C91C8D50B26CB97BE9AB4BB224BDCB7135145914B06C9DE48DC53A69CB4308A
5491627279AB90AB26F6E14DBF51AB0E4A9BEA64F916F1643A10BD91FD365F8B774E79A8383E
3D5D5595A92A79120EEB341213BBE6EE21957F6D46E654B9FF6CF65EE8DCFB710E326DCD9A48
812096D3602D5C2037033B284F266A229CB1641405594DE3ED1FB6DDB1496EA0598E131D2C58
60474F78CF937F03C5D1CC29170D33A7F68B8BD1A601423002DD3106620E6D8C423F7AC7682F
C2F4D97189EBC2B19E7DB5ADCBA62D17A0D4A7A1D4B3E727687EB9638498547058815EE958DD
81DD937AD19B1492D773090B1324F18741EED75C8CEA47A75119435FE806E82F214852505081
F02B43ED1BC67FC4D1F5A6686665035B3612CC4E166A646A786A7B0BBC54030252338E496929
B6A54AD47CA90CC54AE1AC275E523982ECEF5FBB741D00B65981667FE2453FE3750EBDE33B30
E9540172CA5D94982EE1E99379D6CE06F82B65C423AA95CE42CB0730C80AEEA34CCC827AE92F
AD3D38D19B5966A48184F1182A47397C12475058E3CD011D0F0CE4DC30ECCA87406A1F1D6998
93163D8D8E604D0B987F8586F4B746C38D4BBAC2257D0D6844B31D532F66F380438844D45AE8
31226DF075EE6CD391A2DAF954BCD4E03E9981F829B0965AD78EBE8D41CFF2ACEE386DFC8037
958959BA8B872A7DCA0964DEC6A7459D4206DAE3ED201031DB2EA02819D3C12DE56CEC8F9A85
8BA6B0FEFF091F827AD6FC5F117904B0DCA0AA3173FA49C62BA5A5CADB35F6487801660CFF3F
D476819B149294EA953DAE6A4D55F9D3AAEDBEF13159794E128AB0B557CE775D0429E4D4B7ED
D061CA689AE0745A19658E04C2CD5DAB627F801B16A4BABF2F8BF2EA218916F82F288104717A
F149BBBAB11637311236B540A9FD344852C8384B87FECF7D233F8E7D0B88AB11EE92991FBBDD
ECDE4765C999D2C4EF8913C1BA706FD995B05199361E754E486963BC9CD80DB42EB766C43EA8
EFE81CCD0BD8B5523CBE7CE1A709AFA648817ACD9AF2985E285DD9DEE2A4E0C77B13BB59F689
9BBAF1038D5A0660B358015381B30731415AA81E601F8462C7F80D1171D0F9FDECA392AEFE4A
828DCDDFA642174AD8C48CD6F3ED28A25DDB0F768C5ED07364011A5DABA61BA49AA10A71A260
AAA7D5DDAA898831B388B738A836529A8F7A123C89D9E36B65DDC7723843DF8F6EF79D8C7CFC
3DEF3B8AD39B3E4EE0F127100EFA9AD45829598DF39441855FBBF98D82008A7B64AF0A919051
B5F4002D7B3E4778ED61B9B4A0BB41A1E212E94D9244154C459D9FEA7D250F6A789D944B0741
35F16C063ECE58708EBB2A2B286A71824017C08139CF73320F32127B2633140570A13420256D
BA85988640CDE5AA4A2448CDBF277D74115B22A1380C54D02FB55DC394F720B75E4D7BF4799F
06D7A9742B09E13A1D9F9CE503B5666A480E6781DD2AC4273925E4733FD17B219B1AF8049B7A
F1D37327A28311208158CF2EFCFFC0F10D731E60C19D08AC9C16F39FB896F5B432D5463F7F42
75F6ECE30944D74888511C34BAC3ACAB64C7116AD6112ECA722456734A2D016A3F2B41D60A4A
97818C16224A70ECD13CD6CE5AF85C2FD5460C3ADEA16A3D222752729BAFAE276072CB3A3A0E
653458ECB394763865162146F58B4259676F8B661E90CAFE3ED0836D626266D173FBB4B4B4DC
6E2A0C02381114A761189F3C2B6436F6E437590BF7075AFAF72A5E1DDA9F6C669965C39D3134
6CC638D2C3C32B415E13BAD72C3EC9E458FFD5916E902DF3C0772DBD300126E3366CD16105E6
9C676DA925A2B9219284D91DA3BD49A7EE70E9035F12399AE9693AB539E16AFD38956234C19F
733625FC6FE892E4C2476717C6A77397FB210D86C97EBAC165F81B1E9130A49529F728E31C96
5BF2615123BDD600E8C775366F1A60C239FD3649D435E03538FC0CD4D5855E3FDE83BC432632
AB3CCE1DA14B6133155383EF6400CDE665C7DF79FBCC7A4425EDDA2704AF53CFBEA2046A6004
C94DE7AD2DBAB0B421E63B4A5F8157CA9AB9528E8464E6B8A2FA8B5BDD20FFCD0FC6A5714706
9194E00376740082F1317E62C5E23A4D6862F0EEA28BA7D1476F609C27A9147FA8C3468A4947
C8802818BAAF5D4F33C9E918A89FC415A0BA6147E6650E09640E1A5D2EC97518BF39E8864C49
65ED91E251C9B90166977C9390ABCF5429F216CCC8688BC3CCABD5C3EE7287DF9D4F0170546E
37FD69981864FDB30C5A3EFA3BF27EA7857D8237FE07171056BCD399B2CB1BE4EE0E1809D304
2B7CC8E67D9464402EF4A7BA2612F343F5EB6FD5F7DCD112AA701B8DE9E2F17118842C898580
1FE8179FA6618A09D9A01862A2AD4D40E8251B828B5BCA97C812F95A342E23C186DEA3A96154
096BDADC299C1DACE3EB09ACA94CB2B7F3EB519B7C209007D9B80347E971D8C02C24E2162E8B
EA9275E4F1DB6DA1915D4634FFFAC353D691D7781A15EEC3D66BBCB322FC0E5E2C57F8D74699
1808645E015E0632F38ED8605BABA3AC007CADF7984F8A0763A9D322E2ADE5F56A56294C4ADF
C4F456C93D7FA41CE8496C3CD1266992C9E60B128C7AA2C5C67C49B2D16F3CA00B86C57DEF55
F8D06628A0DBBD11D9ECAF2A50FFE89869F929FF5CA0B91186D308E107EB2BEAB7480E40C62C
01E1BDBEAF62F00E36C57355479178F345B1EB3B7E87807B32F8AA06F288848338E43DB2E6D2
EC92513659D3D113CA288DC767537CFC71092878E139B28407B56E33EB79B1D46C9F1196EF10
AADCFFE5D16393E3A6C5869C39C925650D8A62496EAB5C67EA1FFA3C85932525DED921D6AB2E
B62CE8DAA2F4381657E2F0F053DDCB0DA23B418FF169EE4D6392B3EEF70A777E892F5B7B20AB
83F907C8014CE6EE9C2FA010D4F11307135A11CD8C2E0F6EA93DD9F0EF162FA24EB17C99F375
C65348E415F460780114F9B8AE5DC1DC1215163B15A17F811E308916514EE8A0596D3C962339
6E5689F57D0AAA9E205C7C32C2724172E4F8F04F60FB89D5A9EEAC9E36EC07C05050A3E0FC13
5DC4C6B5CD8170E91DF79604744B30A2CD3DEB4B3A98274659361D233CED47B79BE91245C85D
E0838FB8478B1B678A8B20552F93E3FFFC77BC547B588C74F9C22D546203219903AAB916EADE
4D598287D5145728C12387DDC05CBB7F4138AEE81EDFD8C7A0CD6BF9BEFE017F4148FB0A1218
F2750AC532E975687D8908F985795BEB142DF493FF926171B0E25FC71A7437940A7A2192F9A8
F216FF2692C23A0807EC188D449C867D7B28D6D9FF15957194ECD03E78CBB9963A0E6CA8AEDC
E35163AE9A0805A1D9494A5D71F7F951F199375ED5B4BEFD88CA1A2FE45A37211C866ADA6842
53B00B122A6F0613609A399DCB43E5A857C0E850A953303447EC30AC83DF6D4E53F9912D53ED
ED956660DD356A02B9E177CC9360EA48F10601E067D8283DD1AF6ED132A2873ACDC2B3039B29
8C9D8BE918437C74889741A2D0A398F1BDB9AC7526DA3686A7C2425A36CF9DAE0FED314A80C4
D80AD24605A8892F1E20B401F3A783BF474B6BB3FC9B0D3049E24B9333867CEF9C81060EB6E4
442F00A41A4FE88655F94A940B34183F088ED7A1FC7CC863D116D3B956AA065922DC674CDD36
AB998F1B0C313619AA4520C8614D4FB1125CB75850283A44B1EB69C07BCB9DCA47E2A97CC920
F95A82E581DF07C3AAC37DFCFD05135054717CCAAF6D21D0E35BFED91C2D4250D3FA4115947A
C4164A80A4DAECE90B15EEE9289568800EC50781674DE8F7C00C0F17D72C03B8F77919CD5827
33B90F83FA43F8CEF4513A5FFE86C500FEC4C4F9E32DAB05B4FFB0432DF191F731A9D3463C43
12EA23A04F6D5B1A61944494AAA1B82268A3E87FEF0AAC3368C061A2D99F8C01DF71FBE3AFE0
E3AF28807251F21C60C2D90B32CA25B859365D6B2B5CF07A9CA496B034396FA9A62D337FCD12
8CF0D17CBEBC1508FBCE413C07CC76DDB6065CE54C6780B73D1C80C1C39BD569C07458F8BA54
D931B5A817AEBB5776E9526B66BC38B0CC969919E9F91AACB192B5ED4AFA254FF6C5B74331B0
27B86937D0CBF2548A4234FC70CC583D93547D80CEBA78482305BB4B41E36C675B171F8128AC
F24B5653E17486BDD41AC562AEDAABEF4AF432E653D414E66D4D6D96E18411BE5683EC4FF273
07585A40EBE145D69CFDF430F8365C103728D370FBB4808D45C0391B68AEBE055C6C66BEBD1F
6A6B725818FE8B59E24FE4A96A8CFA6D30120231799FD9C1D86BA34911BC3B14855A0B2A724D
F5D392965EEFEB5B0FD7EC8A333BD4B6D33D71003681B4A816B5DB8475241B9A4B4971ADB498
37FDE6E78E5413D9584C93C10FD7BE8D70FACEF356BDDD8BAB3A21534319E195268F9BAF756C
FC17BBEF95108334977EFF3BFC9E46172907F861ADDA6641747F70CA9DF38E72247B1B1FAE69
BBBB8DCF7D8EA7CFD6D7751BC88C67B14D53270F16B082A028299D3D1BAFB1C8042754FA8DA6
1C034EDDA896D6075C40EF8D4C06ADFD140853F2198AFB70CAC3EB9982CEB1FEB0CDEE2AB494
EB9595B5C918F0139932876FF0F13AE6977B58FB6FA47D6F8501CEBD4666ED5BA410F144846F
BBBD1DA827F84025A2AE5F9CB69101F8EFAA980AFDE0B49CAA9C5F0090BF47DE6BF40C68A293
E45BC33ED9222E7494D4D5CEF267CDDA36431BC8BD41341AEB9AB78F25AC668D4D9D531EECCC
7031C60418D244656DBCABD7D2EA53509E0DB01679962FEF31D014A75072611DD2F9BC3E27E7
87C1F791F74904C7106B6F889A79DE4E770540F478500F9AB17D6D7D312A06023ED8805EA5F7
4A9F4CEF09345077C2D444D224D25273FEE4DA617FBEB1868539CE185F8250A9AC16CC84825B
30917F04AB981658CA931F566369408B6673D4456000FC3AF3DDB0E876D4AD06B836D86A0F83
CD92467E3644DFA6D249F9A5AC91CF2523BFA3EE0BB5FF59A426B4E67FD46E6CC60C10267BE0
C0A73FB423A2A9CD97D086040B22F37E8FEBD4985C5DA5E0CBAE7B47599AC2B8E6C85C8F1042
D40A26EB05160829F25210BEED9B500C95D136DB49459A36D8F643413CAA66AFA724C97B42F6
4F1622F080E8B157F86990D94315B8BB9BE14305543BAF5C0E25FBC45CE084579B7B8B5BE131
A497EAA3C0D3C520C592414DE7150CDE2E86DCE859F1F48AC0C435151157A495AD42B58BF385
D344244F2D3FFBC6069C745055BE798D7F27093E1BBFCA3FB5185A44629DE29DFCAC798130C0
3D212332EBAC7D4168B416C54A57DC04B208AADFF22C3D0529A466C6A310A8EDA384F92528EB
B5E1D86F96101A3FB9F6E2B1BDFC7000C04BC915C63F74E0B0530491D6653A75931986234E88
77B6E206A4816DE5C947140AC48BA980CAE0C2175CAD88700F28B27A49A1735FF5CD8B8B2828
23639083B082EEED8AB079C134236C306ECA151A7994261CD73A8484BEDF8191BAD858B491B0
E9943D9E04323C65C3D953D33B634B025456F1B85F57673C6CE0154E162771496130ECF3D679
37717F6D3C7CA05538016F8BA6AD48DE3BA2B153BCC4EE3500EC9AF99CC01891CBB50FCD4FC6
91C48725310436E69D55F6A49B243AC3804A95D9212D9EA02F6C2264246F311A334984011081
7EE2E669380251066EC237CE4E2E123AC89F962D2204FBB9856CC55D2B72AC67ED0A08BB6271
67D4E375EC8EF90B570921B314C8B2A035BFA7760365EA0439E437091723377A30F5859DBD60
261D1B1A75AE2FD8888B217EE4D5CEE7ECD6DEE6E3D1420E4B71561F7DD01B0793031FC95853
667F27D8855EEABBA4CF4AE67666C578ABD872D4747775D5CDEB55A02C8DCF38067456BEEE0F
10AFD66B521A81B0712EB987DD429C77A1557B6107790BE7B3C7F55A79074CCB8F38923B7507
D06CE99A2CBEBFE9D7C5C32796145E4AEF1E3AE83A5CA481531D552BFF0C456200949A01730A
586032C8CB48DA6611E0ED9DE04AC36F1660F59683973385C00C78CF675D5C5962381487EE82
799CF60EF340B2A3275BFD4D5D2122AF19FBE59DAD06E735E446D77747101A53E329A14EAD28
B99B7630E7188B1F967A0B57292667580D6E121EA1D925C931FD4B42C3ABBFFECE5096ABE807
EC5B9C43CCC10B724110B2616D472063288C0E250E569220035EEEA8043A05044A6B0D010D9B
3294282F81CDC0EFFC4F500C6D063E85E7BE4B10FD2C50D3DC8AC54BF0EA6865520401E683CB
3270762C94158FAC11D76E7D12FC78BB19BE08FB8C4BD04036408E337BF3FDBFF6AD0E57D845
92ECAC5FBDD22ADDC8B4AAE9F22395300F618A5A5725E20047A0DE229C58BFF5C6870BE44580
2A30AF4A6CA65BA502F6F1BC4B458DE1B7088A802E49EDA9528B7D0FEB561DF949C0A25E71B4
15D56572FAEC8EAFF09F46B07A44978A47F7B7687F1681D10357522D034415E16EBDA5DECB57
489581725E961D50F182C685EE3FB037B16C389B678E80BF9C6B27CC903C31ACD77120454427
70ADA3FE7C6785ECE0C669C0324AA872B4C25CCF3AF3E0E78AB29C3C642DDC44F579E5ED4FF6
AAB873B8AC7D73710EADDC2F494175254B7AC925BB0C4EE70CAB7CADBF1D2497AA6F290B64EC
7551DC7CAECFC0B5312BFD58FCD53D79F1BAAC6AE3D5E4B896D55B67838F1E5848E0D9321ECA
275A78A6F00A223D81DFA4D891DD3CA40653DA235D8FC48C9A9E4F56B7C1F6C10B3AFF870DAD
B47855776E4F08DCC7F5875B7E8EDCB96295B106F4E0AF2AF7C74DB79AAB01C44E39621C8992
7735A9246458336C5E9F60656D2F757B0D2DE6322DE7913C696053D24D324EC40C52F28AA677
A758602DCA751548BE122F6184FEAABF7AFFCDE3DC72DFFBE3A69D52F7A89709DB8D05DF6DA2
031F43AB54200A68082FF8F4887E6072993BF21DA939357274C9D7D30071F88C65F64B55DCDC
0C208AD152E12301DE3D182B3C59F62327FEA224A8DDB1867944ABCAD0CECDBC529D68C600B0
AB0281C7CD4FB6C236C2D1561EBCBF76153BDF424079B9A63449D4A4531B4A5BDFBDD70EF02E
74535DE3A881F2584C994060D3830079EFF3FCA2597119A8BD560E2A0F766F7A34A7A38E581D
451502B960833117458ACCC70E6BBC2729AECC6EF2A381A23AF14507B9DC46A3E01092F58CA9
1A32DA58C8F8353805CB193A579FF281B1F80CD4AB9DDFA8917DAF3B7394C095E9455FFE82B7
E0A62AA476754554AA899ECE4676D8FFF0C052697AFC316CA7D759A04AB1D16532042FF511C1
3B5375020E585573843100B9B393D1EF2FE83E5612BFCDE5DBF02B1C6E2E3603C6699C945FD9
36A308F9CB848EE27AF90816C74A04EB3F5AF5E709FE39375EA168DBD9D6D373C2F07FF1B23B
6B229E946DD3F3357C59BB36E3DA08CB393A774D51CD1EA98C6A8E3FEFCD91E73A8C29E13266
015022CD238B8803FFFE86F2385804482D69A32FE00826B91F8AE433C390470E429A1E519A89
249092C034880FCC9B7842A4773565D5E85622B48BEC7A7969E876A734F2E4721E7B00F12B54
240271CB90ECCC4A8FCD3ACC281060B631FC664D5712E7D033481A596FE40B34CB9E4779A061
895D589C15E8EFFBA3F8F8EFA4DFDC4FFA503309B3B6DE0C9375D34A0D935F6B0843C2396991
DB0BD48AD40D86347AB46F22A5757C018B22460487D750D41CCF2ADFF0F69FF58053C4DB6C6C
05CD54B4B48A9E303143A08BD94320ACE9747BDAF8A7AC4497140FC17164E765412D6B283701
96094CE86EAC79D2CDC86867B0DC3013276FF8C5818E06D8B68DD43DB1BC2E1EBC7901DE2D4A
92B34FFB6273EF4F2F555B7C7B4CD43E39B585AF30DF0562BABC058C24D5D392F549B008BDF3
0CBDA7FFD3E6B907D66CDBC8EE920594F59DA6E559623743B18B3AC6A767639E6310CBBC224F
848C9A8EB0E5E7ADDE1D278201E41535A2D3BC2451CBE90388D0E850B1508355BF09E4AF235F
3E6AB79D37E3F45266A140F8CE86010703B12C83C96764C49035A598526902EC3B78F9A27342
A228E03D6DF9EA75377B2236A8161C8CEA3F4BA5CF2AB9CA2F752217456ADD3744A150812B1A
2945D4D0844E99555AF8C2ECCCB520E860D804606B3EB39D7B94585763AEF1605D4EC74FA824
FCE3E8E6A260B9E2497F309950D176CFAA1DB29FF2B07D41C3BF950163D7CAB48193F8409ACD
EA18CD34F29587844E51DFDFA9E7A2685A2D50A6687B6002D0CAECFA3C630E680231D1DD4E8E
388B4525C059BA9E56A8C015E69943541462502E495A63054BDF88B4442935A25C8F20888ADB
6E60D95C8552B012BAF65631F2611B71E03182C7D4D4C82918B4AF222BE87C410781C0E2F751
C66C698C6A322C7FB4E132E9A3ABB876956178A040AA9479A6521CD82869C95C5FC36B0CA384
92564DE4458D8791042B08C8F8F334A6922F729CC0DD65FDB6F839AE8FA148BCB1A60F334986
7BAF910777E8471764F853DD43333BD19389E53EBD82BE564B78FC26D156A143A4F0E10031A8
D1516E187F1A58D1DB48A995FE6B5F5B219107044E251F1E0E6296FA1320FC75C05996D7A7E5
388F817F4CFDEDBF821D3BCBA03F21E20D34876026730D9194157CC362403213CC16C285E68C
DF86B0F61A2D47BE23CF733115F380212B175BE5C8B473F37EB03C19852FD358A09E9B1E9E31
10AA29AD9C0C233DFE8180D5913A5636E05A6BB92B4474F0D2C4B2F7FACB2C2EEEFFB4B6326D
36D2A8F75F6BCDBA56B07ACC44B3E95721AFD3D448CE5EA5314DD35649C39BD215418F8F3868
A522C2BD867927BDBA4377CF1237B791474B44A682A6169507C03C0FEFB4C25AFADDCBC6184D
456A2E44D5A4CD6503ADE51BD029AD1014F6D047A28D7BDC0E14F9E71069B401D15263E4AE45
58AB237CB7FF91E96E16E63352BCD74B81BCD1A50C0447AE76544806B5126F0AE6E904775DCE
803F7BBEC29D5A2A1B98CA8901ACBAF3D08A16822E96281CB22A04A78E4DD1257A52E172F2AA
6CAB70622ACD3355DA68DACF11DB4D16C378486622F33D08CF1F35533A5243FDE12EA8910C5D
B3BE274329503A6962BE53CF60DED6A7CDACAAC5BFBF9920774E92CCEC6F5289687960E42277
7A6ED1E14919D6DDB11E73D13BAD176C7E80A34A39478DF5C2A07626C39E8BB4F54ED455719B
720CEA814A038F46896C6025FF5E744C2E6E830A1966F882BB06CB7EB370173C99C6ABEE8F8F
8540491CBEC243F5AF827FF789A9DC26E7F160BE9B8F6FA6AFC33023E698F29238519256587D
CE09831AABFABFDA761053D0332AD0394666C36352EF250EF21EF1F1FA18B2918E5DCF2CB7DE
1502C590DFD694588CA76BE8F1C00711C5F0656BB83E5867EB79945E61C3A8D6B88EFB1AA33A
6E6A23A1B539D715172915FE3D8277F8865F177CF9B3503E812D919B3AA7A238F4D182F68418
61B26E4DDB5396D956024A95F655560FA34336898FC07D021FE9EF11DD5EC50E6E1BCF82ADA4
85B3851C393969C1E00248657BEC3F077A91027E9AD95E195A0D61A2E5CFC7A511E07FD56E82
8D526EB3FBD6261D04EA21ED82FCC7CA4570B6ACF2E3AFC96D9732EA9F3DC417662BD0031AF0
9697D281DD4B0802BAAA46988C643AF7E5ECABED3AF561947F21422FAEDABAFB506E033A5F0F
A4C51DB720DA032A1214F29316D3134B39DC8ED2AC63E15A99FD690BDB5AEAB767938D6C4B8B
429CFB306887E546C6E433A5C571143C28BF051A1FB84D77F45500DD1B23B0B71C1533B55697
03FF2492ECD353AAA40F9D0477DE9DF7038E57EDC64CDFFB4FE6637C7CEEC38D46AA53308F5F
0E7EEC36924BF5EA6D550CEFD20CF0DD443AC3F8B990E3219C0884622820514D8A82560BF8BA
514578A9B66E762B272692698437EB55AD3DD894AE6492AC964FFB5EE4003BDCB461DCCD1DF7
BB48FDD4C21CAA97000EA5ABFA32956D534140DC7CBC3E9D1FD0B09D2AA16CCE736190FB6837
E0FD1F0E233489AB2686C833AAA8AC9CA8A2A341D635E088D03FBCA5338E355BE751CADC6AEA
AE63DC304598AB6EC8280A0A1329A5147181278C9B95276570D9E1F4D34E65F9AA64DD5FA42D
7D68C9786C353F7A8BC8C52CC83E0EC142596760AE19806583AEAC53E092714E5B993D63F468
5AE1C96EAD46551A491E88873EBAC17F08B20FD491BDBDB2618F005DB0B1D2EAA08892EB1737
BC41A07883A039477FB8E964CF7FDBAC19E337AFE196B39FEEB6251D192423F59B5D746C9907
75AC9C99E9357146B471316E6BAA0EC6F0433604D296D80D26BC238D9FCBA1D3197E5D173519
A57A443B38D021AFBC7C54A6BA7C269453AFFDE6E5FD8C4CB0BE97DE72696C5633902EEB5215
303663C12997AF415D102A214B85D77EA7DDA3CBE5BDF0A12CB331939518FA04D3DFCB7288C5
E340FD74E00419DD0FF5267556DC5DAFCD6C641903C722D23D500A2D598C2FBBFAE3D6264192
3B2777D8EB0D81D4BC53537BC3A84C4FC3FFDFA9194C81EE91DD7A7419DF0E5DA49DA910C5E8
3E35AFA61BED02F3CB646B0999841CAF55A17956449CB25BED26054FA9500A357AF042061CB5
F32414F1C9EA556441CC085A1D6AE3A6540391369FA51DB16DF2C61F0FD1558D5FD4052A63D4
EAF330147B0E9C774B4894607B40A760273B1B89353ADC110B54067F8867A1903F87BD270F06
5E322B027F60D855ABC6EB40F17D222115B7FE10C2E140F2B477D3A3D0A11391698E3C35BF1A
469C9068A0A63073F8A94654DA2B1019A61B3949CA2984A12EB434BA43583840058B774506D3
666BE8CDDAF08B5F99CD7C64AFFF75C164CEC467C70CECF1595D4D01470ADE2E034B37062D4E
72EAF6BAE7C63A03D6D85A16A34CA5C3E1C34257DEBCE2D8F55D746258CE208BD67BABD08E40
ECB20C59BD4E050A0A9D849B2EB2F1C874A512E70B7E179E0CB46FE1ACB5825762666A783AF5
669FEA5B02415A7901CB0BDED57E552FC1D470F59679B21A56F82E333B7756EABBAFBA4A4D0C
042E97EF46C3F71B75B305B468CEE59FBB2BA20B49FFCE08D0C28C920433BA739B98DCD09CE7
CD7FB24D832444B9B6821F31DB2754D497F63B7D6BC7C75DA9328CCB88E4DA7CB28B4B213D5B
8FCA4AE99A5DCD28068DA3795FF110150E01AEB5E252CA2C0B5AAE2490AB711440623568507B
4DF99A6D44C572C5871572CB8FF8154CC3B9AE7592597DDFE684AB44AB069FB8D8680057E70D
A41753E94E0FCC13496DC82F3A6B9272CDC133C01BA998FDF43D266DFFA3E06141C6836D6DF5
ADA89EFB59DEF1A68FAB510DA56BD1C0B23A8C20B340AA0278B98179A46212E4564011A879F9
DDC6DBA0343B89517DB07F7125A0FF6D37D6380F7DC8E0FC2D6C535D6A9ED0D4214E79FE2ABA
30F38D041AB79FEC0786B844444EA81C4E7BA8475AA181EEE935766E8FD444FABB0A3238D14A
D899E01B2C14C4EFC724A236EBB6EE7E53C61992DC103654601334CAEF87C8AAE864BAEDA97E
6820FE907B4640D51D0DEB0C7D98EB67CE311F5A4F25A4FA066C7D13664BE53D1DD66AD2F832
9F8BCA5B22C213E6D20EF2A73625651047878FE7077851DA70CFA24D4FFEF3A8009E7D6E08D3
CA2112801EDBFEAF0B94DDA65C2130903991EFBA7E9F1692A2FC63C1885E52B4B31C0AEA192E
8608A4289DA6DCA485DEE2FBEFCF4F0336DE035B9F65775F3BFF4C2C49E3055BCCF0A4F3FD17
60524B0754D89CABB15D9E57AFB93D3FA164426713911981D0D2979F0EFB0569459F701A0742
67D43656386F7D1A95A9BCF9F4682761839B600846C81DBD197C83838AB9EBBA8323463865BC
30EC1B99F4FE299ECD4453509A5C814E6C996676E025DE9FAFFD0B6C3C0914ABFEC436B65092
6F48672FD2D21EB2F8EEC64DB45B8D8C6AA3AA4E9C41777797D7497190E2B7144D4E9FCAC863
9ED74C7B302383DBA2FA646782103B9ABABF85F80F8EE057F9F21A002115B3E21A3B56D10DBF
67F1EF041D9E96F952E4E65281C3D102273FF3D201E7767B34E4FD4CF5E1402C608ABB8D11B0
7178ACDCD8DE9A2128DBEBF9E2BEC587E0D7BA1A686231A8CD5D99947F4E461E7C091714161B
3906C92A6D5EE5B70783552731AB9CA61E2634BB8E2BA1BC8B49D244FF89F5C2E9286C3467E4
DD3B35BF9989372416245ADA7378E245C1B10BF57BA8A48DF37FA7E5F60B06561C86CA309CAA
2A8B21F88D1E671C54E429863ADBDEA4D5F26FFD164000B571452DA04877E2900EDDE59A7E78
2F2DC54686FD124A711C44B6D3DA7CADAF4530B7EF0AF2A14D5ADF316099906847696848DFA4
CA3D1F8CE2A6BC82630B4B4617170558099C8F46994A8029B417CECBFE5513734425B165AC7C
4DD15155D83FEA6287D3629F535CB0E1A828A195341E314B808604C6587DA28FE318ED8F2658
BE9D9E2BDDEA3D54628AE2BF64717EF64FB6E1DE3D05BF69DB88275060973DA7570EACAB1345
862E2921A90EAEC32B92B99E50EC2807F02A135C5E5B643458C53EEFBA587FC951BC477403E6
8850316845AF4565284B8E902DE262A113234B494977D087C12734874ECC93406E804BDD3655
8E44D2890A8C6A3F8F5DB0A0D7C14CF8B137B335C5A003424CF45CF4DC0C64B8F71929F99C89
CE9CF245ED1FB628A989AB04F0A32D0DF7045080F87A9B6049E0E52612375042C579509A0681
DD6869C904CA95F8B1DE9ED886CCC43A935ABFE8B888745DD6F7AE3F6FBACC0B1230AC9411B9
0CA884D556543A196C817072E0F089F6D7EE3157BFB82A772F8A675315E12813BDDB5186F415
B9BF758F2B213B33981E1795DB41AD949032617C15A52927DC7A348B81288BEB59F2186D3629
A10ECBB8D29581475AF3430C90787ACE611E66D0BD9B41107A5E2BBCB324D893BB606CB48EC1
E206019D1E96DA890DFD94BE3F663F609F07503C5456571608459B26372DD570DAF13ADF2F4B
DFD0DD9649C545D82458793834AF2DD71E8755F4E58856C5EBE91695252BBA2F12DC5FB7130D
1792ECF6AAA07A7A7B005E668BA7D27F3FD0214AE291DC615221F13413C6EFD2E0421ECB37BD
95ADD58A9D51D086A4D0CA2CC1C7A6FA853F61B8C1ADF6738F9B30CE564F21E9D45A5A55D6FE
FEE27F7C538D375B79EF4311A81B014E31DA276D07E114759EDCD610F82C53F1338949FE483E
94679EDCDC4A6381770C75B71ADEF1CA131F5338E071266D679AB6343E961DD3D71D1AEFB662
BBCB0F34766BEFA058E02A7C3FFA833DF83BD4C8E0D89CCEACD5E1262B80C93A84675B71AF69
72357E3C93A7A910AC4508F6C1E260EA1CF03902D3B815DE35E3F30374C476271260E3657194
F9D63DC984E84C82E550A548967791BCD90E660A978A9DF434B3FE404496481345D9733B8CAD
00C306F0CAF67167EA9C70C5C124124AA10DA6B0FB6B69F1EB328B9753B6CA187905D677C5AB
0FE167EC1BB6A168C1F5D6F9136D24A3E27A49CE8CE96F754644A49643E5481F054CD9E5C645
C3E7F670DCFFE00C78F15BC705CEF2C8E1A713BEC20E687EBAA5CB7262E8BFC23F26C1BF902B
8206B25AD830B5B8D87CA79F1F6404FFB313386632528ED7B452C11C22EBFAD64306408A0653
6582ABDB2B2FAD788B4C60AACEC0F0862CBB2FAE618CD8DDA566670FD0B7FA64CE0B7A057025
57BDA95531B9B500B8C97DE2B2AC3DCC6E0DDD204AD937635F2EAC85347E2ECF35BC951C2066
A5331FE8B087A8E83B50B08F07A5578BA7BE6D9CA251DFEA9F9597B71E7C078A489BC718E2AE
13E9D8C4310427AE85B9B919912CFA54C91C1D898C066A8961A904A6661105F189646965CBAC
79F00CA699AA58BDE0C424A347FF1C3259C745D3C8B886196F44EFF6455E86F04D17BE7FF0A4
7F34980F19AAFFDF685AB944733FCD54C50A8A220245E13EDC3C3DFA54B418BAA2153C11CC0D
0C32ECE788C17CA10B149EAD12729C121AC4B7562515D1D721730B10DC9F48193B5C6D6ED5A1
771AA7F6EE5115BFD4E935A6C2DD7C2320DC3728DE360F99E7AE5F6A8B776E66C15D82C0839E
337F2B490C0C26EAF1EF8968898D31D8C581626CD43322952B450524741148084D9F77557304
9F5FC47C5AF4678238B0D70EFE8111E1DF0A90B46216ABA8E39B98ADAAD59527888EBCD817E3
F5E7C71634F94230A6D96261A1496303921F6E8ECD200028A8A0D90A87F957819414A0F3E3E3
9B08CF32473E9CF53D19D2012791AB857312932F70CBCFAC8CBAE1C883EBD8F90F94D415FB1B
20046A733FAA413D47409F87ECBE4BB0AC162627D6094B58989DDE0A12BBE07A99B5CC61C9EB
26AAF4F6AC89D40F36DEFB38DC9119796305545C4060A12D6773F32903FC20334CDFAC659F35
95FEF09D2AC80189040D4B3B81257AD821AD3CB784C49BB0F5672C6EF540DE202CC3B45BC7FC
BA494464E81CBF7439D440F6766DC94893231913A82F6378136DC07A0C4B82EF4910846E28BE
EE53E01B9A110AAAB81C3CE3955428A9F4D033E6D362FF75E50067B1F4CF5EC60DA98B318F7D
E2C7AD5EA8C30A9BBA83213FE3A1FD39C29CF224A25798EE6821DD5ACB3AC9171FBF108B2016
4F2B7D15E26FEB7359F27015787BA53F304D72661B68BFF77B5F91FA541AB4F11232347303D6
95A2A75C09259B35BED0FF9580B9B5988CB5AC0ED11E118A0080D87109CCAF46218E7E440A3F
320C97496F0C4D8A9F63318753B3067F4022EBB5057CD40A327F29F227D45D0EAE5A15E32926
A24EF46D9ECAF21983F09EC0185C8FFE0B790A6DD8727BFE8359D472C493781E40EF71BC747C
F60A673DC4CBA688CFE41CCA69C37AA18197CD4F96EB4F049EACDB88F80734E75C65CF1F3BBF
8E2FC4DECA78DBCD7C677F1F39C590D6F7C102346BA945DD8DDDACEE0240E441D68BDE187773
C66FC65F4ADA28F7C42C11B3E9BC78BE1B42D4D59F0DC73A0471AA8CB4791F0A881D82C7DB8E
C32B2CACC33F3FDB77E0A5B7DD3799CEE2053E9CE624649CE47799752F2BC4A23F0435F72E57
191774554506DB153EB2D3FCA44B6A435DA6D61FB8E8AAC78C891DED8866A96038D99586DCF5
0ED62051FB538D23C612B12D07AA6C1024DD73768952FBC7FEC6EEEB21CDCEC1C1913C468B8D
0350AD3E98669D50B1C71D4F28849044AA8B2FA0255D9323C7BBBF6BD48DCFFCC05DCD74CA9C
2F29FEF5B1447C07591CA82CC79F7AE2C57D897216A8DD6FCC2657BF131796BFB358CEB354FC
7374559DE7B4C879CEBACE1FF5C6E821D0BF596F80475AC6AEF1E6080B480E74A6A81CC7B200
CC9D1BADE2A20FB3B5F9122EFCC99890C5B369BDF64A0645FD36663843D73F126EBFA2B2F87F
6B6D1A481B8CACEEC4F7CC0AF89706E4D944E1A6AC9EF36018BB128197E740D6DEEDFAF1498C
4D2E47FC27E48B0316E856FE21BEB953B2F01C9472517471A5020097CB4494357AB34CCB3A36
6D89B5E598CEFE58CF293CA963D09009CD1BD479126200C3D342172CFC2451997624AC151B9D
8E137865B557F1C595B34E5D5274D8A05DADAADD33836C3C03BCC3FF9B4FB585FF613DBB94D8
44A9D7B2D3A913EDDE51E5F4DAF4D43934325EAFB0AF2DE524BA3E5FDD967F8F5287D209B681
1F9B56B619F0EA0A438976EF6B87C8D3DFF5B228DA82E4D95FE2348ED144C35F28002B7618A6
AFDE5E871ABCA8F41B4FC3BC1EC0A093BEBA007F9055727AB78E6053777C422E078E60D7CBED
83374D98F8EA106C40293905A264AC2BDC2B676FBD6306BB1D78B4ED63ADBF59061E25862825
3CD127874EB3A5D3C9B3B3AA506EFAF9456A9C071F08AA753BB312FC4E29054E0DC277D2CACF
2A7321C4D3CF5556DD0F310CF7C13C0E5359EE8C21507D2E8FCA40147D8484E0C002EDDCF81F
5B8ABF4ED9951D550A30B7BA608CC0F86C2B0A0162B6F1881E479009356D51D01E36B464511C
14C1CDBE1A6F78020192AB358E8167879717C15F22E8D7870149E5CB0BE8C73B17C1609BEDCC
70E6DB1EDAA4369BE30AC45F25557EA0D8D31120959DD29B2A224DC173C9937A29C189217365
B407D07EB62A523B1FB62F0EC8604C03929A7E77B02FBDCFB37018D885F544FBFEB1C1A60DC0
133BA920B1A70C9A46CD6BB7BE5CB0BDD4D0CEE65EB5DFF23C7BA54F8BA5CD904BEF3F4E17F5
B430206B2B4C58181BF23A50382B92FC5516A8C154E99201F87E0F4C5C5FCABD48B8F7AF0F68
68E2A4649454CBD2596C004106EC5C029E3F7233FF4AE296010529F7A4BB37E68307A8F4B239
987099B95C1EDC550C4A70C55092A7CDEC2F1739FF6513D0F17AF86ED78492C31CE44FBC4C8D
0C58622B50575E7DA87CB4C97C32A0829B669AD037C860D2E20F158CC0E6F4F95DEE851C42B4
988F48BEE046378408BB16D9FC4AB3AAEF1BB65642A207631C2D8C70DDCC9887C7B2A2C1CA37
D77E6E5FDD2B138A0E25CA88AD767F4D977F1BEA3EF2EB683C76C9AE55A30F3AA359348F1028
B96753007CB939A922B4534CAE7B4C618865040E3B1B167F40D66614C92E4A5468C1FE638B40
B8A431A5F7877852B82D1C1180226FE067DD8BEC98F522695A673D4A42707AB5A49503290B28
4CB4A541FA6BD8D6675822395C986B23BE34CFF57CB0C0A6037F15EB4904D1C4835D3482AD57
1EC475FB6DC4FB25A7642CCB0A5EB0B68A0CBA5A470BCCF30571F40066824C330A7B0917B460
0207B77DD22A4C004E99517814462A49ADABBAE60C11692458D1034D72FC4026AFE313EA24EB
18E62B7645454438BF6E99B67F25298016EF2A822347F72A812984A65BF92AEBCF694C768003
EFF3E382C7AF5165ABCE4CC66F4A6E182E00EFD65764E3CBA189BB856DE35B5C33F20F02F968
F360A461087C068B5DDCB0EBE6894649BC305214D9C82B979167FB07143CAD069D6022494F82
634BDCCAB6BD0C47019CE049A2949A073C6422F1440626A8D8F27ED269B9866C05DEBB5876FC
980B73F237CAFC69BE3A4B466485855233D20CFAA567FFE8CDF580602D82AE4CE3DA53846277
D067BC2D77937D9AFDD95DEF8B2D573E341F260951F43575ACEFE75F923660CCE5D7CF4AD84F
6CCA09EBA153F174BE91783D2EF3A48B320D8BCDCA178003F2DF97BBF69008A755C962D32273
92EC701B67C1E5106193AE52DF0A0F984C28A779D437214D5BC82A7DBB94AE07CE9B6C799F97
B03873263DE76BFDDA368D2178C817B29DD8CA5C5132F822B6DB89CF3ABCC986B8811C4DC60D
8B52A064C212CAB2D04F83B8C06DB1EC7B45426080466A641B32DEA683F50024446B6F410F85
39D6C79961B38D10BDC3E90B6D86BE999A8BDF2F93D9ABBB0EB3714F567485235589191E4E19
D61584D9DA998FF784BC5EEB74E54D9BA1B4E1297B17395864F60B047956F3D3B72833A6F8B1
E09532A3B11F76AB9B7EC3245F9039C1D68F618616BE48BBCCD8CED3249C08CDA7AAF73714F0
308B0C6FE388275AE6D0108B3B701F45A811D06518026C02CEF5A21875DFB988FDD55D26A837
951F8B4AD63561C1305CF12998848FFDC39C4337C014D43817786829F81DA6687146599EF058
61F108C2A8AED806B65CD25E24A9799458AE0258AE80FF931A09A6B3FC9E6A5B4A31E253B8E4
0DB6D4625BCB5A6176F4F999D8F88A65E96FA6CEFB1D52BB73442B46D4BC0C238AF8FC4C7E8F
287A9E43AE5F04116C5FDAE1277DE359219A68F037293D2C41B7D7908E046F3D06048D2F25DA
2243FFD911C2B56D72EF3E867EA0C2F5E725BA7CF76730B8DF9E3CE8AB9AE3E5A9D013F9049D
C9681359D0752456C02E5D158507071C26D754A2BA8EE96A1F13AC439B6B7B94949E07B10454
0071A1C0724B3019D672EB283BA5741295CF9EB0691EF944E1D93657DD8E16F134447942FF91
53FACE782CAC0005E7DA84B3274E22F37AC3FE2A0C84C8D8C058F9AABC44276BD3C1F063DA46
0D5689DF8597773FB16C5AB0A35D46A0E767182596D9915959AD9F7699F0B5073F56B522BD35
61B225B97A4237E93FDA1E8ACC3588B7766F812E47FAF3C8F2FA8A93D5948AE4631AE1A28A28
765435F7244737A2758DBB37F240929B2E9D3E983D8A3D46A9DA4B0679909F1E077E0431D8F9
A8DE54FC1738B3B5B6B4DDD8F339FCF50B59A4B6CD3E4931F8BF1AE8601E8B337DDA6424E95E
E366D620B7B7B93714E6446BDBA673873A169C3F7D58F62CB64109E985ABCCEB9EAB1D37D85D
93D90E826B4B5C57DC7E5F8C8A13F707260F199C58EF11E61F60C49358E7B079A2FCDA284490
36E843488B847999445FCD8379291F50FC6E176F676E24602C9B90BFE4B0358997D1F2A9652F
6290221808617B6D81A6342853EA43C8B83EF275F265745EAFBE7A7D4A5D6CED648E8C0A6BCF
6415CD7DCB9BBAE84A92FCE237A009FD7536DC8BE3E114E5BB29A5B9BDE2534B4752BC6D1A83
C7BBDCC6578EED4CA804EE9D59FF018B97902109939C9AAB744F42C6FA0D7E47B66C94F9029F
D0F224E0F9E9C10A5908E7DC90BB2138F476958A0CD2A3587733AC5EBCFB1727903FD4EA849A
A305EEB4E061C06C8D963A0527093DD7D9AB232546F9F88B850C5024E940E9A5DE9E9A6E787F
0FC5C1A15B46FAA5E4756A2D4B952ACAD64966DA1B0BA75D166E4479EB0B4E1A964EA0666BE8
7A8FD9E1D8E3C857B926F1C2D0E82AFC9FBCF7ECDFEF6F199223172A7261FD3AFCF54B49A697
81FEDFC6C501C4EE50CA5E8F199C3884247E21B7CD40250692362A84A63014B339835ACD79C6
8C97278F48D68533438C59864F89B2CE0C93CC549F4F4E16849C6D83C272AF1CDEBFD65975B2
1B129E0450330567DD51E08968FE04423D4FFB7D1D4F902ABA21F4C01F23B9811C42B4988F48
BEE06426CF7C8E184D03677ECB1A276DF9ACD94C31E95BCF3D8347A24FDC7E564FB9D11FBBD8
2DD3B819913B0E3A3B050ED0FCB57EE7005CC7DF7B9B5823F530554103ACFE356159AA9B85F9
5C95BEAC324D0097382DAF2F4F160D4471DA9A8D581F5BA89C4E826E905667D4F2BB89AFB9AA
62C6829046F1FD661720BD67056508D7F1618EB58CE32E378C23EC879C4481926A2F3575C7F0
2C3264E854969E248E00139D87013DF831366A11B7E78E8904C9BF6122548B956AFEE0CB4A3F
2F0EE383F21772FE361B2EBAC612C9EECB33B9714AC09EF85764F70030C0BA32BF26767CC2DB
77DF1961D44C613C07F3B3195E8FC5D235370BB495BD1DFD57F59F0CC88148FF4CE3FF711498
A985049E9BBF64F7C19CFF81CB25CA68497B17D31A9343E46C61FF85B8E5AE0E308D40397719
1B38742A6AA3B5C84787A5341F319727A146D32B76154D1D24AFEB30F120F7880306D17F52E4
6786A0B61CB4E16E956DEF4556C15633BFDE4A158DE1878B599E466B85AD875A89AEBDB4B4B2
4DADBA3FA1A28DA0874079A9D5F2280CB9257FB3E675CC2A6C25685EB99C4B8792E524012A6E
A10D9C8D74ADE2AB88AA865BE44F38B5A528BE89B2FA4A89EAB331BE1E050D3D388382915662
DA0EE3BF5848C284C06509D6AC0E4808C8B5FDFCFA9C6CB469A70F5598AD7F924F654ACA0F44
3FA7AF6632E487FF2D0CDA5AD6C9D0DAF55E535AFCF28B95411221BB0415216724DBF215A33F
AD325667A0B7D58FB1DC0650591D563C50F2C50186EF2F7E4D217C525298FB7AA3F643C77AA5
26ADF53B533E4AC9B41B36027CC364E74F309C1832CA97763CA2A07F4383D0733CAE974D6DA9
1D97334780E43BEC2A539C22B5C227042BBCFF3DC2093CA38458412F92004A00554F8AE5412B
DE6F63445465988A6E205AAEDEF0E0EE2062CA0AA29306B0784E1760EC91DC0B2B9B20AAD0B0
7DE969C1F4D0BD5D94F6E03CEB8B821C1340C866E697AF01893493F176846EBF16C1EF717975
D0DDFF1D4158540133AACEEE3A21182F43265DDC9BEB01103A5551731DD91AFDFF19C1D881E7
BCAAD2059632506E851A05388112FC6E1296CE350444D283C4298556098C7EB7DF219D593E65
3C81ADE6D92049BE0B0DBDB4548574EC069078D99419D46A72C53D33D02AF25DBCE794F56DFD
08B10C9229BB3A443893ADCD100000BC5C4A69C986BEEDCF4C9B02DEFE1886705E6779DE47DC
5359965414572BC17072EA6C9F52E49EF6FB11FC8E80C7DD3AE53D1AA08600D7DB145DD779C7
FCA8FDD12FFDD933393B3B22E1378D546B31ED161A040FF04AA0DB05BC90A4200A3D88D5D333
99ADEB7B41EA4C93301B088CAA35E14496AF4F2D8E73FEA5F5AC3B3281978360002EC89761DA
8EEC4FEC0AC6DF373D3650040E493FA18186DEA210C4D251044431D868E7FC22078827F23C27
AF481135BD82F730E746E9878B4975983406F47AC8BEE735B4E53959132C95934919F24BCCBC
DDA5A4CB302510C29D5599CF21682DD1B4ABBE34548BA12DF219D79F13B0BC62A7C97FE42F26
234ACCAE6F9DAF5F9AF2BD2D2752692CB76BA99740A0AACB316265786A7917B057F34E1D2DD8
77E1266449BF1A790001DC04D874EF033AE87B066168EB75730B090876A8E1B7FF22D180E105
95A04E9F57140E8866E1F2F8DCA67530B90940F45020BD86FA7B6EA85542625AB435D0E5531E
4EDE355B3E81197AE3C0CC3068C9857D5B149DD8C48348A51568A117DFDEDFF28087F4E387C7
0D499B6FEBE95B1C7E7D465D8008558DA7C1FCF51EFD19B9EB1F4687C6A6C0F12B25772E0785
4C1481BAFE194F66842BE0BDEB9034EFD17C2A12110959F4871B9FB9D58F13544BFA4AA15019
8C6638CCB7564C14820B78794542A2EEE17A9014D13613F1354924D3642413C2B5D3FF46AE54
E811D53408BE85CEAAC9D19AC0E6062E25A581FADB594F623F00C1DBB7C73E21DDAD74D504F7
0DE2FF188D2A3825371AA9C628F9BEC52B400827C20523DDA19A4B664181C7B6DAC74EDF2A1B
3AE905BDADB2ACCAD15ECF67A2E34FD28938D975EB8637A13A6A18B8CF851876D118140C0761
C3F93AE3E6AC61E8ABACC36FB9597F4E67820B49B4EDA3ACC2B23AA1BD79F2856E8047A57195
CF4278F23B70259F0E5A22E163130929C6122ADB2648EDD6DF15BABA76231F6CA85B35EBC308
945044BDFC4C1B6448674547D9E8AD9EB209EAD3F2D36E08DE2AFA766EF38C5280177BCD5068
221E90436AFFBB3162F6F24F135E542DCCFB56AD5EEFE42048EDBA31600E03ED85EF5AE91AF4
F5EA4388A9626C934321ED15D267D2AF759C5FE93254A60856778CB5279C62DE1D8DF5FB4D77
BCC79B8561756DBEF748A0FF90D1F76E5220165A76312749506F57676B58909B2095EF00A525
15F34A1EA19F0B7113FD5061E356D6AE3E4113134E170D831368DF2DCD327AD43175A1AA65FB
6E923B2627BF32A59D24B54E71818888AA6043F860D5D548B18C80D07E398A8F5ABFCC4A89E7
1FC79F316DD65BB820BD239FE4632E693071DB8753515682F9D19998AD07CCC1FCA7EAFF2744
841466C0128C7577067EAC8C2E85C271BCD8C858038EC445FBAF1BDD954B06CEDC4CF209E4FB
15FCB2C2A56E499F719764BA6B12CDBCB4885B833A6EBE24E9C1FCA5898F8C14441D2A4CD0F3
08B5C11E8429F0F49EF015089DDAA0BFEE653F64E66C26FC7396984D4CF7A4363B826EA82285
1532AD525190CA681D2DD8354E2374AA2F1C43F6DDA81D9AEC9093FB14816AE71C2FAC6F0ABE
4C595481EE8E9B4BD9DED896130BA4888F8DD7571FD8B9712A3A89D43801C3ABAB161596EC41
4C5F869E00BCDE4D275F951305ACC2A2D61D3D7BA4D978369A96AED979FA28FB845E4ACF0505
458255D067F9951349B9EFD8C1B0327411B8B5FF0343BDC37F9729E777392011755EC88D1531
811DAEE13D0EF2C62EEFDDCB4DAC085DB8673AC7B3B8F0CD2F1D70A35C821B7D6105A3BDB831
680CD3F18193C162784F47B13F1A593DFD5820DE22F606ABF1419EB89D5272C475C4C10A4E30
05ECF3D1DD711FF88A4B57DC39AF18F70A2CCAD011D65037BF9182B23A6F8C55F3CF4D3646CD
B7C0B01839832A85248CECC00781273351B1E11E119A92BF6FA432C719C35E2A4AD6704AC7A5
D1DCFB05C8DF61901F89A4311520F57BE22F0CFC82E709647FD6E3B79204CE90D98EDCC54E53
B873B38C0B954615B3FB950A451657ACE6B352A0B859AAEBDD13EF72FA6CE8A6DF6037F420E3
A6062C3054373619A93136D4E6EA7CB8A6AC43E5A25A6DFE6B95D1519CA6EB7704BACE614753
257EF888D043C081C795510F5E3C3B3727B7174FBED75E7E21B0687C2D0D1AA2CECF5D426FCE
B8768946E9BEAAC7FCDFD223892A107CC76DAF8E30D8F95DF55A39E1D6A01595FA187523305C
11E261D1C8F9C716AD8B36FA8F91F865749988C576633871F9BC0D403284D04BA5587D11F3C6
4F462F549199BC5A5E36F27656B422EA951D117CD6221742DFFB8B9C9F6B16562411F7AC2D62
1A2FB6FDF0D1539D1FCF8903DE802782B1A0D6BDB13FCD020D6E0787EB8338409DFA0BD29BBA
2E8B6B22E0D40ED248BF6D7855B88494317A9E4DA281062F6A96E23CE6EDE27FD1DF74642463
F8FEB2E62B9F3AF0AAA3BF9A47D294EB49356137CD29AF73DE1461DAEA33A555B50FEC58DC84
56071F25C6D67F5E70DDA897FE3835AB625ACB7AFE3B82D2B0C5E98471565607F2BE0C973DFC
E3D6736B0C5D43D886BAE7701512E0DD7C4EA50913E6B8F09E3DF658D3A7F7072C94A6A8F757
53E9E1E929381A9135F995252A00EFDD18E778631D0224C0E0A4EED14C4717948C37B0D9ABCA
8AB2CA8D3902B4684205A941B624AC12A958CE16C7FABC280F87A42153D59EFE757B3D2E03E2
9F02B64851BF641FE8BBECBD8F27C11D6EFF56C50F4171BD94D2DB7ED4E07C30A09F1E50BB0C
77B951028CEDE232D53CFCE8204A6ED895320F52F871BFF3503F780416880217FB9F93F8EBFA
D77892FF043565922DA1CC2A25785D35E93F9FABE382396B06446689FF7865118CEC657E3D71
10BDEAAC621003A47551C1F6473704560DC4C767199DFF05C7617E560A714DBC2C1BEA50529A
568F66A77325DC720CAE61ACE1A37698220B27AFFBFE37550B2B506E6DFB9A58BF18255F7F4A
B21B3F60D696346EA83F9282F804AE6AAFDB036C583A7968E39818BF7AFD38162672D78F7875
1D032A6A2ED084247A0B71B44ECBD5AE01D6BE4D8512CBCD1F33AEC01FB08F7D958DFC5D0BEB
F3F3EE53DB00E93C71C58FFB28ADF1CEFE942CAED1299B2B1B5620DF7A300E7DBA63D532557B
7A014E493303916813947A9E2B67728F4DA6FB29A0C775FC6F49181352F993352A140E236D02
ECD228C92B6E62A72D9362441C0CEF1714F9F4D989379DF5BB0324D64E065D54A70FFE8E30AF
379A7199C3A287E2BACC0370C17C724C2E43813AA329364319B1855BEC581E071E16E08AF409
790C5022613655D8D8F257466803DFF2ACF85F3DA08E1AF359308C6547B3031F88BFE99E2AFB
87611CABF9600D202BD90E614D9D782B6A93332FA17BC19839366C2721B834FA2E76D2539F0F
EA9E8C690AF8A1D9390AFB97DEF309CE0A3C302B8D5D28FBE65CB3436005A8D9F8056AF1F23F
C348CAA146ACC37B874A4663D549A401E98BFC01D56205DCE7532B10890ED4CB20933FA67A15
51E10361B069CE5593207C521F3B2BB797C9D2822DD04E21BD3BC252FB30E92E77F4E85BAABB
742DB8F062E17EE61A5236DD260E14F33062C4897144033B3413A5066684622CE8AF9460FD6D
AAA5BFF4370E6EFC77CE81F4B619298C772391EE3D1F23253E536F122137822270AC3CC63211
9B31E932783A9310AED12414143D5BE189BBCC3812D5D0E630AC359BB10302BFE8B99CF93B3B
1FCE84BFCECA996717FFFA8146477F8DB1798D9E8D5528484C85CDC2DC2E76D6E4580021F858
06169215259CE932B9D13E3A9FD729693613D69F1995F1D63089A879C0380FAF749B016BACCA
401F4CDB542E2611F5C060C050F73657FD9348ADF43B2A34ED90E784F41CBF364DEECD123A26
BB1D0107B4C89425CFC2DCEAAF010ABF3C15BB7254DC13EA44EFA101BC45254D7610BE5A2A08
2C64A9DFD4204555BD4C45590CD77C270B2451EA7977FCE9C167E691C492560D897883C87077
CEC321DBEB6B60C8E3602D5031204CF1328C9C4227CAD7009F857CC655AE6CD4A935FF6600A7
6B82693147BFEEACBE2D711F4EB2E9D1EDE6CEE54FA16103971DB2892407CB302D239CBC83BC
83BA938888EAB9275E8319302058BBF8DF5AB3705B9F35A4C08B0D6668B1D8E8B5CC4BB0FC41
3CC26AAA9A46C6D4C5B185BDEE74CFA284E24ECB7AA16094FEBE1B41980F1B04EF4F8F210E15
B1168B757B06DD1D481454A826348A4AD2B5CE5D2382D7FBA0D30CD97832321825A27EAB3E42
C611F31DE946144D5A0B466F81D28882C0122B8190B927C9618F886EAA7CDACAE95032D56E6D
C108B0DCDB867D5AA476934173E4E78F031C98267B984D4FF153CB666FFF0A7133CCDED47F9D
F18EDAD5B7036163640C3366222D847E04F0C3F48C317BAC8AF1A2B82B68464297748E60CB53
26A1BB6B9A00EDA4E0B16747E36D925C2CAD2FFC54942631B0F4917BE242D78C8E10A2100D3A
DF037B4918D763697283478486E627CBDC03DB15CC79D529CF49A29030D2803CF1C568D8CA5F
1AB9EEDB1B873C527B02AE7F478967712F6EB18A0E77D42D65D7BE5E015773FA932D21F70EDC
20A905C5F728BCB96E77025BB93648D671467BE7911C2C3503F9042CEA5A4627F81FEAAC67A8
179B198B61827E01FCD75BE8C29223913CBD5CA0540E56BC54FA5B4A84C6E39EF6C201814E01
6C617ADB5908B36489BABA19FCC06AD4C1F5C1F812C269A8C8AC7E5A1406E30B42BB57BE3B2D
E60BD88410F55B41EA62706D29873C78CF85F8FD5250E3D1B454A3260F041E5A2DFCC3700295
A980C1251A21552C8CAE493EB5AAA8A61D179592D1FED156B9FDFDB979E971B5DC85EBA32B44
8B3B431306E425ED58138DEED7533E295EE14DD6E234A5703337D54F7390AC40B30A3E6859D5
0B1E0D3C175F764715EF5EF1C662426A823A7D3B4FA4A79ECFF1E139541B1F676D4CDD23BC25
3CCCADBDB47C8086D7657DC8284488144C6C2A616C249E1355E83BF0A67287F723E6583C1B48
9CD612DE80B8089AB6335EA9B13FE508961307F9D4562222C36EB862D3CEDECFD5B3AB365698
F2712E96886AD3194118BE196DCB9A1FF45415201EC6CC499BC77D7D81CCE095F763BD5C485F
D26B098D5FC4D746D6BA5268E0646473C2473962163102B3CC634AA7F7396C8BCF0B389B095B
E7FC2BF97EFD661BA953E05DBCD629BB4D8F04681EC34514D6241CA78E129EB976C3EFE92A44
B2CEEFFD483085CB8F837AEBA4CA8A1F7439566BA57A38C335ECDB5F9D359B9D280F57AF90B5
1E293501C4E770C212836B472E61D984F2E38DA01DAD1D0DA4D22D56909164D8794836C3ED15
EB3D9725A7D143C1B91EA3E814FD16385442A3109EEA2FC0C7F3BB6A0AD0F0A670717A31068F
6A5C589C6272A00555CE9CFDF69B946C6FEB3229EDCD650F7CD50B8D87A605D39A2A54989EB7
CE1FEC9D3141AC46FEA35B2523700D1B2DE93129AEEEE8B128E7F4BD4C84CD17362F3E3D6926
359D3037119095D728861BA164FFFB4300BBE12F3E96C5A9BAAB69293EBCD14BE56BF3B14927
E1BBD5341874FE5CA4ED6912022ED7A505307DEEA144E0A302FC58E58CED0826CAE2F50EF586
FE01558CA12B909B85549AC1168921D68EE90627313A946D6E77D356C81C7B04436F50763934
2EECB62FFC50305E89D2D5440788F9DB1EA31AC6BCEDDD431D9E30E5D1B65137A0DFDAED04A8
DE067CCEC8184779A22F637FE30E6DDC5B53AB5DFB4C10AFB47E04267A4C24E3D4B014CB2FB2
6B079C0011E3E6523A05C6501947BF194A13097D7C20F841874F87CF2BBA0732BC60DA4805F7
9B5A3DF518686B8AEB02718597CDA7C92BADFB0DC7341B127DE9FBDEE8E8CC04F19776565C12
2EAD1E8AAB1F6763CE1F9AEE40E860F7007C92903DFCA3AC93DD39FE1388E450E74F2610133F
EC58D5921B326121F4EA2EF940220BD221A8FB4E0A508F82C0F585E2F833318E0FF0586FD6E2
0FFA8229BDA3A6B84CC7683B7056EE108FF5B6EC293F943000B5766068F53814FDF2ACB20D2B
232455012AFB9C130A5260E05125CAFDA5C4F5B9B06B6C429484F5A5721F0E8C44D9819CCE5F
13B3C6A8C7BDD2C0756A0AC9F3BF98B0D7F29ADC4B04113DEA1C20263FB8D8F0D4EDD8993963
6BCE5B7933ECC23BC0784068A53085D2031F1944628EB742C73A478323FF0642B3FF86F596F3
9458EBEA4DF37D40FEE5DE5685B025310B622F7771DA09AE94C3F9CA763C106D24B1C6890ADB
919BAA169718EF7644FBC904C53B5E6916BFF6B2417DEFBBFE46A1AD8E113A83A675DDC656AA
BF32BA1C003A4D5A6099CFD99B5989CD779946F196ED976AB39A666911A310442CD7E65CED84
F1072CD70666150E4249078596716DF12B86A66453BDE2727AFFD46F7072F8C905E5FEFA8C37
03347C1452F36D9349174E5D0BF4C688AA62F617D0C213261494EF3B479D15EF9F3167839F73
F05EEA73FF73CF0510733BC4E2C358CF53E619CDD8194417D091365326C4E8E7460C19DD6784
7D66FBAD913752774A8CBBB702A4875FD35F154E08CC3322C484FEF7D623185BB09289ACFC92
7B885E1FE8AA9CC676C237444EB2BD8919DCC2B4511F4A9573503A536D0477ABEF0C05D0283D
6852E45D3792ED5763ED5959C92CF3CCB81DA37324A083259F623646D8005A77E3A35B7EE5FC
52FC36F7E799AB5EE36B5DFACDB1CBA0CB96D5FA4C438A0EF1219BC0D3FA3B03882821B99490
A5738D3A5230232C23F6D2EFA9ADABA14F1F61F4BDF3C29F20FAD3520CCF1F23C653459E4899
65F53305C563A75FDCBB9088903D7AF6E9A79949E9FC0DCCB4C0147C17C4B8F3AD26524DACF9
A6A1F76D7EDF4B8109DA748A7579C57A13B5FD513FB76936E4393F85F1DE216814A866273208
349EC5128FCEABC53D93DE84645D7501AED73D109164F016ABB45C90E6D1C7E7EC13C3AB22FB
3F3EF6E119ABAFC82AE5E1D371E28F941A9298F4C7F679BCCBC36993B8EED1F55CDD939B8464
FC982E84D7B8AA4BAD4768970360E9C99093F9C9F5F2236AAF5104F04339BCFBD129EE748885
5E9EEDFC10C891BE29E742535DCAF05DBE1618D36EDB5D8F40FB5A547EDC45FF3F4436595051
7A90197E8F842F99ACF3E8B345070C55E919FABB38EC8CDABB88F027F5F3D8774FA6DC149A82
E2239BDC1B20C06A301A272094DF3DBF9B227A9A4DD2BE83EF224617620FE776C5D9DC6F5404
7F2FAE5A3E15EAC83DE6A2D89A4D5E59A4D503F061D3230FD6BED27AB109BE4EFA0EEE9A0F28
9D131BBA1CEDC02E319A3723EEE98FB84BDADC23B095E487210A85CE4895379B8A7D59708A1D
D94DE02A4AFE3E5BE0166FAE6C0F5706817B1CB2DDD7E68A4799BEE124C8AFE8DDC7D7AFF7D3
94BFB74B9394F554875E6F83E9914B4D8816D16E62AA0C593D0107798CBA1CC095B463EC888E
530F5D253F94526457087CF9EC76900D9F11637E4A43CFFDF3073E148F6DD82A0AD5A4962EB2
376D74B43ED747752B9FE62F9FE20AD62A2EE61897D5651D6D61D3A64DCE59D84B3F36829A1E
08FE27C986B64984D472008DF125846277D7854F4DAF1EF7B066D049828F668E671C77402B54
3C349C4744677E31A24FD761F96B3EA4721F57D980C442F90DC92B981273127D061D413E37FA
8D08D0F473080005BB9007199990343EC253DE8340CB8241400BF43EBE83FC2F7D039FBDF98C
3AE5AF967A79CE311D1EA5B11D01C7D57F1ACE6D26185D47666C13429DA58B48537125719B3F
B91FC3F7297A5BD924C34C87FE0D007E31C06871D5FC0D1CEB088C4C1F5C721975597B106C82
18AF965069C536CE44A458C5F5EF16A5C32C039E91269DDCD6172656DF94F9E3A088D25FD071
6D3A105021076517BB350AA163E3C5C8EF5AA0F3506F4C6BFE34C363182D687F1689A3A8A15C
5A989F8373AF8079027FB7E8A703B38F0C163F89FE695E5753FD9FD572A62318A76D55CFA811
2CC3D7D5C0842643A4D5E322758E66ED28F0404B1CA2AC3168613B6643C2052364207431C0D4
9A0E6B9A248C7D4BE9E3DBFC08C4FFD3FC569EC96350174ABF893DA2A0E9D40A8D64792C31E0
F54E95188025B6333EAFF3DDA8C2999422C9CB849752D8692D10E1910AB2D0645E92A9B210F9
1118D1BD0A87283D69B232E5F9B76927824B667D5F4F42179FCDC67A1F77D0336E3BE2E86731
E7DD2E22A4858E7E644B02ADAFF107906A298E4315CD0D53AD4267F477F99B127B76A1574AF1
6F8622CF9D3E3039556D4A0650B48964E3FD1312D6359A68F8DECC0E9E50FAD4AD4E251E2E94
37F2144DD6194BA31C2354D64406E5C81432B084A60F03372D111341C87820769734D4575C12
AF6A37A97731F66B9C6621F75D36759571A0D112C61E0377DB49EE70417D896ED95AD72EB0C3
7EFE669E8A2D463E69702266FBCF92D6ECB6067474E644A4EF3AB31FBDFF2CD67EDCA97F03A8
FB8030A909C8C880299BD440BB9A83186A9A3710511A9144E98DE8940B4CD74241C519F61A65
895AD1798221ADC87108F46C4B0053F52392A252B5626018BD73665832CD0811FFD4C2B4DCC9
5C5120D4FA3C0EFFE00E142C26912591EE6B2EDA58A791CAE13CBF9163B1F51C0B9DAC2EB611
CCD11AD06C95EDCAE3671575BBDA696D80A767056B82E732155650E4FEE9E15C84B4FE2084ED
8A51B748AE344587EB125EA0EE9501CAF82021913D6C9DEE9FF6F8AD96A6E87E5FA5B9FB3034
5B710E5A1C24D247D30F31A6F701F5A722C92BAF496CBA6DBEB0FA393A87B36944394115B215
16AFC18078E1FCC7EFB63EF236E08CBB6E745B20205A30B82CA5F6F0FEFCEA72324D5CD9468C
86371AC76426CB9C935552066F94B31AE4EDE823DA03C6482F4AC709E3AD83651BE836E811E5
809E52AC7EE26C8182DEA91B3226FFB31238A55AF9EBBAC6066185D569D1F0CF8B38C4F8FFAA
8E60FAF2E56258326D945671A99C13120C58A3AFD96E306ABB1C6E92104D1ECC0EA9792AA503
8530CDD043191D17E970C3C166620A506AC8F146B86EC3865D8BAE3F608C6E1462A8FE2A89A1
0D975A11F6E77765290EFAFB1C83E0FC5BD8504A952E6962ACB49A8E53E65655D335105EB88C
81C0EF2CD6C89B7BEA85B1D891B40305BCD43E1C40A0B416BF91AB94418A02035286559B2DAD
03A7D6394EBC11C6C4FB21F2B1613B54875E25F0E0DC5AA60159C6D471EFE0630E5BEE4294D3
AB38C937337D828AC97BE700A9886724A988DF8D9408F944BF7DF2BF8A8F1993F4825E7DEAE3
071EF279870BC8A16CAFE55864C155C3D27FC05BE2D8EA1E5B7457185CE355CF8E7AF5B2873A
A9756D52909A8AD959699ED1FF56AFBF596B8AFCF8C400387FF5E2385342F4A0C6AC4E4E8877
E3953D5E76A51384DDA5DBF3E30D4277ACB753BE3F7D82F1558DFA45DF3043D33C37D05C6C71
ECA2D3FC5076F4AD5AF92DA5DABC856BE998C11E77D0D8ACCFE608F27BD3A547672C94DB17BA
CEA39E52307DDA77FF977E37412F1BD6D448E9E1B52AA45793EC8801C61A502DA869211D7D04
23BA13C969A16041412EF9F9315ADCAD998CEB7FB7B0BBB9B9C73A0A1727468D3BD89F56C075
9A71BFA25A86D90C645588376B8577BC84B96689A9C37AEC6C816224404C2445B41D4DC93324
6FD8E5F749C6DB1BEDE2D2859ECB2810E6A11731B529DCFE3A5BF4DC9212E8AD9EE6E7B76B00
2994F6DA7A9E1B6C07B6C50BEC227740C59C5C55D96C5223D143A8D4D74D8F2E5B555EBAF135
810E747E31F31930B69714AF224B91640A1ED8D605342B69B1B38DFEAAD14FF54BA9B97632D0
571618617D4A7E73A7EACAEF6FCE03ACBE9CCF07033044C027303C388CC0124EB79F98FABC15
6765C4AA062BC3A744FBDF561F1F184486029A0CD32F77EB4B4503A411808099E54CE3F758E2
C8842A5F9D9DA428B300F768A9060A5918879B0812D677A173B1F99062ECC2FCDD0399B62720
9E6294D5A1C77FEC78850580D57554B78A12197D5D792787132E7BF195905404688959D50B3E
7B83B932251B34ACE56518B7F98D8C87EA5EF9DF3D63EFAEAF99156720977D4F96074C85C0DF
B2B43B0DE75EB9D31835BC47E587B80682633BA582717D72221B9157433820AD6CE34035FE3E
3581187892392CAC6380FBF604BA8EB0A32637E44C8F1D946D5E1909ACBFEB34D72584183945
B33D82F4BA2B915EBAFAA67618F99BCBAEFD8F8BDA9B86D6709379F397B5A72F6AA4E6F11840
CD7B753D89B911988EB549D95F5042833C9F74186C527DCFC7D77CF316B77F73EF90007A2BD9
1F33F83C214B0E18050346222D0D51BCEAE15CEB82451B37C52DFD5BB9B8FCDA1CDD77A4EB00
A21641F2B4CCCA221C3AAA7FE31A11293528DD679908AC59A744ECF6E08A08FBA606CFF149F6
43EC607E698776F158923B226D3D0C4B913D0A1B94B6ADB1B84D66A8B16546A0BBF8E0DB9B6A
17D50A2CA6E67E0A8534CE4EB669A9F367365926635BA98630C2232C560DCFC81B306A70AF9B
CF7557BCBF89FAD07A97A14D3A2F8411ABE09AB4493184A80DD311E94EF8B41BB7159FF42F6D
073B965391990C2702D5D4E33A4E744E5621EC18A35D2448E50049B247A7892933A55EACCB19
9E3A332B8BA2D78556DC444463BA3065066563083DE0CAA2C8E6B873E6B92DFDF21705057935
28B9D731441FF20867D67FB7D97FDA8954A294B7BBD57F25ACAD226D08A5C1443B1B0274FDD4
E32FA1FB80E1E93C841CBE010C48D9F1A337D12487E07C4B2508E16FA684620536EE08634A9B
547481D3E40D179EE09E4A14B240371CBB577C24E41A916C134EB24564C60B8F9E4DFF250AF4
65299AB5784D33FB3BA56BA4346C5E193B11BAF18374DEE98D64E97D5372CA4D838B5F874745
956156A046D2A8A2116CCDE050450087F1DB4227C6913359B3B092E6CF1EB7D2656AD944BC31
809F3DD22F6B8000B655E1D05F1AA005AF71DFF453E1D29BDE191CE51D37CD05B5081E63C783
A5343DE829FD3128A8D0DFB72457C4FAA82C1BE3B662F204E656F659C6948CBEC38D85BDA3DD
3B95EAB3B041BC3F52E265CED0A9F9B9E5F26886FFFD004A851CE67154C45E547598D331ABD0
E44A48260C501333EB57650F3813859A0418B5FA806E6C4C8014051F34DB0FEC7CED33A8E785
9ECBEC875808C53D21FBA64F3736D7CA13F8FC4D14987E8E439510C6D46FFC0FAA618331DD01
6014D5EE1A51180C65BB67E4CA008F4AD21DB6BC6663AFD4C61DFE5761615D5CAB6156695702
5642C16CE5606E44D0A7F52C0140011575698ECD06573F9258C43A247D74152BA326EB1C578D
25D7EC4625540E69E5EFC439386FC381EE8DB04CF121C5F84FD9EAF0FDA90FE31353CFEEE553
13363A382E410C69EC7041F3D303949D4F4ACDED4BF1A1BAB640BE0D11B44012446D6F58AE79
405374E0CD5F05BF624B185CFB399478B6054D1624DEE473E9C52C2A58F10F72679E10087BDE
F832E8C8541F04B4678907C099B4C861B389EA2D702CEA96480C536EF545594F697053C9561F
FC9CD56352BFB5CDCC1831E0C8D0847BAAE46F16F50F712ED62351CD0FF01563FBECCD992D9C
F08F693D843DDA71EAAC2424A69F108C516A01823773BA6EF9E979419578BB95DDF07CE70AD1
B0218F1C50436D0B12007F3C02213963C6FA4DCA8E6176D5CB36C154E5521DB36F0BF4B4D75D
026F4B5FF1EA334DA971C530B79D5D9B606899874DF7E10539E0D69AA8241AAD05D703B2C731
3CA21E4F0F318F25279EE1F48B5DB71E95CC43609315D5C3AEF6EDDA5086080E5F31F9264E3F
28E8D5FA719DF9698BAE87F39250CC470AC10636A1A072F001030C97EFB481C21C171EBB2E7B
3DBA17D4992E40F01C4CE682B7BDC2DD56350DE2A918EE186B902440BF4A23D548AAD431DB6C
E594C32C4F8AFA96BCA7CBDCA3AB620D1083633A7D3DF6D655CE07AFA91BEF5C6336DB3C4E03
9099F0C424285612196144DFDB4813519247F53DB9977737EEC47C19D0E66CC522D89E0F8617
96F1453426838E75DC4BD85213A75B366A122A59B603F99F5E597CC52FB5BE96CEE3D24CF6D8
53921A81A869CD14A168D0B31EF2D54CD9B1ACF25C1EF0C42330ECC879A7A173D17522B421C7
730F5DE3B14A6998C9C3A0D1CE5326C0116677997DB1FF6112FC8237B2EFFA72A9DC8A82F706
03EB2147D0CCB152349307F6DD5EAF99563D8614CF7DFE8BB2C34133B1A27B21D5B903978CCA
368C23ACEF2D4E630460626A270A12898C8C212917D2348435AC7E834218721399E57792C8B5
4AAC664D75CFE9EA15EC9CEE6D2086179EA72EC62B6DED17AA3E909BA70A69E66F8645DB6269
D56F6579693CB6F781D81E79F3FE0871BF686390D86181E9990B7CBAAAFA2599E57618CDFABD
E3E21C43F378DFD416EA203EAF5D27818360A3AF5EF34C15E337E74DD46A577852C663318406
54CBE3901DA16518B6AF1E202DCC687AFFF5E458FA887ECF5605FF93A95A46C44A9BF48760DA
288808001107E6BADD29F9952DBC83ADD2A58CBB7500D9E2DE82BDDF32C75C56B5F4D17948AB
24610FCAF83EF121F2C2C8CC1FDA43A0FB3C320AF44102AF2C54F41AD7CA1441B0190B1A8CAB
AE86B1A1F8FD7A6C399BAFD3270E115DC8A348E4B87D9BA2762D95E4CEE98880EDBCBA7D6EE1
25D3C882B62C7141A9C38053C87345138059980D13390D0E5754FFA531F45A825F54CEDBFE48
D661839D141A2593AECE3AA3F5B280CC9219C1424773F927A1044BBCCDB55CA2AB9D9BF53E17
9CF36C33BBA11A7952B4924A01B74066478FE663C7E3C0D28DE8A8335EBB2D98360AD24B338F
3A78F3204E63B12E4666025387C041DBA2343FC0906885F3BD8CDA1E477415180C8AC27F1430
119AC825F072CD2B1932DA6280A24F2D17065EF8426FB9E8A0CEDBF8B53660D6EA05771E3184
DEC4AFB3DBB8F3CA65F7385A21CF096EB0E2AF36601CF5687FC1320ECC03AD922DD7026C44D3
DE96A5C7C49CF83F3BA471135D1DAD0D95B0D959578B32CD6D1B5DE8D968AC8AE143A6201904
06403ECA146BD3F49F5A801D553C922291DD45CECB168320E3689CE3D8E765E79A1C79A1199C
ACFED8554E870D3A5C925A06C611A73A94B2DA9E151EEB36F9BF0672EBEDB9091BDC50F72E3B
7C55E073FA8F419543A47B3A856C09FA4AF7ACB5487469C498AA97992349133E53BD0B9B9F28
1DEA1D8CA2533001CEE5751023C5BDB2098F3C0F3965187364D373A55B451ECBF1C4CF854F3F
EA7E86AD28683B9413BD9E7CD3E9BA8EFF17D3DE056781DFC163D6303A1E0A0615CC57E05DF1
9EEABB8A2D8243A11963FA523184A9C24BA3B1AAADA5A828AD34F93F36049B77A01E9B18DB4F
5DEDA9688FED943B6742038557FA67844296A8E622029D256536F0B7897568D977B951714F2C
92920AE1D9C1522166BEC7B7E4409021B0FE55D8FB9A71AA3A1506BB977615AB8E35D14CADAA
CA791B8BAF23A186B249B3DC395A5E5D4C7211CFCB6F5C2E62B849DC72536D9EA68720EBFBA9
D98BB5803E8056E65C47B12F92CE84FAF73F2A08F145DB269577AD50EE51A292BE6466C64FF3
A54848180D62C8247FA6032834F3201D9706DD1190729F9B27C76E7DA276514A309F7EA3DDC7
A9C84FE049F8093CBD5EBD43AE5E062CB28F33113664FDBBDE4A6A71B5B520D3365C57EDAC15
D5CE4BCA872623509F2CA371C13493B002A32E68CFD6165D2DDA9F3C6651EFF6B650E5998A9E
D30112AAEF280A13710194405D1A8E1144397010DC81C42ABF9A3CCF8FF86B2AE7777EE66B96
B14851F9B3D04E0D4CAC4E28EF33F6182F0B44DBFE0F93318195F107EF1213F95FD217D79FE4
6C5DED68C32DC9E7BDD876221BA76F9DC125DBBB279C493B2660321412141D7052737D069640
912C2DD41B2BFBF25D4C08B5F1412E0D5D03D9C4587AC495570D5577311CE9F5735BDF4B1AFD
3B1409533005F0C3D469DB0CC3A42DF1B4E14C24F8FD872DEE3E5C96FAA2A39257984DAD5801
5E88DF4797981EF81AC7574FBDDC96F23D149B86D91C546B073DA258C37AAAB56C304D423FF0
4F79A7D95E3849BAB07D28BDA946B0B54B37C24628EECE3A530E81C4BD1ABF42C2C4FB4334DD
9AAA2A54C4762C3512552C273211F94BA1BA92BE0F00CD53F6D3827417CC25884095416D06E4
D1F7C93E95C5286A7A2A1D4FF7B78927504FFFF0BE8E23DC3A306027E0E2637B75C992783F58
CD99E20462E1E73BF837A004D8AA81485504A885E367768B96FA3489CB0887BC0393BE41F70F
35047912824D93F38423FC214D93900BB3A0114C5EA3348B8F27796BE2A2170C214773AFA729
915A217CC634EFE5B84D29571C3D9C81386A104B1C190121B1738272E0978B9395B82C012E02
EB33D08CF4DC7B652AB5B1F49C5DEF297608936F668E8F07E066488B978185F87C8DBDF48495
C350138EECD08CCBA71F4169D1E031D40563A9CE29A5D61B94ACD7F9A1D5005CC48D6EF63D05
00D93F642A3501F4086724FF2359ECB661BC0DD6A7D2D86CD5CD461D5F9595B258BA5306A1B1
97862B022AB3CC712CEF618BE82738804CC732B962DE126F90136E4001C96DA77A195AE5015D
DECFD99FEAAB8D5B455E7D6779A70BFA4187D93CF82184272FAAEFD9B0EA0D1059AFD26E4950
B5DBF9FD7B2F18762F7C3094CCD04693EDA58141966638B0D9CEE738D718F24DE72E3B436DFF
A817C63972DAB175BAA8B037150E02A57279954BB8154E9CF0A63A74DE7CB941F6D0AE015DEF
A785291508DF4735242CDA96915F3A67D4711701EBC0CECAA19B46FA8395A608E45247E609EC
B6BD0EBD42EA2D0F3246CE18217C9A1BC700F110A58C7BC2D5BF12FDB444A9833295BEAE75FA
CDC855DE541BEB35232EB7062CDB0B1FF9924CB413643712A4AD15AAB604A7B6381F801E3B17
BE9153D193765BDC81199FEFEFBD75E0C33F398E59C178F586398545DBB7FEECD0F930475734
68987A1ACD82BFB22FB85270B33C8D493EC75D354B73BF89C85511F9D86BEAC776A51823A536
F1A3FCC7865ABCDF852D6D099892569D097A3D3BB353C897B082E31991B738D888299F6201B6
578DF5214DC47D57754E556E461D0031F10158F79A45FE590C93782C1C31C7D1E99D5054721B
2C37A30A4DB4C5F489F9AA8EFCBD2E9D3C79E8ED42BE490BEB93A24AA7DF83235E87AE14AD93
BDA7EABF5324A269DE9E28DDE8CE1BC4840C87B6F148F535303EA8A7AE066126FAC50619CA95
CD8F97EA1093E5FB76AB8640D1DB0F8FBBEAA855CCA4B8A1092D7549EC9299EA3226F8CAAAA5
9FB5AE22EE5DC2557165B35E5FF93C8CFC23891A75E4CA5BA914C5DF3B7792554E2F5DAA2524
D758C2723FC3B0DB13E8084DA3A02D377B5EDF21DA882A8DB1E73ADAC2640790C7BF46ABA616
9CA1476E7DA7E5A26F3957A660BF60A840DD5AC5A22D08DC20B171249C991BA075C6BEC67E2C
B95469AA10E5119B7AE4DD3C7EAD3EF9955CF8310939545F7102CEBC4952A951FF5022094632
FAA2E079CA29D8BFFA5C982B317D8BA90F3FD28E7CFD8EEA6D5E12B98C736BE819090E4FF30C
3D5AA1839E6EAF6EB6F9E6F9405DC5F23B8DFB37971F93D81DEF46A067E49AAC0A7E1631415F
77C16FE3BBED715E4882E710E2DC35E8D2CE01ACFCBB3B231CC2FE79556577668F8701F4033F
351606BF3088518D183EE31115135E02CC9C679ACE8CAC5F5C5C10F065F4B69F1F23C1BBB505
1C3A2D795A579CA2382935DA4F42D481226740EB6DA7000568AC566F633998915749A3CA5BB0
64A48083FBEDED9FB0FEE4B39824A1DC8999DB87C446A068F36D05291FC5FC2FEC5B8AC90AE5
A4F0D76FAC415CE9F3749444D0987E22B64AE6E47D7ECB6E57A092119B4724475095D5D1C9B3
7806D604C12FA1925F919658B79FECD3C37EB933847EA4B966F860CE3B0231054054D33AD524
63C9EED6959EC202CDB57FD462172A702A6F91DBB624AAFD91CE2A15653EAD69995059DF7053
0E93192C2DCEB9ECAB2D25590065C7596AFCD775843CAE76345F410409CEE5EAFFD5227DFF99
ED83FDED9301644632513106EE0D629DB1A70FDFF66421FFA8FB9742F3F7CF0C318455320778
62BE6C5CAC4385A947267EF01BA4DB40427C251B04A79B15CDBAD1C401DF4C94F29AFB8C8DAE
2FFE7055E6BE57E06E5A445645C889810EBB631A22052815045340B42DA17741DCCA003699E1
5F02135F576892F0D178142B1B0E4EF8B3CBCFB7BAA70B2D26D68994730832F84326E171A55D
AC7FB927AB86176F9D031693573BCDF24CAE1121E4D01918A938D01AD4F2DBD7EF824678C39C
B1E1048165589B92E5C7E8039604783E0843A302CF9A7A2A130B40DE91DE437EA9A15C3EE9E8
0BB1EC96081AB295D6BE4889BDFF20C8075EC3869F6EA17077BC0FD340CDAE0C22AC452FEF8A
0716B13DD52153184AC24D45677096CCFFD9F4EF5BB3FECA87C70F49824E01119E8EF4ACE680
9929C4BCE4E4D903EB3BA3556D3D50C301877D81B7C5CA451E46A3A3C03FD6E9260EFC2F4C99
FE45A406F85519383AEE330B3949E092F8BE6D889B1516C6ED1BEAF620262CCB3944DBB27012
587E50A23276A975C301EB4D7F053C9882761A061FF5BC59651DFB3BB6DE720EAE2FF2F2504F
674A5C21C04B01A78AD2EBA868B9EADEB35AAC457C141791CA94D9D8B88FEB5EC5747714641C
C0003851DE075FC0FEC996ACDC4E67A5490FE657490DF994497E1ED3454F6FD990DD8879B238
81219FA6C3D60C81392874E5C42CC174C970629EDEC059B2BF1F53AD21C32584A3E1251A2DE4
94F1D893B80E81D55F611B6B9D7D275AD513125C6267BE40FD49C0A039142535514013B1C722
C61430649F1455FCF3ACB2603C9C668702D64277BDE9199FA6F30E7D2EE9D74F22054CFE0F53
A2F93571D7B98EDA0991F789C1F77C4BF4DF2FA1AC98F5C666A8415AA517BCD14F2BC5B7C572
A9E7EE55822809596C43E43CE174612D06D0D71DBC50B207B9EFD53545E262ED0310A06A2C7A
E9EB63076703B29D0DFCE003C3177A20D40BDEB2C50EB37682CC9586CA3760426615E192BF79
865FEFD6BEF57358A1B5CAB36FD8119EB65E328BC84527AC6FF068048D7C9CA8E91C94F3A4AA
B0F98E8CE4071C54BDA52AE518839708AE69FE8BC5435057FA740130BED913EC885C8E1C9388
867DA6A8D04D3D4B7340404972D86848C152BE9B006E5C85BCF005B59B6FC06A6CD0BF3AF58D
F54FC285C0BBAB9564BC1AE8B072D1BF9CDA93DC4FBDB62AF566E3F18208D9D0721FDAC36A0D
85BDE800DE7051E8703A8EF1A1A46A901ABE065899ABF99467E328CC743E4732716B1814FEAD
78DC62B464D1E2EAAC1D0950C24CBDD2208AEF714A17BA022E68B739705BA7FA4078C46673B0
8309BACF993D71E0D75A75FD98E4FE574FC3B657F137D69284D94956A1404882668B21BF5C5B
0DE5B778B095611E54749886EFA8E1CB81221F5C1A94ECDBAFBDD10952AA19BFC789674B28FE
242DEAF9AD08C7556F67FC5CB75C3BA8E5BB27566FEB06850C7603F13782B8B5123822897A39
3A173FD1A30C7492A0EFFA096A182D6C0EE3B9AEF3C4C3E150208998F9EF4EB466233CF0BD26
4A87D1551A080000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000

cleartomark
{restore}if


%%EndProcSet
%%BeginProcSet: cmsy10.pfb 0 0
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright:  (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments

FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/UniqueID 5096651 def
/PaintType 0 def
/FontInfo 9 dict dup begin
 /version (003.002) readonly def
 /Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
 /FullName (CMSY10) readonly def
 /FamilyName (Computer Modern) readonly def
 /Weight (Medium) readonly def
 /ItalicAngle -14.04 def
 /isFixedPitch false def
 /UnderlinePosition -100 def
 /UnderlineThickness 50 def
end readonly def
/Encoding 256 array
 0 1 255 { 1 index exch /.notdef put} for
dup 0 /minus put
dup 1 /periodcentered put
dup 2 /multiply put
dup 3 /asteriskmath put
dup 4 /divide put
dup 5 /diamondmath put
dup 6 /plusminus put
dup 7 /minusplus put
dup 8 /circleplus put
dup 9 /circleminus put
dup 10 /circlemultiply put
dup 11 /circledivide put
dup 12 /circledot put
dup 13 /circlecopyrt put
dup 14 /openbullet put
dup 15 /bullet put
dup 16 /equivasymptotic put
dup 17 /equivalence put
dup 18 /reflexsubset put
dup 19 /reflexsuperset put
dup 20 /lessequal put
dup 21 /greaterequal put
dup 22 /precedesequal put
dup 23 /followsequal put
dup 24 /similar put
dup 25 /approxequal put
dup 26 /propersubset put
dup 27 /propersuperset put
dup 28 /lessmuch put
dup 29 /greatermuch put
dup 30 /precedes put
dup 31 /follows put
dup 32 /arrowleft put
dup 33 /arrowright put
dup 34 /arrowup put
dup 35 /arrowdown put
dup 36 /arrowboth put
dup 37 /arrownortheast put
dup 38 /arrowsoutheast put
dup 39 /similarequal put
dup 40 /arrowdblleft put
dup 41 /arrowdblright put
dup 42 /arrowdblup put
dup 43 /arrowdbldown put
dup 44 /arrowdblboth put
dup 45 /arrownorthwest put
dup 46 /arrowsouthwest put
dup 47 /proportional put
dup 48 /prime put
dup 49 /infinity put
dup 50 /element put
dup 51 /owner put
dup 52 /triangle put
dup 53 /triangleinv put
dup 54 /negationslash put
dup 55 /mapsto put
dup 56 /universal put
dup 57 /existential put
dup 58 /logicalnot put
dup 59 /emptyset put
dup 60 /Rfractur put
dup 61 /Ifractur put
dup 62 /latticetop put
dup 63 /perpendicular put
dup 64 /aleph put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /union put
dup 92 /intersection put
dup 93 /unionmulti put
dup 94 /logicaland put
dup 95 /logicalor put
dup 96 /turnstileleft put
dup 97 /turnstileright put
dup 98 /floorleft put
dup 99 /floorright put
dup 100 /ceilingleft put
dup 101 /ceilingright put
dup 102 /braceleft put
dup 103 /braceright put
dup 104 /angbracketleft put
dup 105 /angbracketright put
dup 106 /bar put
dup 107 /bardbl put
dup 108 /arrowbothv put
dup 109 /arrowdblbothv put
dup 110 /backslash put
dup 111 /wreathproduct put
dup 112 /radical put
dup 113 /coproduct put
dup 114 /nabla put
dup 115 /integral put
dup 116 /unionsq put
dup 117 /intersectionsq put
dup 118 /subsetsqequal put
dup 119 /supersetsqequal put
dup 120 /section put
dup 121 /dagger put
dup 122 /daggerdbl put
dup 123 /paragraph put
dup 124 /club put
dup 125 /diamond put
dup 126 /heart put
dup 127 /spade put
dup 128 /arrowleft put
dup 160 /space put
dup 161 /minus put
dup 162 /periodcentered put
dup 163 /multiply put
dup 164 /asteriskmath put
dup 165 /divide put
dup 166 /diamondmath put
dup 167 /plusminus put
dup 168 /minusplus put
dup 169 /circleplus put
dup 170 /circleminus put
dup 173 /circlemultiply put
dup 174 /circledivide put
dup 175 /circledot put
dup 176 /circlecopyrt put
dup 177 /openbullet put
dup 178 /bullet put
dup 179 /equivasymptotic put
dup 180 /equivalence put
dup 181 /reflexsubset put
dup 182 /reflexsuperset put
dup 183 /lessequal put
dup 184 /greaterequal put
dup 185 /precedesequal put
dup 186 /followsequal put
dup 187 /similar put
dup 188 /approxequal put
dup 189 /propersubset put
dup 190 /propersuperset put
dup 191 /lessmuch put
dup 192 /greatermuch put
dup 193 /precedes put
dup 194 /follows put
dup 195 /arrowleft put
dup 196 /spade put
readonly def
currentdict end
currentfile eexec

D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A07B684C079A47
D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81DE96489F740045C5E342F02D
A1C9F9F3C167651E646F1A67CF379789E311EF91511D0F605B045B279357D6FC8537C233E7AE
E6A4FDBE73E75A39EB206D20A6F61021961B748D419EBEEB028B592124E174CA595C108E1272
5B9875544955CFFD028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36
AD861319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED43D08C536
93138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E440902191AA9D8E4C5FBBDA55F1
BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2E0C30B8FD2E475FE0D66D4AA65821864
C7DD6AC9939A04094EEA832EAD33DB7A11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85C
C6358A41342D70AD0B97C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150E
C595E857D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20B6F5
990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D393BEF764AA830936
164EDC2C76977D765F095166FE1D9B0498CAB4AD68621FDC2819CE863510B07FC37ACE71A641
448CCE3453022A0ED0C1AFE7DB2BEC6006B11F4E993C658453BD190269DC5F091BD05055983A
4F869B7CF38AFF99F9CF1196AFB3C00B6407E57328CFC3AD4DE530C8A30A9817F3AF2438B69B
24996DA4104A4F2CCEC2348B1328EB84438D0DC63B767E37C9913E2AE4DDD669BDEC427E6941
CACECB52727BB7341D3A13653F92CED2DA9FA9B19F4AE93B067750ABB71F7107581A0015A08D
B715E35A8E90B5D1F2DFBBBC6B3B443D67206C9F6450F124290E7A922BB43EAA3B5F8101EAF9
D5706E919EFBF5F20FE384A811A7237C2EF5A09851F8525A0602A0B893B297E904E1C0F86249
13D532C89A18B403E10608D797036362C89987172B317DDE23F6EDA786BD47038866EDCDB5D8
8371321552F64A292040226FE53BEA879343AB2C35EC288CFAD8E3C60B35C17EBB85FD14C940
E82B01315DD8E689E39A85742D923303DAA4A5F317F9739CD39573AEB82F0427E898439B389E
89A799DDD5D1C3D9710985772FDDF908A085F1EDA297F11262B7033FF288C863EA05D83EAFF9
91AB051238690FD2CC1D62B6E981855ACFDE11F70ABDD526549570D1F79892D220D1970C230F
F879D7D614D83100F926E326FA58AA1737ECAE914B7BC4E8886C82C6EEC4CE887D5ABA35F770
5234CA9E210484CBDE9E2AA55976770849B995914F234F8C41BDB2B5EEB94FABA4172280DAA2
2EDD049E3D7C4AAAC75CB07AA37040A68EAF76A999AA0FCDF5FDE2D1069704C23306854AFB3F
427990ED447F427D176548605757E516EB657137608B19079BB60BAF2E15677FC54867FA8C35
55ED7FDCC69C2CA167BA71FC238573DFE2507D4D2F30B41D0A23EE8327107DE96BAA270DC069
69E2FFF802A3CE59FE411B190E3E49BF143441B89E52AB02A231DF42694BC676046D7B32AA0A
32A15635CEB06D7C80BEE2E20498AB450E01FD9CE71DA883019D1DC48D62B2D955B4FC9A05E9
FDEA23545DC4C6F8822776F9342A59570875D1E900ECE764F4F238FD24BE7265841BEFFB1EF2
0BCCEA6628605AFEE122EF3F526E328F21D71A77B03AB841D681287A8C8B361103641481E76E
7E355B6B58F2BD9C5B6914E96355BD593DEF81841ABDDF6B981D11607A819B4000F681F325BA
0FF535194BC5D5F6FED8A75001C410933870DE94A42FBE0E45E16517D1DE74D09F4FCA42F337
48040E864AB707BD6228BA17D5E0207A37FB9970367521B35AAE1DFEB7761FBA93EABC710662
5F4E9D620D69DF1B8007693CAAD00A14A9C591E015E60F35FAB1320B108389EE1238E3D6650C
F8A2B1C6FE3BA686CF40DD7B571EAEA169FF87425DA01143B2729DF9BECD5FBA049099FFBC2D
E6DBEB861E3F7675037C544DCD0B386651F8DFD1C51F77E67BEFB8E10C70F7B79CEC56428042
0CB0C2FE830B6029B7D3F72A20AC1D06C00F08A4FE55AD091769685C475198381375DC1FA044
557E4B8BA3C5D68AA798FC1D5F949E30C66321DE4A2DCEAB7CF978DE239F12F3F02E5A7B7AEE
B979E6E0D7E7CBC5A64C0F83793572C766DBE35265E0ECD7555340C3056A22F8C3AB991B21AD
1E40756D1D595BB8AB0D5EF411E3A588894A0301FCB3571BC3A74CBF16FB4B2FB13328C87658
43870BCA4496F97D1EDA1562CAD92498CA1BBEE5C91E16C31DA13F54E9D3D2F33548D84EC7AC
98FD84076F35D951034F4E7E06913CB0F8450B9E3DB89677C7C09F9349ACD01A1E505C421C25
3963FD765EE21FD08F851B6C6072689D3A803334F733ECE932D84E886D089595590E5890A4C6
E6BEFE4752BEECF7309741873F15104142E5CC4A4655AD3765400C6A46E0F308DA358E0333B0
2A4131829707F8AC5E70BE999E9C6F4599EA9DB005082632E1D85FF7860AFEB9A3BC352E10DE
9A0999538AD69BBEF18D3D2E3812C3FFBDA5C099CDC61F67A6851E84CAFFBF891A9794ED8AF9
CAB270E3C78C951C5420C025FEA34B0D59B4308722D610669E210020A559FD6C6CBF2CEE53D5
8E46226CA2D01A4A3D39812BA23324385A0B2B0657BCFF9E53F848BFB6F6BB17E379FC7081D4
3A38FF40C6C42934A356EB7A351198DC63473DD34BCB5D2B911B53130B4E630040459AB8EA37
E67A5BBEAC5927FCF4D7F63F36F7181075D7BC6FEE9DCBA128E35A567C7D5BA75E5A4D20A629
6A6879A24B62EDB6985279868FA0E2CC9898A9AFECB7562457661EB7C487E43FB7C03A55219E
414AFCF164DFFA3E323BCE029A86C02B1E71D16411E4DD224FFBC28026265A79651C56A5F510
7B8C48527D8C8848E1F47C624C7C003DE41A5C53E2D8AD802B251D66E13FA8AB0A31CE8BC14A
2A0652E99865A99CA3B12ED35138209FD48CC20D5EF2973FD7B0D37E5C0BEFDB75A4F09D3B61
CC725F292220579B50FA5D05F66F66E09B63BDC126457C6631548E7F75681F8E0B19D5DF252E
2BBA45E487AB3F091EE607CA278C5966CFF9CA4E3CD813CE831E9FAD3116D8ABBB6A7B920CA3
DCF9343BA475886E94BA90A0BBC5BC9974675744C9162DC2C912D8E19BB2F3BDA3F17C76852E
3CEF0BCD9BFBB3BC79922D5219C1CDCFA2EE824B4AEF8BE6F05FFEF8BDAA51F5A52FC13A4A15
867C01C26240871C37B2FF5253449A02FED980B565D62C6C0D0BC149A356014BBA509727CE1D
F62AF4F28535F5CB1167CC8508089769D07F5171AF79F72721862A0B6CBC59DC79615D5EFE89
B7FEC51FEFFE1DB869D1D0A329D2967E705A714336F0E75D840B37A12E9203B51049F024520E
6637AF4BAB4DCF50B3682D7BF71F654BC5661922556E45CC7EEFCA196B3569B169DB4E01B5A1
52F1539A19B3C2B680795BBB04826BDA3C857158029FAC2E0BDE94EC5CDE45E3DCF6C082DBF3
6D3DD37B135A6F0736E3252FDCE218EB5DB8773E2DAFFD1DAD53671EB3D83A275D011BF5D501
A22D407AE09257CD21297B617E0443FBDAA297D37F66AC436DB78B410E79A002233A0D7DA619
CCA9DA4714325A51CB0BBE9EB6CEA352BB1A0A2FF83610B2A17E19480E9285E1570CFCB8EC7E
1D691A72611D336DE5C6626A1D1D2DF363A1D781DBE61235F1D1805CC2A8C670005F84FD4681
67F8640B12929CF347538B94EB37DA39904D4763D93E757AE2B4C775D98E23BA983E35992A29
2A04976544EC462CA656E5EC37EE8EE46BF1C3B0B4C912DF05AE1535CC654000B06BCDC95D9C
6B5F36F8FD8A0EB31A02C2B863DEBF8FEDBC57D5F93D2604321FA66070D14FED60441E09999B
90A5FB715347583A35314381554031BCE4E6E73AD3FCBB61ED0D4C015863119C1D945E981AF3
F38C81EB3A350A70A63EB06119965C90D7EBA669359FCBDFA87C4DB920F8F3D99C73A0DF7E10
D3C410696D679CBFAE831E3E99FEF6C038F669C58E1EB6F60FF587F5EC561629EF429734CB88
6AF914AC3E6BC04F21D73F184CA12D7E033B301C181D15101A986BB95132DABEE082A617520C
F95EC9069499A02F073D7DBE41726B51FC05A9348953495B4CDE8D0A8F8C04D07ABEB3BA0076
3A80F2E3B5804947E690DB3A7B3BC6C48A67F5D45F5C658FECFF28790B709385D24D02FC3B0C
9F9AB04E168BAC78F0837D9BD402C1ABFA84148FD815240108CD511E50FB8E64F20058EE54E4
ED45181AD9BB777DEE3303C4991EF8EC56B6C278CE63F6C2FF92308A25B9AFDB4585A808AB3F
03D8A15A20FFE399DEE429C959F8B3DFDF81433C41CEAC874479A2C51F9FAEAAD5B7B23230B9
9523FB256896A85A8C48C057A70DE745F753B4183AAA6F84B4ACAB090F33CC2C31186D1D8A02
18A74E1987D86B9C3602BA294CD29FEECE4187523CF511FD075692B1C080A5A22281BAAA4EA7
01D7573D083E2F6EDEA3D49FEAFF2CBF989703E83828E6C7E324558AFB73E3388F0B0E6A97ED
ED5A9553DD33DBBBBAF2174A562AE2B8A4B6E7D13E90FF9B7D650231CBF9EE48DBDB00AEE2E0
FEBF8D6778F19CBCB8766A0ACC9BCE2659771BFA97CE7BA811A3A6C8CBEE899839E525DA2ECD
F66CD99FCED902AA102D92CD9A279453BA74EF8C0CF32C11A412A05CFA2C187833F885F359DC
EA34EE24E90F7F107A23D9EE269C15A647916F56C32543AD5F81D90C84B8305E5BFEF1F3B356
CEEB5BAC54AA00DC9C6F03B4AFCF7AA4D31964377525A661FBB743D3996447AFBF76C8FA874B
CBB374B02C538AC626004EC8E1E9030D60C4A097CDAFC143732FB7431008CF28ABEC4529F468
9720D4EF580676CA855FFEDDC66B7C1DF07DB89EE98C0DB6FAA5551ADE4D674B51E4E3FA4B24
A3DB5196E01C6CA1DF5D669A3C0FC57DC1F576C2BA14D5DE284614AF3276E3A1159CBF8D4042
6A60E8C5DD426F1307222DAA8AA78BEE55C27E26013120FB5471CB33CA4FB642B1C386018EE3
D4424CA411F49CD569CDACB51AB9BB5E66E1E13ED5F8BE0E912BC13C7B23E10C042C33DA1965
6264D7473B4E0C3DABE14F9F94450D1113C88EEC18CFEE640A6D9A40DA9CCED6EC5E2E9F1B35
7DA635C3A2C5A23874E496B868FD0260D30F1780878A900B90637A1237C63D83335A3FD4A664
321C048BF2273F9C4AE3161E1F06E6EA5F3F15CFED43C622E0D7E245EDFB866398DFF2EC9946
74767B7F3DD853CA356A3607C7BF8F9C6889EB9942ABE469EF88368742FB5C41D06125D2042E
EA414B344AC718FEAEB308302F5607C06852A30CF778D236EC90CA10934C629FD59890176264
DBF9C1AEB33A6028B9EF09B06BCB182DA58ECCAA4E2E1FBB13868C98CEB61223E9658EBF003A
C67493587A156EFBE73EC88CCDD55C9C10CDFC52F7A7B274D631DBB5D629F41AC8760741953A
6B90C6E9E4D2C79702C59EECDC65D8948317D67808CFBD81953AD32837A42EBBE48F77D6B387
E272855E54ACD32D3377E19724B3BB370A71C633C3A41A0523FC219EFD5310EB3CB5FC93F0F9
E6BFB11517E2B901016CE8DD44BFA8590EDEA88F5229FFDB83E401034C826F038D58C19E5470
4A4E2E36B7738FC6F80DF4D82A5285853C49F9689363392536C3BA25C00B7885E7DC3951E9B5
D22414C9E9A264954CCCFAF8BCE70CFFD4F726263EBEBB70D52A58B3D6BD029F555A630D687C
7E7103C8B8F2B33EA41732D6FB7FA999CCA0185A13C8BD80A2762AB9919C3E9FC07556BA8C71
49B4CC5B58DBE84297E3E8D2B34591D9FCAC659C0FE115F34ABA807DD94410AF8F532418382E
F8F7980E1598A97A61926B809FD771B2795C69E6B1F15FF0EED329FB793FA3FAF0580ED07F51
B0E1BC1401EA5026897990CF09F9750268AF812E89DA551EC14B457836CD38E5C07179A3EE0A
BD3A85C693ACA829A5E492FD4F1BF12725544FBC81FAA2004784DB367184315C68BEE9FBB1D6
8F91C9D0901BAD3BDA4FFFC203C232276A495EF1B2B82F36FE36716733F0E993B19407744C06
7324BDD2D5641977B1A118DBB844104397F963CA2E01B7155CB84BB642FC315C028FE4502335
F761A9DDBEF7ADE1ABE87D31AF848A5285BD8328ED3E8A2A608590DA11968AA8C0D8010329A9
E172AAC2C7D0061B14EDAD1142FEBD3DDC0ED20023CF06BB146B3F58A6A197DDA1CB2533B236
FAF2825E8DFE70B79A0938D79664C1D26B4412FD10C76729CB22392E8976960ABED0A03D5FDD
C7C5C2C6221BA1FA08020B88FD9AA0CE8B5FD26D58A679339A2AE6730746B8413B6E05361755
FBF11FBFA4974CC1AF36136803DB8282A7F5429327B875D0FD222835C7AB82049CBDA6AD1731
F6D06AD2A20027765CF62F7E4BE9521465A7C3E968DBCF95F2C62EB3829CE6DFE845EE20E8EA
89CA6C46BA14E5A920D8E28A4008C210F747622AE31F5F9036C70FA52BFFF08A4BAB3D5EA2EF
6E8656F89058F4A67933AF30E9A16467D563B2782268E2568868F677650A74F415289CBAC0DE
CDF828485066AC07C011623DE9643DDE39840B1A739B33ED3EC705C13DFB191472987059E501
7002D278168B5280FA2E26C6D51CA663B384F5CFF4A6232F5F68E185231EEA239904319E180F
91DA98A63B38E16E138D2DCBCFEFA5F3E5AC6FE764A3A9F3EB622117662AFD26A124933CB1E0
4AAB53923AF5D9DD972536C4904A1602040545A9AD4904D867C1D0AB907D733EDC19EC093391
3B0EE96E8578527FD3D1204A25982635CCA01A9B101A843F6C373AC4C8E39E39BB13AE6A0EA1
70B59987488481D38806D429E902801F9CE25EEDEB6012CC9EBA0736820F82C640CD8C7D852D
9EFFE6F769D7FDE1DD628861FF628BC0BA8EF12726F83D7FCE6ED8785DBCE502DD0571A76D88
B7FAC1E2DB24DB97394937A1EA17031078EE07D00B554B9C892C68B624D3900266E885028724
3BE44F11F86E95DC00E89C5C47F573C0A7F1CD0CCD26498334C7D37A3AF4457CA805446A7434
45978D8C3D25FBA2350A878E23DE65D49E9E5F819484DC1B85ED2BDFF923216C101FD8F411C1
443AD7BCF5E90FDD6BD29899C86EB3ECC82832FE75A59EB3FA696F2696A450E2504A473123A8
D24956ABEF5ADAF5B3BB57FFA5364214AC0E9E245CCF431DFB8A7A5104BD97D5E5104CA9A057
74D0FCA9EC0458BD7289794FF19FD00E2D05086336902514F5CF8141307C037E5D2E30B62D1C
8A5A7682BC941A5445D8A17F5670554AD4AE24EB95524CEBF2599D5D00AEDEE2B5537F869A46
BF093296C77F86ED5658C3DD3AB9C25850624A53F6573A51C7AD9F43EB8320DFA31F7F58E0FD
FA9FF640DB5B55FB5C4E014A8C50E062F13D573C845231F98CDE7414BD440AD4CE9E00FB39BC
93C3D1C8F5FEC652FC28AD9EF814CD964DEFC5813828B0A38AB0E0BE6E3CD60259B8A50F95CB
02EB685DDE048D73DB0460985EB16DA749DE3EE1625182EDC552F104E547D22E62501D9D4EAB
C09531E6457B7AB148FFBAC7927318F8BE99EAE5AC9E6AE81081E236187C2D384A92494DE6BD
1FDCC5A79413609F865C6067EB60B83B1E0D49D2CABF88F252377787534037AEA74A842CF21A
5514F3A89A00EEA33793D63040EC2E1231C04026B8DFE67E0E0B460E3BC6E60F71AB1C05F295
F617829255BBBAD68D6D7E5AEE12DAD835A693A661AD9923BB65C781B9085640D3A5317C312D
D3C6159C15D8DAA3A592C9F4B4AB648B160E4B3BD2E3DD475573570F5EE110AE5BCA3C499513
061F202DB76ECBB5316F21F041954B9EFF754A628ECC2B68077CD6072C630CB99421BA3D0D1D
A24CC09B8D42E8ECB52EBAA0E16DE13F0F2E235292A0063ED390D9A8E685160134E931F924D1
50C3B1E315CCC86F2AC29D02D0D98DEB83DFC7531128E0AB55B5F7D161A44DE0154738DE0656
66440E46D94CC4AC21C42F362D222A5CEB4FE9FAC0892ABAA08F3A3AB76A22CF73E343BADA5C
89355A821C67A626C0FA6F8742178B9562543607FA648F9FC0971734B99E476E36E9127419F2
7469DD3BA6A1D82680155B4603D1DD68CCFB5D5B1A90CE7C6B780BBFFE12723ACF7CED4649DC
D6D61DC52FB893305D4CB1D956B4A8393D2ACDF74247F0695C9778D5E104CC29E7E8BDEB1305
DDAB231758BD41DE987F4A3D2A8FE210CD806CB42F46951A51F24526F4E43FE18A7E1B432652
01F114F258CB9DF6438D064CD2541FFE07B847C56E66C501758AFDC9C644CC5BF98C6D0D4ADD
4F4245DCD8BEBCD596F363F8469DBDAAF511789619F04BE31FE959F19649D7808F42AAAE56E6
CE93C9F3B3D1CD7C1A67E0FC85ECADB448869D34331BFA9C9A0840B7FED1DC2B0A40072B5244
9B01AB2CAA5765C2A969B61BAA43F084DEFF1E8EFA194F6EBE8C1C475F8895C6DDD99CCA8F4D
A57DFD02A3036407671F3DA719E819A2D2678167EA17CE5ECA50FE1EA359A5756746DBE661C9
F8F4678B762FE87B2DC98AE853E7CF9C2AA1A34F3D560248C5870653D64573587799524583F0
58E7D5DC9D80E7BC03A0FA66702A5AE4CC9EC25ED4433B437B07FB4D3701683D0CB07D90E29B
8B7A0FABF72D0852ECE8F58BFDC35CA72B36CBB334D21ED27684831DB43F34D54F85F19A2B32
C72874AA6D9ABF878A6EFD56BB4EF0E10D2F008129872A03334919DFE9F9692D2A75B870A43E
19890D10E13DA69D3F1BD10FDC0A89EE30ED890A8D278D132C8AF80B14208623EAC8354973E5
A7C2AF274EFFB139976B0C91FA38948F3C1F7E3954D3826F2B19C3799784C139DCB19C2C1ED2
5C62DE80C876F0DDFD3378A061F8293AB0927797F4453DFACD6D06C0C59E7C923BDFEA427A7C
874543DF1E42039296F0EA569BC8CA6B73A2516E4D495D4894162962428B915A6DF5EE0758D1
D24AEB9792A9AED3489EA63514087CC8B1844CB75EDDBF3438A7BFD22E650C6B2042D622656F
71950FB8EC5300A295431ADB83C197CA03F4F10B2675E9FF74E546991E322B0AEA38F8400664
56111A304DB49A08ACE0EC0CC1021F54472EC940A45CBDAFDBD4C90E97A1A652A2E58E328990
C76E4E28B15743034CBB79308D7436074580F28CD65D3D718CE59451EE17F8FC39653B189901
773569CA66B7D7450B8D06DE959722198A2B50AA0F0BA5938A826E8DFA88F173EF5BEB7505D3
78FA6D783DC879DFB2EA9C0E174EA21D07C4D7BBA357FD75E1876E3D11678B9C53D36C276715
C380C13A4AB0983587C48DA984F47860245417831DB2F80FE35DCCAB55898096DD0A03EE4378
ADE96457E70BF5A9443F83E01632FDD639AB962B00FE75E7C641596E458F191271A12C8E11E1
618CFEA573ADE97B5B318005E263F11958124FC005C8F6277FF4B5510555437AEAC5B87E8CAB
6F34E7A590ACE1B457EA3096053E5E12F73265F4387FC8531172CD7E3491D8AAB4243B2039FD
A78228FF7F388428DA2A0487A87CE25E6C415D4B433E69E37B3EDF317D7CD58F1B9CDB64DA74
E1860BEEB893FA916B4270963BEE2D635F982766BB52217F25734946A5C9EEBBF97D1726D325
BD427F5899B765CFA186B553A3D1B51F20568E7F0EF264F75BA793CECBA43FDC09F40B850919
97232288F1486ACF5EC076FCC9E203B96714E10D87BC039A14415DBFD7102C5788142D26B785
4F777B3399EED12F20A6F43289DABB8C2778AE9DB4838416213ED419A20CD7777E9AF51268EB
BE11CB03C9FDCFDEFE3DD8EE1E8A044DCC343D38087032BCEFD6E7C3117E0BBA4DE53AF851CA
0206B46D5CA8286B738360F58F09EEEEC2F9378BFB3810F0C20977F4C1E87C4A5C309C72BFD7
E695DD4F88280DD2279DEC328F1CA2D4DC3147EC63E31709864FC0E9D3923A308ED551EFB420
4E175C1D4009F767E050B011E008B6BC9DA47F98F3ECF7B564828670E0B8B244B0FAD3BA7E48
C2343002F05824243C7D36551C2AB0F4D5EFFE98B89FA1B0E3051A789484A03CD9C1D859B346
85806980C474FC28FB16C569E1FD2C0B4B4E6E4E3789D3469225D4CEA3ACC9C9730DB56BA15D
1470E1D1C00FC73096657390F81ACE17A205F86BFDF183A2ED82D15FCC3FDA5E550EF4499619
BF61173AFB97F698A6B0D8E0CE3517A1301DBBB0D4B2CF504342651D897B23C39865142FD4EF
31285FE25A217E66655F47DE7DF2A43BC3D8EA73DA4732FBF9AB3227E7135ED65F1AAB9DF6DF
84A6138FA963810826C920F04B3FB4CDA20C84B5734DDD661783319389A842728B70F94F3182
B5ACCC4955402CE2D267B63F17D31F2D327A0EDBE40F844650BDA0F314A70CDDCAEA9B8813AE
C77988B920DEE2051D7ADA7FFFA3E22CE81A34BC8363CD26E849D1B7E38F19A1EA6E9BBF3391
BAB5B2AABA3B76EFFB965BA9AEC6338996C5315057447B598EA690F4F498AA0051C9DBA13C17
643E0498B0FAF6989902C1567F3D60301456CE29D86A185025D9BD7DEBAD6F27762D8E089291
98F5B5A16AE3BACA3359BEA186EA1564DA576F758BC5B19E6863639184EFD399FE805770F0DC
7B694E91E21D5FAD6D2BA00252C94DE00BAF886FBFD50FDAC5D5AD3A7D872BCF54060E35F0DE
643D27FCF7B377DB563A546448617C89017331AEF621D2118EE0FFA0AA96596FEEA3D08FD9E2
C4ACC78C97231C63D91450E7B5F4836F54B1280AD9DF2CAF300BBCDF6C6D742B96763EC0ED6B
92FE4AC86CEF1D363EBB99D83DE4014DDE8169240F7E612BF7030D3CB845B5BCF348E31740D7
969932A4786BA759BE5624BACB358E16DD5F37CC8F4F698B7204843787C68E4B370190F45F86
4205A966EA82E6AF4E94FF0D5D74994F0C0EC831A49DA5AA9C03F091DBFD2771AB565F3729D9
796C82798B4DB4EFDE0343A7AC5FEC161E94F720A9A45B9558BF291C20C77430E15E0F7AC4CE
F13AE71FE4CE17EEFCA65A076B47A8836A87B82B63E5E901C6AA96E200B0894DF568483D3D18
C1D1713D6E8772F4EB480F1D53D9903ABD7BE69E4CB68D14820981E97D1CB9A6FFE916559D0F
562FB8023D5A8A2567C682C79B50E2D45AC30DD9A06DB0B3D5F570B73E599D4ED88CE8B40ACE
0216157B0D1E7F8DCA816F2CF6A751AA61D8FB3FB3D3706C983A96E1F49E32245480C9149643
378AD671B6F071EDB1B689208E424A3D3DC27B117936FDFE209154408F2A2F5145217A6B51F2
D0F701A918CBDE5C2025EC66258708A32B5B1ECFB9AA7B9F0E4E6C8F82D12B4D6855305F0564
5046EAEB19F34A586749DEF67568B65D5CA63ABC1713312F0073BC62233709076D93483FF276
381367F5815479C99FC42DC29E71BA6C718C81B032FFA4CBE02B62AB60ADADCBAD53857C1210
12812AE32B492ABDEA406E2720BF1DFB11300BB604F0EB98B796F351F8E5F8DC99203E97DF60
52EF6435BC0C4A5D64BC7EF3894E6AAF7AC169B107255E9230AB11F1EF863979DBA5CF23CDE1
9D9D2E31C71814D8AC2C52E9EE2F28649EC566A83E0AA69F837B3CB9A60B75E88F94D17AB48B
D18FF221A07A42AD8F1570721D5B4DF95E103D1559CA57015EECFA45574252DD1B6FD6BA3CA4
BE0CD66B225B9E21BF951E6C930A6D8546E89E3B586C64458D93EE058AB034B47A2331CA2634
F5E76CCD2DCF6FA03BE411F360AD5B32CE2C70AEF6121E71E36287E49C94C36EB989F22BFDBF
1A6C0F9548FD3D43D2DA96B5A63D96B1F47E966794F248A90A75A433141D4063AA6A5C6C31F5
DAED142FE6790D59CDBB2A96A40F8DE769B50B8C24783CC872EF2D25579852564EF01DC46471
B7D1C9C337606D253C2366E1CC6F40D24900BA9A4883CA16BC6FEF6C9595BE3B644682C46B77
5066BD9D0D83ED7094B47A0E0F373150714B01B8687F3EA1EDAE559C045C461865F4FC9B91A2
0C80F6B7D915187748169CD14F97E606BDA20ACA6697B886B5D41AD89E243D9958529BB6499F
08097A0F33F68D62233A488ED98E3DD665478FD2944E2AA96A1DDFE6EB82BDCE16733D13335E
9D3780F6AB38778744664A1690D7E1A7681AE3E9C17CF10282806A942F656BF3665968B97F4E
0EA511A856C31856BBF80E501E34133C099F2D1B7F5A905DDE99B6C42B07FAC37D4BB1306845
8A7E75719B13AE392E49ED85EEE1CCD069E304F08E8DBB0583F2DE2043BBA9FA8A554A019301
B940BE40BBF57AE7D41620853C171F126EC88DE9AB94FE8BEB9BFF7E846F007B7077456C182D
376340EA99AEE271669ECA77F3441B3ADA0DEEC4701C948D596FEF836B0323921AA1E6D62698
D07A9A82BE2AA6D7C298811C99920584ADB8BB02B2E6A18886594FBEA7909559DA4F5A82B6AC
36F2610A7D9FDBA9D8FCBB4A0BBE288C82505B0E931EC463B2C2058DC56C2C23D25FBB0078C5
7E991CCD19917828F19BB18F0A94C5BE07E241C7167E5F982C9F5929B68E32EE748DA544FC54
5E3CCC85A937D5C7A716A8C455168BCB11237C65F99CEC5DE15224A9B18D8476DE7787125A60
AE3D43E04691EAE16F743A4F9017E747F37A15E9429C3047D3179C8C9C22E1B3F312F2A3C9E3
DD774380CC8D736714A35572D7D5D7B596EA30426E475F5624B8B164F3E006CEA3A9D7E2E838
FFC93863435C95187E4AFC0B20D8FA8A6B8ADE3F00AD6B51CBD28F5CAF043787ED6E277A34A9
D733CEB8A7BB3A9AA83B274E93FB94FCE07B4430C4EC2641E63E01BD6D28875EE6C1D1F312CD
8929C44CC5D6610E81766143D9B521971118D4AAFF99DE5E8D0B593767BFB635CC3666522CDF
94F7C3405CB5D1395205A3744EDEFC81BB309757C5D0F9FF8D55CDA155BADBEE2F50CD2955E6
2DB0B60C47045BEB9D7CA5DEA8B849AD6B2B75594CBE7B0C1C0F1C5474CBEDE8BC9383827C6D
F7FA12A16294DFC87C06DE28767888D21E85F8F4F149176DAA0E0175BBA5297E94CF9ACD0A75
583792155E3D5525075D2302F438A725BC31C226CA1D18FB222E30759E4477428EBB02B72AFE
BB72686AA496BDDBA889667B7943F3E67EE1941F8E884E245249E212D235CB7CB80BBBB410AD
86C79BD9D959767D75052314082A93AA4878F72B2D492E6FE382C902AF1A86C63CA4EF38B2B6
E3388B9E3A002528486CA8F8D33BE8BECB8A259B4253F199AD19E703EFF16EC695B49DB776CD
ADC9CF3D3C1ADD2F42AD6D1DAD8B21B67D2FBB35B93CCCE96E96CE3D277B86CB996570E03D5C
88335B53709B655E6A94C07CE0A42E46448BA71F4FC26198E61C79BE75EDB4D8B396CCE0932C
B5325A8FDEA587F0D3CEC1523C4BC1EC7F449DE4E80D063A4A4DC5028CA6D11849D17B88D400
003644F795348009131FD88C8F1B6404B0F157BD7A38BE605BC9187DCBE2E2566B14A1E6B412
BFC3575554FE79A4D964F858267D589E045C0B44D194D208B611755268B75FCF76C9018D2811
281D84676BDD52512491BE789E052F1788E21308D91C4FA6729A9589E5099C818F23436F6A5B
7EF2A227BD48E8EB989A3D160592DE794AA7B4DDE82D1FFFB7B54A2DFE662FD75A9928C1AF34
29EFBAB25557DE5C2D8D172656F0011A25BB7473E1EC56A3E5A329699CC5B1174A187CDCF971
38C0418256D4A5F3D524F2E8E798F7959DA26B5759266AC85425B0DD0D120CE221E6146DA249
ADA68BD409EAF66B2E0E2126741BCF23B17EE76BE42A3A98258568EDBD8071037E1441E4C6FF
499F9D122ED505D205D14E4FB96F0F6919F778E70D65CE53689F9703C522CE33D2EAC0D0C6DA
A87BC96332946FA280CA70EDC593E681A9832D3FFB049F1723D03270FBA0CE8D26ABCC4F0952
98ABE8E584B5C2398D8D40FF035AB309DD09997041C612FD3E919DFF89D942711EAD46AD88B9
F8F5A7DFA0A5649E5538551BDB66246A74D83A93C223DC9F2C8210D18764A09E12F44C8E00D4
2FB0EACFD71BCD347FFE5F8BBDF0866913C843CD7250830D9B939D629B85F41317A0CC64F8F9
326DD88F7B5F1B85F36664EA9A93D94DA23F5AA633F03F8B126B0BBC54BDAFFEF696F87CC146
3118C6E8EC6119C84507AABF53DFB2962445C0C070C4004BB29788CB7E80402B4F129CD169C8
A86E2930DC219040750C89C9A98309BD2E0D75C9308B44CEEFB308652EF74A1ABEC02AFFD219
F4770F90049F29C8860238C89942657BA4344CC9BBA7DC5322897DBB8ED401142136A1277E25
96B53F9CD171BD41E8F9F95DE0AF97D7DF8CF246072DDF8F79B0D34CFE637ECC6B9DFA669D29
7395EE6935AA830184F0959147C07FCC7C54EB74DB0D65AFACE372714933968D3915AE3FEE79
CCF2CEB66BBA763769075C04E9EA8B7766EC65F80C12DE1081236BFBA1F9734C08FE0B84D978
F3D54D4DCE242FA65B243B42B9A937EDB7F36F1EF973B1A230DCBA8D2B914CAD3E08CA56A769
7C046E5B35BDDEF0D200200811A8E90BAE2F87FAE2B106BDEB0B6453B0451736A16F2A4A4034
876428DB735341ED59852D69E92C1B1FD07091EA476E88A666F0BB4FA270B9C05ACDF31DD38D
0EFBA1808C8B8BEA0FCBE0FBF6B2208BE201FF12753CCE6F34B74255DC2AA1DF0366B71211D2
9DE0262DF6A2B916FD8306C87636A00DA34B3D0272F37D38BAEC2A14F33D6689542A553E4225
59C1581FD73B8D63CF8FDBED4B3CCF9C39AE83C0DD287D5D239F443DADD96092A4B4A723C341
BF97FEA378FE624B1AED5AA20101C384C550CB73393E0945449A53EDA528A465CF4FAA3B020A
0E3505FF154995206C0D0E26B29AED1243932D0AF02473667ED86B56875E818A8CDFE7678465
BCCFEE7818625C7AF987BD430EDAC3F34B78D7BECEDAF0BE4BA4A0412D19585025CBCA4F9583
65CD8DE8DBB00893E287D1B10DA47BB7CD8E78ECF36940C865099B3D34C8E063D09D22DE91D6
9D25F0BA34EA859B31B750AEFAF19D26953D100951D0591341E48BEB10BA8D11C44DB5D1EAC8
BE176BBC0B878B7F945E69CBA526B7E06E64F9330A9F6CB8C49E09E2A26A4A2CF6A0AE69A348
6245CCFF8AA3F5C72E7111037D3C861116913DE6CCF8C5BB54BFC2243FC85367496BC7457C85
E81CD556A6E28002805EE1FF1CBA1EA83500CFF41A537A115A57D079FA28FB845E4ACF04A710
B3A1358C00354BC0AE4911D4940C5D76104BBFC0D68007B4E1E7CE32B2839750F7A5F3B6FE34
8FBFF32330B3005D165B1359061FD7D6C5BC06F1F77A739E7A4B91A4C66E1E864999292FB070
BC941A8B28BA052D5A49E492EF4D8B5A61CE23BBB974B183ED33E1C08BE46D0EBD041B955FDE
3B1EF9040FEC841C8ACC4BE3DB3FF3ACED3874214E60E2C3BAC462C080D6DD88CABF15FFECB7
F73B719C4A7FB00538791B6396FFCEB6D5B67DC19505C5435B37209F5715033B7A75CCA4D38B
8E0B10362025D9E11BDC8311820EBA7280FADBBD5E89AC6F2D1F828EA79F806DC858CA42EB35
E59DD17697BA463273C6A0B5295D7C58AB9D2A59B770BC6A6DD4D823FD4825B63107C2B0D6CF
0790752541CF2E10FAAC32CCB0F8FE0BBB3027FEAB8B06651526069B04EC3BFD54563BA8F326
1FE7962FA34A39C845C62E99D60EF0FD729C7948F7306219B339B58EC0D0FF2C9C8872C183BD
1C3E572DE453B2D807271D10715B17BD9E2FC7583F83E03C74A64DF2BE321AE42EE945BF7E74
B9162F918A8F11D3D923A4CAD3A98BF53A175C3E26086D2499AC567B0B947F7477E7F2243D47
C889EEA390B3DC7BBCFDED34946FBFC4D184CB34B9332B06953F9DDADD9174592F6BACC37EF4
7E31ADCC329DAD3055374ED404C4D812D3DEEFAAE96226804980AC01E0870C992608421D995D
C954BE4C58AADF0A60AADC8A27A55E0587B45B4CC45CDEBCF6446F462A14E145AB724C4E5C68
EF5A86C54F145E43ABCB45FDCC540B718AEC2C33720546ED2A2D08961F01562D05E014652D55
C9FA7BB7D34A1FECAA7A2C6FFAD2633178F6B2C41E4A01E4A10B7B9895F7C069062D762B1E01
49E1001DECF0ACFF4D9662BC3C1F2AE1B1B860A84CAD344045D4BA7DE000DE22B035825F66A3
1AAAAFCAE6A0F981DC393F56EE1D2BCC60DC4FF28F44DCFAB6C95D5AFD4071BF5BF19EFC8A6D
35338F34433DA402F84719F300CF731C4B55DBE7F7354E002D85DCD912D4AABA2B02F6D8083C
B2C8F92C2B92111156713D579E796C41C508536345ABAA5EFCA39D664E1434BB6D0D0CE6A584
E0316880E16E6C615246103CD1DCAE897A8396FB6C0CBD235613E00BB8CD2B2F9E993B1A01AC
819B9C6F679A28D4338458E21BF10C7C4136E28D2B060F694B9B03C83675A4A616EC53790152
081A7B4B1750941CB1117BD569A532ED1C49DC49FA3DA0D6BA30E93CB4A71A14B21713DAF82F
D93C9AE4D53A2FE61EA62BC37D38C2500EB7B5A2E4B448992F428D75928AF8ECDA6C9A376B77
17C1997B35C3D9971D1D49BE9B8E4626E3953751F0C6D784B406153488053EDAB38B3675CE8B
05C030331C974164088629E2A9B878063684853A37F20BFFA7D8310769A43774B51DF1BDFF39
A620C578D179D3128140453A0BE7AA76F71D106C6A58642F1A6EFD03E5EB12B74E184F1C0FCE
134A886C645E5762BB77C4A03BF0AA7B93E8766611974162F3AB8F9137E7E8A17E6EA75C75D2
E6FB802DF69EEC93C5E658FFEA205DFAFE8825DB796D4E8E232E00122D57A709A5E0543D01EC
1E2522ED30EF484333C222959B8B98710F958E9C2A57B44237427410329C1A5EFFD3E1E1C125
3C3A25387B5C165272038F19653F32886488F16AC31F7E576327E606CDF3172614561291E7BA
414FBD1A7558084D9CD408EFB7FF5CC53867B3FC96E6AA9419FE4DD98A9A064CC679D42829C5
9C96092F13F77D9EA63249762270017E4E31E1DDE29F57ADF2EDAA9106CC1492A8171717AE0E
42A9116C91CAB94B34C904A2811890DF7B52BE40C01846D131C8DFCCFBDF34EC9DCD5F4EE582
E858F357C3853A48890988859B202CC2A8CF675BF8B3C0434698A4A34D8DB358E42A38220874
F88022DEC2AFB967CF470CE40919E9F0A17E901806D53760FA81983D4E68471440BF8D1BF07F
CE3AB280E3FCA5AB0DFD9BBB74F39752939B75D62C43A6819A40464189F2A49F12B3D25269B8
CD1FFDF68C76AC81821CFAA668F2E2C2D5730C0F201DD7102EF066EEF420355806B127CD6B05
B0C5644072CDF444422DAB1C82D5F1B5C116C758717DD38C1919B099C4DC3E5DE9B6431BFA94
9FD09B01B723DCEB135960F8138D20C331C41B9BE376DA25F760F46072C799F7148C5C25445C
68F9A531F07CEAA52365A8291001D8B239B96CD6510F71C2F2EFD6DE3A2FD816392BE13F3901
CF9DD30CE20351FB9C40492B4449C51768A0C34CBDAB175FD07BAABB0B49C935BE2BCE6527AC
AEB677DFD53EFE53C057DD8F4F6235D93DDAD1BBE54D5E7832069D2E9FCFE8AB5C5112F56466
08168332F691AB0534407FB3A3D36D3C193E2761FD034C689BD35CC7335AD8600E7956003F56
EDF6EFFAB63291C1796A1A8829D62C16DF8344BAA8605A538C320F8BD41E35480DC6EAD20986
D1E671D5682C1D77D7C81B2E983B5D2955767A5940EE1FA51159FB5176091BFF203057D993F1
19C87D5669EC4AA1ED1B1048E0D34A439A10A03E64E6CB5305003832257C5CCC8D53196D0B57
AC82A5DF7AC9F2FD1528FBA6AC34DE1156D9E0CAD7D3B1E1945A3BC75FD91E0F76085E05B096
E139136ADF04CAB6F026C46E31C544E28B7D89A3AAE524188657E7F40EF34EF42B7B636A4501
0E9DA1D4A14B9F673ED233A46A8BBBC9522E5D1514848D51664B78A607390BA9D4354464F3A7
A91A876C1D893092105557CA13E2A460620B8ED0378C9FA6272196E5F7A2D63AD9732C57D478
549812AB1EAA2E735FBFE0B200D67F57161517B0B52C10EE134C0696DCD8FA8EE004B3078241
88469842E260D74758814816410E2BDF23B7E2075FF18723593536C293574E1FAEECCB985B02
E3FD624FFE0380E631C362985DE944030F9F13427AD35E7B87705EE761BD396B92A5DCC06D56
262D495994890218F117C3024A813C943A0608EC03CAE0D496B557F748C14696CE391A140DD5
E5248A1BE58A1764076ED3A5361A2563BB123C4831DFA952D6D8872A0E3C07142BC794682A94
A66E70430643C4096C71F6A634E2BAB8AEED329AC08110B690CED40CB37230AE9012BE2CB6A6
EDA2E2022A7CA16771A5BD2B6FA659BB47CC2C427E4C209D01815F0A907B096085B54752383D
C6FB049A147E6DC9D82DBB89C34EB50108D4FECA7DC223792292E64801443F7AED22E123077A
A52FAE9AD49AFD8A3F330CA78AE6B088BB8681790A357B46E786602BBE3A84B0781433C9BD1A
A098943D50743BE32FBCC9A35FE81AB29525983D6C93AD2EB0C66A0D75EF0F85F8A97CA5E54F
A5EFD9E23870C17DC543E87AEAB16A677B846E1F5954924C60650F03410B4C7EE099415B6021
E5C8F33E81FAEA57B6DD3ABB45BE7DBCF2D23CEB44965C34E40EB67EA8C504BE900FDED57E44
9A6BBA2C55821FB261537036030831D23EAFE00B3113AB3EC777DFCC357BAAFFFD655461888A
A8144629E39F83E169384685C1691927FF889A67B43B7F84689138CEB06C6AEF4402B5693BE0
466994665CECF34F5AD656CA098B215754794A6E567CB590C2F01795B2931BAB6F73C777BCBE
505D1CCE87026CE3DE41152FBCC4E1470F7361FE50843D0FDB2E7209B2CCDFC5C7D910BF3276
AD395F46DA6E532343104C4BFFEC3B627F89BBA72BCF7088A0AD564C05261670DFE2B1E28E8C
61519CFBF5937AD54B37A7B13B7770C93097364F5F8596BA3BF5E047170CF9F686D18ABFB7C2
4B0B22750D6AB28A1F47EFB0E06BAED2948EAEC810E2D11CFA7451BB33A2FA90FAEE1954081C
CA93A3E18749CFA50A2F7553AA63000A2A19FE92AD0C0D4974FF743D3341185F8916C783A466
C270C689389C9767289B1A00D11226AB3E1E90E9097588E0C14ED8EDBBF717202E5C5DAE9931
2B1E384878E4B6991D10DCE9252A8B8F0B2F2DDEAEF92A87299B2BD39FD1488A57CDC77FE147
0395DA0D4D7DE8E29A10D7A07849C78F003A3F2989D1EDFA7CA70B0F89D904A5DCCDBC292BE1
A0E5A35C2F6F5BDAA9EFA07D38E68959DE0A5C01FE0E5FF7BDFA46B4D15F050ECE607563BE52
B3104DAB7805B4F27231CFC0A7396605CC2A6D439C360903086CD1112E671F74E4E7FD80200C
A5CBC9EC087FC2C95FA7529713E43235767E29035D0BDAE76C4D4BC0AD18EBE12ADC7990666D
08EAF98545737FBE26F11EE1B42A52B170F37B21896E33209A9BA4A03285A55C6F98FA3B9649
28F83D7830A938FEC7B60F454BB143507407D3B12B6CD2094DD9AA7397810EB21CA7E47CC304
55314428F5EB009C9156A296A12796AEC951B5B6A8E2A188D3F3C5C03EE1146A1F94DF8E661F
8524B619433DE3AC98B13DBE39135BBA43C0832944FBDB106D0696CF114DFAD04E5DD7B6A7C5
2D9184144977194BD24CF2788A56EBF5F3C992C60B2F4A7B8A697FABAC56C4384434F10C980F
1DDB5B79DED34985E2D6344A1BC036CD50DBBDB8BB002F96A887036B8BA9E81893DBA05AFD50
C3006ABD5A74826AC085C6F85168E098CCC5F17F36381746FC37C6352FDE3D8A503014602EE2
78DAC70A16ED96CDE5BBACBA2A97232F71400B8B4CFD4C44183345F3165C4D8470AF9709806C
87AC87CFCF6BB1CE6366F63E0C646161E5EFE934CC215DE13B2E9A93802FC3C1AAABD6582A0C
B2FBA304FB5E50514B8D2FE55BE1545D034F207A96DF61AE7EAB1C06D26AF493E51B479B3BA7
8E16C7FED79A9EC38E1C4988BDA8A37692F39E6B944EE7AFD329F827AE8E58D7D6452811A0AC
50F3ED5F6DC055C7CA7D52FE746F23EA6BF02DB28342E173BBEC647E38EFDCE4458295F5509C
BA247A76EA82685EABE8846E7B07ABAD72305F06A987178098D19A37AAAB4D53988C69FD7513
014E2DCD9A36C102A7F49A22561A32F94D7790A7D463D6649A7F0D395627CB2AD50445A602D0
F6C2E1BB13ECF338A50385A0454EAD42B3441CDB836B6CEF0817D7FE9438187045BACD849EF3
348EA859E77C0DE75175E1DE97F2766C2D25F4CA2B2F441E9FE8F8AE95F9D8CA736AA5AD7A8A
8D4CB90371268FE41A623BFEDAB04FEBAFFBF6FA61DD1A3EC255774CD58C927AC41F24769F20
D43D0CE013D51A7434981177121A77547C298ABCFBF0AE83864E0A5F052CEC01B7D39919FFFB
3DC81930B423003348BA7143FF58F6908803695D70A122081A77BA8F797CC85E39D8ABF419AF
8732472EF2972137AE3206787149550BFCE8393B261B2AAF73417473B467464FCC848329BC3E
A5CAFF477862FC35D35BEFE5850153733D88BBA52DD1EED6DAE87A1EC09877415776657443DD
2C454B3D8ABB71762F0D636963A855BE25CB52D6B621C09E21A47D0DED25E92F52370DEA91CC
4E3F118C082DEE635443582C57D7151B934AB5975C9D8691D0FE281AEED8C196B06F787DD75C
F6A04BF63A3C9B88A36103B18CCDDCBCB213F270E4282C3B40E7B91AA535B6C58B239CD7DE24
F832026ACF4D87EDC83AAB433D03AA633B094AB62F2BA8C0265B9E39D1072282C0242B570661
4C34C2F2DD37287C73515BCD77BB2A4A428839F7683C4D8C83324A8157D56B82FF518FC3D903
F85DB1676EB71352E46F1B40651CCCF53F7D92200778A2F3B8414AF97779BA01E1DDE594A9C5
E45A1A3B5BE613790E9126723B95E3EA265E6A6956904DB6610F997C77E02F719EED9BC40AE7
66C37DFDC2581A1D6C625DFE94146E39DC435983D415EEEE370D951F660A0C8A34AD303DA80E
D66258D4466A647935580E86D723D923CD3BBE150B558AA4930CB9EEB4A4D2A57B4F087473A2
9BB3760B23AE615B10B58412CE6BA4632B91B6D775C06679AE08382F0934BB6B0D4CEE4F5B98
ACC6D7D5461C6A9E827A11603DA185E451C905843733031422218539B01CE7807986B866F659
761DB98CB8942BA1959AB973380394F70392ADB687FE92886D628B5873055CFF4F1052DCA10A
B657A147188F1E42B180685B723331D8CC35273E114F324D53C9DEE784F46026DA726BD29388
3D6BDB60D4A2198E89C21816E3E711D4FDD2C1A9D675A71BC6095F529F8625E815F82ECFC865
29A5AF692E8ABC76B940D19D24D6B96500E36FC662D5937F64C1711C1D265A2C90DD56ACF6D7
CC33C7633DB37BFD437F5C3D78973E61A257C379FA1095807579EE2514AE15AF5B341B43882F
3FE19236A59E92651EC64961E62E4FFB7A8F800B8B3C525E718C7E7ED92EA07C04FFE9FE5CA0
59D2FB05B95800EFC84C3A7C6B816D821225FBA9D3E39AC8052D9F37828218A221A031DDABEC
62BF03601183E68C83E8BE713A2C59E9306E8F42180ABFA2EF83BF2DE707FC35B46FB6A6ED72
8B569CC07BD680CA25661E2F9FD89428BDCE458E96578F725D210B60AF26DDAAFB382BC8E311
69D5BC5BFE7D48E92958EEA2823E3DA5E3EEE7A6AD644F003915B922465FDF858389AE6A88CF
7924DCBB96EFD85F12478B4C3D330BC6C5FC412091F3C54C9F1A6BE17973C025F48342D566C9
6220E66D95CB04477C054759A3C6DEB3FAB5B3F650ACC6DC1A57ED0B9859C9256C6BF4901C68
382FDB25AACD47DE9DF59366236C3C4BBE5D50465DBAF139F4F49E2D6E5CBA9F47D558BAC06D
FB98131BBFE8FEE681D5E4A737021E4B175B1CB96ED0B5B011BCD639C9756F8C30AFADBA5162
A48D8F5090C469A8E1EFF83E5613497C8DD7BD7B593CE3440C46027F0561B187F75F9C3B0C82
9923310354E5A903FA9846C199A405960AC0731188C863B460B51FBC12B407F50D4026AAEBC1
D21474A0915AB42B368AF2BAF658902D3B28E143C6B2B1E1B414BB399EF6A39B5ACB2EAF438C
C0B38FB44F1CA9B4174926B585BF5E287F8B42758ABE9476A9E4D8B9B9D3418014B2D1A2850C
62D4732D2024D4262FCC42EAAADA3B90CA39E03674AC19443C5B5C496C4A83324F822692B823
BE229F901AB0CC2AF98C43B0E13179D6931F1AA28D8DC2B1CF6C4A0959602A84E5AB1D0575DF
DF70E347A9A6389EA7736D353D0E5259A7686B50887883B3C9AC232B0DBA3DEA5C6B59D5307B
205F1A7D5ED917CFB3A2E9E66080BFE5B36BA012D05C73F6864C1E59D05CA076147DADF784EF
F55390B412F4BA448F93520F2D41BBC3CD52514D8C12BDCC69D4C5015B3462B2330046828399
029F6279A8109034B2D8A5AFCCF1B0CF20378A411863148DFE9DF7B5BA6219FEA021D9AC10B2
42FC55A829B050EE40C7C8213C175F882CF68F8EDFA80CB1A6BE053B339A70B1CC92191D15C2
D3E16ECD5F145AEAFDB83CCE8849508A70C3FDA228949070E9103A881697FCCF2AAF69A213B6
808F27694433ABCCAF502A8B0B6F075F7459DEECABFB827F760C8240D88EF529F4284B4CBAB9
4E8651BD94516005F72268C13B962867EF8B7939E1B077243478F83951F995B8C697508E9734
7E5EC96FFD7459C17C9C7C5FBE3BA5CF15EC0DD2872A60C31736F9C3948371B10A903DF62A9F
C360933746F20809C2C0917302FE0A397F6682F51CEEB509F4A070546C7422DF6F421B801D06
B3CB6F7D08DEE3E53A21DA5B416678170769ED91E27C34410BCEBE8FFFD94B2D6B22E88FD377
DC10BA223C7F305C6D7CDBCDA24CA5B2D8A0B83D6399ECEE47BE4421A95E6BAFEB7E539DA63D
CF328E55F4239EDAFE7FE722BC6B2B2C4FD89623023C8EE3AD682DB456968332CFE7145C7392
F609B0E6B5DB4F3E5692F3B80E0705CC5E712507D6B85E3372A54911336ADC17B2835EB4E470
7AB102FC2B765A2EF0E0EAF396B27C04DC6141E769475009F5784AF8498DFC70E93F5FE96EA4
364B3585DF27FE165C25689C8CF8D8ACF3BB4705B462BEFF2559A4E43B7A1118E611CC64BBA0
4F2AC87903880F8FE94B2AD27C1DB989E9F369DA73BFDA3A2BD6E6BA5ED03C132505E22B7DEC
FA770050D6A29C09E32A3F610B71E5C66A96414FE18030F79C652D565184723771C3F7E67560
27C68BB8F0362023C22B90B1A6B742D3D65297885AE7226F7AAA60309FA0E089F30731E30F4C
3675D4A2C9AA15CC3F8F54AFC4EFC6BDAB1CFDD3FA6C62C58E1D46F0F8495178A7265AB6B96E
E7EF51CFF1A24EC5223166239F892BEB7B2E5848B5D074BE03EC888937AC362D9E0EBC51B9D6
9C33C1BC3CBB2ED97CEFFB0BB6CA48B78611F8077532370F71A783E414ADE9C2A8E2120BD984
9F52872C65A4EBFF544E2DA3F27477A13457495F422DCABD8C42B84E3E2D28CE9B8ACE50456C
0D67D7BB4702A51D123A9290D7531611EDD7D022F6903D6B3F9574C3536C6BAFB54B00702F9D
C1EBD4BE5C2E8B113F92081C3A7F2EF92E04F0A53E67C1A0DF27DD65BD8C80F200260AAA9D67
A78A646F069850C56DE92BE2FC4FFCE96F0A4192E7E8BFF17413F1E0C01FB92EF970477B44F0
13B3C0ADDD856EF6E7D9DDFB2A88692760DE7CE43BA60528EE4CE3E656839F74812BD758F890
1F3E0E26782815F286F01E88ECB90D2B95B5A1183836D6A998B2EF57E9986185A91C33A0A35C
AE7D925B8DA8917535F1B602CF8A5D6B18825021B240BA96623696A8F6E668C5D233D537591F
5877AB2CCB7E954C057010706EE26901D64B2FBA1DAD9CF2A0E7AC704A96A3C4F5D6CB95F78D
A11ED9F98D36BE48693EAE30CD1BFE3CDFC47FB46ABAE7D67267DDDF0A319EF85C918FCAF6E6
574B5621218D04FE1864F754E22DAE2000EE135B975E3630064078A7DFE087EC81B86357008F
097310D45F7C10A253A90D713A790F6B0B3DD6FACFA99AA1513ABFCFB01FD363F18142750A33
FF283543377E73D1C006D8BEAFEF1BEA4EC8C56B46EB5FD06B85EA234EE5CB844765C229F084
DF8D3BCA608C34742BC6A8362F5A7994AB11D85600C5BAB2729B89DFE0E3B47ABF8D02367B53
9C27FC772838D806C991C6B03B9C6AF106771F6F7458F6AFA4A3DBCABD7F9E45FEC22A681F3E
039A4713CA7D9BA1E091CF7244F0DA2E53EA1323E03050E61C72DDF8C651F4C340B35FA341B8
8276A741900C9DFCC0F7FF866CFB348FABBEBCAB187B3F8AAE2022574F287324CF915AB8B230
1848989E807567C6BEA29D6ACB9CD80D6B54928F8CA4303C6B519D7E3E97EE92EC9FFC4AFFE4
D842C979DC923479B21136AD12D8DA127CFB12053E0B293A35D0152D0721EA96D7872BA4CE44
7978BE1CDCB2FDAC0D12FF26396AE0266D47C2170A444580EFBF5791E1490A978A15141526FB
1C76272DE761167C467178F10BD9B949A4452AD1BE2E79A2290C356ACCBD0556A3E68A88EAAC
42F166C263F37A2749827B09F77C5BDBB813C7EE62F625B68BFBF3F265B1D11D7E19CA1E1D31
BD6CE1CB12371C2C60F2F8D56D0C122034C2E28995FD0CB0473FCD2893892219BCC799A233DE
1809EEC627FDE75A66C7475BC5780D7F3B1330E496075913B369CA8C50918736BC3119228D93
E2C2316AC4418AD32B741665F81FE667D1697D8F59594882424F012228DB557D6FDBC99798BD
81C40D89C583BA80DE51DE3A458D350BFFBE35472B1571F78D590216C812EECA285C6AB4059A
3636B823D0F0BC2D931E7E90E2B620374099A43B8C93DCD6AC9EC986E84A2F6923C49C92E016
F58C540F1AD4B2AF8D878D5921C725FDA3485C058D9FA1CA672411EFF31EDE22BAF340B62D5A
6941B848EA9F56C651DC64D5193631E88C6A70BB78606A9B7EC9CE354EB410A5861206179B65
3211263CB49D512B20EF237BCDE0BB8F89A2013D08AD7F74EB690986E6097062902B4C523B34
E798A7029289C6C43DE12718C6E8ED13A4B987C44A1FB25B69E121BB352BD938695E64981DCD
DBB99DE0A98D21385A29792D9792949B385CC952F2E7C874A75D43D331091B4894C176A42EB0
A8F3D2C56AA95D4FD8813BD56F0F41BA0C769516BCCB1FA3284A9E973C5414300596927D6850
9592E224172ECDF8E90D9962BC4227356932574D951F6A0EEEFAEFAF771A5BC8A07480C424A5
5BC53CFFBB6E4EDE0F6F8FB506B5824086D8CBD0C3A1C20D067A111DEE113523BB7C690D3DC9
1F230DF7073250C779D6D3B1EAC04469D32C787E9425C27D9CED3F514C5962854D8BE3BD9B08
99685D1648E46A1484A7D6B820CF8382034E05EE3BE3E5C41220B68C7F0D7DE690B1A7F2A047
2D11C34CFF62F3D355FB2E237738773DC16420876A539E9A04CF5CB2389DCFD604F258317573
E5F46265BB4D9096639345B76EBCD2E0290721342ADF75FF56FFC00D302DCD7576CF0112C9F0
E30E4943C811081D1B54853777B7BA249E7084F6C5D7CF3C6146F4A3F88364DAA093FA30D248
133DC41005E66C1B56C191E6858ECDA5D3D8663635D796AD9D3548087D8753BCABE34D2CCB70
66CF23EFE18967509D4F3F6DC3318F7827C01AD194F25B20DC2A9D08E4878DC6C4A42902CE15
D2DF0E91D477DCBB5BA0D22EDB471F077E1B8A04F4111EEA04E1B29203839C19610C14B2FEDC
C1D6DAB356BE0FE566CBE184082F89E7C2C70EAF2A5123064A8118919A4655C4E6BC7E5353AA
FB4397FE2980588A678A2B7545D1CD3EF800A64512A1DF23A23249344278150A02804E54670B
FB4402A5FD402415598E1470196FC70F90D43DFB83F9844A2B91D914BFEE9164BDCF1F88117F
1337CE78CFA07C5D37F5F4CDD35CE6C8653CF2073699FC5CF848978E173C27B545ED35DE88D3
BD45F85782E5E51A9C2213C2DB65ACDB8E74274F7BA880A1DA7205FAB07E86A650499B8B2595
9C1DF4443A003F2616A68266C7BA1636767FDDBF3F50D432628E5219BDE4658DDAC984EADB62
F9DB863571E4DA74D24024C2491725427509469F5325E424B48993707071EC3C45006F1986E8
79D359606027510D5383E2178D016B402A18B914247E0095F9B7F905ED97386780B1120D3909
93ABAB3D18A36A2EB9BB8BAC2F084602F8BAD9CB754FEC8F3F4A263F48263C270EC619E73C0D
1E9178CFF739670A55CE6B1FC8EC2DB82795AFEB2135444801378862BB1FE4188C1C027840EB
A39E431A4D33F1DB6657F1DA89D2CF31C9BFC649A36C1DA8B28E993B4EA3B00742522FAFE528
9F1C736D6BA6DC95EBCA8DD45AE1FA4053411CE9AC5F768E3F20E2E0B799173B5D0B1FC393EA
7C86D8D75B511BA49B22ABCCFC43D9EB05B92B773728F9D2C14F0ACF1BE7C551FC2B8AD0258A
B348D9972B1939F9907B6135BE10B0D5FBFAF7BF857711DD5874C904544E12D6598A30E426D4
BD5ADA82F18AA5A78E5AF27E29C2B084A59DD2FD8DFC883B28296FEE1E9C143723667CAA3469
730DE83F2766A0B7F67025E941E600A3CF54BBD06D7AEBD95B80A6F05BC1D4FFE50E7FED9351
FA364B282B4A7D252F17C2C6FD50BE1A7DE88EC69E9436F8BB2BEEB6070668CE0A55AF51AF2E
9AB88DC3809EFD3BCBFA40778054EDCE6EE4D5E890187C340D22A7BDAA66B7D1FBA0C82F1B31
596699294BA2DFB4CA8DD08BB5B1DAFD4CB81049C186A7E91CA85BF3CD725084CABE2AD14BDA
65B947C107F93D8FBBC10A0243F9CA18B9868D6BB70963922B30D619BAFE6F632023C56281AF
A39376F838EE378AD1C6D7296DF4AE79E0D932B0DC027164EF2AA38CD543FB81DA48D884F056
3F53A28B59A2A9A0546805F55A60B2DAAE5CA90988508F9C8E5109FE3F6C8BF8B72A5E8D9286
E673216696D80FBDE4CD2AFF31A575DD7BD6FC45556E300127317DD0DF074B25594EE07DDBF4
31F5E3D2468F761DB02A85ECED800FACEA52139A1740D8891405121316E4D300D5F5B683811A
978EEF289D0F78D1CC00C25C539D2E828095A5C55F010771F694EAAF8E5C895204ACB45C902F
047DA19D518978528C07387828A977A9A845A06A2EE18C1EACE655C3E6F730AABC43E04C939F
73EEBBFF7B1BAB91912D3DA93E464AABFDA0335DC7037015AC17215D7D0A02AA486C3C7BEA98
16C11F027B577341BCFA10063C7AB567122B837AD85C5F47631FD54D82313CC04E1B2233F92E
E844A6DC0197E797A936CDD10C58BB35C138C7C5F84181A9EF67246E815D4B355877564A07F7
4E8C240EFFD757DE474BEFD4C66A3D50CBA5B7DB5F78EDF2A17766B38F5D8AB4B90DA090F75F
AC311E44A27AC3A5466BC6BE3AFA08B8B2EB31D998A45108A77B7ADE2E95835103DED4FC26DC
3CA70F5A29D76292475876563C5E5B7E12B2DBAD372FAD8EC7E6BCEF4FCC7E01469E39AB46C5
B3CFCDFA60DD550776B9748AA5581957F2D884063FE1920790EADCA2BF8387FC9232766D8FE7
2BBA9B326445813052B28D1B974F6221346D1B60C35678A23B9CEF0B87522233FE575C1C49F5
F0606D764B02B5EA88BBC38EF7B7D96B41EBE26DE64B5DBB69ADF3BC2CB73A046B20C3A2CA1F
7500D1F82362AAE79EF98A1AE987976CFADF7B041F82FB582B5FC6BFCD69187B839CB2BC18FC
AC9881DB194A8282BF236A8A1A1FE37C4C5C96505705B2D29BB01B70313C82C49D5162011DBA
746019D131ED8B94E200E1EB2A72E59A57C7D9584B46991514F2FBAD9045BBBFF0756B638177
676AB0A4A717CA9CCB454D2E157D90A15688AA1D4B3FE43CD6F25034BEE45158EC8EC94D8363
027E0D4E18D13C6A77D9D97B0E55AD6B2DCC0E7B77D6A942F7BFB3F26328ACDAE1D4DEDE1C6E
8310540CA38E0D4A9BD2C9DB61DA674716F3BCAFC3A43BF5E63B4E723CF453241009E1E8853D
F56FB8B61E969461A479F4EB860AA7B3DCA2276623A688177C0E3F4D35E6BA3802973CD5C15A
F7BB6FD30A4F630D30D6D9F976291DBBA055A7E2A665434921AC00F211147BA146D78CC9E00D
2E1956C15A95AA4DCAA66DC6A73ACADF828385FDF1CB047C6A1D64ABC5575458EFF7A8B0518F
459BC0CCEA2F5BE6C17C6B2FF5D9D6671CDB4D1EBCDCEDE311EBDBC46FFE4CE5925174FB6867
BD8782FBB5DF89A3E09B0E3A1351CCEDF95B919F5089793F82FEB57BC6A103F8CE6EB84AF506
C4ADD60A88295B0ACEAFEA03D417664F98C420B2FABE59DD85837D7F54804C5AA04ACB78C21F
6338989335200E5723EBE2B61F1AFE37374BD1281DB67EBB38CD7B6FF4955087D91DB6E50527
AC35D289DE10863B9CAF2F18A24B497A2E837B92E18DCB298E95A553152A94A0A0DA2A2589B8
6FB2A1FF9D9CA0E8482F2ED922A1805C7A6502C1EC0CE0DE7DD93D9D030CDC1425763008F573
5AAFD3BEBABEA1EF6E61E081513C5955F787650D381A05D0B806D2FB47314B962E717C3828DE
D4653BDDDA36DFE2131AA67583BD95D70872D1912C8635C5D188B42DD25F15E56FD0B7C8DA49
0157007B6D8241A3FFA3C8E3B105E233F6FA1FA4360A56E4A6D1DE7DBF15F9A9B298154129D4
3FA9B8208C40A519569B4C783B2787848930DDA9C566C58933F3BBA994BAD9C573D0130F818C
AFEEF9EF6B21CC05DA1CE1392F8F29D5550385D2F784B65705ED82A1ED75EF46537F3D336E91
FE5FA1843B843403DE927FA880CDAC0EECAF031D05E7F293D0644AFE6233583230A0D831E228
5B10CB3F25FB8CB7019A6C0BF054A5FA3A97CB6AB89FDD920E51B3DD8ACBC965A193FF0F09DA
90C0791C747422188DA90E2E9FDFCE7CEA252CFAFAF2616559FE7886C2E5C2B399F01A92BF00
8101111551D8495869B29620BEBF01FD091CBF8124DF8F433ED7E11F61FB6D3EFBB8338C8C9A
9AD85FEBEB8157F33E399CFB06A07487A28EA0946285667BE432D44195192F0CAB2460E5228F
0273629B9718A09656AD687B0B097919147AB0040A8882E5DF6067AFCEE5ED0DF2591493F01D
EB106D2BFB242F822A4E478A3C587BDA9E3F521898D0DD3020C30C999721A4E2DDAA72FF600E
D8481E7AD89C5E0A3A548442A5E117C8005BFB8216EDBB85DC1206320D903855BCFE52EE480B
F2514761D5E70ACD27EC36294B8EE83166769B1B7911D4C6A6E768A82BA9C6BB114FF803C532
590B1BF90E91FED98B2CF78378AE408D5013731547C548EBD62BEEADC32BB41796BC13C2A230
0827C5F717D4AC53B31DF3E1824AD1C5D4638DA0DE14B1D9ADBCDACA45CD024F14272CF3FF7B
F297EC6BBAA06566F599882F42C14AFEFBCBE9F0F0296A9FAFCC0DD04E24AB71118EEE1F8051
755D3F9A1ADE015374D5A6C7473AA23189A35C39CEE4022C5746C57DBA2208289A117DAF48DB
979BA835DBA59E4F5378B00283F49A82B5212EE30CE2BB037F628B9CCDD05E9F405AAD364F76
32B5C0338638B678F7FF9611C9E7AA59A50E28F5CE3582550453AF5B383798E03BC755A85C31
EFE9FF7F7A855103B16FCCA4168A7D47D0B0792BC52DEB56AB0C88F1E4C1B86C8382B5E825F1
D020D74229B25E40B774A1CF6EE02A298447C2E5DA5B4801416E3A27542EE0583BFF6B2CE90D
A6DA91B6814D58460015E6A6F6DDD3A804725E38C4E6E8A5D810075DC614FAF54DE04C99CB09
2E37B4FEC55AF9177B2D32A570F18D0E5FC556E3BFDB7C7EF95003EB25C1803FCF40D95D2762
DB4BA428DAD4F874F08E2852DFE9A9D22EDCB8A8A81AEB4DB000100694A0775C326877E3BA84
03732C640B82FF394717EFD48403550A7000A982A4E4B53BF01C0FB6A3F7756EFA462EFA06E5
61A72C7FFB24B3DEE827AC35E1EB302CDE6776285946826EDACFC9FA595C7D722DE059A6FF17
B6A1774FB4556398881108D239491FA4AD855237A8547AA55906DBE482F5B97979C885BB65E3
2E38949052E2FD9E714D7219161DA94ECDBFC591BD6EF0A58C4CF5CB13C19453811FFB81D44F
D2CD81997F3EA89B8F0EE379861EE1C7D18667E62A7E363CDD956B8E7CA9BD85794B154EC5EE
A9D3FDB960E272178043F4F0DA163FADFB2AFA9BEA23BA6E3BFC1A2ED7CCBF014B96E58BA2E0
7CC58C3384B38FC8E4CD78732117650C8F7ED5762587BC1663BD46AD4589E17B933EFD553184
391BA1D14881EDD73019485D880E1B1094E720B30E51EC5365E86C36CF2B0524C88477C0D71E
2C05E8B0388BACAD8BC1FD6633B41A18A53CDCAA86D2A7DF1B0B10326B398E208EEDDB3EBE80
516091FB7C46EFF8F08EC4A72DD8A3FCAC779895C14622B141348C7695BD2B861E32B31F3E71
A2DF12B0A7ADB96EC0C8C47386FB906C34603043EE4EFEACB7B610AFDAA4F19147532B2193DE
D1979B71C9D125590E78C5172C527988DEDE67341E306538CD6A837011130DB62DA87BBA4211
CC87F6815914AB0187B0B947D50FDE31627486245829E1EA5A94599F0E6ED0DB7853ADAE95D7
E6CD82542A14941C207F9794C9224E8DFCD434DEED1E43E7C0B86CAF70F7AE673305894BEB0A
33A840C497D3424B097D1065C57D9CACA4361C2FEAD7193B6CEFC1A10F26B2DF305155D9A392
5C360505C29C40074379B291CD8623556257266BAAD68E219FD9F24305F961E5D6017978173A
5EB177E17057DB577FDCF63FB0D2D45BE7D63F0BC205E7D2F4C1749CC9DEB24E730F1B7420A7
79639237756CA9516170EEA07E607EB3D5627467F65F5DB49CD43FC6D4A3AB2EAD3DF6703EBE
613ECDFDF64B7C9B29B08AEB582DDA25F944167D367F5997B8023564617C517873FFED86CCD7
09565DBF690F9FC22E38A7E619718C9CE7C399995BB01478EB3AB496F1D7E107AFE627C77CC2
944DB98EE2919BE57C144480400FE53970403F4F0DFCF69CA68235F001309841CAA6444EBDE8
B8ED0A1B049C62E57B97FF8E2307573BDAAB8913D220B68A8D551E2E6653F6B14FEBF8755440
47401AB366A900A58DA1C37BA66252EF1874B39974F0E31086BB20961D139AC7D57B8F2F8E8E
D659F0A68CEC598C35237B820A482D624DD5C628339946A0DC68A8BFC2E660E07F11916E951A
C82CE45D7E4D31D2FA5F3D5CD821F7300EBB8B56B7E4A52DCF641A5B267A53DE0BD022B3F928
C1AEDC8AD3F3AFF20EC5E4A5ADE35A5F1E322014A2FB9D19F7D42F994C1E4BEA452E25A090E5
9297B10EFAF537A2D584D86CF900F986C2EB13960B80BC8D133D2E46820112AD9921499FCA16
17DC84AAAEEC403DDCAB8837EB69A24C88407437FC156535A834C29FC06DEE695FE1734DCE89
1BEFD813868AC2ED37A09A9C29BE143C052AE238DA802C5B931D325EB4007FA1554AF96DE6A3
82CCF9CD405368B30209D8F4AF855716F0A78378D1A4152D10A5E3198D5791FC1C7D4AE6BCD1
5BAEBBEE5360CF1D783EC7B15B43F93C20DC09B6A016BB511BC0DB4C4FDC1FF44289447DA34C
C530FCC1988BDE9210505CE07196B5F22FFC400D951537978387DF257562833FE7E76CDD05DA
C3FD37F218433AAD9C2EDD90FDF346B92754FDA1EB1644C8975F1AC271D75F442810C163A2B5
2781B72BAF22D21AD77D41F78325CA190CBBEF27173BA0221486ACAF4935D2966FC34E61D4E9
5A15D40B8060546F99D6402371A4616476AB9843C67F15B2E0C79AFF014A8D115C521FE27572
B9FB39E0C057108866F8067981691466E13F68AC8D6C35F90A347B510F0A30DE09B98DF4129F
9EC2435B7F9E625909B305053B21ACC8B7D03CAC2B42BE5E87D6EE4392E8027E45383E9BD62B
F105FAF9A30E0C91AB1F3C55CB51995D7CDB27B8940402B67B9BB29D1B5955C8333863F71323
8637A42A3B8A56BE9B3B8C21D9CC04E187BEAFEDA56F3135DC4CF13867EDC44BB2537065FBCF
6CC5B4676E3A7D0331B6360C72291A3D9E9584A0E42412D24CD652D2D0A61AE1FADBACC27580
0438531823E31383F3BF75AD2C77A79D87C68E63FB3ABEE97D7C3B89DF29214E613B82E968AF
04E4A016398FDEC55F3F5DCFF53EE4C8F50A979F947A9489D878B7BC6C6D8E3D8BA220F44247
1FBBDBBF20F6B542A766B85B36274C7F59232E86B89BC54912B667887F864FE14B655D600674
E70C7A8F81AD2FB92701D3848E1D4BCBC8D0F4E317AE99D6F23437401E00F7A45E3BA8A10CDA
37ACA54571F16A4FA9BA469F71AC1395D37641E983A846CF7DE08EAF91EAF1B50CB9A9EADBAD
6D726799F70B7D8E9930CA0F60B5E95AD74DE84B9CF0CBA8B5767C12B62B875E9F96CD0AC537
256214C9363A94BC091FC0E8B45FAC9F1547C9A28E29F846ED8821530AB5898D9FDF0A58D506
E2C8BB70F640BEB821AD493B2F544ACA73584CFABE675D45706E9EF6CF8ECE867C1DB79E770E
0E000F30E64661469581DB39DA9CCF9783865BF646CFDD575ED5E5B0D3F398665D076EA19BF8
80C343253B8A86FA250964D45DA4DA056ACE37D73EC9D9C53C0E61CE96DA8C6C12BC3A3BBC40
DD4B95791E43A262BABE81E60126076C7A349AFCAB912C0D0D3B3771AED94F5BA90B9964B745
3BC7B628AA4380072438A6E7AC7C40D5C5AF2E072EB864B30FEBF7970E83574F351FB8F10695
AD664643659538E62266525677BFDB9E59003D79855AAB92E752087F138E79C5D22C6977043F
ABEDEE2F241A0C785C847BCF9B48FB6D1C552D60072FDED1D537277517EFA945669B16CA32B8
B2D8B483268DDCB6F00A3F43DD96F684DF21106792AB1D000F9AD65E85CF1B91467E3D4470F5
B40541F693226A1ECBF8467D6FAB8C8A99D26760643057CC977B92FD2EE52BE5152AA39961BC
2170D23B90BC6D79BB3E13BE3362E81033A0AB5F9902343B0E4254F5CEEEA9D3BD90B8F3D177
8F2CC8C5B1EACC65A2C46A49FB3DBCAB07A8F9A07F4F67A147E960CE643DA0FB451EE8E30158
A2083F4A2521B509383BCFC964ECDEB9680F1D4B5C54114F84027CEA064FBD53A7F1BA318526
BC4A33889FE55712D7496B4617C3FED3ED5357A0B4DB17D162DF05A701256087375FD9674440
36F376A799CD28EF5ABF726E61AE444182661DB46DA17B995CCDAE0B2123D1CC163D2DDF3A42
DBCFD951BCB9AE709F963201D58E5C8CE701BDF2C6111CEB83F6D7C2E7C7013151698312E6D2
FF1617DCE6F2475F6C21BBC83F086E67C53E76735C82E3DECA8EC7458C445748C24E279A6090
CF78BC19ABAFC68854EE2D5EC2E6F4DAEBF37E6948E1ECABA286078E8CEE9FFED59F0937A4E6
2D1B0833A7CDC16516CEB2CEF150AD08AF75951EBA8FC01823BEAA232327089B990039991E31
38451BB972B559AC5012419C2D6362C16A540F6A40B44CC12D35943BA077995048FE5F2B81D7
D85D1EA1E84672E43E333325289E7888FF3C9C7E653056E71201649B70834FB1DAA67F3D01C2
C8D07B5F6308E61C076D9F7DCDF604D652AEA56D5D507A4D727831A5FE3948DA472163C621F8
3C8B2878FD8B96ABCE28B3CD83C9C2E08A8421AF5247CA6E9A8828C78D09206F8052201F970D
485DA2158B6E81C24834B31A8F4F2AECFB89982727DAAB34F2A1CD8016F595C71DD19A7963CD
92395FFCCF248599118754CD8414548B97DF18B9CFFD49163A67DF17ACE0614B218333983C37
16B3AF677EC99E7BAB09B216B9A1527ACCDD137F50E0D37ED634910BA15CF0498EF8B6DE3F1B
846EDB13E22CB55456FB5B9322B395470B5F37C014D6572A3C3FF10B212880AFAC767395BB33
25E3C551A21AF572BBFBB118C9594A5ACC23C0B3523E43FA6AD72B28A37A82FAAB983600CFF6
2CCB4A04915DE391EB5A7183FF5E4F3E4D58A960E49A2B9D2374EC6DA504E854A1B68F5C2925
AF5F847801E7D2FA2C1286EA5F055FB7D222A615371D19D33E26BD537E0E323063D01C1FFE63
190D1D4DB6D5F45298CED7DA97F1CE60819906BDDBFBC5B679D2580CB50218F0E3AE8FD6D06F
DAF8710426A32461123C450B147A01080873511DA44E95DE756BE0E6157176AB43BDE5A9E745
9135E063DCD5A0A6F7779CE73E09A2902A2F040CDD62E0B033A7B3D48A1CC38C69D219FC44E8
0D61C1DDC6E3F553168913980ED2FF3858BE6C382C5BFD1E823430588DE1749F7C21081437A1
91A54DB980D028AD30D6DEBCA652341C0F6E4B211FE3247FCA193380155C9513386FEE05B3F8
3363DF205D7D109503011CC569F5E62F44BA7D1ECE2DD4533F1BF4157FB346D8BF38A0748588
741764FC50E7ED40E7B58AEDEE8CE96D7F09FAE151C18C006330B3B6FF12D152AE50D23C197F
461DEA3E4BF5EAF6C3EF700FCCBDF738AF1B2E4C28B1A514BC19A3AA5ADEC18046D75092C2EA
9DC70C6D98D2EC25CD0235253480FEADBF416032296995F5E94982A874EE09527348E31EF84F
21224F5F0531F85486A77FEDBCC60539A27AF619CAAB23E2699758529B157C7F2BAA75123A1C
5AF2F39A29C41B7E77AD0BB0D1290501CDF0555595583D04E447E75013915C459468E8378E5B
6146AD5451ACC0E902EAC8ED877DA0E6BE58ED89BEF43A870E1C155F08F8CF2998B494E5D887
A1E0A7085CC19177EBEFC6206D3726AA1148E9306F364B724AF7D5263BACFF0E977D399CCB58
EC653CF81F125989EC81F2224A363847709E6AB95FEFEF0537161D36CE2F1F36143F0DD6B139
9B31C02EFCEBD869359560BDE67B215FC88CF307AE81F39D793446C3F3A92F81E41E4C4AC627
0ED0A7D4C69702FB4C6CACA87CB1542DC76DD3D728D7FF25DBF1D491F121B27AA35B39296D48
E85D7EAE16452BFF1D9B4E211E9FBED567C9842D1F1503EC75777B01F4FEDB4F199CAFE1C559
47B17D087ABDCF0E7B5835AF7C82C3D9A4ADC368D78A2B1D46B2337C0CFC7A9F8FD3A87C6830
0C2B1EEAF6EA1ED0DF35F0D4DD92C01F76E50B84C879EE4D11510A0211C19A77E2680E4EB2E9
73513EB8B7764551FF139A1028267CFB2406333BF1C9D13286C7EA902E2756216EB1435189D3
FC0954CCFC970440775F6D106561EC34B2750ACDE5303D25DA50E29FCA7E3AD78322ED26ACFE
F57ACC243E7648BB168C9925CB5B57E2EBC48F0E8604974215FD03958EE95CA8F25172CC8C99
92B0EE94AF3E37F74D87C93ED14D96C15FFA788246AD6E73BCE2E8242405C5FBD3D01F8AB617
332AF525DD448BA8327A6260D2D2A3813318F46D7620EF1F9AC539ACBDA49DF39E17B8303A22
B575E5E8B8FFEAD8B7DDBDA7F9C29230279ACEE05D25704E230C837C09F5BF61FBA7AFEC8B44
8C76A83E80DEF396194BD7CE0274C3346023DF99302687CF624704788151F8FED792463BDC87
12EA74DA79710DAF5E059D1A72BFE36D6E1D688785DAAE4CC1E5D6167133E2BE54AA567D6149
AC06139EB1F705C29157F8F5A6431CE5B57374BF68C1D56373B87114722EAE982F7E9837C52D
FD5BBD681311B1B68A8E78050A96BD14A374280F541778778F76532D7F9F7FA31F41AE5C8193
D4009E8EF285F96F4668797A0A36A92D6C7004AB9E8D374CABF4CA99D072807AB7A2A6F137B7
A1B1DCA1995138F432F18C488D20E4C296823E72122101ED3FCF9D5AD16C4A911A951E59F2E1
ECB61B6A2C9844E571862EAC09A7902979F9E670AB5A47E4107FAFC36B0B25C85B109C98847F
7811960D3E0408A9DFB48C21C2E4F540F314C6225067F0B9AE3F507D637C3F053EA154529952
C9EE790AEFABD75C9A0FF001A021A39C58906DFF73952AAE28816D999955C446EE5B82455E4D
AC525656AB41A857139192B72057289F02DD6E2342F3DE1E5DEBECC81532E106BD06AE97DB72
E8F335C7FD6335A7B9647D38B8314B28742A8D6CFD6C037913CA3F10B77B0133C67C9130CA87
32FFF366EF89D3F57C223C28CB622AC956453071B85C068D131E981EDBB9BEA673D4B9797EA0
5BFA78F7FBBFD715353FAC5000055BB7AB0E5F8822941361225B119E4F20F108A4A2D77420BF
BFD8DB7A3C2E053C4925BFF27CFCDEF223E73DD02D55F6ED833791AB74A79DE8D16FA1F6E56C
B5E1284B1E2414DEB7AA020B4ED8AE44BF6EE6E433E82A0D6123D871DCB14DB07F4631E69F1A
70E3DC7A61E434C0468FAB02381732BEB2B958A6AACBB31CC5347F1968A863CC6C17626009B1
47C3F7D2764F46F89476032526FD0B1D884981AF0DC2708D1A7C7BB6548EDA90D7C67BD93B25
6A36D4975BC9C9E774D93D2D123DB84023AF2EFA22F7F8923582D4434A6AFDC98D831BBBE89F
107E2BF6F2E8BFB314C20FD8660FA50EF01BC8489812048F8AD827BB0C0A2E63435C488DEAA1
78DDB75D4D76B60CF95D07DE85F5764B5484F377788F49ADD2545A8B8BB81CB11E52B1964577
E3B34F3505B2ADE76BE512A0EBCDED10D35DDB2510B372AB71CA71ADC085701C7A5AC7F47FF2
EC11912EC6EF53A8DF4E2F823A66479594E70E14D78B2BE6108AF4D077650C5FE03CCB17AC04
952977F668B887C9C426C2EDE490E28211D8034C7226D128A1B91B20631F505143AB1537B371
709ADB7D7812638416493A4A2EBC27DACC8501E83677D7CAEC05E7FC8CDA2D17FBBAD16FFDC4
7035478AE84CA72C5F644BEB0904D2325968B9E8065ECBEC37269E6D9BFA3CA975CD06C19F1F
23B073D58E06151FF11ECD71F20445C2A6900AB9CD54D4C8D3845C6FEA080E42F758214DC001
27582F6A6DB20958DA4DCCF3452B5ACE051496927CEC7CEF42C0268C9517DCA4D146BE0B4B00
D7E510737F28AE1407998D095D89354BFA32738F113FA4DFD1CC28FC16177F14AA8EF8350CC3
5793E01E77FDC2699638A0D269ECA8EB21C94D05632E3B43FC33AE57F5F808C0059F22F1FBBC
A884EF91D744E54A8DB6D51EA9F083D89A0571C5E7D85DB94BA8550828E75A61967427330638
8EB7BBEB8F69BE203E9C9027EA35C98C4A3B5622A11F434204BAA008F3BE852484C7A61D7DE8
1C5752E8C600C8DB896E608BC8BDADA3767DCF3A6ADA32C482B8CBE17B416783AB018243FDEF
5BCB84A2294954DF5D1F4937A17699B039B9694A20637DFC8AAD926173D935652F626696ACB6
3D8CD8AB36CAB2499F44A3FEA78A99BB3BF16FA52EA267672DA977CF2D5AFC1E49967DC04A26
E1A849FE20D826BEF6629CD6DC568EE87D4EB3DC9CC291D829AF1251AE6220AB60E7D750E8BD
F7BC635C69C94656E638AFB9DA6A5DDD853777F26B0B6167B4CACA08ECB0BAE84068B24E1EEA
874FE583A10FB7CE5E581791235427784C0E1BF18C584BF5F2330AFC21C26E98BFF1305462E0
E8FD02D13AD10D33031D60924433583380A48B976569C182BB636E98D39F9966DB853058BE02
ABC7E978C7C2F45D8F0DA754F51CB3454A25CBEE824FCE9782D077B8CC67846FB33CBE7C7F64
E13AE587E4096D7797D51401D309B06D5A87E1467125B7EB3C9E4315CF6C60B31FE767287C66
9BB0BCAF25CF0E2D22EAB00DF82EDB90EBFC6B8F1649582B444E6337A7FA2C925F677B4AE829
26A60FEB9D30F95EDA59B86C0658184F2482A9F09DA453B88D256A2479FF03D8033681200A50
5D43B1A9E61AB71262EE3C7ECB51FA62D6046A9F35596A0543DEC82E2452508F0DA86C5EF6AA
105D10FD1F2769501A4FCF49861CBEA6696BCB76A8E3E84DB2F43DA6A17053E9FB2CB459AB7E
A91A80E20932386D9F3ADDA23D2E4A1CF5D6BA73B477824ABE16BA45E641F34104708129D896
3A5D972092D360BC6C16A53DFC76157F227E71EC621BC9E1C9DA074901C4C288702566A5C863
9C39144EE346158716D7CD94739742B94496DE1DB825337342F7CDD6DE68BDB54708AB9E4969
5031B07DF9366C3ED0AEDB35BD60513A249AB38D6BC44472638A17B537F89E6BF1DD367097AF
E4DA5809F9D9013D5AFD8C92A2CFA6E040F28ABD7E0A0D56BF97EEC35CCD8D212E5A772B33D1
512546F4C35DC1CA4CC666B01B5B8FA9F517CE409F26D3710C519F68E411E47AED69B8000FF3
DF955943A0CBD6EAB124A6BC157ADEF8626D8AB9F6910B18E950619146C84287713C4F3E6A33
11A7D10A15F396760F43F6BFC144F74C0D3246C8F9E3FEBDCE96036B6AC4316085CDCB72E7FE
52D732B83D65F48E5D23B6E5E948E5AE2BD5686ADFEFA3FD4601B096BFBF04D4924384B764FE
34D29C5E61629DB5956B8A3F7C326D7B8D2C01EBBA6D875557BAD134B422A591FB636F6FB325
179A1548DC183FC94CBE924BE379A5779FE2ADDE9D652D78400CDC677EF0CDC08A85BFAF5022
BCA9054BD0B49DA4DDB77CA9F6D2C97A4145731D48D822089E687481DFF711E2AD61428DBCA2
2C6DAED292450E9D6BCE00B79FC3EB027683352DA7A200948F06B2946E42F8DC88FC22D43D22
E4527C4C0CC4153A285D78339C2C9D30F7C1A9D014986BCAAD3ED6DB41D66C981A1B0B460F74
39A06C2F319A2F2EB24CF6485E6B46447F908BB4730875090700733CC22C5E0263E53E80FE56
862FD336D263245C2D433C5F4ABAAA7A81B2427F9AC8595498140CB8461893D7D1311075DF42
2DCEA23AB71F12DC8909A0AB787219977214836D085D456A053A193561C26A5D4DC2DF3B99E0
ED34A9FBD688977EED1D18EFF8E8D617628DB902988D1B3066A62FA123C26235368A21B79D68
022248664C93C241BC7AB24FAB0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000

cleartomark
{restore}if


%%EndProcSet
%%BeginProcSet: cmr7.pfb 0 0
%!PS-AdobeFont-1.0: CMR7 003.002
%%Title: CMR7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright:  (<http://www.ams.org>), with Reserved Font Name CMR7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments

FontDirectory/CMR7 known{/CMR7 findfont dup/UniqueID known{dup
/UniqueID get 5000790 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR7 def
/FontBBox {-27 -250 1122 750 }readonly def
/UniqueID 5000790 def
/PaintType 0 def
/FontInfo 9 dict dup begin
 /version (003.002) readonly def
 /Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR7.) readonly def
 /FullName (CMR7) readonly def
 /FamilyName (Computer Modern) readonly def
 /Weight (Medium) readonly def
 /ItalicAngle 0 def
 /isFixedPitch false def
 /UnderlinePosition -100 def
 /UnderlineThickness 50 def
end readonly def
/Encoding 256 array
 0 1 255 { 1 index exch /.notdef put} for
dup 0 /Gamma put
dup 1 /Delta put
dup 2 /Theta put
dup 3 /Lambda put
dup 4 /Xi put
dup 5 /Pi put
dup 6 /Sigma put
dup 7 /Upsilon put
dup 8 /Phi put
dup 9 /Psi put
dup 10 /Omega put
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 14 /ffi put
dup 15 /ffl put
dup 16 /dotlessi put
dup 17 /dotlessj put
dup 18 /grave put
dup 19 /acute put
dup 20 /caron put
dup 21 /breve put
dup 22 /macron put
dup 23 /ring put
dup 24 /cedilla put
dup 25 /germandbls put
dup 26 /ae put
dup 27 /oe put
dup 28 /oslash put
dup 29 /AE put
dup 30 /OE put
dup 31 /Oslash put
dup 32 /suppress put
dup 33 /exclam put
dup 34 /quotedblright put
dup 35 /numbersign put
dup 36 /dollar put
dup 37 /percent put
dup 38 /ampersand put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asterisk put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 60 /exclamdown put
dup 61 /equal put
dup 62 /questiondown put
dup 63 /question put
dup 64 /at put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /bracketleft put
dup 92 /quotedblleft put
dup 93 /bracketright put
dup 94 /circumflex put
dup 95 /dotaccent put
dup 96 /quoteleft put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /endash put
dup 124 /emdash put
dup 125 /hungarumlaut put
dup 126 /tilde put
dup 127 /dieresis put
dup 128 /suppress put
dup 160 /space put
dup 161 /Gamma put
dup 162 /Delta put
dup 163 /Theta put
dup 164 /Lambda put
dup 165 /Xi put
dup 166 /Pi put
dup 167 /Sigma put
dup 168 /Upsilon put
dup 169 /Phi put
dup 170 /Psi put
dup 171 /sfthyphen put
dup 172 /nbspace put
dup 173 /Omega put
dup 174 /ff put
dup 175 /fi put
dup 176 /fl put
dup 177 /ffi put
dup 178 /ffl put
dup 179 /dotlessi put
dup 180 /dotlessj put
dup 181 /grave put
dup 182 /acute put
dup 183 /caron put
dup 184 /breve put
dup 185 /macron put
dup 186 /ring put
dup 187 /cedilla put
dup 188 /germandbls put
dup 189 /ae put
dup 190 /oe put
dup 191 /oslash put
dup 192 /AE put
dup 193 /OE put
dup 194 /Oslash put
dup 195 /suppress put
dup 196 /dieresis put
readonly def
currentdict end
currentfile eexec

D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA0E079529AF9C
82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA9351BBFB7CFC5F9152D1E5BB0A
D8D016C6CFA4EB41B3C51D091C2D5440E67CFD717C56816B03B901BF4A25A07175380E50A213
F877C44778B3C5AADBCC86D6E551E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206
742D1D082A12F0780FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC54
3273C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB981ABA2ACC9A23A53E152596
AF52983541F86D859FC064A0E3D5FC6647C3CAB83AD4F31DDA35019CCDB9E3DD3FEBD4C2B36B
A3CF6E6C7DA85E25D8A31A9BAD39BDF31FD0D17907079DE6A078E8A409D8295F642DF492AC4F
86AC84383B0F4C6BAA7C22AD5A898A71D6CB34D2CD12266C486B75E75A69C14819DD9BB81590
88E04D4717E576B8482DBDA52110AC8B8A80E4E9D58F470EEBD3CF44A1E1EE8DA318FFF3611B
02534FC9F4018C7C57E80570D2F634D98BE5D5EC6D95051157F0EA94A3D12BE0B4B79939F82F
8D73136D3337C464D87C9D05A10CCCAF698DE9CB7CB1B0038D772B934E2E882856C8216E405C
B4A3B6915DBBD6A23948ECF970C762D542733F0C55CC875390A374231C24710762CD9DA9E592
B801A3DDFEFE970DD49047B3560E559D86198A1570B864EF8D6BA386630B1A14FA4F3937941D
694AB40BDE56CBA869A908D96B46AEC605ABDC1DE1DF37650191A966A21253CBA6F4537F50E4
367F2C1FD60FD38F35E3BFF31CB5F5379E7C47E8E27A3EFFFD4EE2FC8A7D026BFCD944D8B691
25B2437155F638123D1219512BFB26E6AA22642A376C41FE0DAEA39D24B09462E1FF02E8D4F3
BB87A95955AAE4CB2BBE3E9E6686EF7CD8231EA8EF10B6B4AC940A8A2B8BA5FFAAB24160EA64
6F3770C0C42D4A107B0DAE812DE880E9CC4C32B44B6C978808529E3785E0DB0EAA0B72F26990
DDE686EB30F4AFB83CC3D9A2C87F6B3DD6D15D51ADD1CE81E7CCD539CC2B2B15FF296A25F812
9ED5674CD32209BE149ACC5314355420BFD1053EFD124EF5F91F27B260A7299D6D1422E48BD0
FA6E39A41E539FD8F60EDAAF01946B9E5A63B85977EB3D8856F8E668F4E8BFE7B996362F6012
FD8023E12ADC8C04203F0CE164131BF709AFFF2C94700D6C229EC72B7CBEFC3DAAEDAE3328AF
E23783515CDCFA14C757B8CD6FFE5F8D28455EE28C3DF8E102DB08E529C43F54F76BA6CF5441
6F586D61E54BD78D401A1A5808AA53FBFFF3FCE46C8BEEEB31CCFA037177D8AED8CA6BF45042
4598B16ECDCB558D740BBCCC435674ACB41367DBCFC585F16D60E36E1E707A2BD984384C83B9
609121AFD810AE0E01B9B7128FD1607CE9BD76E3F2E7D37E5C0ADF49CC3DF47FFC493D601FA4
3C56761D8B9F7FB0A310C95FA78AF12CA770948B2C749E072532D386959B8E306568A1172A35
6795D411C604CC9903C4355BA4BE38DF343B63AD86FA0ED7B30FAED6C7BF283BE5EC367277FD
D2FA9A5D29EBD04CFB16E7290E7C0F90B2AC6F3F43EEC445A5AF7DFE9A67E227CABC7D7A5515
5F69EF84246FC2F27267FE26EDA07595960C52AA7ABCBFBDFA163D007B8613AC8C9890116C3D
C30BC25FD0794C291F92B5379439569264BB6F85AB4DD2A3E6AB7367532F095F96D270CBE65F
F83C2D0536F912E065F6C2507E646FCCC7D6EB65AD118E8B47017D67DBEDD125C9146F608666
FA70C6381F01D582706215B2D3D691C3E42901DD004CB116F495B9E1498ACCAB24F2A88714CA
5FF5E395FAD2B8960F0114EC0F7B753DF3135F3A066F098C23A60A54B1B2C27FA5155AB396D1
65B1536823A4B336E006AE560D3B2999D761BE7E6845677104682153B097CC023F53D33765B1
F8571F46D8610872B6570786913985D6645237A5A5B7755BFE702BC5CCB59476BD31CE8FA143
FDCBC1C321AF985ED89D55AE980E708F9D5E1824F738B4262313118CC5C06B7492D5CF876D58
F892C4D3501C299295F86E1072619FB48875CD2E73055DA2D6CAB98CE598D49A45084DD3ED04
C7D894B50E739854E84117A451A304EC56593F384797B50CCB971F331D72038D1F345EA10FB7
4B46D42F338C7443DA34063A88F8E2AAAF0E0DCBDDE36DBC729FD895B3BDEA58F1E40451E328
F1F84E4CF01444DCED3F21B539B53553D923CA5E9FD44DA4E69E8FB87666B12A6DA032F3B375
3189915C4041F2A1B54BD9BB41522A807340B497F53979AB1076675D9E63A380C9064DD6E4BA
0319DFAEEB9EB6C43DF5AE4073E8DCD2CD8CDAF5D1BC9F5CF67A5B9733DB664D0BDB9560948D
33906A17F5006E9D858C429F1922D7EC5FF80E9C480401FB21D74744876D58FEF258A58F6E9A
E03D358505A76F1D2AED973996327B34DCB11EA77BE8F29A2CA20FC6E552AFD80215F52DA1ED
5EB65876FB24C0DED82EC96814C0F8AFBC1DB375051BDABAE230A873DF8B5B55E6C006E6F7B6
334287820BA8F20D65B01155C9032D6393EA04D967E4106EE05423610BE003033E86CC7F177D
F3E49DC911D5CAD22495E430EE44D9FA74960CE44FF6867327DD3985C0F7F456B049BBE721F0
7A2EB9149A44F06086FF1391A6E2BD4A5278FF89BEED802BAB6F81A8D4C25F17597BEAFB760A
318EA610B5F145274A2B3AA611858529712D404991EA274F2270452DA3B68D89169943BA7686
E3019263133290796975CB035B2E6169B8621E7136990AB699D1C89FA0E94551191523FD1A69
CDA50CF8ADED596F56DFA218CCCC84ACDA3226A0451E87FF0E44FE54F52B37A59220FB135473
A469EA525805DE37D223C18319139185B97FC2EA83356EF7799081D1E2A97D89F977DE14589C
A8446CD692FDF2419459618475C952F389DB09C0749798AF8397AC3E11D4E7302E39AC34CA03
DF273851301A1AE9B226E84FE2E0B65131299516BD64AA90EFE39F280591AF10C90B652AE14E
80CC1201B4109629558E83B83483D4DD57E0857AE0DFCD5A64B5CC36C1F28DDC752AC1D1BCFD
E5F5B1511A3E6B30D835186F38E35215A328D396DB7C634AAD187428B23F68D013BD6B8AC2D7
FF93A1D399C360245641C2200021B9F8DD69304F74616EA2DDA34144FC11EC42B09AF21134C2
C7FBF1534ABD44083021D4BA466E732A1FAB596E9F6AFD4874CEEFAD852697601AD8F15AA5D5
9E20C11E25B8FCF60D6138D6E72A8F4CF154C97BF5990595C479BA3A2F96DD65396D54A42B20
9CA55D3EB21CBE6C44F0780D2C43FCDDDDEA5A65EE645AACBEF909A155B55247A4DBD5D59E7D
0FC8C20A219344312A1D86CB69662D2C7CF928F6D817BA34FF554890AEF5AFE8B01DB6537B97
25B88CFF02DB92E787B593A6491F930EDA75143528147E0341763F3F8B9794A0DEE7A4889530
C765A8E665F58C93340C99A098250EF663F3158EA3E6DCCFEF4212909A5C5C23E2D61189D23D
69E8BC366C947019C2305017AFC9D36C6E8C560EFAA4093C944A4457698C5F5DE74374FFDD24
CB5E6D24A04B531793BE802D5AE400E2B068A62252C678F4547FBA7C677E634CC76A0373124D
65CE68DD5D085841569A2F8E9C9B71ED1B3794E6F899D6F3CF7B6EEE7F33A285ABC190B8F174
54B084C8A83A7C64CB899733EBE3EA8D710BF15470C8699B265B4D3714870776F16AE4A5402C
0A40070A16114298A51C1646F6CDE88114626AF0E4CAE0FF7384D863891521EAC6F31A5CD295
CC0C0E7D59DE52DE04BF5238156F4CE33CD4897CC482AE5AD1826628529CE5A6A5E6A55ACA0B
20B657CDF5E57C5A73F96F93622C6CF500BCD7E6922BC3CA96BBA05FEA0B0FF7DDCAC109BE83
FA8934851E9BE9BD3109192202EAB1C77B0C86D1FF97E3B8732FDBB9EECD2A547E3A1CC4402D
8F1D213C98890AFB12CE908EA3CEC9D2E7B5BCE47C25C32EF337C45F3EE522F5CC76D1505DED
96156F80BF6C8E2CF5C3F28898C2F7CEDCAD10F6DC5C45FF4979906B2FD4DB0D9435BD85FF5B
78E78E441D140AB53DB156F4C6402F716ED7AB7C5617AE1D1A22BFA5BBC89DDDCF9F14FEB699
D206E1345B793185D2907BABE65547A9A17F8B0CE718D98DB6039357616CC44BE309EC11368A
C4D965927773CDAF50ED2D48E692B2A3B31521BAD488BF684F01E3506733B27EDDBB5D0D6D3D
8E65A5E1BC745E1EEC0547984018419179B38D42E3099794341D97885F230300EC6FA06B18C1
7A1FA77DC186886492D150DF1440DB4EFAE287F2F2A4ECBCF0683EEDEA3F78B1B68FC1911CBF
2625185F73C141DBC9674E7AFFFF580B4A0296073F5B6505E4D63A4A736BC3B794809E801860
CE4691A57EB02C0947EFC1DE4BED3962346769C613F240DB1574368B28F186B608BB99DA33AE
1B3C266E49D58AE67A462FCF2E6BFED1AC1FFCC24C9752EA793F60923F7579D2B8EF9860975E
6A80D5F9637D594A9567F8A2D1E15CCB1EDD3D502972C969EE42F57D74500D30170904A463D6
59AF0D96EE6FED9F4C7FA0C7800EBB2ED3B78C3F095D18068F96573A033EF343C07BCA94DD98
97AF2830B6A40086C1E8945B26F8BAEDB8C0AF3371060CE18CF8D8693738C15C2EB95A4F7F7A
37E82ABFF54CE8D19524E45379C92BEE3AE74131231FB175D96FBE54274A88135FC74D9F429B
9794912A8D157C0CE5045F3B16A4BC78811F1007C96EAEF9BBD706533A7AD80411E4A3ADB0BD
BC27A94632D00A5A561DF53E0C63A0C17D9DF09ADA247B420B524135E9E7C346998993F716F4
1A8601099FB2CBAD6F760245A1B52E1F8C45FB5379021A64EE55E368F1E2D704BC4176D8E1A1
F034A631AA520C6039639207386175C7913AF1AEEB95F1C6F995387A454C25E6F78AF60EC1D3
4E0FA0BB4BB8B9417B5D8C59D31BBD89CEBD28C490D8436128EAA23C69816AF90A4622B82A03
0514AA5EB2865F5FC5247DBFEF5BE641DA1448376DE08544B9902118A5259175D547A8793265
10C732848D4E5D6D4569021CFFAF8BE720FC9B73DF8A0B8BE87EB08C3A2CDEB28D6ACC63694C
A9CBD263838F26A9F538D85FA00CB23F053094977019FF9A935D627668BF9E94EAC831D09DA1
7627B4A4F4B6A790273EC536A5D8F66F478BBACAF17382F7A3E9257E554ED267EB03CD70B803
59AE7667C44C0C9411A2EE41A9B0A6A12418A37E6E814069DF72D0534D6BD5631F158A3FED39
FE33E4D97F5B8D0133F8D67B92C72466CB2B82DEF502A67FA8A37EA4473056DA8B1A1C589960
957B0E1FE2316DABBB150F8F8BE2C4DA45E4014CDBB22DF11A9FA8B85278AC7F0A6F75996A7E
BA0E524EDAAB6CA54EC3B3DADE7C9EDD4AC5EBA9087CFD542CDCCDB9410202EA1C5DFD4ABFC5
C0E1C0EC82246A93F453389BDEF4FE8A94F9AA5B492AE04400C73F55F67AD0B02F092D87E10B
C9F14AD36C3E8CC6519BD9AC63F795A51F61A9877CC56E8D87E1078A1562332869EC5D52BC95
BE2923CE6E9AB07C7B9CE0382A5AFC60A44693AA58CFD33BAA0415F5C8AFC239125AF4452C3A
0010FEF23C70DF02D5D1FEE6D23FCBD6B59137EF773E877DF1E42ECCD49373383B5355692965
0002A51973C5CB12EB6696F8D09086C7A0818B7372D1D17FEA577704DF4EAA121E0271B9459D
57E1FD89A3DB3D4C75C62079C3CADF03EF97D04C5A4CC5E608EF1599AFB139AD7FE73FDA41B8
1DC0CD9FBF93834F9BA7FB1238E895E9DA72F1BBB8FF581C45A14A39981170D15D4E04022A9A
A5A2AEF9F6D38D68DF4BFF98A371296A4E9EBDD2FEB5BB616BDE6C9A4647901613239B815DED
225E3408799FA2F73D7BE239CF11494C456DCDB4D618D21D19D81879BFACB55EF117FDFDD0D5
F66BC97FBD7C6AEFFC84D196359698E9F36512D6CC42775D1ADABF6C99B4F4A232579106D278
01F76A71F0770168E40A85403AF26BE14BA533EC0551C3B18EA8EE97C57F9FAEB4192419978E
E50242AD61347104FAB8F4260F518922AE10276C55FD46EA3D4F6471207910D77C8DB13E3911
24B50453B60FBB4E4F15855FA03AC4C3A5E0F6CDB7995B1118BC4C9BD2F869682BFB9BE20D91
7CF997D4C2000ABD5E11E2DBD79C9C8B7685A17943A2DE2AC4CC60A50CAFB37BAF863AA8B835
0D7DBB1B52C2D3652745CE06B1193D2785073F5C668C4A117D268D839D41E497165A50D08C32
92FBD174411692A3B744DA54986D1EF767D6BEA6A5F437E5FB61F7581C72FA8DF1F51909443B
E412C321C9E1FD626B345B705DC4A8017EB0D8CB61CFE5F3F80F796BBA6FC7502BB925A33915
953141C4444698A18663EEB95E492F20542EEF84B047AC52A439BC794CCD488EE9B25BC467ED
09A418256BC0C14A808F007231FBF97EFC1881425DDB64FD6C170DEBD330257427C9D8B53DBD
E875AEC06196CB8F0D33BF10B681605A02E750FEADB3196BB3EC2C251E5F549C2FB6C91FB32C
1BBA3C9AF6CE30CB6B71CC2BA681231B1B521619B863ADDDA93FBAE29F8C7A439415D22BB35F
59608609CD13D22612CBC6AEB6601B37A6C9F09EB1EB8F60F12134956E456DB374FDD7A93302
DC2FA405641D09FE7C28314B08E4FC9DE9294B2CAACB8F8673647EA32571BD33996045E3A3A6
EBD1315C3C0C91FCE65DBBA1D1DC730BFBF02A1D5B16C74A8E5841450A24FB0D87108469267C
D21AEA77CDD8B317629BE24DCA7FBAABD757ACF62F5733CDE3C4F6D138ACEE93DE18CB485C91
78214351FA3F0A44ED41A3F7DE68816B7FEF6C2869AF4F677F3F358533AFB7D4F090C65F0358
BB63E52D2C4878D2EA0620D1FDDCE9B8BC22E99BCB711DE2D4086CC2950ED2FC50508E3AA0C1
5B109A3221CAA9CBD6BE368BC6B7A7033656D9FFC85F729D4BFF1C18B00E78B5EB5C9CF18190
6885C45E315B2ABA41D3CDF32F0CF301DD4EB4BF9B28C0A4D429FC84AA97633A6BBA6AB0F43F
61D0F6FA9A35256EF7BCD8FB934FA1C035A8AE3B600920B608EBB40850E4C7E3564572675CCC
7002CC2029BB963D87385C2AAEDD472A224F92187298652BA268336DF3BC28B33441C1A8985B
FE71EB30E33EE83F738123D76F94308A1A2F2F549D40B7FF6D97ED87B1989DC12AAD21BA8BC4
2B2C361C50E44B74EC9DB17061DB171B932C910397D42C1D6A305299545952FF8AB117BFF8E2
BC2E52E7FFDF6CB64D61AEF2E79481CE9A1915B207C58C4DDA3D71172CD99883A27078693831
A07AC70C67E1EECC1DD5B3DBD0F7B445A167E77F54ECD3F88A4622771C55C53C9CB58631B603
74FC4E6FF1FF4A26DABBC2AE562A124333C2822E4B52598CF5B4D5292DF4B06800D9689C04EC
D895D17847D93FAA68B508E524B39321AFF9E749343638ACAB6CC92AF4B447B87C3798277B3E
833419888CDA9AEEB978FFBDDA27B6628FFF08A55FC41F646741D092148A2E149CB295F283B9
C3A6EE040AECF8A895DDE8DD46908FF65A57F7CABE8DD42FBD82206E77CC64ABA562E6D21726
A63F5A75C4F7FCE6A8BCD6523BC18679CF3730BCF4F1ECF3CD00D8BF63AF271164211A34E3BE
B928ABE1A06DEF8B2DE826C893604C5F375C7C254C4A2A797FC1EF11B38CE154A5B337C453A3
07E501929D361A66AA0EC59243A64F8CDC31F57EC829093184386859FE4B6792265A6B32D03C
F1C81E583ADDC7BADAC25C98FD44A3796E33E53E9B2019D0D8C6BA3685019E67D931B5A817B2
CE47A88BE668BD45DAC05199D05B5F02DE05455BF2CDD48F2B93B50EDEA9A5E0C871F8AC1665
FEDCD0BAB330EE628E3DF4514D679AA059AB3C1DA74E2590354028FACC543CFDBBA7F90010A2
AA33B7329FAAA0DF1C555E03B71F153A5CAE8A5F9738BC5C53DA38544CC23C785088062E05E3
896956986B6210D343068B5106361486B7545B0547CA1D18B19C7B073C1D5598D5C19A52E47B
945A369294E30730405D41C2CBDEE5BD4168485B7DB8A8D7F3E1C56A0C924438354CC6B69289
E93437CE4792385D35F705BC2A9CD4DFE0EA1BC88E523099993B5718F851FF9FF10CFE04F29C
A23BECCE71AB67639EBC8E9AE584A9127874891089EA7FBCD800EEF2627BAF6713AC74DC153E
E0AEA7FE4E03637B459D3ADB17A6150680EF84597F9E3564D86AFC09303A26A7934EC200F635
DC09F26DB9F7DC4785E9818A96AF2AC20D0A7D8EE5CBB80AB303791397CD00FD000CE43D41E0
39F1FC0A9B6DA7194CE33244946F43E83836A5E85FD65A945C3D5050786573D179F115052F03
24273243ADCE6057DCBD605EF1CACEBF7299500D31081A5085DEEB3A875061DC94A08DF3E192
15C207CEC82EA5B01EA53E14631B092DC3415AC78568A5099869AD04218758F11D56265232C1
2618F9AE589F32A5773C8B38EAC7F7370BF1FE9180AA3F2FE79205CCF69ABFF3536B0138C173
2A5446FDF7604419D883F38EF4131EAD4E518D822EA26243F46949ED42C6E4A060889E1979B2
6AB2BC90469306C9BD7EFBD72F9C9A6F801760D467B766FFA50AE98E5F3EA07EB0CC652E3A1D
12E61303E71E99ACEF315932D7911704843D6396F4A88FBF00C223586C5259D6B400B18F19F6
E87978C4908A372193FC45FCAC92EFC1494640BC70897D0A05ADA21CCBB28DD89EAACA4B99DB
D829A6B50C297D5A40E7DDCBE6AF3352AF434FF34A27DF727C2D5539CEB8C0AFA6C18C7F507F
5D8E4F407C6D6C8892B9AE0AE8B184910A98F2950CF5594D1C42CF604808B758DEDE97A1DDE5
C4B54109A1B5D3696114CCDDA196A43EA25E34BA7635791A0E5394506DFE706DB5ADE9F91C08
CD45A5C6DAF40D12C0D6DDD6E83F1A7C7C90D7B2B9E94D38A677DEBFE6C789BAEDF2CF821C89
B2E992A8BC3EBA57C1B4EAC247BD9D5A24697B89D852E772C82A4F363FCC3C18D212BA36958B
A07F7656A6C5D157C62C50A8F13EF8389670659A9A58342DCE27F00E3CE58375113402DEDAE8
EA6688550C0AB39BFD238A08C135246E63EC1A8CD62DBE0982CF431FF500009543698C650ADC
ECAE3E2BFE123185A2B953E1AACC48F7D15CE3F849F1F8FD6B781C00587A9D75E218AFAD1245
64DF3026F455F701A66D0DD5B7613A0329A02E6F467261CBF14E828D323882FB9039CF2E52A2
2503466E9254E08DD64B930909CE36A7FFB12F2C8EA3511F8FC928B1C78377FAEF16B6926C3B
535A49FBB28AEE24F1B811AF40E41B406B2FDA63F8BD2E486DBECC9430A60E4FB834DC44098E
C39899CD93B0473883EF9864EEDD71752428EDD2955F01879163722B29132232D5C0278540B6
2C2A8EFE5F7C0F9A83E70A24906F2B090B77929B36827730BD362248254FBB37558C0585A097
B0488D05BAD1E491C01211B9BBC1E23910153A31E56B5FBFC3BB6352CD62EAAD3413C9D80925
C48046D0FD4B9D321FD5F3D59D1A9AB0916056A0B4AE0EDD9E0458C8EB9DE4C5B20C68A474D3
7D13500183E153A45A7C26A675B6FBD0490C688ED1E26466B19502ECCCE7F89199BF4F71E1F6
21D2362DE9AF2DD0D882A0391103334D5DFA079976BB3E7070C102852061BE11A664F9B66037
64B52D02B917E584DC7C1DA2F71D02B18F758AB8605C40856282038ED4C3A9BFCDCC5DCA960E
98B6A075842AE3B880DF242AAB37C135387AFD43E2180BBDB40553037845D841B664F2392C3D
C5CCE32942F59807AE4868012441E36C7DF403B917ADB6156CD9A2EEC9994630CA34E2DC9D44
61F520B26A2F525CBA09EE77C492EFDFC2F90DE311F8776BB3B41D31A64BE2DAB07A3F4BB94E
06AEF96A09E6C26DDFFB509DDCF975E226A27D2BD8EAFD926EE7FC6C5EC1AF79FDC7FEA8577B
16D2C823108DB41246EB8FF5AE97EB9E0255C02313178DE8E31956973C4AED0C8A6F73E07A4E
1189DA7C73E44BFB1AB8298F0FE364967426367E6913D432D42E817B796D86E67F0CBA36EAE9
4F46121BE50CBCF6B78D737E947B97A2157B1E9A16DA891583A7557372D87FE44AB921D65307
04C7C3A1950CE219CFAE4676FA3AF71A7163B32A62A25A0ADCD31F8EDE8ED4EE5623E4ED818B
91C537E23C32C39B3374690033ACE0BB43469400B81EC896CE9D27D1897213BA641AFB6DD9A2
FA388FC6392C6B25AD23E46DACF41EBB22F08D410EF85FE9193AACBF49FEDB1AB78568BC2312
427BF0D49595CD4DBC992F094F4D58CBDC77209FE1F015DA253BC1AB4D1F4C65703BD4898CF9
568A6D8E16A9AA574002BB80B1086EB70C88E22549C240CDC638E200397D3DE5A5D36B019356
2CDE2A247D1C186D0C39A92B624237F6480F51B9B3EEBBD3A868DF26EF277046DB68447B71A2
1B4C1B5F1709D59E9EA79D388587789B52CB6E92439AEDE78B1D844E434BE0D2EDD0A83BACB6
035540003C95D3EF6153C2465DABC0A264F1BA9720CBD55A3DA4E0CB6CA301AB61E114396098
038188EDDAAE38A56B518ADAB6AEA5C4EA557E5AC60425A4F256AFBC428A361E0363123402FE
CBADC54E9540F4BD76D694979AE65296D896ED8DBDFAA1E2E75D091C1CB7AC7E65D5A5D8C526
60147D5915A831CBA6FF3D541CA880EB948AD28C9B43719495F504A42112AB86E63DEE8E96DF
08656C3FCC5581F8891D1E5772C886FFC7B728E67929754248FDA1C9C3C804A23B0F5FB4C358
0FB118C15479D9261167B2068462C8B7F3B5E3645CA312A6CD186343B6A36FCAD472FECA453C
AE76815493048C8DA86A11EA401632AD04A6AFCE6D974FC095DDDA31B9BB29F15DD6EFAD3975
1F944092E812E121168D58BB1748D85A68A8086FE0457E81B9D54B5A0401B91F1C15294A58CE
D1C41BEAC0EC501C3AAF67EECB23FA527C30E329AABAD1843A437DD238AB25128ECAA21E7AEE
7073DD3FEF1B1C8DB582A51857BA9D12E848616B84583BCC18D903ABA5452E05B9E24ED205F0
81CD98426934D9FDF8EB973D353EFCCEAB03B23FAD49A36AB8B5E1D3893427ACBD301F05815D
1A24088CCD24A818C85D1C0095FE051751FE57196DF73A6D514C2A06911A7FB36E84120D9029
BF51F2830F1C0D315CF9F36C5396AF9392981B2AD055F8F45F6E2430737AF7FB825CB9D8C68B
7B97D745323F71F29F6BA88E682465AA73643BB13B8EAA2D37D8131764E22934CF3A4AAA3836
3A74B31197A6E2FBBDFD16BC47CF55956B92898D910A890FCC38F4E61CAB3714446F8C7DCC4E
67C338C10FD9614982B39C0816B5B1B312D592D5A01B53A78BAC0E13B2735DEC520195226B87
968DC2A9F678B38A551CEC94D49DEB8AEF4B59C5EA85C9985544A1B4CFC616C9DC525B9317B2
F62E880F663EA69BF0988B6D7A6843CDFCD8A99EC4A18B2F77561C0738BB020784CCF4AF7118
C55D492E5DF7BBF3C305C511FD2868542ECABE52D6677536BD5A9CF7B2178A77A4792F69C212
EBD41C24671BDC716555A5330E9DAA9518FC9D3B2B5DF9D0A0261967C769FD73B9354FF2CA16
48ACE02D235AEF8FD73F2932BBFC5A55A7288645ED260FCD3DE430C79B4ACDA1A28EEFFCB10B
E29D89D642CA27516C7EB8EED18F5856ED69C30B93A632AD4E555182A82407E86CAB287DE411
CBB61AF53B48BA3467D37A0620AF7117CD294271190293C1E7CDA10D25806FB19A90E81F6ED9
A88930EC57BB08E556BBEACF44207F7E1A203481EEEE721A709FCC6629FD35C579F3E8B3FFF4
3C908F1898014F9661A9478FB59C7C8AEFC488A0CD5F8775455AC4ACC56AC8B0D9D34735651E
7BFED3EBB65B94D6699F616DAEFB3D6351192D4A570AE63FDB66DBA25B3219D0BE918D653BE8
8D33AAF67DADC48341849E0B16300BEB96CE04B7FFBB8A539A5A78BF4C85CFFEAC8A69F95F45
F96C5E200377CE5B9E96ED1567FD632A2D098E1BE688DB589182D944A8E1FC7E8A411562BBFC
9A0A661075CB5DDABE13B4A31E63DD2BCAD90B2E94F1244BD0D884A94EB5C0FBE75A2D92E205
C34BFC195D675A2A93A631D1BF3F805FC2AC6864B8876C3CF5CD53A489052E03DD5E46E00721
7F10928DD34D1F2AF0BE3553897C804991E35D0D978DB8A238B50A954CC08EB10C670FB15F35
7091777A0F061B38607A1EA7613FD0DDEB7E556C64D2F5A6F86FFB1F85ED705151BB92584509
C88D01E42DCF474190CA1F8122A935596C5F39F7C1E553AC9F4C659CAE8FC4AD69C06E3022B9
302169CACB10A5316534448B6E8AE258CDE13C1634BB5533B2BAAA7D27D30324B368314E9BE4
F6CAC54B95EC6E3735C4EA2715FF574F7079861C6F61CBAE2B5E3AB25496C62433CA18756D41
A5513E700BB726E7CE78B66DB891BE254E8749226376804F02DE8B07137FE39A8598C471BCEE
961D70A5D6C4333B52E6C9F810C6B6F28AE03C54882A915B38545A42A9FF33A45E61C1923BB0
E21DB1EC92F934273727DBB574B5925415E56CF838CAFCFFF473AA0382CE0D612A5EE0BAE508
D22A88205ACC79C2FE5F5C42B1E50BFA2AACECF0BAE94CC532C64308902C3FBA46E1D6670F3C
510C3788459F0C05868298F5D45DA4AB5D955660095CB0228A39EAE961EBE7D16C1644694990
ACB90DEF51E4EE62A2EDE668AB8FB9FA04B0159579B2B9FA84E72D5B71A3157B9AA0591A653F
21E480CC285693CF77038F85EB25FF5CC3130DDF268E7E3A8CCB67A004DA1F49378CACF6B570
CD328EF0FBCE2CC2AB20ADD2DB136C8DE4D2644B1A60538BD70B4F01B2B44D7EBFFB0B28B387
07604F344FFFBA2F081A242642F030CD3388B9040D76399EDFB0EED87C96320722B82D9EDF45
86E64F4C61FEC73AE26BB9B59C413C1603741A37F963057DB989892C2F23E2D9DB14E449D972
44CDDF5B1BE8A7877AC5C876CC9058F0B7B90836C749E92EF8A19E7E091D1228CBBE15DD7FC3
2527739290D967B8519A623A1B17349E226FC5584B9F084408579180E2EA760A32FD5F53B5A6
06935AA3A6B5E412A0A767B2E278542433C5E1EFD1CE0CAB150844EB0F5112DFC09812155DAC
E2571A686C91EDEF1253539003DC3286EEE4A5FB1407FB537B3B65E571B0FC454E6C62CBCA5E
951B3C312EE48BA72015934063F213842969EA3EA3576C49369F828C49D5A59A51D2F6F1B410
01C1C0D3CF8442329675AAB6271CDC42599ACE74B48B60DAAC6B9ECC05B5F04A4484F727F331
846B545AE2D0B6200A185F6FA29C8A6B7CB97916A47D4215749E892D6FE8F53529ACF82C4129
8F895BB6F77E2E39BCBEF8DB6582526CAE8C669F5BD8CBA04D5510F164C2BCF711FD7F32C25D
AD5DA9F7BA88676DDA7A42B488E8A32A0C750F73208A2DCA2A734CAF158BF47A4EA62297E8BB
863F8A551DFB632D2A787CB1D08680D1810B8E5C4AC727CA0EE25EB49AA5B63C250D373AB7E2
8ADCA7A92DC3F9785A1D5D585EE5BF6C9DFC8D2114DF5F03991F3E2F8C64FEF3B62AF8B12AFC
EBBADC979580CEF32C396BDB880B9680001A10551BFE25E8D48F8EC7CC5C0005366D5B44CD5A
84038CCAD7A58257A876FA26726DB9503876E5CDFCE12128CB5B5F627D0244C7807DBA60DAFA
1720076130EA2A2EF4D7275C8D7E2A9EFCBC433BFF61CE7FDCE88D5C2C2E1353F9486028856C
A7008AF426B41AB0AEBA00AEB5023BA80AF44C904ACE2A434FE7D79B0097013EDB00E9D90B7F
256D18D9E3284DCD568CA561375BA0FFEA8F698C693578C537BA765D1F9697B1037B26CBA3C1
8FD84A638F76BB5CFAFF1EC1BF9F55369513E55B274E7E131C10F488800DAE3BF672D51BB05F
CF0F1B60C181800A5B62E07546BF517156831EE569B042778240D733FA2ED1C78EDC9878A625
3E8323347C2952F440BC614981CE99E5724961C4DED03EB51B58FED5B9C191D83EFF0EA672C3
D53974D62F8E67DBA097E7EFD7B4DC07B8EB52AF762A35F7643ECD967D4C1DBCB37008DB6C8D
25D6473570850560ED6BD60BB2DA16906044CA04F9BCD29EF36D90D132F604A21BBFB3F3C1AC
A9F90C3F0D50BFA293301533D7D0C7BCC03AB1D9D7916599DD6726DAE47A8AA5FBD19FB0CDDE
E1FB90EAEEDF3E79632D9956F2F7FEEFE9823EB7044D71D57ECCD2522F1349D649C16321D23B
72CC86BA8536769B61960683F8BF78700727910915A22B241408C463D4ACB0ADEE97F2F4DBFA
A425C4A389AFB22779EFB298271611D2D1D6BCE24620223CD03D943960432BAF29C6F890995B
95E421EE14460E491071D70E1D965977962262AD793B582BEFBE6EA4BA15F4CDB22F45FF62A9
E66FD10FC97439E5AA06D17780B0B12CDF92B939D3E973F3A61F457974CCF97025329CD410B6
753A3686670C4EC10B7038CCE6A1B92D32B6FC62F170937ADB593704EF58624E39BE3FAFB1DF
B0D3109F7B8818140FDD40FC7C14E633C26771E23017FD1129FAB083A4E580E84B0CDCEB9E34
BC27704CE9CD23274C82FD8363CDD91C9298DCE054F9604ABF295AD0B0734A36B6492DB563D2
C26A0C0E9274B9F7E22131E35D58BF7191A8F79B7B1B6A3F18A603881734B1B109A22C73237A
D20DBC8FAD4D1199B6FEC8CF00709FCE3D06884A712216A564383576D5383E990A5EFE712B02
C56D4B940165016B12308AEDFE518650A49CE6E73A2840162F9B86081B2B092724FC0F1261D1
39B849E829D5EA5B3786279070B6C79A188551CC6B02A4DB94022911DCF74BC1B43666BCA510
7695D03914C83BB58A5919DACEFDD51403F95EE8354B307E5A79BD25FADDAAB3DCFB82C1672C
1C6E8350B83F8B677601511370B6760F76D085F4DDDC949D0739BE20ECECCFC85E3C3C922422
EF7FA2D6E19358B44AE59C6AD155D7DD6D80DB4CEE18E54656A9672293E79BB0AF516291CAD0
D5469DA5A473B457E191314BD8CDD174276F0FEFE43B18306744264DCD3669DC6C3392E7E224
13ED492CA92844B858BADD4AE93BA493CB9813CF596E9AF1084EDB120512F6CFA332787DA180
1D8889E0F49A97701264B779787F3C37F192F41559F653D4EC298078904F16507B9D090D9EEC
1B9390C78861F288D964BC6B73CF85EA4ED9C2FA4F01D4CBA4C71EB3EB95B162F210FAFFD8BF
D1F79EDA5C0AF99A37B56D550A5A92A49937F31C23B04EE90FCBB8469515DB89371175095846
D737ADFCBE7505771F77845A7ACB214C0451487568E62270F4B5E8E05C903D32062A3896DCC5
DC0D0BD912DDC5876695D8360540B15C57257783731C8D55EF5F5CD89C8FD4BF9A43D8294F3E
112DAF52BD9C893906CBDB83E14F4DC27FC9272864A53431E14C2D11D7FE722C45AF7279A737
BFDAFB07E581CD9610F6ACA79781A7F525B6D0ECABFCA36DA75C274BE329578D36347A2BCE0D
1117B9A2902681FD9B69C2819A0E23BB398F1A65E0AC01235E8144776CB2614888C18D4CB000
01D48F83A2C14320C2E74D43E9F3D3392AF18D3545052C5A00A3DC557A49C375657E5B611021
2AB6070A3F81480DB50DEA42C03C7BA547001E696CA4BA91C61F59D4874FE147DE5AF34082BE
2B3099C249E7B14E3BB1EC2374527704787BD0FB1923C7DB03E38474B7910DED66DD318652E9
B23AB730FD74328877ED03CD49143A58D911C42BABD6624DA6A1638827E2311701278F953B6E
E77D7BA6A82DCD6869C922FF0BE10FA28919E4A485CA2ACC9874A9E2A468F2706DBBFE7F9E54
E92E75E482916522C837577BEE11EF2F1F1F7F662A03513BF815B9971BABEA220215321F0F66
0007DD5BD4F943F388457F06F0A325B088AB74F24D6C9821D745EA530298AC018A679F8F36B8
9C57BD74799BF278A9EB732D5BB45901855B4D08F13FA18D50B691AE1C2025E07C08B5C1D49E
90FD315886DAE2BC296A838AEC61942607C1EC30041D869444BB9BEA0C2E6D8AD001BC918E98
370DE90E7169E8AF674819BE506932DB21C8A959440D4504B2C162B71457959B8B8FE0435AF2
0F3E6ECE9861CD7B0222DDA66F834FC1BFAE779EEE04099CB4AFA22DE1D8687BCC6DF8B71087
94ED6E6796FD8CC731037BAA8166A39AD811C2D3FFCBC24A61FF51F4A7F7E227BF2E295944E7
B2667B60CF3FE8B378925D7064063659AF077EDB6B75412D53EC2D2D55D828A5FA1E5216DBDE
B59CF99895ABDFD34A6498F59EB69FBABF7E6E9C87D3BAFE739090B5910E205155D3740F871C
F19A82FB9048C20FD4A0AEA1F6D6DBC12C1B9A350208D7D43E0EA360E621B8C3F284535E1338
824A3DBA50F0FE4869707718D9ECB32BC8070EA92D93549CA1C848261845B392C50020A8693E
D3CF433774973B0F9ACDF7EA9A67E55F0647FA07B7B6A0D0DCB39AB091CCB5226102F03411B8
D6306A19463757094929861DA86EF7EE95E01B2EA50B536474360A84D2D2F57B544E8BCA4781
D3D2C7DD92A1579100982B03A6C4728E7F6AD3CB659292F61B15D5E40CB753476A3B875C72EB
7F5CB6ED0D61263147396A45938C804421C445651CF915145FF03DFC2E86798D69EE29F5F5EE
A00152F89D44A24DA080D9AB34C986A23E96A012724703722672191E37CC138ED3E2D4ECD334
D1A86E46B9B77ABD735F10B642268AB2FCAD57045D6EE84BDF9EFF464FFEC68E9E3DF1AC804A
73FCF99203C31A9373FBB22682284C65620B94174E98A231539A432232E50E1B854EFA1B3655
5A683FA48CF7A9D2E67D165A5FAD4965423555A7E40CB0B44C2702006EBF980B6558946F4BFE
D2BAF8E340D802D4B0171F7EAB32F208689416547572ED08FCADB8BD3BB1056EE8F5D382802B
550C8FF117F19329D91C1451EC1B201EADF23CA23CCC465A732C64F02143F46CD970B096899F
6F86AC4CE3796B6A8D8AD401916688A7A7B16F304EE646A94886AF09F0EBB4728ADFA516A61E
9AAD39DFF938DD44568E34C56A33C7446BB3B60EEDAD65787A88FE55D27321850F1404FEAD33
096E2C79B339FB4D54DDF7FBD46D78009220F0893E07ACD1B4EC25C5B61683ED3F15AC9F6D53
87777A2714BB3F9FC027872FFD077A90B1D6F6EE6A76EFC25D97DE2192D5480916B350822908
2AA9A4383D4F5F97C2A79FF0E80D4036428A8932483731D14D6D5F6B2E6E67196EBB1013A2A3
B33EE55C8F7D9E05D623DEE89F8BFE1D3D52EA6774C35E7892D653627E36F4A37CDBA9704DA0
63D55E3793AA25B043D665A265212BE2E8916C0AE60E0BA4D8C27CCFB03402CCF473C6F08452
03C137035CBE5CC6DB95C7B622840CFF41233F648DFB970DEAD4B04CF1DEDCA7A4027DF486E7
5569B64EE1A65A7CB419B16E788B74AE5C057EDEE39F5B4E82320D802E91BE6D24F4583A621A
269CB1AF11E9E3F7F4EBBDF77E557C4D28844FE70A38E2BFCDC60F646CC1FF1B313200D0881E
E5042BE0E1F8A73C64DF7CA36C1A6A4A0455E8B872E79E4B8DEEC707E3EB026BA79EE8C469DB
3475667E6B0EE3F8A0973A209CD08D0B909FDC40934DA16354D1F58867E399D607BBE4E932B0
868FD0F8C2A278A5CAE375976645905B390301D528A75D4B7F9C3810DF01720D094AEDF2A58C
A391B3C1DEF9B7CF9B5BAB9EB40AC9CAF3BB7EAFE804407C2EBEDCAA96E258C48B2384124F6D
182B0EDA0F4F7211B5B5CCF2BCA277FB6D3191518ABB8C095F1BF3DC5769ECB91E6BDA67CFEA
98E68F5452E341580E9E990BAF771751A92CE9131E43349D0023D7C88F42F5F3CB67D05FCC20
6B822B9E2BE8C0561FA774912EEF8E18B5F7B0164FAF03ACCD2EB408756262968565AD352CBA
F5BD9C14730001198EC578B99B0F52500C5DE733098F1B2F5B9AB72B3A697016DCB037658073
02049F2ED6C935DC65F1EC69EAAFF042981A868B09A08B0D8E7F8CAE2AB42630FE245C5CEAFB
114DE33A18C7A3CE7DC59E9D79C2E2AD8E4D86D7980EE6A6FD98BC2F58AEE07162748BC9DCDE
35B2233A4BA6393DD986F1E8671B0902E6AD91AD5959592C48AF065D2E458E1F2AA4FE64FDA3
316933AC779FC2ACB5810BD41EFBD4EDEEDC34B739392CF649E889BB7DA9202C818E10A41906
5B51772772A0ABFEE6927D23EE549A93D3E7B48AA8D22A9B7BF542479F14D6404B2C2C1607A7
26C61BAD6229F79044C90CDB41980F776E8479CC0A492909C5735A5BCD2E26CAB8DEE487A5CF
3D78B035E268339DD5DBA43CF6D3FBCE6C1680794BB3ADF05E0080B9F865D19D396A848414A7
0AA1581A8AAB6761BE2F86914F02794A959BBFB23B2F96F1A174E6DC6FA008C5F633FD83988A
3951B04D6DC4B179B65F0BD2317039C075709B2171D69E0D01F635CF12F7A47E9FA2586BF443
1723586F46A2C29A4892D2E1BBF3215C77E5B1C7FD3BB126EE6DF6887FF3B5143C0375BE0D45
5C6CBDCA591AE0AA08A69F19F82AE32CF7AACA10781390777ADBC697E55735939E243B9E80DE
EEA1EB5507D79996FA49BF35857E01478CC25D830A0803BF7C7827082A396FD752181DB32B91
0498FEEDD4D3BF8B34EA3F264BC95156F4EC22B2F8F8BE7558960414054253C07FFE59EFC50F
A20066C08F2E907B83F89C3875CB2C3CB755430D359A80C56F99D0040476CF6135749A2AFDC3
B6BA0D244BE716503BCF60489EA30F23865B21531E244D2DE2DA6528BBEAC6FF5AB700F0F3D1
344BE08D815AB540A0A502C917319C6512467C7D4909800AABC094F4E3A21914905EDB796E46
E40C1BD6E47AD6E2109DDC9C4C758F3578582EA4B632323B04A182C8370314A6B82F9853909E
7A7E5E2BA0F43823E26B0211F73BA246556EAFA6030B82F192D54901D622DF14403E075F5D9B
0AFEDDCE7C52227E7CF5067BC827CF0E32B1A21B23D600D11F4D9ED39D8D40759EE9B3740FCC
0AF4E5F80A5B8B958D51FC5DAF2B1B993CBDADE8B8C53046C1C408585FF36315321946B62AE7
49FDB1138C436E214867F51C6A221F2AA0DAD2F8EA5C5EB08C1E12BD2443422348FAD350862E
80BECE68FB8984398F95EA25AC4753A6135A3A97C986C147A3FB7B528634113371E25E52F754
87391D027BEFF87DC6BE031DE0207D78138CD96E0024296F4A72F5C0AEA2502E6A63B245CB08
AFF1E3AF2716CAA7E350B2E4BC2EDEDC32E4941AAA59B5C6D9EBB525343E9FBDBE359F28C2D1
22B621517C7C2BD890E3E4E27041FC55DC22200203C73F5A29CD6F24C9CBB3E0AC53E63961C5
5E907C0AF81F4EFDC34B9A783B935C607E46C8F9F09264275503849E4528A512F4C61AAD801C
35B1B52E89BD38FD530DA93DEF7841B702C7C1311ADB4D94A4EBC6ED84765E119AA24C49198F
892115F813DCD7ECBDC7427B2F649C051F915963F9765266EE9C2166C89F58B18B60B2B3066D
6157675A3962C513B6B4C63BC6F1DE65C66226D706BFB2C7D175A6D0887A2B2F7DE5FAECA561
A0713E67E7C08467C6EB1673878AEC02223A2E5AB7CFEECAC0E81DBD5E7DC26B2DEAF0347B0D
4B23A8B95DF47A7DECCFC0DE2F627D669AF20AD761B6DFD1EAD7144993F935E82E87F1048E0A
368B7F3E73876CA1C47856D1B4446E89FB0FF219E1AF5857E435E9A9638F3F52AA94985115F2
6C9643060D79DC3EE65EAD94962D9B0D0736D2FF160F2E2908881BC420EA953837F85811ECDD
5FD29BA4969F064B7F3234B792EA0A2664E4EAE3F6B905C86FC92A4562085614ED504756E90D
709D1261D9EC682D816AB1756841920A7C4A041F007A712E00E3F9216D8BAF17BA6F24EABF10
C9FBBE1D455A10907355E926ADFA877A61292C6B32F93A2983817AA2E3573E14EC50109F4DE1
2E87C568C953D9036452306AB4F732F5016879A5C447CF50AED67614898478569427B9D1F8A0
104EF1B67ED9C196623334EB032C50562FE79F5DCC5ACB5ACC65F564B360F3163081AE000015
0CEAC3B528ED8102132537643715C7270C168843285EECA61CA7ECF4220CA050747A770E4DE8
5DAB279E55945EBDD7AEF04380354FC198FBD3DE62D86C6C2DEBD4E587081F21EC78BD8DA1AF
4535E342A1D799D17B93BA81566FC91D67AC3F4A90053441BD3E26E36B6B43436B8777261B54
6F57E15EFB3E67660EF34F49AE28B740C2E34FBAA6037751C1CA57D7AE83C79D966BD87FECC3
A0F6656BA8DD3C2C793C3A47716D53B205E1548C6B03AE8956F004464C293F3016DD8888329B
9E525131E1C64283E26BD10F9906C161629C74A307693EF222E67C7B383D1A1501CA94189054
D49808A11A4B5DB88E1BFA8694E0D1F3E3B929CF266D8F028F72CE0D066658B9A654E2A5F34C
9A718FA819177EACA9985BC0D6942AE343464B494EEAA2F357FBF8A5298D361D43B35F88625A
965CED31E52EAA139A819CE82B7625AD138A738899ED1EEAD6892955A334042E14145FD2FCE2
F749434B0C0CE1B270DD7E10038BCFF58309175426A6570D1C347FB255BA26D6BDE27B65F917
65A09D2BDCE5B8A3E308523712FA34BE419056EECAD69AAFCE5618401B61BADE55FA2FA236F9
EB494869331E8025E5A743B4FA10336DAA88F202B2B4DF5C1A0C8B0C8EC011BB0C61D7A36B0F
AB141A81F142A41DFE30B729048306A6602F7B27636E03058A41FEA312D270CEEA706194BEDE
E5254B67FA486F8F240AC53D33A3861F85E4266ED1E7EFCB23315BF317C505441D7AE588BD89
FE60E2DF2755F6A4B11B8F32F54DBE78C77A6722A542E8679317CA1A3F8207AC8139E883F979
AC6219F56860D4A548C6E9BE5F9BCA7D3CE1981C4EAA725E1D718F3C08911CF1AC37FB3D21DE
F8668881159B8BFF9C8A19EF81B48FF6A5F8AA32DE6C53CCDF23F05366C098A90256442ABE0F
E0C8BA6B14EB49D384F9B938CDBF2031899B6EB32101389DDABF5D3631227A1CC5D50727217A
FCFF087406FDFEFCF89F239B907A35160545F7B9E46F3D7870B066FF1728A441AA6D0D93CDCB
9074496D8F4788C621BE5208E94C7C245D2F90726F4DF6F9F282D9EF2B08BB5D7E0722308B3E
47DB69C9F04362C46F880CD46736974BBE399D51EE17F8FC39653B335B8742730FFE6565B593
6B5CB16C4831A6FECE44018EA40A20CFE424CAAF3C1AF4AC3529A053A5D36B5CE0F0BFC9B2B8
15FEDA34BA3623970BB881557E16264B379D26A04E3F1FD5DB2584F8910E44A645044B59022C
5DE3AE635B34C76F3D4858C3BF77DE03B3AD149C4C66739E91345096C7DBC9B3592C99200566
0DD75982BE137DC1BE03C1BA3852A4542B244BC71E4F0DF340F6806EBF01A8465AADF52A7DCB
EAC40C5D0A55210CCFA0754FE3DD4CA43DE8BBFB47DFF8E37F89439DB16A7EA25FB14E20FE02
1DF2300D68F120B36472E0F888B1FCEBDC337801B3576F496D58B46C3AB7CC79A845B56A1242
79DCEF3D4F70818770C9E30C50C92F4598363547BE8121CA4087388C1E75D8524AAC17B193A0
71F2E33A894D0754608B35FD75901325350E60410A6A8194D655B51FF9290F5A965FD1EA65E5
1FFC4E4F85F3EECE7FD48A32B62C8ECE004BCF21251629D44E48CCC0C1EE05E5F8013D7EFE3D
CEC26254D39843FD1BAF5FE4E51F003B889E39ABADF71E73406D8FDB53F4C3B0255774E6D1A3
170C982528AC7341489399E43CF862BB7C7E3FD951502E71CEEB6BC1DE22423FED015D9665BB
87A1DE991AC54F2CCC44FCD701861F25EBD97B9B4699C3388E9213BB855D8B2B488D808147BC
6662D13EABF1BD8E8E64641E0C8695A89E8FA04BEC5E4D82B4C517030747B7585778BCFA24FF
B962C2F8F3132DF365779A3F5CC428547F479B6459A671824598F4AF8ADEE8886650F61B008E
DDF5FCF68280A422CFDBA4F1647156F58ADB6D803A8202B1AFAC46A8A176CCEF7885586C0B06
5081D9A075FF7E41E53F964D47C6731E5EA88E6FE1432605C93B1B492D1AC04542638D3751F3
88BB23F8B3E96B406FE889762C8815AC2FA24FCE35A51E27C090C4672285F9E52115A0EDC56E
F9871D413D2A9BB1C28F0C628848D5A42824DCAD8F15A66D0F9DC8EE1703E679B7E7ED91CB43
236F7635BB3F7F97595C7E688BFEF954254B928A1721717DAE82814A45AC395916711369712C
450AF99909411CFD5CF4D55D104420A8579A2A78B49F9A86435119A72B4F4C418AF97DBDA84A
3ECFAE7B741CC507ADDEB52445AC179CAEEC48AE6EFD1E8FE73A70CEADFFAEB928E5AF4C71C3
E851B5D010DD17F69CF723BB218F293AAAB689FA714CB0F4583A03388EC5B72709818139B2AF
E90FF0387FCBE4274757CB87213E29C07E254E99BAECE82BB7AB9FA8802E21616E454FAFB8D4
86E95CDBADCFC9C00D8C1E022A74E0D6F46AE41201A6E6A8A09DF4EEC2743FA5D64F2563D5BB
805637092816B8CA4554DFB8052F6AD8A4653AB81E1DBC9A971D506ACD2405641CC12A4F5E5E
72968F41E6C8E0C022DC54847D7EA5637160C80CEB33E91E0C6C8FF410C5BE423716E671BBD7
7598F17BFC3B71AA45A4B4B89C697C5D32A76F09A433E7043BEA9EC78E9D120FB2450F25F113
ECB45CCC8BA9BE5563EC54691CC11FEA2E3ED2BDFF21A1575B79D307806F6A252E0F82ABFB06
328F9E02CD6986BB610C89AFE178BAE9512B541019ABAF0F61B18B37C71F8564762935DC729E
7E9B3B7FA3E5E7A5B6969848230D254B67D0044743E904CFE38FE56380B1A933A2AA47158A2B
33536070B7E7DAEBF60ED5D2B94F812ACD1B135C963CBF7AB87783CD269C1F49B51DAD346E9E
7F5C79D22020F251DB7C5F13E82B45428C27471E02F54ADC8FACA7B244B8A2203EC4A79E9B11
BF9B1C78D05954567D64FC7D282E3278B5EB25D874C7BB7C7D54909D100250600F2CA7649B55
69841A681D77FE7D3FAF7688A1EF77DD8FAEE8E02E6CA3A2086792050DF6B9D72757A4C88D7D
2273BD7F43C3FC0B5E5A7D764CD07660F4DE610C8F928CACF1D8549EC908E747E452CADB6065
AFCA2735B2CE2E75F16E1268F2D22C4630C653BC70E24D1ECF3A3AF93F08FEE3291BB08849F9
387D8A5E83CC8A213E6D21A17463958A356F83DEA2992645971080464A2E93CBCC2F8E17AC44
4059E56434E1C82190CADD1C2B9F4A8C37F6022D698727E75B6489BB9F910840D15955FF59A4
20273DC5F61D356E2EDA5D205A58E75B81D183B2694EC2837E7E96A31B9260199C71D4F6125A
0960508B61BB548FCA3D8CE016DBDFF9EB5DDE018458E9A2E37E66EA35F62377BC0677433BBA
62A6569F08762020B0AE7DFBB73FD1A00367E45238E4F379BF97F9F8A9550CEAE2E18C650020
83A53B1C4BB221663BA738338B4868A8A2EA3C5C8156F1B0736D7D3D7EA8DF611798E5CB889F
6957B8085E10730C91A75327BAFD19DD829AEF42BF6FB5C8C1B20D1A0A18818E12133B366F56
B066D7F7AAB6596931567520470A1AE7DDE2416CD7A3B305D4D295DD6D805BE74A809C938626
01494688A39FB2B5CF6C9198EB723099CA38137A8A7AA033D943BD6C987EEB9682AD2ADDBC9C
7CEF9CB0571BFD480F1ABEFED5CA2206AF07EFF78F55A4799F86D3A4EF5B60D8A126440329B4
B20A9E02789C58875816B34256BE42E521B84782B68D1432EC046F58E46F717E411DAD2E5D4D
B4F1241AEA343C9959763AEAE109A480F0920F20EAA32EFAC34C6F6F887661ADFD242FA05A59
4059383D2140CF55EF6382EDA3CACE984D623756FEA5250B52BABACD1CA48FA40B463CB98F2F
97F2C4EC9CBF67A5D6440478134FACBC3E91B02BB85EC0BEFD7495DDBDAE5D33C40519402F13
A3D1E72C2800D8FD1C74FC7B810B23A0BB783498C8A6278B09230FB0681DD7256EACA65ED14F
38EFF1481F402E4C139EF95DB0EB1FF914EE0BDCF64C82DF6B9D6A11F4D50C7BB20217D97467
8FC1F874EF8BAB66F290884BAD145102E315A929197EA9A28CCF88144825F38502C82157DA1E
FBF40E7A9265B6B00F1D44A12E9EDD13191573193BD1C06606EFC4390580B6269B390335A905
1DA52D6A1A6CCF79F94873EEBE6660DC2EBEC7B577FB0CA9FBF6D58760670350B67E84862671
A614F20B9A467BA91F3C81B42AB50955BA72D1827B54AF1D91DF01060BC03718E3A6B6934137
DE6748BFD0E827F522322D4EC87CAA126281DD2FB083BC821E416E5FC15AA54EE7D941CE6AE0
E863F132D723E94336F787B71C5B5628A570638384B53E70C8894FA8013D49C46DDE800B5574
EA1808AD61DF5797398075E0D76D049DE3079B8BEDF4F9457F379F9864C04110DB102D3DB0C2
33D94EF00177057A6BCE716C9E22C75C43CBDA61BE14A10473E9388C686D3DA1F50B8E4C6BE6
4AAF43A4DDF43D13EB1BDB790F3EBED441E8AE4FB3716ACEC1F8CC8901BDC8D6FC00B646A5B8
541C844FC26C06DC68F94C53148E91EE663CCD865ECDCF5E6D68C0F82698AD4D91D962D5887E
165F31BF513436D0B3AC76BE50AF9C576DE1CCE9EFF4EB558BC7967B57B6C0489BB3865234B4
440D4B3732340B9606BFDAD150DE6D34583695A41B833110B235BB31512CDCC32EAB95CABDE7
628A6322CD3B68EC4228E7006B3103A4E4852CFD0388E334939F07ADB71D8C99A2E55D43777E
A1B296C5C22BE740186E0A2B51F80E136CFBC38249E41DC16DA43FB5F4C818B50562240B36B1
B873244F033D0BEA70DD39C4CA9F752E13174079155C0950257B2D376A9E29997B8E24F023A3
7AA98673905C9B25D8C22ACD555900403AF3219B35CFFDB4562452CEB40C56B8300A3144D8FF
CA288BCFE520D50FF6A58A69B1DA6A4CCD9E4CB67E0CFF81F6686E70C411A34A978ADDED5E57
5CC360BE866199C19DE6BF8F469FF02BF0DE7F2EC3CD4C3CD3A40D316C88745E9CAA603B075C
68C060631C1F6CE0C73BA0DCEECC6DC223B9F3A341C2AC71F373CCBBA02EE91C6D838D9014C4
2A66D4887029524F1AB1CB034FCAE5E0FDBE31ABA8709D4C1108F0B11F743F88DC0E9CB57228
4752A949519A2D1F32279A45D4F6A39FB0E52D6C63E61945F66A4183457E3A4C90606E58CB20
393DFD3DA89DAC1A24B254B6EA73592BFBFBE1AC5D6FC90C88C31408097ED545A41467BBA99E
3DF1F933B03277ADE2FB1B94C8389077446EE1DD8B73B457E077C9AC9A32326E4682B518D6F7
8FAA59AD4A0040918BE71AF4A3841222DF243529AF9033FAEF30CA38456F91D150FA5DC1713C
6EB7D481B79B70A784C1B7F0D538005A23FA38D28A4485C4838679D7ADE9B3CD9418B0195E40
9C760F61825EBFA38BD18B206DA33FAE0A275717EB2F667EA93A0DE2F038DA05AB405236682E
616265BF5D1B9704F3E12E3A0B1AA0EB03DA86F399B99FA276C17EAACBA70FAE534F3262D6BE
118C1712B9FD97E1AA9ABD23284D728D37EC1A1CE6A69315ECDD7CF90C82836D375671377EA1
86BD87CCA4292C962638A521D7903076BDF6E1751E22A72AAF2E8BE7F075CE96A536DC0A934E
0728254C417FD73ED73FA28B5D77D7651EABA2435C34522FD22E419F48F7CA084EDE82DCCF69
5436EEAD7034658FF364C9E916247643EA515DE87C8D0E16E6B13581A6951F6E5CE070FCA1C0
EF05901E8A2232A3ABD671E278C77FBA2D99EED22E5F60F18D698F9138F88FFF86FFDFD3561E
9B17C69CEF12365C06E92B0390230EF5C819E09D3F4BC3AB8DDF41CE99F5DB6A011301F1365A
1BCA6BC0D5835568FEF36CA5654039F3BF00F73F2A735A5C519D876E1BD8ECA71B421D3529E7
E5A011F995287AEFB99AE526E40E51425CD63F971955B3CB1958A265CCBEE7C9E6DE28BDB3BE
670B3DACD28999A1481659AE85BAC235AD4F389FEA7FCC35872B49F693D1E69700942604D5ED
5AD4273576299F977B0CF8D67C4F284DACF9A77DA5ED45E3103F4EDE9750A23D0C9B2C180CE5
7191A6CB6D286BD12A04CD415B78812E8143EDB42067648619F656224039ABADD89020F462AA
E701CC5F49B7666A4B6233648DBCF2E8564939A552A34F4E588990FAC3ABFD525654112AF367
62E2949FEA42A55A21F2525A8C15AFE669BAE31ECB7BD1D46A360697DE8B07AFFBA693E77B53
B4972B80DC8556CB3EBF658406629B5111482EAE2FEB065138FA244A563F4766CCA825C94ECE
3F8CABAC49D59C9593F24BC89BCFBC608D3FFD5623FE83288F68C7DE92E84BB3D11F851D49FC
EC7453EEEFDF439C59732C3B54584BA23DD9580153624B3CB438F5A6F4A5345E6D2097B6E292
3C3EE1AA831E55AB6CE7B46E3F696447D33D4F297598052B4459AF9B96757F2517F11D965B53
9D7417F9D4B9FC92FFA4E8AC777BCAA6577ADE30B3347DE4D4A0EAB8D0678037789C916DC151
18AB29300609C4C4EFF78572365A234AF57B89BAEF3D7355F3E7D9A20855E392474B053CE1BE
3F8D46AD131AE93EE75EDECE687714E3CFD7984695BE2CE44ADEC0F4BAF81E55982744BAA372
7A2FF2261342E9EBB85D541B46BC50592BA090368B31AB3110CBFB073096F8B98E2D4A193B48
DF4673FBFA654996E78E76F30D54C1DE8057A37AF3851D0EC398F5DBC1E234655DC6EA332590
F079125B9D82D412A9F462D266FBD6A0C07FADDFDB1EFF3C5DFB123A884A705F996B9C9C6F7E
A8AC33C46B19A8A1692E84B1F1561EFDD1B65340118436E0961264E28B039DBBB025FB99114A
05D19264CC87740D78EB9F507923FDF488DA73D7A72AF28175CE559FF7BCA8E07D8EEE85C9A5
839E87F107EA5399184C735C510213208CAD46D30EBCD854884E9883F0BC2D4334F9A26A6691
8D5A5176749E2038DEE6276DF72695589485EF88185ADBFE37614903DF8B6D857859005A735A
9FDBC39F3E712739FC4F251A9B334583E567353793A6868E3545007818E39D81492DAD796E3D
58CBC82DE3976A4C2D476CFEC4F7A1E73E408DA6EFC79589C6AC784312E5C393272B1A4FC435
8EBF753EA9E2D16FFAD598FE8AB52C7DD2DB5E3513A61C9C3BD9336A230EE86E7285404D760F
451BEA0D59C862115A44683139AF687D029A521F33698A29ED81A79906705FC20E6EFF1A42E6
83F28D4C8A65BF87BC14142E6EA0DB14A9C4A72DA388E8FB03E09A3451B9C33E6117189D42EC
D4585C966B50718835AAEA885AF66C1A86D3F93F81BA3B829A08CBE741235715FC32FB251418
590E19A42CD44AFBD7599E023C26941BDFD722F1B192255A9358BAB9EB59BDC13ED4B759C81A
6194A018B02B2188E163FA9D50B603D0B5F64DCDD8F5E8319C0719164DBC6B633AE8345A26AD
CA095CD7BBB1185E71072C2D9138695DD55C9081520F23452D4FB234A4A2934F5358F1D66CA8
9032A9828FDD8B7BF706EB44E3DA9592C79FB4EC0DE571498C10531CED53C55EB2415A739CE4
B235617754321395D877BA072FD66DF82210368F471DF3A7929654718C31827A3B8EE3B8C65F
E1B056BCD1C0F6FDF6FD995BEAFE4B6C3C58B181FC61BF9C49FC5EA900BF952EF924A78B0E1D
44B93368C215E733C62DC2B14CCB96F538EBDB1F014C55E8731F305E9DE5BFC433495B0E925F
615B315EC0739B71A70BBC30E09A85DB229BFDD1222AAFA5D78D17CD0C27CEDC20B4FEEC7562
8F3BBD29CE3FAF25B3E7F32150B471B143181E104B3748BE55BDE9769CCBB012882ABEE02433
1D268EDD26F9B5CF5BDB1200EED9D2444A71D7B7FB5C92CDB313F1FA9160BFB2FD7CB082E6BD
88CC5C098A7D6E9FC626D67EAF6755CD50A46E2A489A2293CB715E9F04D079EDB278059E6793
F0DAFA5AAEEAD3B31FA2520067DD30DEAA505BF238554D62D005887C7A09DC4591BF360FC87A
0ECB7087428EB8B56616A1F5B5349D3C0A7AAB806A450CEC5EEAFAD32644FE997C07908752DB
1CA3A96D1C3A708E8CD56FC0C21E9951BA3E5087BC5FCE7A96D70F0F90973E3FCBF74E38B0FD
D665552FD58C6117B5FCD68098F116D44EF168B4169A048B5833C151B53BFC4F72753340AAEF
B570AC1456BA952F812E64CAE650DB86749EE8327F63C34D9E74BC8AEB85CB04188B02981801
624D108B6755A755C98C9D275F85699DA502BAF7455E1EA7B54FD9C5257AA7DE882A604F5023
F1F6B19299E7C772A26F793499B32D18F227774BC05B25D7C3AE7B1E2A504BFC33900092CD81
87695CF3293142405755263E95C871A9EA894175DF60371FA7D5A137C7F31A68A0C12AE08ACE
6DF36A82E5BE2467724ECEB1DC8533259C2E4CDA3DD153C82EC657D0C3D6B9CE96616C23D921
22A455805819E3642427A90FCDE30970A04F325F35BBE463AACC815DED5EAF660096EAB8417C
E8A098500F6FF063169430C9D67E8CE38FE9202E4B88A7B2BFC4EC797B07FEB64B4D4CFC1E60
42957BA81D7C21AD4F21A279B043A1A6186C18D86DA0A07235DD694B633E8591A460B4CE2124
86F108053A082A3D85487EAE9528FCF6A7848B6FB37AAF54D5AED507E208D0002351E4143974
6EAEAE18D4EF99BB6D0883A1B8921FE11E33D76A0B6FDFF18A2706626796B952EE809FE14DB9
C6F4FDAB5791305501F084C029DDDAFBE1C2CCCD22336A057BDE02954F3D8E9B47400DC6C4A3
7E9AD0769C6ED555ADE4DD1745995303D79F1568E072A2AA4F7C26F6147F90BD644B1129A2A3
48187F9101198FF98BBCE37F7BAB5FD90E265CAD0B4146729585F7072BC139F087D532A484DE
356239B54E5CA2FF0F6A3B66BD97FDE533529DABEABAA485710D38602A243F0AC6FD1A7652EB
48D4ADE925D8270BA95402AF131F1031E6B2CC54D0277730C2F911903452623B60DBE8947008
6DDA3EC33466DD68C9DED90C706912306E4038E00067B6B91E710209AB1A08F2849689C40DED
822650102826E1165685E3EE5ACCB7B22553960BD3DE85FDD8F6702E863E8ED14C5368D15ED5
0C20642B9943669D48D2DA7795EAA06E0A44F23318D0EB807D28C422A60390460100842D769C
88F813280062D1E39E16E45F675EEAF84F33556B67967878311C83E77F23386EC4A993F5887D
48ADE0DFCDB8BBFFAE22B5319EFB64C7B940EB68A54A65BD94BE4EC62B066D4D05872704C0F0
3830F155B251BC787ED7DDD51C37F0D52F882FA15BEDBD18A1F3E4E311817299D94C32B6D776
5D67F4E201C5175CE2824A7259A8891FB2C2823AD9768CD5A04D6BE1CAED75BA0EA3764D8725
48FF3786E57CD5CADAEA18619FCAAF68B76CABAF000BC79F2826EA9CF49DCC8265457D27520A
A9E9A88A22CAB896C12425750246C46128A546C090B5C9BAE9B2A9205E7E6F3BA3944E2CD192
F7CCEC362A6781CE1AABFB64BA796094865B89453278D5800C619DD0D0E35E8793C574A33D7C
CD6C039BCAC6BFDAF9D3A593E3E152958DA87F4F2F9DDDAC6A4A8D2043F92BA9FAF32591B986
02F1B13587F0727866272419C78ACE3001A53F9FFCDBBC3FA12ECEFC28FBB37A44219E17B57B
A6A502388935D27DCDDD224DC4D53EE533E18A36D9E9D4CC25A7339C351129F1AAF2F63C852F
709A3C5E58BB1256FD5164CFFE1554B15F5B2986AA120B2A93DB8E78D230D6C432CFB2DA7C8A
10708324BA5A1100899E8A2647D62550C2B2D0850D0636F715A46C2C8F357017764DEF69431C
7549008D62DCC1403EA94C9B96CCE1E0EDBCD14AC1666D1000ACB64480F3D0AEC8191FD947B1
D62CB369746F8F9F9E248F4367E60C3BC2C1CE505A5A0E2582ACB805FB684B639E984D18F45C
626B13791B456174FDA55159B928BF55E4FE05EDED2D83AD0409A43D13664F4C5C23E6D5C204
5DDFA8775FF05E9E577A54B9A6483749D1465A4619B2EFECD9D4C5822AB2192BEB1315CEAA3A
4EB144B61CBAD36EA6FD03B76AFD635CCD900E8A0EF92D2F35CE223C0CB5AB595D7C5812F4C7
DD835983BD79F187899A91246270DB36A8CC70E07EE3ED7DA84EABA5E73D220EC2ACF313868D
A9CA910B6D711BA186C40D66B2A78C1D7A3EFDC9BCEE383F6190BFCE35C22C8B51687E600FAD
52408A553A6690D6D84918095C3A681C4AE8069BE845AD4143D733664698B99389AEC024EE74
854E098D70E0BA1FFA85737D31E372243CB9DC46FEB7E9EA18F43187722764687B962C789AFE
F0D4F5F90CD9AEF7DABDB8AD2FA21C0AE9DDF13F22CB2FFAE2BD117E88438E0B8D2DBCC5C6D3
F73244DB6AC8045322CC1A363F8339F53370FA307CC431E7C91756C2282DD373AA8965E7FCED
9CD9A7305F97060AE8C43FC0BB52197157EECB796825A670EA5959B7315E71A9348FE01BA1F2
E786A1C546D872FC97BECC46541E517A508766BE9308E62C4AFC21AF209E17A1DA85D969B8DF
EDC74B07A2B64272F54F00D454E6980563FED97DADAE75467109C5AAC2A4AFA98A0FBE011A1F
F9CDF1C53F5CC63D2C65B6FEC2E12BF42BC65EF0A69F9A04B50A9A73AF5F21DFC5BC20A95EE4
7CF12474B2A80157C984E6ADEB275CAD0B41467295858EB16E1CA9FB10664CE74B45D52D6FD2
4C714AB5DD8127FFD8500B149A8C8732DEF2C4FE464EEECA6B8D79B1736594A88473C02EFE80
3BD328E6E1820F69C748C1833C753926272B7A89CF856A159E4AF5E45AC06C8B540CFEBA87A4
8869CB02C96A2B5001902DC46C6BCA4A5490FA000AC3841C3AD62C8982A96608DF20FD71FE95
A4025D0DAF6908229254016FBB6E9E7873A39419DCBC7372568ACA76381381AA2EF802FCC2A2
1739B3F6D5702AC74BBBB6899E4A3B775DE8105AC6294E0059DE2B66FC1F181EE46CAC599848
578AEE2DCCAF2F4A1C54A0411B352EA1485A6771945DAC4339E98D1153C4995A743E1927ADB0
FC69E93BF1AABA5FEE60DE19B5756708D51371FE883C8A9FD21F2644E6C7FF7C360FB8721FD7
24F72F3517CD8B0AC6CD95E015A94D814A9A97A556BC3B8C26B70C9DA49836BB7EAA0F4FFD92
8722B664684DBFB6B87CD83EE1F6AAB258AB3E6E69EBF47AE0288E09619267D10F31C7AF5DC2
58CECFC0949BFC756DD76316DB1DAEC2D093524EBCD3FF569AC28C4B871B6D14E5FCD6422DEA
7F8EC14E67942D154850C2CEFE6DC6E5DCC58C5FB34D8DB2F3C7E9F21791B9F2233400CBFEF8
E988F445DE78860C2F3D18B1DE5D7029B01544F4A4232ABD7D04DBF009B3BE0C3AD9940A65AF
0DEDB4ACB2896CD9D578192D25DC620A9A8EFC3D5F0118B7CA90479A13DABC358F8B27AE31D2
E3834BA7D981BB745D2031234360EF786F1DB8AA38CB3BDE919FDBCBDA06B54D692524E13F54
55C1A09CFC4D384983143EAFB4722696F0945FF4297E61F9A9FC7005247915C596057B97792E
C79E0463A72A5A5394C32569A9F14F221EA7E606F10872C609D90971A09528377D3382C8678E
BC41A63861DCD04411F508B8EEB12BD8B862DD86550CB0F9E5D1DD7F5BD855893A2F847A17E7
7C27641D2C9EC2F64C61A8A809A46FD3E343EB201ABAA638491C13F4BB697504037E3753966E
4B4023628A9E0DDCA764CAB365F3AF5E1B364D9C33145FF1FC0C777755BD74E92B8C99F8FCDB
3A42F0D54353AC9AC76249975921E7709B5763D7B5776EE9CE2C22FC9BD029EF3830758CBF23
E7AA88E375C3FDAC557DB7A1B407DB465F50F2BC9ADE65D45A195865BCFB3FA449421ADB5F9A
AE23635D26FE93AFFC1411A7E4F94748F189DF3799D891F386B833E0B7681A56ABB5DAD46A66
00A946949F6A9C28E3B37D3145FF4AF35C4B5525F61E0B98033314C4A844DD92B60DDF7714C0
7AEBC65FA5F89FBAB6F4FB91BCE885BD17B32E44721CFD031204EBBA6356CA655D483BC8155E
7DAD9D5F77ECD02E50217C265E9B0BD695B058C0A51EE10F6BDB9A217F423142257D683CE751
61F71660B15F850A283EA6DF969D997098DB7FEF0DDB22E5B7C8AD748C964B54B55DF47E98E5
F09154F324AB1E6A0F0A04CD54BB7538A243E14FF914CB80FAEEE4E2BFF428DDD9F5799E5626
3362340FBA704BEEBBD8CF112668F9B4544A2CF25E2787BD7302EC994EBD6DF12B59668CD89A
D0A0D3956EF9A1A00AC4C85BC80DC6A4959B2538F8F3841F2ABFB40BF4D8B3AFD0A0024F023B
8A4F606652DB281471BEFB12A232260D9077F61D55D0AC0C01640EADC7FE87804637C50786FA
1A63927EBEEE4C640A4E8CFE893664E7C2CCD757D450184F7E007CA3E4A2D74C1BD7C3A5E7B5
2C8D2583F5BAB0BDBC677740768392AFAB4D66F0619AC8A4490DE77F24294C1C199F181AB1FF
1CE2F48F13943C8B812709D684100C2AC78788053783A8A64AAA5C9C9B2D2111B364FDD4957E
3D8DDB25AADB84FD9E1A99C692E1B0E210782DC5ECDE434E12A695F9A620156BAF053E977486
6B1468FEA94E71D81FFCB83DF3F3B6D5B7592CB66DDA7B0261580A512DBEA4B00F50116529DC
483D6D03E4CE9A7AF11370ADD5AE2549CFBBDCA096F46412F078D28C8ADA8CA46B347EB1154D
7072C8FA72386BA5972CAF1494858FD253113720B4B8D86D7632947C4AB3AFE82202256651E1
1721E3A48A6E11EA1361EC93372C24EDEA7A49BB1C165F6CBBBDC046E80D5C3AF6EEF4159834
E11F2C618317DEF428F85C7617E91E5D6D774A4C89379AC883AE0DCDB1B8AA1985EF75F7F486
68714F130693C29009254CCBA46D2A8714BED613C2EB4DEBC3CC66775D5DB9A730F93AB7D791
5F9242BAB1FDB94ED7A7B009CE8A37AA3723AD6C92BD62814B2738199E31E5D13A4C45331B7B
5ACAE97774251ABF8540568D2A4485B523515EC15888F994886E435645DDEA4D5CCB42BE9F10
5FDE8D206BFF84D240F94253CC99F5B887047BC942C950166ECC01F1B3777CC50175EA1F2622
3F7E9C1BD9E53D62188D50CC497C7B335DE0F4B88AE56A2E5063C2A5A097E4B9D82E2CC60369
35B7ED048057D2EAF0B2AC3C415C8B8128E0FB4A253F8C345D03A3B167BCAB50DBC378EB89F7
31232A994EBA7BFA669EBEE582B323A02F082CB4C6D524BE3B9CAFC4FBB88499015E10B6CF88
A4A7EF5AFB509D5CF3A38B6E4D7BBC799E683833C41D8EB64DC40593CBF2EA038D96035390CE
21AF6EA51F038040A571EDFE2045D04A33CABFA073AF4FD19A874A00D1F7D0F42C843035CECB
D7E4B93997B7ACF9D4F3F621D19426C930DF08E5F0495F54931E745A38E74BD0DAE2D3B069B0
8711AF89FFD6DC9F88E558865EA3C16D4211D4F5F249120DDE323F09C76AD2D9B073A4AF2E0D
455282DCDCDFE835670895395B8ADCCE90193645FBE45FDBAA283D8F8AD333CBE0BDC93325A0
82EF233B2F8CDDE8601FF1C8F09FF2524172D9A97BA3625949A22F951224B1A9A97ADE1D3CD5
F41D8EE17ADCAC594348DF6FAC171B606C92770020FF0B59376FB1AEB72D085068D30E6256AB
887E304B22058844D2F47C482ED2727C68C6F894EA674006ACDA3ABE7F74467F47DFB495AC48
72C842052FDEE81A1D440502BA50A66EEC4ACAF2C7D6100151DD91733724AB8E6036BC9DECBE
992464436C131C6359B93EE1472684ACE970C09AF4E4C6C014CF468EEC7864BC2145D6432A38
B4A561EC810ED5DAFFE353929EE387F38FCD957F958BB53C2AA7E2939EA5A80AD95A8216B8D4
279BF3CC5418248CBB9D9F1B6F171520D668E763680DDF2C4E50E484D49CCCDAFADE65529E03
F734B3C27E865C409C2F973F878955F7E13B811A743B797594208067EA8FC67EA7DACDB54B54
E872914279E918434BB40295F8F9674C2B451283DBD4B758BDE32CB41ED527F5E091676B5DA4
F0A43195B84C26C53DC42BCB951AF6DBE2ED6ED84BE37AB62C9EFD891CF5AE073EE95B511EB3
20EFA7D967CE9C90F1392788C06D2A4CA5D56C9D9E73AB679D8689A21E8DE979DD731B97C92C
AABA7A45ABD838E17996D7A3266DB63F87F3EBBC20DCC91BA4744EAF418385069E9F3F8188C2
651EA788DE708891603DD237F8A5F176D58AAF5DC927E14EA9100788706425518A1E2C45B1F4
AE077D242537FE27DBE49192FC6CB537BEAE9ABFDE4760AF0CFAFCF88CBDB708144D7F9B8488
8AA1BF2CCFC28B79867D77BD72CEAAA21FC89D661E092155F863BDEC7E69147E75F8A4CE73D9
6564D5F742BF75A86BCA08389F79F1DC998CB6B981F15946DE8CF1B934BC08E8459CFA9723BD
121A2699CBDBD84819B0299CDDCA6DC1D902AA74CD2870BAAF5890F436635DBD68DD1480A34D
21D55F862471A03674318BC68C27293556F5FD08BC40CCB66BC577BB392AFC448B45B35311EC
7AD891D9FE08D06E4C6B6751F3B44280FCD657574200EA3E66BEC2A4322A0C942B03F8D9D584
AE310F7FFDC0FFCDB1DC5A4EF2053319CCBB53DB6DDADD5EF4A65C70367B8A4FAD2C21034701
C09200526BCC9C812A1D5FC039DC0F3B3E33CFEF7949593E4878F9A85C9EB4FF637D583EE2F9
59203F3A83C9AD5C3F031F931DFBEA912F2EFE680A624BD622FE51B6F5D324695264C103B924
BD06C4CA0618CA4DE5888CE09E4587B80841B34A0BB6693C44B36BC832E5D4EDC8CA7567626C
A76408D598CBDE5CD93FC29F6A7B0FDC699D9C94DE613C37D8AA9EB9F4087BCA80449948534F
282ED0321AE9C530A8D5EB9A6AE188F666EB00F0104EEB1587CA41AC63FA1062F5A0B20115E5
0E584AA2116A13C26BB6DD1DF6FDF4CFF3E22C67CA9176F156CFED5190238AA88379DD78216A
6B357A892D84A80E3C65AA41ED5A52E0AB769AAAD8C6D9271285A4226079CAB7568082A5693B
9CBCF8A536A23F1CB095FF802A1FE3EEE9EEC4588AA1B9BECEB13A174908AB287A45BB19788D
112BB7B4947CCBDE7E65EDB0CFEB3E98B88CCF10F1ECAB0120D9FA2CD37EF964FC636A3AB8FA
02297F6680BCCC0CA03FF463A0FCE4E7ECD9D167826EA384543679029598EAFCC2D6368DB58B
7C6461629D57AD663364E710807AE7C4DCEE8B7AB2D8DB119BC9C72621F8BBFF0F72CCECC5CE
125B85434133B75B69A137FB95ACBB4C09D32BF849E8F4178AB5B21CDD45064AEEB0DB27812D
4B31DBF29AC1A6EEC07A8A480064995DE6015C148B07F9587B8C3F7DDCF9A11A87FFF7FAB64F
145003954F4E23C4DA806DB133056602DCE59842127496D15FF90290AD957B91EDFCD06242DD
AC00C14B8CFDC6F295300B31BEF872BE7559EC0F7FAE47F5A08C6B42A8F127351F693D06BFB1
E9ADF234252B9A90251CED853B3E24F7040A8489D93A7B50AF89A2B57AADFC41FC3E22F9D820
D2754613C09D97C08445FA7C392DF3804224EDD1DCA0057297C5D0893B5054CC4479FFF0DB74
C86B7E2025FDE195D96A96A138E7E1421AA0F101BA284DCD26D6A48F8AB410BB0A0FDB3BB74B
BF0E21397847D3CB2F36276D58735A6E0CCF16C8B821B9DBC1C18D64C442F3D400C4B4E2A362
D2936BF16D2AB50E3AAFB7AA154F4216046B149460F374F42542C6FA6E670300FCE91196E892
5C8D80C0C25FD2C17BB4ED90697361489830DB023958000AA81F1C830341AF906DC3CF5F393D
63742BAFCCE3DED8AB40FDFD1479064D23DF9F36119A3CBCD99D42425D05AA6812FCF9ADF0DA
A883A750CC2E4A4D3FD33931B716DDA4A9B9ECAA8E3937AE4AAF43C131E24EE2FC5605069DED
2D8676A98A575EFE8FF83C8C11C71C49770A032CA5B0603F5E0AFFE7A53B846540F446960960
1E87D395F36406F6105947B56B43CF315C0075E62231437F645E03FC9BBB2E909F4D429F730A
ABBA7FBEF66518F9C07CA35548174F41D789C97BA79493E7EA079857C65E1C09DE30A41D9524
971C2929CE3C1E3F3B4172CAE8B60111BC380B7AC387844A365806B30A571FE1FADB8AC4452B
5180F7993CF060CC302F5E7F38EBAF9FDB70ABF03F65BBCDFC54698520B2685D24DA2B79836A
A1328548ECE141D77B58CC2600A7905E96609BCB8F5323ED081A9154895AFA7681EC90899CB7
241FDBD06FC910790A94E637AA48E3D0A2488ACB2D3086662792300C3F527065D2BADE039EFA
27D2D0A55DE4A1BB6273F18624857ACD42C5A41732F50D1AF5DC748DAF271377FA7A0B82C769
AEAD08123F28EF2A7725A0CDE106D2BD9BE10AF25C3CB00EA17520F55D100F09279F88AEFE25
DA0389A5DDAFDD82DE8156A3A43FE4FA5FBE2812893B82589BDDC232EEC488E449A60BBFEB72
FE6E3C9564B01CBEE3267144745308BC36CB0BDC7A7CFCB23CACAE102B581EDE7304937ACC34
B574D0BB32AB28B811333A04578D867F27B3A1A34F9C700B68DC53FD0BA8A17A0EC01EE1BDE4
6F852B90596FB300C338DC77C768C7F057766B96A40E25827FD2374C00F511E1EFBD0D9A1C7F
D551EE7D785656A7E3906EB1F42077AC5AB5C8826A858BED001E2D09E8383FBF522F3783AAB2
B0D188BF355027FC3BCB32D9D5AAA2FDF090110050C1E6CF7AEAD97641B68DB383747CAE22E4
9B328FB15A69FAA134C9D928DAD74FA8E76CAD95A0CC34553F0F5454CC7ABBC27092BC11A0EA
592EEC93349C3A72C5F7B479789EED2E077744105D5ED958042BCFA237C28371A8E93A28320B
CE6016CEC459BB4F2BBA0036CEDA82E0D17F328B51F65B2B24A5FADEB5C89CEA5F4FB3BBF56F
426EDDA043A42EB1F850DEA16522FFACEF5B30800757FB0B3FE3A04DB902C0F6CD0C0F96FFAB
0219274011A81048488F35809F68E4F8D8F259BC4653D7387261C6171841413B59D8E8F460F4
B38B3F6059505ABA2E6C9756E781D156A372FC9681F9238F4349A894599140BEF11C2D1B9D7B
6576B56860568D3DD82A011C1642EB4AFB6AB5C74AFFFDA594ED429BE80FFEA9C0FC2C57FFDF
B60052AB012A310DD0F258AA265859680A55ED08698EC6E659E0415DCCD1882A557F101BE413
08D3B58B5D3D9175C274BDB841C95340663A073F28141CCEE58DA0894A1278EA0D02D2457BA2
5985F70F6880C4CDFFC9092958C69BA87B05867B166FB41BBD058D0CD16EDFAECFE5CF48D72B
A63E738ECA6789967549CA6D92AD07B4709CF89F0286B5D60BDC21F61AC5CEB2A8857FAC05B5
B85BC5059B1D21BA58A01DBE52292AD5C385D0CAFD89FF5F02197492E31D6A53F982DA1D4D21
9A7C0B12E178D3E5B84CE598CC2AF64898A9CA7E962A7D0577A5C09A4B013293F2C311FDA69E
5F9B99B5E8D55D638D310999C5CF67C7400C19B1013AFF5F643EFC8CF808A7DF7CA13A770E00
A3706F6CE54F941A29ACAE388BA32413E8F5BDDCEA11949DC803EC35234EC32D0B8B3D9874BA
C26E69FC7987E3727E43796ECEC589F8626EE0F7F725857E3909C19DBE9AD2FFF1AB043942F1
19C814FF062CE5ADC1D584A294C5F80F23213F20B373E323BE1480B75BAC6091AC92390F8B0F
F5BFF4D57AAE04789E030F113CA80CA13DD3160FC0187C1965B12274346D1DE154039AEBFB72
02CA625C404A0FA4A17B41C6744D82FCDBD865610AEF9CB655193BFE55CBF786576B6C41B58F
6F231570FC58A6AB1755FF56EAC96A8CCF139A52FDE68E704F10641B113ABC0EE4D8738F7A28
00DBAD05C5A0C1CEF547ACDD0424A08CCE1949B4663D448C09073A73F51FDFCDB0B188C0FD46
7321F134FBF699D4D5DE0A0DC0B8874A0173087437C5496A4E3947F66778ACC35A061BB52CC6
9AA4AC1EEEBA2F1227FC0643DCE745B5D09A4B69111BF003AF0838CFE4487E573EF19D9BE7DB
31B655B6068E033A6CDA82F2641B3EF060CCFDF9871850FC9B081686743F0FF6053FBA85F46C
7876F3E366B051719D04A08947177CF25BE05EC7ED5111D5B548D5FDBD498F322B07093A096F
9DF6FDF5AB0FEEE5E9ADC1DF6060C542E54BBC8477878F6D594C0B1829B05142D2DA0DA8F409
92ED9BCE851A271921CDFC2F0C0084FD0E5C7AD63065194DBE0FC3E21E18430D358424107B04
CCA0EA7E4D33D5DEEAC00D8E6440BD019E2DF69ACFF1242C41F608FCC2CEED9AC76426FB9793
1C5B93677969E31EEC99EDB2C621C736542A9AAFF69F719040D790A4B769F89F8A4B8E039C6F
ABD00B847E5059930664BC568941F4E9C26EC28595F88784FECB0952F89FF343B5098F53AD33
E78FC1D59429641B254CA299F61082EC4D74112F771B0209297BE45313CD96BF734912FDBCB5
0AD1A479F795303DE0FB4B6A8FFC8F1F21A7D220E97323E7FDD0F2603F0CB12EDB59D7EF9FCF
7118D5303BC0116DBDB2E3452E1496B1CCE4AB7C0337617B47C9EE89E387713FAD9EE172FAEC
F866B7D22A68FE65AC2D63E160D578A6C43474B48DF58B3B81F2921A116B1AAC6F5420E1EDB6
28AC9009BDB717F42FAE660915711EC25EB5405AD2552D07C238B6AA049DFD4820998EDE2E89
1ACE380D6D981A8AAE140A2398663F0CDD0196FD2D1CF4339EA9BAF461F21B6B79182FCD259B
C0805EB78FAA5101FC624046CBD24366AA69A7F8AEC8DAF2BE839849B059F48C38C31AB3148C
A07002DEB0BEBE653C4D65639FF36DE66C3E32C9C14BCDC5B34FE0D960950DF92F6AD100A5F8
96ADCD0825E60454BBD3826B1A5D1235B8977C14845D70FCF829797F0BD8767AF5D211507500
B5EA2F9EDABB1816D18ACA624369459BF7CD1FEAE039768286551FF7A84784142A3F0B73D6D1
32065BF5120D731739C6A4272E724153700F0AD86E09BD22041BA97462D92657899E29292A9E
35B8A86027D5577C9DA15DB11234C95B42738BA9C049EEB7848D5226C6A81BF2E35CBA8D98B7
D759FC2CEEC144BCACE86642DB34363B45987F7E733D4798C76A9D626F212A8EC970E2B9E9CC
FBFF159B2812893787E71CA92D0233242645530AD70630F74848F979176399C627C18CB41459
0EB6F016C04FE2DBA53E782DC80A1B4302CDD03000C6138DEE12901A209BFEA6AD10A4C9F465
9F4FD3086AFA3AE7D67C37E0F26AD3359EF99F73BF5E286C1661F31ED1E61FE5FC73D68C4FE1
6725EF3B380C28D9790CE55647CDB7A0C20577E24326BFEC12EC7705A580BB1AE1CF953B4633
ACBFCD3093B061A2FB23735CC60BE3F45AA03ECD31A43491BF81B7B2EE03D8410630347CFE4B
A38F7BF6CF26636B0528ED725E24EE69915A4AC25CF2AE921C6CD5E51727C0A3F7DA96B29D6A
7191DECA0C7714AB3D017E061CE038D56DB38EC43E899942D2B5D999381B5B53D02D69F06FC2
0DC4C17FD9EDE1650F2469235C99FEA60B79EA1EA6676A6B3BCCB221272D66A36E4B8C305670
6B2AC89D3D6448D5924F4E861AC85B7BD2FB83302518EBC79BC5631106497A4706D7EBB39F95
A265086AFCFE6532A6629E35203B336C47CA1AB429B0D5D8826691DA3186ADB04D46246C61C6
E50D92B9055BE311310654C5F69668C464405EE1BAB92717F09BF8B9D13CDF6ED7A48201ED69
E9AC324FAA94F2C41CF57CD0AC4D97ED5B2DC7D76B7871AC8B350B5979C754B943E0F7092449
9CE83D9BBD8453E01225C09F680280D8DBF6B79CCEB86D00C44C6FF0D37442E6DC96B95AE82E
BE2B8031CB55F14DD9DE66517F98A6CEAEFB48CD5DED8437223FEF71377223EEB8C8627C7318
4CE747B345704A546A9A1AEA18B256F137F34494E7C09779E40D0D074B1AE9CBE69E8D76291F
386AD9E770AFBF824B4D9A5688CC8A7D4347B7D7E7FD0871B27312D4331D5DC31700704CD4B5
EA3475F459C60E8088F9C419C81B327CB9430F5297B9AF01008E974CA86193C82BF2A23116DE
37911676CD14A2867A4CE330AD6848925B24A8B293C00408FE1AD65CAA8E526472C7FBA144C4
573D8FD295095C18EC5265633C33B8AD2474799E1FEB6A7C49F88EFB811F0D338B07BCE5B7FD
9CD7B744E447A34BDAB4CA64606F86A2A4C94FF9B0D6C7C476AC3B3E61219828BE1348FC8424
9D77FDF2E45BDF05AD299734DCB6E153EF021BEA752EA4F798DDB88BA721353F305A86E4DBEA
2D2265DB49B2EF91CE5C11FA4141218111DE9B1FBAD2D23FEF8AE46EEC1207B591F568B69666
32C16B514CF0736D28FCF313E156EF8EB25AC7961B17FA87127E0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000

cleartomark
{restore}if


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 4.00005 0.49998 moveto 2.00002 2.00002 lineto 4.00005
3.50003 lineto pgffill 16.0002 0.49998 moveto 18.00021 2.00002 lineto
16.0002 3.50003 lineto pgffill  grestore} bind def

 /pgf2{gsave exec 2.39105 3.38733 8.26909 0.79701 pgfe pgfstr  grestore}
bind def

 /pgf3{gsave exec 4.00005 0.49998 moveto 2.00002 2.00002 lineto 4.00005
3.50003 lineto 16.0002 0.49998 moveto 18.00021 2.00002 lineto 16.0002
3.50003 lineto pgffill  grestore} bind def

 /pgf4{gsave exec 2.39105 3.38733 6.97394 0.0 pgfe 7.80008 2.40001
moveto 7.80008 3.20003 lineto 11.20012 3.20003 lineto 11.20012 0.8
lineto 10.4001 0.8 lineto 8.6001 3.20003 moveto 8.6001 4.00005 lineto
12.00015 4.00005 lineto 12.00015 1.60002 lineto 11.20012 1.60002 lineto
pgfstr  grestore} bind def

 /pgf5{gsave exec 4.00005 0.49998 moveto 2.00002 2.00002 lineto 4.00005
3.50003 lineto 16.0002 0.49998 moveto 18.00021 2.00002 lineto 16.0002
3.50003 lineto pgffill 0.59776 pgfw 8.00009 4.00005 moveto 11.00012
4.00005 lineto 9.00009 2.00002 moveto 12.00015 2.00002 lineto 8.00009
1.0 moveto 11.00012 1.0 lineto 9.00009 0.0 moveto 12.00015 0.0 lineto
pgfstr  grestore} bind def

 /pgf6{gsave exec 0.59776 pgfw 9.00009 3.00003 moveto 12.00015 3.00003
lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 4.00005 0.49998 moveto 2.00002 2.00002 lineto 4.00005
3.50003 lineto 16.0002 0.49998 moveto 18.00021 2.00002 lineto 16.0002
3.50003 lineto pgffill 0.59776 pgfw 8.00009 1.0 moveto 11.00012 1.0
lineto 9.00009 0.0 moveto 12.00015 0.0 lineto pgfstr  grestore} bind
def

 /pgf8{gsave exec 0.59776 pgfw 8.00009 4.00005 moveto 11.00012 4.00005
lineto 9.00009 3.00003 moveto 12.00015 3.00003 lineto 9.00009 2.00002
moveto 12.00015 2.00002 lineto pgfstr  grestore} bind def

 /pgf9{gsave exec 10.0001 -0.49998 moveto 10.0001 4.50003 lineto pgfstr
 grestore} bind def

 /pgf10{gsave exec 0.59776 pgfw 4.00005 4.00005 moveto 7.00008 4.00005
lineto 5.00005 3.00003 moveto 8.00009 3.00003 lineto 5.00005 2.00002
moveto 8.00009 2.00002 lineto 3.00003 1.0 moveto 7.00008 1.0 lineto
5.00005 0.0 moveto 8.00009 0.0 lineto 12.00015 3.00003 moveto 15.00018
3.00003 lineto 13.00015 2.00002 moveto 16.0002 2.00002 lineto 13.00015
1.0 moveto 16.0002 1.0 lineto pgfstr  grestore} bind def

 /pgf11{gsave exec 0.59776 pgfw 8.00009 4.00005 moveto 11.00012 4.00005
lineto 9.00009 3.00003 moveto 12.00015 3.00003 lineto 9.00009 2.00002
moveto 12.00015 2.00002 lineto 8.00009 1.0 moveto 11.00012 1.0 lineto
9.00009 0.0 moveto 12.00015 0.0 lineto pgfstr  grestore} bind def

 /pgf12{gsave exec 0.59776 pgfw 10.4001 1.60002 moveto 12.00015 0.0
lineto pgfstr 0.3985 pgfw 10.66016 2.49069 moveto 10.66016 3.15096
10.1249 3.68622 9.46463 3.68622 curveto 8.80435 3.68622 8.26909 3.15096
8.26909 2.49069 curveto 8.26909 1.83041 8.80435 1.29515 9.46463 1.29515
curveto 10.1249 1.29515 10.66016 1.83041 10.66016 2.49069 curveto closepath
9.46463 2.49069 moveto pgfstr 1 setlinecap 4.00005 0.0 moveto 5.08101
0.0 6.00006 0.9 6.00006 2.00002 curveto 6.00006 3.10002 5.10005 4.00005
4.00005 4.00005 curveto 2.90001 4.00005 2.00002 3.10002 2.00002 2.00002
curveto 3.20003 2.60002 moveto 2.00002 1.60002 lineto 0.8 2.60002 lineto
16.0002 0.0 moveto 14.90016 0.0 14.00017 0.9 14.00017 2.00002 curveto
14.00017 3.10002 14.90016 4.00005 16.0002 4.00005 curveto 17.1002 4.00005
18.00021 3.10002 18.00021 2.00002 curveto 19.20023 2.60002 moveto 18.00021
1.60002 lineto 16.8002 2.60002 lineto pgfstr  grestore} bind def

 /pgf13{gsave exec 1.5 0.49998 moveto 3.50003 2.00002 lineto 1.5 3.50003
lineto pgffill  grestore} bind def

 /pgf14{gsave exec 1.5 0.49998 moveto 3.50003 2.00002 lineto 1.5 3.50003
lineto 3.50003 0.49998 moveto 5.50005 2.00002 lineto 3.50003 3.50003
lineto pgffill  grestore} bind def

 /pgf15{gsave exec 3.50003 0.49998 moveto 1.5 2.00002 lineto 3.50003
3.50003 lineto pgffill  grestore} bind def
 
@fedspecial end
%%BeginFont: CMSY6
%!PS-AdobeFont-1.0: CMSY6 003.002
%%Title: CMSY6
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY6.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY6 known{/CMSY6 findfont dup/UniqueID known{dup
/UniqueID get 5096647 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY6 def
/FontBBox {-4 -948 1329 786 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY6.) readonly def
/FullName (CMSY6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A4D6AE353EAB9DBA0D
4335868937E3A2D0F9C8A4FBEAE138AE56EF84665582DDEF7B546714518D224A
F91D19409EC600924626D79F58E272E3657E631C06412F9D42732B6AE0A93D81
E2B13A81C76CC37FCA6DB35A1C6A572EFFEC7E1581C57B1D22EAE9C407771F40
71D002A06A6AC249FCB7605C902A76EB298B05E39D543A63332A91B8A1ACE05B
F902540FEC1024680B8D5857E4931D00781747C87ADCC45430B5462EA480BE50
D07C5C9EA0D8D6447324434CF0D637BB13037B6E1C48F191C52CF2B9511690B5
405280D5C825BD376EF12429837CD44BEA223DC8E199D8F85856C0FD551471CA
B30481FAE99B71FAA56B639F549F449F2CA6F5450AADEAD4C09595A7A8530D12
B23E012978225E112D23BD1D48DB097994A9D5EC707216D2BF5DF8B69E66ADBF
DBDA4737737F51EB7A38A4207BB46456A8117067748659D654B1D14849F14920
E57462ECFF602A181700A346C1E95131C6F1C66132915FFD999FD4105AFFE7D6
7DA46DFCC4FE53265B14D7326F5A44A3E97902CCB106AE99ED6434AA9EEE7E6F
60B8034EF80DF885FC63DFACB0AD1C00BE56F79B1AD41B065C59A35073B450F3
7E6BC7B90C9D9337F9636943ED701398E6886947E126F1E12D74C5E4B5CF06EA
E60F9B121B9B15E6752B127CCB9C26017A84BE6DD918AFE46DBF27BC06E66AD9
830BF2D6CA9E24A0199DD3E732405F3210C97C9BD21545B5E4DC10E17C1A2C71
851ED2B272055831A6F95864137C218E555B054BE3616820FE671E5BC08E7A48
D683ACDB91E05F469C0C8919D71027E179F4911E878F8D13F999C63C4EC2C21D
ADE1A11979B539C4C5746AA157A4EB4A7A153BC5D966197A7FF6A2DA3FDB161A
EF43C2D906C617868617E72163D5B0BC29C36A60867C120A02E08264231FD46C
1D3B62622A05129188D818E2AE83FB2770DF1D466CA38A49D15F9056BB7AB8BF
D7DEB2E3B3A8157B59D138787B21CE3B3A456E230CFEC1374AC66B7DBBE788FD
5182DA23264093CEF60D5BB0073AEDB68A61ECF1C69669244A1FA0CBA44DB83F
352AEE6012082B8A3FD62F4497B1BE0E4FF77FF94BF221212D63BC1E35B9758F
2D7F8FA002751DC0380AB954331E9AABA6C122F8F3D7E69CE8A6B359184F0531
6B158ACF34C64C32F4671D430820B36C9A9397E9C877D734B17C3BBD8A88CE2B
9F96D7AC5B8D55415E942D6C05392D03DAE53449F8FBE2225C91F228704BE9A1
ECC568FB2E90C73F2F7AFA62859C35F0FB26756DE719BEA5A3EB81A6481507F1
813CD1680EBFCF612FD9D3AA4B90688521446FABD5C54CAFE7B879F24B54449D
2B30738B137B5E212B34BC5384BC2216A5D13F761D6E13A043DB2AABC0276705
5C80CA394A8179D60DCA4651CE8B0A477165FF48A31BEC6B7C0852C9D72E11BE
FEC5E4B984DFDE90218C105999E070FC83F1716D13389B5EEAE3F26C82FE9A7D
3C67A98027D15DAD791348A21DD922C71145D287C7EA83B225377744BBB0082C
22FD44E1B0DF60956DB9C4790F4E2F81C477DD4CA9F4BBB4287914EBBB4F6E36
976C9E573496A2311E5C7677FBC4BB755B8BF925F291DE0442FBB8921402A487
ECF23EC556C3FD66158727B10B74C778FA91EC16629F6E949624D265FA6FDF1F
772E965A2C30C80AEEDC4A1867AE3D6D116BCE0F96D1A0C5138F294CC7C2AD72
8BE152B314E26422FA2DDDFA89A054CEFC6607D932FACB035FC9FD9959C4A468
CAC0F4DD41DFB83297EFFE36C352CA0A6B1485BF8433522BBBCCF9C73FB7334D
1CFC92348F91C4D0EAD90B22BAC6B27D21CDF5AE65C056BDE3B30424F76C8EFE
D7CDBC854B13EAEE0485CC348AC52F5345B7545B4FFC60B6E7CEF8D32354B233
8DF503A03F5201EC012AA67157F4A47B902D269A060A5B8E10A37CA7CAAFD417
1A13EED9533BD4A6E8845D7D236CB254D40930C273EA4372E0B13912B2CE9261
275D51D202D461FD69AE352E95F72D61683267D4951BB602A0BACEAFF9516F3A
C30EFFF3ACC08AD374A730287B148FE8E168089D239E1084E0F7D83CB9815031
5428874FA4640E1C216514AA16C74BD2B9A95EFD7B6B0C575A5D5B3AD1086CE7
E8EEE33490CDCF2E3FBAEDC984FE53D033987580E75E74E455E44496E186349A
DE4B5125F69BF79936565986B3D91E6A25CE6E1C4527FE22580A39805A91BF6B
90EFC8AD31FBA71FCC90EA04875B5A7ED05BA2FFD1C04774E1ECE84B4105ABBA
798C339FB61ABF75C6FD3F24BC775A7FDBDD87BACCB9A86B4D928917CA62C0B8
56343CAE0051A1172E7F234001A5FAA947CAF382FBF23E57F1144425713423E4
4FC1AE1D096D10D6FECAA6A9186B0D519F51D06CC976A65A37E9219492E6218A
FE9F99700C0D0D18BC48632268DA0F0CC24BE660E30645E7F63B0AD49CCA26EA
CEDE4DED685DBD38F5C4BB6AD6CDFEBED1B14A456C27C448C91CBF6337FB3632
7B9A565874F9849FC5E22C5A0437AF29E2B7FA405CF6B7AFEF66AE7449E89746
66ED2D4C15A36C45C0F64E6F185B808FC788984C230B4BA63204B38C309F2DE2
2937A92C184077F5252C9D6171EC6378273C32B61CF65E4DC124B321A4049294
BB6CDD064D4E07605DA5FFB7B3B0A55A09D26C8624F03D8C197885BFF0A20B77
257637447F628A4A642F6F92019F9ECA5B2DBCEDA63C05E5258C9DF131EDD1B2
B4B04E7A5441035163BC2769B79C89ECFDF071E3517C59A45C9E97800724E1F5
FDF504E2798FA9074A37B210B1C24DCC0B78263E2297ECA31D5C258BDD92D2DD
8C53DD3B3BC3835E5AF52311EF0AACD6DCD159C45743B1AE7EE5A0111DCC9193
441FB81F945D219DFF26BF50D80606DD3392CE941242CBAEA45077FBE6AD78E3
0DF4FA54CC33CAC27A337FF307F14E60D1FA48FB8368E307441D6811676CFD38
094A558CBF0B92503014BB169E345C27C74543CDA9E8134F85AA0DCE45EAF612
1AB1D86FFB5E13CBDE8E0F68B19E30D0D9F5F0A3EF2A84AEE4D7F1F63A045297
3F5C3080F313B32066E0C209C2708636C33A6531F1A483F3AFDFEA62305EF41E
C55594660133146B24184070B87C22EE5B80D66C409076D733245FD100E936D4
E844D8A15CF45C0CD6AB04F3B5FCB0BC7B1517BAF21CED4D6CCC3F19D21BABC5
FFA9768D77A41BC3F5C4595D868F2FCA88D6E41558FA5A70FB562E4EB22651A3
886F0ED1B46BFFF297A28ED67BAA28A1302BC866AA7A73418BADE0870872CE0A
305A5E46BE0CF6B5794539B8509F1E2DB4E40124D72201589BC4B55ABA2F5C40
E167175C7F7378203C949B8967E8CCC40F44A2D1D555A4273733874265542C0A
3C47FF7144C4DB276320150FD5CF453A505BD3BC1E98738A1CBE175574037D47
8EF9F80622F57DF4DAB8FB13004ED1DBBFB4664F8D7ADCCBD529B22235740EB1
216799B2D8CEC7CC4D16D8273B6AEEA427D480AA6E3C463F46763864856713DB
05307CE674714CAC8351410627B8D1087155F3788E744158F3428A767CDC9769
CFBE28A30D635D7C4FC44E43E7F13128A867389FD66CFAE939AE2745055BE71A
AA7A7817E24D38773771C77328F4A755C872AA977C062A3BF7EBCD6DEBC7746E
70346293A661684D3988A5D0B29860E6789FA8911E0C0749ADCB9A6B053B0E31
3D490B9A2982CFC167001648FDF96D040BEFDB75A4EB90E2974927BF38F10E78
17FFB9DF2A65CF56C1F63544662CEA0E88A5141F990DF6B5DA79CEB5B4744083
C4697EB37422BF120332AB934D292CE8A3624E2C8FE6862C2211254558459BAB
D8F1D8C76C604098701163703FAED0BB298396C86A0427106C007A7CDBB0AC8E
35F39B240F8D9D43C1BCECAB622C02E721A323383973B61DB81115E3552E4260
9F252F18E01C1EA2B0A1DED4BA50A5822D10AC7ABD664C460A4022BA910804E2
2094A3AE0F2AE375FB22CBD35CE9C2542C240A79BC6A79F1135E58985837E1CC
1E5D6666BC5D61FE6EF590316F9D1E80C42B9A7B6106D8B7F575447AACBB2660
2C96D7F024FFE3292611E82CFE62D95646B92CEF6F03EEFCB3F6950A22B0997E
52C38B55B77C2EE7A4D047F27ADEC6BF0BC639589FD0D1E0A47C948AB5BADA43
9846CBB5B1CE53E96622B59133303AA0F559A481E50382A2A38C98C1A56D9AD1
1668FDDBB1FE8068DCE68E5DA13C2D9918D1FEC7F69A6DDD3A29E31A57B7BDDA
EAC616202162DCC7B9DC52AF821A9C1D2D7F860A2F294904A55499432C7098CA
BF79B1B0A1527B99A4C57673AF54297BA822AF200FFBDEC475158AD6ECB55F87
555012ACFBDD0EA527CB5793CA7CACE2FD956F30D7A8AC7F6A98979BE4BD744F
BB84A87668E3DE62A814B92D3139981200D5ADA86C5D733CF5107DF6CB5C999F
F6F63ABEBC9694F0F67EC632BA8C58E715D92FD6BDD056F29753BCC3E54B0A7E
63EC33F7A29740EF0D8351B5897B126FB6C33E9A33CC83DAB91691690B8B9598
FD3F397FAD45555CF5FB9CD80879A0CAC1CD8E8D536F05134B21FA4065452DE4
BC8F63C82A3C34A01D00F4BB254F2AD7F6171EFFF6D7BE1213C9456AB383C568
BEC17694C545B98E8AD734D0522FEC92EB3182DDDAC54740AD352E7645D08B4D
CB4DA9B381D36C920C77869619855B4CF730E590B0405CD25884D6DB4D49F1E3
D79EC4D0489514359CABED492BD751104091A661A510F268EC681F818780F304
D960A15E583F354DD574767B860C57CC9CCA991E710576C626EA909C6677057A
C409AEE846B4D5C0535F849F33470FA395CCF5C05CBB9A1FB62CF656F7A2AA42
34730F786153A9856C337112F6A555A70EFA76404E2B88DA2DB91E8A2BC5A05C
CC339DCA364A87738B60497CB790EF16875CBC506695DC7D70C6ACCDB2A00555
3877A013482D55281C83BB630CB3EFB0657E5490176CF23420B97265B22B4CFE
1DF9E0B294F064F5160540EF3A452641C82E347A96514E4063A7FF16832736A8
6F21F6881E269CA09FB66DF37CAE7FF46D6B9AE42B6396EBF9A7A06453A81EBD
808B047421B0F88F62B3FF217542FBDA872D03A476FBC7C0D658C03AF70ABB40
03F1A3027E0FE186A22AD461835877ECF843C0E8B8340306092FBC5E91783A48
E010EBD29F114BC273BDC53D2C94275F8956A74561813AA6C2D896CB3F6E13E3
30F6C230C00917A40EC6F4689B65BEE32F5722BB1D1147585AB3B3D2D5EB8273
CBE30D1C6CA1BCC4BEA9B87A014E7ED3CE53D13ACC8D426267CD3BFB8497E1DC
C51CEB14F9CFB4D4BC9D6EA5A49DC3871DE59C89F855F079299F45D363F78634
493829329E3F370D117DEAA18E7A6989C515667C2229779B9A5494DF0B4109E7
71D79D379FA7B408A4675FA3DE17ED0ED632F9A443527CDA8E960411AD4070EE
173ABBFAF9101BE92BE59707F98419503A85AC58B949E8595D66D7B13B8FD4EF
11B28FCB5955C5F147BD7FA141AE0CA2ABCB1CAF82FE22D3281852205087CF45
549F4D5B47F52AF50E8F6FA0AEC0F95FD0B1EBDCF965BC8A924CE0F4598AC546
C15CEE4EDE7E6DD0E5FEC3A531B944CEA406DBEE21C4CF3384A79D0D5CD51BD8
AA5B8B1FC987AEB57E86D3C6FDFADF998A6D6043449FA5B88BB2DCBF2945A513
AD7ECD01B39BE46A577437E1774C3FEA176287C51ACCA15909E987B5AC2CA664
709AA5605EA89A8DCE6B4014CFA781E822E8B05F377BD0187D5EAA0585A98E2D
6726C471578295D824D1FBFE89F04A67F1A360D799CDF92C1218F29C24DE22CB
C6B625D044404C22C89C433715BD77D0BF171030BA84E292B7A81E2FD99D4E67
BA702C2EFA11D4461D833E74E97C9E295C6D170DB6BD73D615D03E678B0296C0
F8BF99321767684127625942B4C3241BD0608460C81D97FA658BC179917B5065
74A4D1F729CEB1D51C82F9C90F0C712917AC482D413ED7CAAFD545508652DACC
1A03842E354F734C5FCEC8C7BEA4C69B066DBC83BFAA473D0A632DA2CEDF20B7
6C7C83B4AE2AF7E05AA2C081BB6870AE38848F3870DD62C7D56EF1CCDD4BA3B0
32C61ABE629BBC464BBAB06AA0202772C16D82427ABAB4830ACEA267B0109A81
BA5D832731D1E9C9F0552BEF7A9B7AAA73760C6A09B910009BA9D93F1A56298B
A43A32D43CAA3988643DE373FF47C176CE92D7931601F0034E6CC303876498AC
026BB32D2F656A3541815697CBA2B6D527B69816161B2E13171E073D7CD85435
3D32708391F63D592B71D98805CD19978C2BAF780CB124372EEA0A3DAB537683
DC74F9E9EF98843F170FB086AEFD526CB81A7CC88046C52E1E56EB40F6F5C75A
FE9D5ADE49E82078858072F68BCD02487EBAF4E3F7F309628C1FDCD4B01F7D00
E1AE0A7CD3455953FFC77EEDCC5B5ECB1FA583064EC17132A3C12C0153C4B87D
AA57FF73AD33C22C81C545F0593DC7EF438FF7A5F76A04E52848E00CF2C8CB06
F295B1CD3BDB1D9E4EDD765D3753EA8DB76DAACAD75CEAC866FC4CA41501200F
F12998E8DA573786AA9A7232287A6D19A12536026BA4423EF0B6D81D38BDCD9D
2BEF15BCF32824F8EE802B461F52BD926A5BEB2E6CB31AF83E98E849D4339FFF
95419941B12D2F3B76CCD34D6B78B91BDFA5DB4D4879501DF3E514A5EA8F1713
E96330C5B4F1B7BA42D42F05E229FC303AE00E954A81F9BD43016F5930A0C490
6C753157E4355F6ED3C5D1963779EB27402522B5E9D459206B3A06E594DF198B
785F96B96E13045594EB42EF4A8BFE0DFCB4C5A2DA9594431FBE72A5AE18991A
36FEB5FD9E8B238B3A095939B6ECAF5644BCE7DFFD8EA3E723F66B305F142B71
B26F34E0538E4B58C4B5984883C6B08F3D1F596B56578FFB0EDFFE3F95E3B6AB
63CEFA183A5A49F07F0F7559994F56D7305139D06AC8DF9466E715D90AECB1E2
C35E3CD3F387579B3C9CA6F5BD741A7A5D7B63FC0130AF374124DC8C6AFA4FAC
E40BD5923FE889E87126FB22C1AC4FFBD351F884D70803BBE1BD0D40D3CDA0DA
F6984C373D3174358BC41C8DD4A215283ECCBC24F345FE65E316F24940198A6C
3B5483129706AEB60D6C0CCE0DF9C130593475C72A92662A323EA5B689E5AD0F
C949536875C37AA2517281A36A1C1D5650AC96E0CC00C03266E279B54232A1E6
E6697196A4270E1DC794D8DBDF0690372AE19121B85FFD357E965228C66BBE6B
D2E55533F7A1BF30B2EABBAC98CE35C619556CF9F0A522E8EFE4BE3EC61FDFE4
E364608963C928AA8B302B1636DE15C83711C8FA060C5BBB1BCB8E02215A4F4D
560DBC4A235F6F07EFD20ABAFEDE0795AA3932556D6AE3F6EB8FD0C1C509FAA2
55CCC2703661C9F48233B429F020E01C1F3B8090D331C3B925DD5D1CF9D19F95
6B192C593225B5186109D3E6636E87BA6F24EFEACD1F06A29DB1D1F4DE0D0253
87641AA4A1113755D0DDA6EE4234CD9AF550DF63A46FC6F698E623BBF6F05278
858904B415033C1A33B7770D99247815E2A8F1216EB42EF9742EEB4E1D90EC3E
F2C0661DFDD996CE1FD66F946B9D4FFADF86861CF8EDCD570CB400D181697747
83F38B92B1803874C24AF99C66E5F966B0E72B725FFBC6172341596D8AE51C3C
4676A65E4D32F499FB1ED170554DA7AFD79DE5953988516A8B2B123FA207BC49
D80645DFB16A79549BD5E41606D80424DBFD6F5BA1DF0EC271C596EBB4FD0B84
DC5EEC45C3FF598241368442A3FB06B460C7D46678069011FFAA3072402D4DD2
3DA6139A548FA99A68AC61134087071ED8B4A37A0A8A1A3B48A2A8CCAA351D75
1828BA7DD5B7758A43F98F4D449ECB58B20B26C40B35AC82623961CD892B5DE3
777908625E1A91DDE62DEBB2EE5EA3CAD7E089F421DF613D976660D547CCB02B
3C6B01F009299124A78E46BDFFC3F2497C435678B4DFF0E94094B0DD3B930E62
909CED0E31BE64C98755D78874558FFBF20A9CB007FABA7E405259E681AFEEE6
3B5ED57F935F48031D298898D63C57EC31E30AD0B03C9AE6A26D54A9CEE0F8D1
9D3EC2644F19740405E4C7E164BCB18F952A2932521B06D2A75B5C88156681D3
FBF2E56BE19DB289A417ABC9EF5F2C2F51CE4E7F82B0A5DC8A9DFD546548836B
7245060B35EC39027174090A2E19DFA781D1DCCF39FD8B88955157A9223EBB48
C0DD363200C1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSAM10
%!PS-AdobeFont-1.0: MSAM10 003.002
%%Title: MSAM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSAM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSAM10 known{/MSAM10 findfont dup/UniqueID known{dup
/UniqueID get 5031981 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSAM10 def
/FontBBox {8 -463 1331 1003 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSAM10.) readonly def
/FullName (MSAM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 62 /greaterorequalslant put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE2340939CE40EE9186A0DCC3D3
D661293EC5BB40766B73935EB54125526067D631E1E3D1D6569AB3546CB257C3
4C12CA4AE98C3F99898F1448AC0B416B8E5C3EEF3D74B5FD6A1BE3C23B160E78
79A9E0AC4FC82364F946003C1B2E0EF3CEA944727E7502B65BA1331D36C159E2
1D107580F28A32E04CB876822CEF478BF4464CE4F7AE824FC786E099A1BE2A3C
7D2BFE2A748AB092AEBC2021DBFD5C40E912BC5856F3EF8615147350E75D2BF9
E428D7948E2128053FDB1F90CA9C7D6581E25A6645879F50577FE7F0B32B873F
13F97C524E19F1CFE3883C0DE1DF80FB61111978B0C2D028A99A712D3DC27D8F
C83C4EC335F0DB9912DD2AF009FAA56C5BD5855BA92851629EF6C47E6AC303A6
1A231558746ED8A78C76E476ED71246A2E15C51F465AB21A22ACACB03014B06F
201876D3C6F49E2D38D8C4FE8011F7BB148FC3227E0BFA51C0F9AAD64F0C6095
77B3D875476B666F9FB9A46763C49272FC504CC0E817A1533409D293D6D62CC8
DFDA666BC9DC70C4510BFB0DD2BC94B33D457EACFD754761B696163DB4C547B5
FF8994977A7C9910AF486487CE0320FA1E705BAF4B14FB937229D80F58D01E6E
9D9716EA3EDA84840B5D6BDE216A25814ABC4DE4C6818266C33CD4C3DA4F23BF
DAE6ABDC6D64E7EC7DE918DDB0B05D8413D32D99D15FE112C1D393D21806E0C9
7CE0F0977AA36617B8DD50937C5B0B5698947B0A71A167072FE1B3AD6F274D97
484926DF52CE7D9D2A4928A188E1F867C298E6DB475C0CBE09F0523D8BC6FE24
E1CED78178EE1E9D66A906B72505339E62499C0E4B6B5A2D596C4F8F4312F582
9413DC88D6EDFEAAE0C86BEE44CBDDD79BC02C844B80324B1FE3512E73C213BF
ECD22E7E13F98AB56E4D693B1D6045045E2F01DCC2AA1F70A4699B7D718A743F
D749133029EAD1870DF0B00EDEEDFD33642A88EB10DDF4CBBF8A7D8F7781179F
A91CF398747D52769A054CDACAEDC330FB79ECC96CF43C29515F5895D3A8C1E6
828F776844C88090405F868A872EF54467B72825B001B46F6496817A9B928BEC
ED212D4368368778F2D1B66D005F2D6E3DF4AB9B9791AF2CECCA3AE524781A41
5052FD21CB81D934F0F12CF8C8FFC656BAFBE897C5E86A21D3F42A38F7916693
ADD1DBF48F534DA16099FFCF3E3DBCB254BF49D8F72FAC2F9548477F9AFA414E
65A29F24FA16A9E0955A9A6CCC47198E6332ECD1A791F2E36E6656852179A94C
E3CF4477A9A6CF507B8184ECA5C0304FA15ABD8B0C379EAC19B9D16A630D96DB
A6DA819C2E481AE4870BCAB5963C0F9D837C97E207F7ED58B776799586B9F755
B705AC31C09C3F74AFBCDACF092B05F9E2B072C1B17EE6347523D3D5E1D404AC
636C33DD94121C3711C3D05F48E12DF8489F894E4913263176E81927BF5E3A94
99D124F64D00BCC288F03FD14F89E6352083333EC6C2044E2F81C477DD4CA9A9
55135915C27654B09BC9099FA966AD440417945879399B39C7BF20385456878F
9AAE7343912927476C2C88A445C03E3B77381F3F9A82FEECADCCF8C307144775
144279EB14E0F0443F8200C0FABD54A075EDCB83EAB07A7CAF6EAB17C6CDB239
077DC62173A54E93BE2911F4A45F72B80DD9C41B301B292EFA78D361AD74BD7D
2E94D44A2D79BB7B89708E094A21CCB28D80E0FCA707D742CC02BB81FE4B0E06
4A5E93DF0414BAC27ADDB044A0D444692973994CD028E1C62F1FFA4776554914
2D55B0F81C06A2633A4AE42AD00422A619E339F2E6F0C6FC74F70552974509A0
812F1007FD7055E9ABB8CB39F799F847993DB9593A76C388F9BC883D4A0DE2CD
BFD0F7F2A5F1C50791EB4363104B49088E6EA2C5E61EF256A9FF232357D62D78
0C876D200E4136F7B0570A3B0988F3E23443081591DDB861745B4F6F0FF7D854
8F558F995A283B346E266DB6FFB54E0761046152A864F710113B6BF12967D022
2947517E1CE2079849CF8EB01BB2B96EEC2575AAAD1AA1E019D7E72BCFDF2979
8E2A6EE0C1525389C16411E5DBD416467B9900F07223117A77E0B4C3B0D49A96
C2E3A61AF9C9B1CEB80AC6357FC0CA446FF87BA0CCCD81924F6209198BD6E1A6
9EECEF233B17CC4E9F0654024F7E857EAB409F4B9B9ADE4090F2B715443A80EA
130369A193A32A4DA3730F13E3C9E717CCC9E74611D787277B73EFCE14FCC3B8
6B11AD88F42705F65E9C747B472F379ECDCB7F8F9C3FEA64402972623EA0998F
255892C43CEFD7ED08957C495AAACDA59E9398B43788DF27F7433F72377C8F88
F54F5E3A5564244827EBF92227B94F4FE896FEC6519769AAD567E618DFF61B7D
B93EE0FFA2EA58BE1FDAA0025259789FDB31A1019661C18080567EB5C6306596
F97F039E3C9ABF9E40B4725A96F8170B49B73B68E308786FE99B0C005DE01894
7CC93C196E1F830570D51F0AD29BF27CCE45AD7D3B4332C9D50F1E9C2D04E033
1E197DB9BE1D44566F738CD26A13B8EBC8FD49E999D35F042E8A24F025414F14
D9D11ED702250F1295722F68A022196A0E38B9ADDDBA997283ABAA62898EF32B
C765387E238CA3475ED5C6EF2803CE32B5A90A8287C70386F46B84C332E8C00F
85A8CC2DE78D433A325B7862AD4D93B3EE2CABC4B688833BF263E26879AF213C
934FAFEBE8D804E2BC8433B81ED5DA99F08C2C11B93019D3D9C1C952F20C68A7
E141DEA2CB983DAC5A2B9426A98262FEB13C420EAA315C890F0B907BEA099C1A
10B0AB255AF99694C722166DCDA72FD58CFBA3328FC5EF83A52A750C5E613E74
A8572CB8B78ABDAC27B798E727E3E5AF9451416493FE3F4E95157B4ABDF3A910
64369E34A2B40176A5E0E30F472E33A41B8C7BA4CB1BFB9173783909161370AA
EA40C83C60AAE242358688CE13193C9DDC3544A959A1E6A16FCC4BFAA65A63C7
5AEF208FC201F88DD047B5E6EFBD4BB256F973269BA1B06CCFC186D48BCCB4F6
A0F512B1D6541417BB6045045CBE72B72AA2549C345B1BB466335226A0E76A10
9645C25A0FB4CD8455C7C10C0F4E7E9914D2010BA1C95C6BAE4E62C8B6A8BDB4
92281B366208ABD9C010B3660C5E150D63D6927255CF9081C0898E9B206FAB57
B306669AB87AF405C537CA7D3411DBC41C53EEFD8071C094486158E97BAFE90E
BA29BEB83BA60776D33BF9CAF9C7FEB66D4B93DA27E499B006D243FF59CB33F6
AFC65D10B74CC522BF4AD45E3451B395AD5029B148A1C9B710D5CF02B65F9189
0822C0A33C4D07F2DEFDD5B4F6E063891F0456F1BCA4540F9DCD3B0F9F39696A
52336AFCF0A33A029AEEB448CE120B9D939487EC8274AD4E1D5F5AF4C14EC910
680C5E312735DFA3A5B1835370A76DFA63A05379021A64EE55E25AD5218398A3
6DD66D1B474A2E7C6E236E0E4A9BD0E4F7AD1807C6478225C58327BFE1822000
26713D01CAD6951F456504D79867D523605ECD78F2D5DA05994BA4812BF65E7E
34ACB732150ECB3D212D03387C71677F617D76A9A42C708C89D61614F280A5FB
0BFA84A17CF9DF333C9E13DEE82A5ADC9D2E588338D247889ECFB090CC63CF9B
8D92B1CB784B65BE80E3B57998F9ABEE702E07BC127D272C67B0A97734E405C1
FAA87E6B9DDB8ECAD2B9DCD56D687DFF71BDF29BBDA0A0812695F81C5EBB83F8
0A810D6560F28D7CA1F89A11F253E1B3B4EBAF511454E4BF2C46A333BC186558
8D73374455A32DE993526063AE70EAA647454ECC62BFC5A53357F2955E4A8A02
E20AA64AB6511CEFC5A32874C8F2BC2424C6B85BAE80191216A22D93BF2813EA
18A1A961543D7C58C4F4B263D76AD6C61270F2A77468B3E59BA9D861E5AA6CE1
B7A9C4C2A13E80C4052283DF3529210B3F6E90C2EFF205866865E7E96F34513B
05A45939728619E02FF1410C0D220F6D615718893E7370A0B91675BCF681B2D9
56112D9D37ECB819017472DCD38FE4724834869F82985A69E33BF862DB420DEB
AA1CDF83099114501C037873E86E0D33FC954E12D40038FBDC78E7159B738516
A078AA386D9424B8D4913B7848D8439D2ACAFB7C81C9AB192D77F316D299D11B
24F67141B1E0FDB564B70FE68070BE6BC00F22C11A1291BA6401C722487BFE19
D7869DA874C9059677DBEF958B7AA06EB924A17B3EFE9014493EA1FA8C4C67B2
B5DC483ACFAAE88F2DFF9FAAA7825854671ECFD522540C9F6C3817C11D3B63CA
8ECF710EAC4F27506B67B972633D0821BD15F4511F305A5677F2919DEBF7DE88
4F60E36360A7856B6B6A8A866832534279AF45B4232877F45C92ABDFE0910F7C
F86825A1B6012FF93479BDC9639C01CF2C783356B33127AEC7039D40529EE54A
756D8B7524E069DA60A38AFE592B8B228ABE22B7BC9CD9B23277FBB567B1377C
77E21AE6F55ADF4F8864F4260562F0384165444385D5A8C5966EBF191900B898
85240634EBE8A5DA382E0EE3583B1B5D102B6EBFAD60AB9C335919EFBAA55A6E
36CE4887299E395EB5766080FC0B6F93B1247F28842FB817084C9C090616AA72
25F4ED6996D36CD9675009C615BA26BD4904F3130991023E4116A7E6BCB26C10
7106241DE039BA7F26E137040BAF587AE03A476526F025C70F16EF23474C0EEB
6E27D8562C7C733CF470EA198494A505A8F871E8EBA31D4F0D9F0AEB9D0EF63B
738B582F7BD73DEFD5D83707BBC7854B6FC7FA6E2636F0B68C4858B247F70C4D
F602764B9465975E9AF28C2046EAD743CC350E747D6524B9CD7F325946B9287B
F7D46E4342A71B0409B2BF5FA4D340DD549F6A5B05D2784EC5A248560F4E214B
C5304217B3AF8451C190FE1C312527746E45DE39D8D43CBEED9A19FFE143CA61
3B65344C26E189D790A0211556C609F107C78F55CA120F3449A697D1305DAD2C
D3EAB88E2CBDC022A4E036E232237C1C16ECFA62D6CF8EA3B6610B58C75EEEE9
676201206E4A8B8C7CF5EF409F2C0544DAAC926497B1FBCDEA07DF042ED870D3
9D74709FDB8CD2CAC4726655371EDDAE78A5D9E0811ED4DCE8C23DAE1ED44D06
F4DF09BD9A00C1DE178E766E05CD3CA64301C592BC01EA4F6D1973586547B170
A3338C60FA1148DC5F3F7B7DB5EAC870239BD137CC85AD54380379F5C30B0754
D0A0FD8DDDC7CE725B58F37DE7DF077916C912F2808D0E4CA32808D0439A148E
3B1E18B9C88C8B4DF23FF5C53B2881D7C23D1C239F08137BBD8FEA326E7CD1BC
C80027A40463BD58758F4402D3DCDFED46C2E3C405E1B1E8DD0062E1272AB5C8
91953946FBB4B9EB0A74D0F7F4FAAD798571EEDBF0CD4C92A6916909297F27B7
5135990685B849E8244D2EE73D5C7BEF1D3042CA8353210EB4293A2B2F1BCCEA
7FF2AA91F52D343BFBF5E91F2381AE5B6803C46605D471B7BD122153E87D872D
EBF37727370BB683A194C4C4DE13F54AECB116BEB3E0750E10AF272E0C015641
0F9264A21BA79821B29D8CB78746C314E6893765AB9BB7BB1730D758F687E615
D2AEED695331E99591AFA000AA540ABD36ACA911E91E20912AB819A80D5183A4
CB88E08E0E9911612639C05043942AC8EA0072E9CB7154C415C0FB37DFE3F01E
638D5052C87A8359DD979C44B730F06019191C5BED15E6E79FAF312ED8EB0B02
3E712A0F6C89A6F7C122A561F133FB4D2A98EE09B11ADEA53702C92C210334E6
8D5F3E1BCC0E81CE178ED749B00FF4089C1AC412DC5F6696C9D8B9D2EB24B35C
3C1F8F63EA348A95622AF76CDD5C4DFE06A8C7534A55FAF937777E864C98062C
CEAA3ECB5E518C75FEAA240910646EF782303BF34FBF8162C8650D5A6F0EADB4
FAD9AED7994003F74E09A3CFD8900A33160CD1D49AA1C7BB5E42A2B0AB5A9D20
A5AEE02435D84A2622ED87454A2867E112A9AC72653A7865E2DDB9C236384228
94DE4A396FA798ED1F370AE5247E0E703D4D4225ACC1EF410631555D7DBC814F
F84353CD407284FBEA1D371CA578165B888D771ABEF7C3ADE33DF899E55FB0C6
A99A97A474739D07FF17DDBA267EC6C0A6154094D6E7354FEEF9723F23CA6E86
D8467D66FC5DEA43D700C9712BCDBCB15EDB628F4B840A76D761CC213376A0CF
3F137F399AF2F349C1D7FC9EE28CE88F416F1069D6907C3E917AECDD245A1BBF
4375A03755C145042232F87BD3F097746E41A70FAE7761AB26D1FDBABBFB56FE
D8C80879557D3849CBFC7D25D84D137ADBB5FD4F6FEF8CC9D54824EC85DDF553
FC992F823952FC7591D08F035BDAFC9317F144C94E828F09E29A02F0D6639DF5
08D32902957CF0BE88694AA031FA8BCA9E73D48A60FBEF090FEFF955FEF964DA
F53A9B58D2732F986DD20814A1C11963E4FF24011CB93D616CF4A6DEA6ACC5B5
354626A142D85BFC4F03DBC32F26253B97414C9CFDF3C3EBDD68FE0B7908AF88
1961CDBB6A94155524361C0B95E42AF0DC1542752B2129938BCD020CA19D64E1
0EB5DE254B638D700EF4BA620D924D65E95A329AC2657D2CCA597A4FEF7F1347
05419CFB59A93578682671B9A2910BBAF099C877288C19A4EBEBCB3C64415248
C00D0295332B6388384F27779F0B0A2D05A9F3BBCB3C1F587EAE05AE4D2C5319
478E8D848ED75B368FF45ED8B2D572AAE502493D2A3660F8400E1AAF9B27AB35
99FA7E39E250E91A67101F20FAE8BFC13A07FD2F7FD3A45002C02AD891458739
10D221602C35139358B1F23E0DDEADDF0AC07B1689EE95DB17A3B6888D9BEB65
C7A9BA2CD903B2F8348489A57F5A7191D1627A2C76A856C9E178B17A40293F98
E9CACD819DBAFBD0FFEC6EF5BAA6D8AFF764786470A5B02860DA35A5B3A2BBE7
45E6E4882CCF3A980B0C35F6C170D7269F7263FBBBF4051A51437A218711AA18
A408F16E7C9FD7D61AC4E859A91CA4B18D5BC3B0F6EF0287298B75C11FBD9FA4
1BF203A988C21BC2C550839E432350ECB4471F8553F7B4E42128DCA6B1239DAF
6C9D4A8B8AB7FA8AB013EC3060F02D6DB609F59E0BDE4D05891811A41F7E47EE
7166D88DDCFF5BFE1AB84D873C38009A857DB436100CACD8DEB98548A2FD3770
B44D6194717757468A9C84238E5B83AD19921E31485ACC168C25DA73D95767E2
27EDA7FBEC3FA6C8C58DED3649994CC965F81327D8547181CE06A73A6D696552
6A6EB8009B1C40A46791E8DD0AD66E125F61CA6810BB4B74E266703F9DE0E322
41D93C72DF010EE7DF3B7AF46CAAA9463E68D5C8B792D3197C4EED52CD16D5E4
493C1F8944901537C4E6AC73E5D6621CBD177B50CFD7F86E786D6E6EC176F6C1
3D7E9346C2859A185793A764E960F236A1798FF5E3A740ADDEF422FDA93FE058
53A9989A0A7252337DDCE50B6A040E49421069081644A51C80D37BF73CB30254
BC1D8A551F71FFE93F068070448334307A87526A86A3A7D53AEABC3506E78DD1
849BFF403701D6059D6CC2CCFCBAC8BEBF440B8D3152C63908C6882E56EAAF71
2984E440F40B5F355DAC74EB02738BCB094E40A55A48A26BA9970D09EF48EDB9
C0C6BA95EC2A5E98325594AC418DFF541515964C77B8D2C8E953703063F17F36
D042EFFB97936DA27FC3601DDD601709B71382EC67BB58C8D07254A6BBF7FFF4
EADB3B735D143E4654A5F06ECF67F0305606CD0619022A5DEC8206D4F9B8D3B0
1CB47BCDCCC4F1898958555F5218EBA0BB9F6BDA92E8A8F645C51D69C597141A
DACC7696EC47C399F6BC4CC2760FF9366A7D1F2ADE54B913F1ED476D606ACA25
83D3958E9EE0547A5C54C359AD40D487FEED3555A936A7F9A2098050930339C0
DB023D22CC949331C13287D1108A4F840235AF8E613FD6176485B22A31B165EA
8DE2F2534E57BC3E63D44604D095AAF56667F587FBFB99FACB6315A21101C80A
6029178A3D776FC5AEC78EB0214DE49358826CA99B7306502339EF9CA7CE6D99
D921E72B5A7E6528EF1B536F51A0E3F6D151A61F5C4098B2B3A1EA6313975C00
7B47EAD663CA85546BFFC3EB76B2727EC5E310297CA8650517BA6DF7BB13C501
C0E3BD9B370B3D722E2022FF9806401FA62A86B04982094F7C4B592B6F777A74
145D765B9BD76DACCA859E931AF7B025DEE8E0BDF1D2BBBDBD57AE17669ECA0B
EDD536F807D882C79A70370FC7B850292A0E529BA7AAC7EDC1B52A0C5738D980
B5717E2D1243478C97F5DC1ACDD6F3956F42368112A400794B6BE89AA57D8B08
78B70110D9999C723DFEFA099DE21120CFC2CB61DD3C03FF94C67BA963A32477
7CD1ACCC87E138
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LASY10
%!PS-AdobeFont-1.0: LASY10 003.002
%%Title: LASY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name LASY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/LASY10 known{/LASY10 findfont dup/UniqueID known{dup
/UniqueID get 5011949 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /LASY10 def
/FontBBox {-19 -192 944 683 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name LASY10.) readonly def
/FullName (LASY10) readonly def
/FamilyName (LaTeX) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.035 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 3 /a3 put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943C32EE4E8BADB2F86ADB978E
619A13A5C67ECEA27D4E62CFF3966D3A4E0A1A6176EF98B80B6D0D058D40E65D
5E926884E6087D7F3DFA72F7D84E737A7D25926C41E8E7C41B199ADA56C9990B
864AAEAD220BB05DFE73EFE83F295D8DB124332F4D4D784AFB2495C7D522C46E
DCA9744AAB2E9297EBD2DC3F3C303B0FB7C1335D948F7E144108D893525D8F7D
8C28C202AA4F8E55AE16CDEFB45991408E0BC31F841A9D8DF341ADD2E8824B22
C2FF4D706DA4E44CF2DB67FBBEEEC5B55B05FAC2E707EE02A6092012C727E7F9
020CD04D06B66770C4E12B5BB23D82B187228AE3D98936D2CFDF56F1786D8C2C
D06697D220F3438AD22AFB7636462674FC6786B63944F3FE245059C3997074FD
3E7243387FEDA4A96EE92627A8E926912F81026E2DFB827897F1B690617F852B
637B46CCCA442B679D4F660326AADC0838153B82EED447FFAED4D402DE4302EC
8FCA18CEFAC9357A529E31602EE2A57D52CD45C5456F523FD87705036575957D
08B797B3EFFB97D4834D0395754AB3F22D6495D2144087D448616FA1E863855E
B353567C05F9D644DDFC8C8164382483961AA43A81FDB622DD26D4047E861804
C55C760CD1EB2FE7A66491C24D3EF88AA0B0485341D142B1CE5D260D902A50ED
3E39DD9A047AFD3DE8E557D2A8065DF41D9B13C5D7FA1C345748A744846EE054
C313FE21BC148A68787F7FDF346286C5C2C38207189C0CC2DE290E15C1259463
797697899D4874B8467D7851D5E046828D9E7CEA2D3AB65AD9B85A96D7322AFE
B40D805A31F7B9DCD1030AF29DEF3692AF46D0D174215256226653C90D944B92
94B2C21E9ABC75E6BB0CFFCB0A927800E7F92274C9BA0A6EBE38E561D108E05D
64EDAE07CC1C8B140415D905EC7B00FA482BEFB1750AFCDC3BE78470F63124A5
4B0576C1BD511D5B9CA5798FA938749F3F90C42EB95E7D642CDCFF934694F8E6
143EBE4677F3C69C45BEC539B234709344EDBEEF51113D7AB747AE3925D85869
FECB2948FA592BD2424924DBADF52B6090BFD6552BC772958D27EF296B52FC59
67427AFD674CED18D97C4AA4C708709577F2A195AEA9B94FA0525682C5F055ED
509ADBBDA22C318A983C61A36D34859254A715ACEB251704703A25C868A8A3EE
3ED1E908FB4862BB98347DA98CD2294AEDACBAFA2CF16D28C2259F74DB616DFE
650EE129655BA176D094A8CD729BAA03175E2E4552A82713BB3A72ECC0409BDF
3730E3E59E27A9CC0A5E65942000262C4AFC61A70052FEBB363DB7993DC2AFF0
E8BDF619977011C5D3F2F7DF3B1113141FA0231AFFC95C3A1AF2B76BC627726C
DE6B36785E25243787632A4E494EFC538D47B4D9E566348DB6D7CEC4701AA16F
E0556F16F8FFAFCAC0C48CAEE1F17A4AA50C45CA5A402026EECF289CFA214798
AEE85CF9E1BAFF93A2A2E70CF33FA223AF56659D418B72940E82D617CBDB2E08
37D3A7A4C09B3F0C96849BC68FA6710098C6FA7A33483EB20DE8538EBED6E469
CC5E987B77B87D71E9F1FF64C7C45D129762EB0F4A2C2F102C70BEACD1CD6ABA
43C98A4D8AD1C91F98E9CACD8DCB4CB70BEB992F74CACA80C2CE885DD191F62D
894638AF714AD95F313A97FE77BBE0FF326771975A13336A2F08D1C18A770B27
89D51894EFAEB90A9C69CE5ABD93C2AF712116F2751508E0B1AB41BEA2F6C5F7
0B3D85F1D6140C6F15E6360260A37D726CBDAF1C18194EC919298A3384D75393
9897703907AE86AB72DDBFEE565614747B0A6C04AF9D26A8AFCD7D234C7EF261
A494B0FCBFE60AD5C110612BF398E2DEEE6F83698B35AE2D42B5D4F03144DB3E
B97EAA71EDF36492D265B92CE58BF2177CED942A650F376885191A78ACC4169A
23A137D4AE920FA38D27482C9F1C19B540E1FE096353F1855DE3ED9F77B23D26
DBFDA239B33B51E8DC02A7BD8028BF973B0F210BDD080351D536CE4BBC9FD837
28B4A4A1CF3CDB3873BF4F96483A9FDF482761006B2825A99A448B9700C2630E
504AD0C7F98DA3A935546CF0CDBE44D06A765EF5182A2DF1F6ACEA6CB85E47F0
1A34DA34071796F6EC974B0F7DCAC94F9E20C04255C34A2F67A5B03E25D93B3B
92B95A41B7BF83C3E98402F660D8384F73349312D2FAD52E679412289B557C8B
10A952507B0627752D09BEF48B2A8926211745BA77A184ADB19FDF0215F52DA1
EAC26AEA4A240A1E1D778BD4A893E3E25421A999A746D70F49503154AA1360C8
15CF7DBABA4C6D687F6448340AEDFE5E7DFEDE604124A714F7B8171DE5028BD6
ACBB3B71A6740F81B45C0F7E2698E8C2FB0F42A48AFBFB9BA03522971BF5F310
5C610A1424955DF15B8D1F4147DDBCFF667F1C371CA578165BC6843B761AAF72
9818C5537B481D1FBE3E651B3D9637626B8D83139FE7B58A52D2AE3640E7870E
677B39C11EAA9704EE7C2C41BDE43469A424717860369F4F8BB0B28E9F9A082A
EDCB4CC9EF45B061122E6E2EAA31438219147070733735E7592575DBB4357DDD
AD47B273C471861CA37F31556B79773D01D771348A24552077D0B63B3246E3F5
66072EAA1C9D503E94378A5D52F882663A34DD2208E4BAF2EC48841CED64BD41
C6BFD0E42D699CC869AB21DE2B22041F72E1BAC7FC5D75BA8A569DCC001F3AA4
782D041EC9205D19461CEF8B867EB42AAA11D39F1ADE4DD0BEF082C694F6B7F9
481118450A94BAA2DED9DA57E70210E41C13C5E986904CD69E6294619A926FD2
C9520320AE0660EE4E3C11AC3D60828585F0C94E07EC2BC41FABA6043E4F76DF
D2D3F3F07F9428E2D0B154DFC555419918CEDBE8E5D0BE456056DE320DA8EBF6
F80F27866CD8983F4A175BD20C0A1B06362A62B47EBFA7DD7A14390F29ADB17B
E5BC276889942ABF76EA0D8BAEFD8B8EA9918F9B48593218730B5EE91463B088
C32993378510E9CBC5E68B44987FB4B9C9149BC82A63956CC622E968E97DDDCF
BE5CE6C1C98561753381859B0C1FAEFFA05BAFD7E2D1FF67D183CB1AE4AFA600
8D93C52058D40090068ED4DD464F17B402EB57907F6355E5402C407C86F02DFD
4CD994F17DC48EAE1B759B65783F2FD9ED3AACB0AA8A5D0633CC7FED9570EFD3
75ACCC6F1CABE01AD983066109E6EB3B2B88C2854389904A3766189AF3AFCEF7
943BA18EE45F16CB13577E2454AF478074E1891CA9493612E0D0467AC7D9F941
AD62324144D7E2456B8C26494B200464CCDA045A7E8E96F3B429E5B6629C7037
931B7C5661B0D1C6BE5096303660C55B7A2DDB59206BA3000F6D31DCFE816E3C
94BA8C778ED3909083DAF6CAF010467C8E291FC7F4D8728A23BA2A5AC6704C4E
E6C0C48E230DEC3BB1B00E40D7FB944CDBFE44664A8B0962FE912C392553F5C8
4E59F531C9590C19B32149D7361A37F03E1EA971BDF8F8E1356912FE23AA0FCA
DE524614089CB51DAA76B17BA767661E7544390AD07A8E827CC250BC0E36BB07
77F8FD5CB13A0A915BEF9947517E3C60CEDA9EF81282FAB01C65762FA801A60C
2F1A4798E78BB5BA701DC49C05B3F9264094A2C3DA81655CF67EB76245275B68
EF18B597B896CBA357F74AD123796F5C6644CDB5FE466B9D35728D8FC092BE5E
82FC73B9E42DF56B40A7014A5C0E4A605A68DC8C2DD26E0911C4C9C5487083D2
9E4C18B6552BAEB134DD211A708650CEA939084BD50957C59C65D176D772B9A0
346D4D6179A83D4AEDAAAF3A713EAAB2892F5BC5EE34D2555609867CC2260956
77AB34FA284E50A6036CDB8C4FA6462BA41DACB5961CC6EE0B14B65766431489
0F5BF7C0747BA18398C779F4EDAA1557F21E501FFD574652C5A1D97D21A6E441
128E4DDECECD57028CFEEC1BFEAB376F8B8A69CB8F3B2B29D2FC46BC486468F0
BE8F1FC2C5ED90A4D317739C0759C5F26CDFB5FCE6588D381249448FF2F4ABF4
4622A7ACBED487D2CC9C10ABAAEABF38AEE4D25AC5FFE791DDEF98C4605EF67F
DB1EBF9247072DC5C8503312423D5C017CF065975F1DD3F1D1AEE9061CA406A1
444570B648711DEE1197C8CE1D9A27625E328A3099E3B98BEFD1513333A2F096
1C9D913F5A909BB9121527A3CE23BA565A84175B85A7CA17E1A848321152B5C2
929F350900CBEEEDA790D2FCDA520FF328B5826AE2D658675C451A20F9DF08F8
C4F38F5965239B0D1597A87326A2416C56265E3407A9B00F4BD39032B10A5A18
A53623107B24702593809DCE75A33FB6A10E7F82F1A15C84DAB8824645D142A5
62504AD080B2A36600B07C013D9164A3ADE3E8DFA4F658DFED559B3A2E5AFA5B
40C09E12F0523A90EFEC40BC1C2C427A43FDABCCB5348B1DAEF51BBB482631F8
86CF200894ADB278F40ED305E7FA40CF51A2E4736FD174F699A6E26FF3E80CB0
5A70D6B0A9B41704599EC89276BEC937FEF78F62C36F030DF5936E12ADFA4EB9
8FC8D742D2A1178C1DD181CC4BF69F8F533E66FCED7585758419EE2AFCB0D15C
E5A5064C7258F1DCDAC6D86050A5186B4B451649D62E34A5AD383010DBC60A2E
EB071084E27FC222F7451665818379A0B65E7CD199A67B8240D5EBDC545AC45A
1DD7EBAA7DB6034D5754E55BD5C05E17A50B7097B6A36C8A9B56B07B3048DCFA
899E526B6C43B2C557CFD65548D1BA3EA2F2616973E1B682D90C1B42AB821FD7
0608E0467F0B12DF3D902F997F7CD19B28E595F110A81F657CC231D793B6EDCE
D5022690A608D78598CDCBCA416F2BF5C86B6495C5C820757C4743F1464B300F
47EC054EA29215AD2F2F17F55AB920169919577ADF4BACE5695986055FC4730E
531FE82E9D926B1B03A8C204F6FB4A391C94C310E6D5F2F53D41BBDF76848CC2
47C89D4CCE56EE40FADFF0FBB48804C01823A8A70992C265A469576F47CA3418
10FFC1B8B58ABE8EB762567DA328B25BA9D4F3472428AE0FC180543D29B8E437
6D7EC48D25A411991924FFC2DF520BF690A7B08513D2A6B42F2AA51B0E3E5F2F
6FD57E63BD1736482F303A13D6E0EAED1761211598B1F2AB26DDD5D45ED47717
2287BDA7062E8AF61D232473EC060F6831A225E0AF2E6A5BE2D8604384359C53
F880B0A503B5DF5C98D2D657D14663906736B42A24D1DBE55ACAEF4C5058DE5A
CCE069D39746488D6AA244BEFE1F32D1BF65D0EC3FADF515EE45E672AAC72040
A1E1065DB5A52FC889E1650487BC4C7977D55ACD9D726C74B6249277B0DF721A
DB3293098639658F6796F7A012416C147C694BA55C734A527ABA0C9E6363C2C0
0633058B69261961658CDC29A477784C90517818017B6BF89580BC66BF157574
90F131D9470A323287091DF45DF490B19328CCAE434A9637E0E7D3A63A418989
384C98463294D25CB07883B8637AC81657A0AB17C4BB9891599D2B8398DC08A1
3B73A2DCBB9A79218C161AEF14D238A08D00C90ABDCC18B11AF05A54621B1929
4D09A4B533A7F1D4F0BF2E637BF5E72353AAC5785828293988797F37B8F14C7C
D165E8587E48A876C96D701F464383490DDF52FB12DE623F786F13D9BCF2D5BF
BBB9D5A16E3FBBB5E6A9C34494FA3F6DB81C12FF86521554113D1AED9A894E5B
E1E7225A9B98D4980AE902A8DB3DF1AB5D48B334C4476EE4FAE42C2CFFFD1BCF
D99D82AB3992D3CE1F8642FCF7BBEE3D5840F516EE8F6E87B5294DC8BF2DF4A0
B7A380CF7A2BECF45CE0B0F8A996A463E6193879C8E25724BF182AEF116B7FFE
8BF1A1C7FB6FEDCA86965D325538AE1F2863A49700469ECD3BEC3D75AC255984
373E4A5A621AFE445A10B8D97EF1BCBB61263A4A2009650770801C386AC6F95F
02870DEC62FD6C556A084FD4C165AB0CA52DF2633B01DCAC757F614FFBE09CE2
17092414A7C0FDC43FB02DD311A700632E594A67C9F8D8CD037020C074BFE241
68E810C8804EB53F16CB67ABD8C9F99F80D65C981C4221E857378C4EA79E5CF8
8CD53B841C2CEB7C58581AD1C3EE79FF6B07BD35895A8843393EA65FD48BD248
DE0E7799845B1B568189EE76445A58E142ADE3CC51747B8B97E031CD51E90C75
880B6EB5D7729BC29EC0AFA8690955C4AA5E809DE62E0AC18C5F1A6FE5E5F767
B70C8DC44C965E7E2E8077938B4EA3CEF119F7F824DAB88946A3BD00FEE7D8CF
68B5A35614F864473C24A95F13C7BDC200F018B5BD313629E0BF5A5E35D0A340
00BA338653FEB7040C3D5A43DEFC7FB25999A596BB7A701E8E03E8D3D35FDE11
BC8421E8283EBC327F7C9F6D457E573D073755A97EC24BCC4C33D93D72F62790
E732CE02320F8D7B385DFE2230418B1E70AFA7DF7D83D7E04A2F657CA6C2410A
63F9B45C562B7736A272349BBB18E462A02BCF7CBCD049B2FA692445C13C4B28
C1762DD4A632CD41A8196DBB26075B7E9708EA316266289D910151A6F7FD5F47
55E7A41DCC3AADEFEFA2F28D241DC4D70AD828E18F7541FAD3C51FF4938FFD04
8E1EFFA5A6E443049FCA2472FD9CD0D300A0AB032E36C43ACE958C75B2772BEE
E4327A53F279FA49DF38E5A3BEC64EBF7677CCD8EC1B972B65FC2643DC5064EB
8A66A777124B70F2DC6FE62030EA59CF9E328396317798C1074AF49EE9698EC5
B3A0DF1112669CB2EB0E2B6948DE7DB4B136C23C5D0B2DEB49808EDCD5A3B68E
161ACCDFA41C8FEDDA50942F8D2E75ECEC36EB127AA8656B0EFCDEE65748D322
20E16F296B8D06AEF513E272CAE380EC17A1A2B0F235FC70D479A606B33AFF70
D324C6FF178A38DBFF6F2BA86115FC2B7237BCD1325690F655B912C30BC069B2
0095279D01D4AFDADEA0E9FBFAC0B22E60E377515AF3012FD9069DE25DC4FA52
7AB6B2EA9CA5420243D815C95E0F4D51FD84FDC5341F20BA6BF1520C684788BA
2801A7CF3B95932EDB3D8693ECE35D703666A19F6348D59155A89FF25E119B37
D5AF6635843E4FDCBBC413F4A6031F4C615AA55A257FDF806FD0CC1A65FC78F1
427DEDFBC1FC71408978F46E3F32E8C996FFE6AB284538B37213D6B88AEA47E9
9DD73D9AD4369B428EC913CBB75FF2BED9D9C51701D2D0559632530D6231586A
667F3A530FF2F6227EA4CDC10BAB9FE0E313D378C933138BEFE6D0639DE34F45
A5CE2049F5DB6E28A70246877C55DDF2079FB885DDA5C02313345CE0D2373638
BA9990A6911978264D314CF74DF6351757EE8699DEECC391365AFED7C1329813
024B3ADC3565E28D754217B5B1EE6BF7AF11791FC1BEB8E6835BE35B05CCF299
2ED7EB12909C9D10E89DDF362036ECA9FFDA4DCA0A6B1485F4C4B8A9BA588C70
8DEE0286A83FBBC77B9E9B8DEA69E54CD7DA907064DFD9C45D3CEA56AE750349
3D5F4BE359D3F1669F0B4722B2171811C8C58B922FB5A692314BBE92730DD235
964A7CE0DA5F79507D659EF04BAAA9ED372D08CA888C6640CDDF10C3811BF967
9C6340418C89C8A56E50467C11FD1BF7D7A58A97F117F511B5BDA0F10AA18F32
C4A6A2B7AD54974DA8E693381243AC521BF222A8CF93A087FCA2CBF3C036E803
B2A5FE026072BDEF9A6AB04B50A9AF0BC78CB24EAD3C4C6C1043F6701FBEDC2B
16C73B0220B1226E8CF1C4AE76A77D50A4F2FB0D95866FC447A648A6E9548113
4C882B3CFC3CD9CD8BE6B0D25A1CEAC0E1CA4591E98EACE52EE14B5FE74A4A72
9CD3E5580A9B0D0473AA2ECE3C05B9D3F253C0B613BA7CE0AC4D16FD02C19C53
6AAC90E5511DFABD5837A3B800C49239871F61F40EBB75EE3024F37818ECDA10
6D09D2647CCC4E6AC34F49B8FFF4238EDC8441F3D1D4C3FF4E50AE5282E8F13A
E6FC9A73CAC242F862726D530EAAF7C20F88943A5D20C4D45F80486CDD86B71C
B3ADF8F65A6A6F959C04D04EC6CCC600C4ABC56B8B42A404B3CECCD2E5BAA6AC
671C2AC961DB4A446F382F520057DBA7E54967888331C9CC89A32143ADF0FCDF
C2DEF35736B03512ED74AA2747879A36835A053FB74B1F60574B32745BE8BB5C
53D789902BACE61DA9C7728522D9CF99CBB0621D38388E7887D6AF1B5215E436
C09F3BEE8FD4575DAF1AF3E206F8C6AE0EF9A5CDB7BAFE4639C9F13E2AB6D571
B715F74223627F32AB321184615B482C1DCE0F717F9DB631712083C222
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSSBX10
%!PS-AdobeFont-1.0: CMSSBX10 003.002
%%Title: CMSSBX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSSBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSSBX10 known{/CMSSBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000806 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSSBX10 def
/FontBBox {-71 -250 1099 780 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSSBX10.) readonly def
/FullName (CMSSBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 63 /question put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 79 /O put
dup 80 /P put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2919BE7F4437ED75BF2F7BA7
02F85142A4EADC8C9C7F11ABE2AE2A9DEA79CBF9577DD8627E31D25A7E4DED9E
FBB1C413696C88A07E5C937451D40A9211B29E24C9424635CD4FD6B16FA7D76F
5BA1DF0EC26097EEADD70EAA577531177A26B5017A32675C68052E90E68538DD
E779AB23150FCD1653460CDDCC713599EFA381C3322175809A73447720F6911C
6BFBDC0458C477D2CE69BBAFD05B5C2DA1D2E3E8378A2112066B045243D3D080
DAB211DCC25430973C18E7FC5574A814E3EB79F34FF5197453873C8AC66E47AB
5EA57CB3C8365D5235E7746C8584734F002E9A28C38B0C25E3753D85A1D2F3CA
B8DECFE14A7AFBFB76CF3E91A1E0203FBC8052C2DF967693C9BA0ABE86B5D264
BC345D7954C9523B3E70C4AEBBB0F2D56BAD6D76E095F9390FBE2CD607F3060D
F713ABF47F0FCA5D5C27CBCD4140C668F733F769FF5326917C0AC5D4C72F99BC
5AF4540DB169622644D320872947BCF1D30DA4EA150AA22D6D53777345858DFA
3286EB68314E30EC650C8BCC572D72879E431FB4297AAD6533C8F4802E0B9902
8360C57504D4176C1DE7F57382FF2E2C0A3D5285A061CE91D3149E3096B91076
1E914125CCA8D1C9230B72427990ED4468CE79C11E8F0CB89A3213C535B040E4
0C5784E6D53C96696EE45C87B5E0DAA80D3A06E5759D0676ACF99020DCFC3E8B
50002675B01959500133BC30223C75A54948DD28FA83F399924D4ACBE33F1F2E
D85095A76AF6DD92EAD139A8D5673A35B3633D25EF3B10A40A7E28F329D6E7AD
DBF1DAD1E666931611FB107D1FD3576F11A22B50943C536DC2BA477EBAA52BDB
B65A98268602F26DCA5EC761526CB7F33CB5B345110B7A90E1D078A21E332F78
33A0CF88EBB2CE852384DE3435F7B3564A0AFBB2024F79A633BA5B6EB7CC5389
C43621C82972D60F7DAC71FD9DD38CAAB865D7DE4ABC39D71879BF31549DE649
4B9CD8C149880504E5B34C2153E963B3FEEDA0D59F70E0ADCD24EDBBB8EA961A
90E5AE4ABB26E1AB1757E25572622D5A2541CFFACAB673665C7693855473D78B
847FAD590B657CC0B8289034AFEC3C54FE97B010535F70AF67ECC88E21B077D3
A9C2C52D25CE9714EE430735DB57991AEC946C96B6988B2C85D17C8BC80EA844
3A076618A686040ABCAC347F1B1C14676B05E13C239E99C3A2B63D0388CB50F2
BC119D6F74F70DD96BB5343D5458950070576BD6E319AAF5792EBB9DA5778CA2
58DE0976AEB766DA6A865F09FD6753FB4E7E0E9A06AA1A06C2636AFACF787460
9E73BAFC4A56A99277DCB14F52555EBF6DC5E5785EF7745521FA061227B725B0
7A5BA223D5EE9239A7A1694D4F9EC1132FA23DA44ED0FB0AFD8987A01F9FAE15
ABD485BE098CA7B1AC780A9A02AC58DCF0425D4D110226DC7B5982FE31BB78A1
C0AAF9B712E8D478FC4F85400B5E6D71AA653F9BB2E967A76D02B04887CEB9F0
0EF50A956AF7F790400EBBC07467D9A8BF8BFE8200F8F7EEB5DF3E62A9A332B4
513120FD9F8A93ED683CC47551C629B5313E4E20A207845CC37491ECC3945EE2
71A0C5633B353B03B1A7727D5D9A0478D20D67A981F6E5CD8737548ED4348A91
82F2CE805724A028E346E6B7C542FC69CFC7935E6CF3320ED9701C6127FBDFD3
B20F0DC2D1F92DC69E4FEE57B457E82D5721D932B140CD6DB9BC86B961E7E6A7
5816F42AF937D97C3149DC2AB0054564592448D0CF52427B766FD38E3B040B81
59AA9030CE06A9A9E3A0572A11BDA85531060B75DF8791176CDEC0A9BBF472EE
BD433BCDAB926689B8806CC8044D0925814C1784A41CEA48ABB9AC039485BFA3
026FD30CCE84AC57DF09B1581ED01B3A840AC5E9208465BC160238EECC7A6753
D5B65B159FB08E0DFE4C9F2EF5986352C0E0C4DCA0EE62EE5C19BB6C486FCADE
99D3519723B70B20FACE685ED8D364905EA64A15981B00A6DC06D7B0E3D38FC0
9DDF04221696F7A8F3CC7FDBC25A61D9AAF9F65D3A64BCAC4084CF13BBED7195
6BA4C2445676804C333DA6569E4AB7E6999505DD1988C3E62495DF61B722A6E3
00ECC4EC698E33F7B8225FF591B746E449D2D178880741074D0C3CA740312D21
1F8B0B1A855FCA081AF1E69D14C9131B1769943EA6D5D6210E10BBD9E404B445
FC3E2ADF8C9AB6AC07BC2FC0482515625523C04303F7884283D5CC35A4A6ADAF
59738F3DDDFB51E7134327AC4CA577BAB076F3B588FA3828971FE9D561F46358
24BEC4C7F84D8FFEEAC94E2C632AFA5AED635E867AD362E373CEA718C750B4B6
954A7CB6E4CB2614A4E1C707412B7B09F8969EBD5B6510B66818A2F5AE4EFEE5
9DD7690A3520C477DECB7D61FBE5F84D1C655971FAD7CDA78E695C18908016CA
48B468BB6B43EBE1DDBC49F43B7CD667B4131D7B0C9BB048178A31D0CB70A76F
527DD352F7A9F0F35226117FF305A9DF4AEDF474FCD5C7F31FB06D4B2CC40629
1BE1F40B6347201F84BF35CB5155BC4D2E1DF2A5C7613C27A0EE77BE55A744B6
DF7DA5741AB55F133D518660751B0A91E6BE43B527E9C97E2F06FBEB58DD0215
BF4105DAE1B2A29DB05FA204D0EA6E574C7344C3B3F44092F7F997654D61EA9D
4C811CE6087BA1615A31F8D107DC64F1CFF707234135B728EAA0ABB475E678D8
9200950F24A8A61AE6AA18F34A067849825FB3925A8E01D64E849546FF7F4418
19C0FFC2EEEEBDC7805612F7849BBA7BBD954BFDAF2E6FFE3CA520B79070F8E6
B1509EE0040714C9F5023816250F40FD1C6867F77FC8ADD3A16A3A6275CD6F5A
21BC03274B350EEFA6EE929AE91DEB8D8B309E3B3524807B4562C7758794A8C8
4E3C6EE0C0859AC9B799428EAC242BC4AD9564F2444E3C79F11D4C1D5672DCF3
2E191E25165C77EEA2DB51753ADE07F5E7E748704000265649A2E1DF68909F38
68F0D5F415330C9537A065728D2104C34CE05458AC1B2A53946890DFDD67563A
E044E7AEDA111FCBF431546D410D67602985F6E13988999E46C80A983C7F12A9
FB56C6735454F1E194F63A1B6B21683A281AC6164B3229AE25B1189366C9DDB4
09D1BBC8429AC3D64F8BBFEF1265611E7C2FE1D3A2FE24FBF3ED96A5CBA6FCA7
847F5E3AD4D14C0C77C225588FBD0DA2E960FA3901DA1B46B796121DC804FE82
C382F75AA0495312A80EF9350CE0F80CE0D18316E5D02B7BD78667C2DAABD879
E17D5EB8F274DD2B1BFBC04EA2F72EE5376D01DAA129FE257162BD19D19B13CB
C13181E6DBC12826AFFD87AB152A59D67D0FBBE5D9CADDB1CAA8C27689355AA8
FDC556015E4A9708995E51E46D6D1ED7B68A61625561FB594B9BEF87A1720222
64E4F8A47637705CA32B1B4CA5B8473F1D67FCB7E4041502B7ADA9FA4B16CC6D
282FB636979D3DE7C76F3000ECA08AD6E116B1558FADCA251D67FDEB4607CD3A
84BCA7DF488C97FAA4FC195661D7977A08EF04A7D9A2D619EFC7AE291D7DA633
C6DBCA7DA01EF336E378764F6B4E4D6C517BE05F10BD1FCDB20E5ABA7F65A8FF
17D93CDF1E60787712C40775A5C3808AD05A2F276C94B05E10C6042604F592C8
AF1F25B98A0C78AA7BE1DE9ACF2273965F0795B0D79ED6CE2753FD0FD7B41A18
FB490B06B5467561DFE5161C27F58E48EA5F38A5477C9CD0C2FA13683271E55D
8B08DA0C96BDE97C653B0B18096EE7C0E6BC3894057F14E83A902FAAA4C2AC7A
566A9EB8F9D622476DD4E722F55F28230124F67501866FFE952AE93DF5BBE2D9
4B9CB9955320A9E256E611EA3838ACD9073107936226140ABEE92A096659764C
4ED2485B33E75BEA57CCF19AB9409B684EB14103ABF6811E7A8C0AE0C0C11BBD
87801F3F0260D04A8921FB9EBDA2A2048F4B5C47DF63051A0BA6DDBBD895E0B5
F9F0F3CE62CB118B86AF595F4F34359DABD9EA354798E8561599CB32345A43B5
93B217C43E316BD10BCE1C66A10C9A8041A14570ED7FFDD95AAA76E92EF52042
69F0B8FBE21CA4E37647DDC890D13AF489606195900063DB0CB8D71968C1311A
D56155D2B2382119E603AA85E9ACF1785E4C0ECA137E7E4F5EE7915E8A080509
02FFCD2494DA2D3B2AD27DE5F11684BFFA2366B6C834AE309D8E07F98B7B556C
DF3E0B42559610F1B78C79254AEBD7B0F5B3D7F420BA725AAA91EA20D014334E
8FE221BB02BE7B59FC3D03D8ECBAE21F5E37E4A0352C475F9F29C5D2FCE8CB9F
2A059AC06AD9E6F13C39F2781D7D4B3FC34291D165E5C66C5D01B5AAA2AE8F72
9B3C634FB38FCF35283792048BACA9F7EE6789621D9243B917234405BF194BF5
A4F137680ED10F216076AA2767C1D220AE71EA7393C7E252209B6ABD94213AE9
F61FD2CB3160F41C4328DB8563483E13EEBA83A7935E4AC11A97DB7988585184
6BD3DBB8241EFA1F1DC5CA9C2E16EC1EE12CAF4471FA83605DA85672B34B1F9F
8CDBAB6907D6CAB6DD7E00A7D636EA20961BAC97D1AAF32C8096003E096855B0
EF4845013B9243A29BD509436CA78C6F8DF4F90DDED960A0D12BFDBFCEA539AD
BD4BF883E09542C9D75DCB8A4AE82DB495B0B918D330979F347A76D73B19995F
4039557D337FB55B8C5922F35B354F6C8E4D861A0B66B3D803C9862C9C507404
5EE039245AEDB521E90F83F15E44F42F0802F8DAD6A9BF6176C364286601FC80
E14926FA518CC035337904132AEAB9785361709CA01AB0F352317294B34B2B20
FF88CFBCC8E89863BFA2D3ABB2A596C9D9DEB261CFE48E403F88652150EEDF05
3390F002B2E4B53446FB39C488E3D0D4EF4AE2AD19019710FDE56FE29B58B00F
0A6D5B26B814BF64F13C35EE903FA2190F460F9438924E1D7158704F305E326D
66CB529B3A4836DB0FE383EF989C975A2F603332FFE0748E0D695327CC8D9AB6
E036E0E6409261C30B80977BCC3CFF8FF8A9BCBB889ABE47B0CE3450783E1EC7
1C030CC18E074E01605908C3FB61B78CF4FDCC8E8CB13EB77CE6FF2BFF91D658
51FB05DEDBB20B0E4C5604AE3CE6D41A4C8D71A1F90120B1F90C83989B892253
31D06ABB335DE237CD0CDC91256A54797CBA5E284B6CEA6FAE01F7BEFD905E5E
139D57E163137B5751A765B46A3AE6F653FF2551988CE792011E0548CFAA6ADC
E32B876763AF6F6FD6864E7B55E341C97FFA711913F8A7FBCC1FDCB4CF2F4D3F
17358EBCED45C975F2EFF3FB9F77A22EEE4C9DDE63360DCB2DA2C1AA4BE44BA9
3F9CE6F27631809DBC45643DF7BEFE247E79AA7937C409986500EC1026ABFDB2
6C30E0A4852A6976A73AD7483C36F1717460327BBC05DE729E23D370B78630D1
7E87C99A5C3A3C0FFE204EA81A8A33D7DE80DF3C0EAB557F4E86DDF8E03AD072
61B1D8E1BA05452A6FCA404D9BB8FE9831A367B0AB31041B474DA9536035E7B5
EC83DEF0AE17DCE958DA19869DD51F53D4A4BFCF7CFA635D6F9F882E6F0215A7
0494E76F258D44FF72EB5A1104E8F73AD2F6F2ED337D854B81DF4083E6A2D679
6B5613D76DA2347118CF009E8A88924C2A42B154DF1CEFC93C89DE0ED8DB26CD
8C2EDE2670F494DC591E79DA26CF8B5FB76613296FB1F39AF2001BBDAAB12CF4
3906B4C304CCF1D066524DCF92FF484CC682C2B197CD797056555F318279C3A3
7AD8EA9CB19724AF57EFC6706157A5E2F51F104F6232F252594510E0E4BC872D
D610F4C99BC3ECB668139331216DF1AA8F6358EB90CE1F0B8267B878B19BA7E6
77A53A674E0B029E9142865CB92A1596D5AB97FA12FD05A04369AA00BDCBC2DD
1AECE1A4AD55A93885C626004B41FD277AAE6DF68161F7443EFA7D9C913AF909
970F4C6292A694AF033B953CE37116A2AF2439E482867EE9EE2BFE1093A738DE
24D3C408DD105CE6D7B8967994F7C5CE49FBF61AF135F8F7799E2FEF29A168CD
B2F16F795FB475204FBC41AB78AF87E4E80F992FDCB770A3DC0501AE1D786ED0
449956A1BDC93876934331C24CFE4392AA860A1ACCA39978BA8AB90A2174F5F4
97539772660D3920E1B57E9E0674CD34C9EDA83B6AF1B06B26207FE5D67E75DB
B170F1D01D512CF6D586DABFCA32404253F0A9985A29D46641A81D5A810469C2
8081D7774B3188423822003AEB638F21661E0BA7AAC765CF8321F9677C85A562
88AB1320B3256EA9FE0C67E5B69A5127DC1B13E4062CD0C9ED10AB36CD370105
8FA04F89E3F836B01393F1E9365077A30D8E46B67400DDE8EB0AF8C815729699
469773FC3F0ABCEF752A5768C9DAA1931421214E69053775A238553AB6620E9C
E875223681E60B7F7B25BEFBECDD4FF799ADF34BFB397AA114515E2133304A57
B422E97EB3FC5314F64BAADDFEF9C0EC719A78915B26E7E3F381435563F650EB
7587F11CA3B14875F6B1D817C1EFA0B89C85B888E8391C74D77CBCC6A990C36B
1062D049E20876B40CB030367818A3CD3E2CC354CDCC9A0FBB8DFCF7135FB2E6
A0BB0C3A441CEB8D5FE849AC7299431DEE27CE28B33AB7E836D6958104D1777F
8010546687CCA23DB48E53376A446136F449A92C07102315D4D0A897521313ED
1A3A8456A70C16EAA50A3E67336DC89FEC56AB54A579EF264377A103939D5EE0
0A90B4F20AE1F2511469C34B5984A04D5AB8A162F18DBE4D613BA1C1C85E994F
80AFE3C18A045148018045C63376CDEEFAC53A55DA67D5980E3A99CC1C981FC5
5C25CD0A685E3AA6F8C0B8FAAE157DB91AAA50A2B5F7D8860624F29B8DD87606
C30F84C33D802DD5B95E090BD7AA4400E090DC1913BBC392D7E5E87717AB14C8
A031737560F3D132BAAC0D6DD88C586322804BC2D8C505973F015F7662571FD1
C89CA0281CD48AD84B9ED8D70D240A4EFC2715DBE98E545B987AB64FA259D81F
3F768326717675A3A2E22F4EEEA22A5201797C6D5EC644318CDA28A2C3CCD123
B0159205FD52E1F9A60A69AF7B40C4F7189FDED20EAC3869E5F53F4955CDA0C3
2B06D72EA2B8CA5F0B557E9A36B8E9BE7EEEF96B5EDCA6F79F53F83234B2BD45
6B3D631B1C9CBF7D283F377177C60B3D65ADD945D31458164043A17B8DAC8409
B4261A4A0EB36E18BD104A8E66F45C3AECC07F4E8FA9F3D2A27334F95AB79BF8
06C18D57EA745116DE0B36C12B6F5411A9805218B5A31731CA0A35D9AB6BF5AD
928726A6EA61E0B69FF0F4FDAB2CF5B222FBF9BDF4F89EE47373AA3944678328
1EB230EACCEFF4243D6B4F8797482DAB78C1A053F2800144A4C76BB839E536EA
2D4DCEB625DC0F754EED8BE3FA53A7AC3ED17C92757CCCCDCBE21A9D733291E3
61235172F117D4B8305B45D7728DBB2D71411954EE599B0EE786D7603D61CABA
AB241062BE3776FA150680F9CB8784FC7A94790FBD2922772EE886254B59D0C7
4A4DF7A2C1C4ADA1DBC51CE27D3FFF7F96BC5FF7382864369536BEB2EBA6DE2C
1C427990F6BC84E92CF718BC6D4CE9EC1F2DDEB8637AB1FD673C5BCE1A090146
171717B39B9A83F2DE0B79CB1B836390828B3EB6DC397AADE45B21F55D1A3583
C3A5BA93A4ACC08CCA4DB80B78AEA6002D80C5513A705E7232938D8423FFC72E
1B96313ADB255D43E2676DD2B00B51D116A328164BDA8475741EC234EE6581DE
06162F006405D6D823DC47DDD14536BB530D132975C0C436F08F9243F1A9AD16
898823B8E2739B4428E62CE0E41C291152E913CDEC375A4840F8BD0B8E497C52
5713A4FAE45EAF59D6FEBE33A9FCBB35112FA3C6D71965ABFFB6F13DB77EDAE9
C7FCA9F7EA5AB73C1DF0D263436840DBA4375895469AFF5DB218AE2CA8EEF4B6
B5E353E033483DCA18801DAA5764195295C87793D5F78FF22EDE240535D6E3DF
5E4640BC1D08E083BA4D822D74C1473FEBC4F187E9BCE3612AC5B63E40D01916
ACDA40E27990D9B68D3CC0FD2749372883A262140C4E6714F5D76BB22A75DA39
68CB56997A12C27A649B4B80EA47AF2CFDAED74636EA95B54D3ED7E2BB828054
DCA71305464D998B930B827ABDC9F9F84A03D253339BB9BE8E43CA661433B01A
7C0AFA8612A49ACE345FF7F328EE3FDB0A2CD346A33E376CBF428BDA9A316CB1
4F474E9D6CC7C8FBF86B398FECB416D635B57A90108DC564A9F80B8C75E91064
E642130AD080DA349725F71B4948D578E39843F8D95C52862FD1B6667B8825B7
74B168016F2041CB837A1F9DA29079555C100265D82C9C1877CEE36203B758F1
F30B2302A7B09C784A38A53B57E72E25DC4FA385BD310C812426C53612281401
3E1EAB7139E96A7A0277C5E0C1B3BAD0D28EA97DC2B0213C7D720DD6AD0CA972
9C4D5D54D95385F3E0D87F8FAD9F92CF96ACD58E6ED4033BE9BEBB44A622C1DB
6AD322D62A01FC21DBEEECDD3E91D91C57D8D5E6FB690EA38C86ADF7859B3753
5C1CCE9CBA64FCEB47C47B1D3151A27BF86B39323E8636EB04C9357522CBACBC
9387979944ABB3C22D7961D324FCB3F617C903969CB46C1AF178503ABBCB5555
7E7560A955DA8462A197F212671E961A0F05912BC3BDCEDA887B5BE861ED2F5F
EAEE624D623616CAD73AB9AF71C7D4B3EEB600C36834AAACA6EB0FD9F294C1D7
7132DADED7A56F1CE78BC8F0B88298D5BC877B48D67133BB482711E0BAA6AB1C
3237F375B755536EE103CAEC6BB4A8A81D42158A6A92A55D9F4014BE4624C509
B5452F5898F9937B43D98BF0098A1AE22B48B292507A678CE1D5C936EFDCACC0
F72561C417FEF9BB16A8DFC2B60A2C06EEC548A81392140BDEC66C267250FCFC
D137393530C80A1A32D09C2A9DBD6656125BDE5731E68794266E352B79B22F96
1C0344DB1854B03BFBB05D94BCF1045A2DFC273F40C7C8BB2BA5D3D8312247A0
975FC519795E7B56519B0B2F7BA1FA54160CFF868C6ED33802BB0BD293022D41
C1F3FD1DF154839EFF5E859FDB480DDCD1BF67686DB742787E70B39C0B847F32
7D192A215DECA5D2FCA5509635C0094D004BD23C620CD32A5FE009BDCE024BC0
83D5DB5CC7C08ACE95512EAEB02A5FA7459C34E11923C326847454F3806F6DF4
6C4DC03B5D51CAB7940DE053FB2FCBADFAB01BF8239DFF84702DD4EE04D981C7
C17914BC2079E0AA2BE2BFEB31FCD0DAAA9BDD5CB37F5B54214D8223368F1AC0
38B6DF4A6D3F0628A43389FCC2756007D0903A5C8DB6EDF2913758B2671A8FE0
C1700B24B8FB8D01C1EC1DAAB3C73F8174E999847D5F50730F87461D81A55A18
0E19797DBDD1069B5D89E01A9BF287BE5741B58587C80E3AC00E784CCCFA576C
33028CF9329A636A69452F35D8B1F543E4E09C737D06051C16179B6184865BCC
35A03C247FFCCCA549591787D7C5F3B4FF4F1DF977CA0480B228B901DE31D4C7
64DE627678F5BE92017F7AA2C5C43A0C5E4DFAE8C693373FCD5E8D9F4FB70B76
7C0C1E712409DBB7A76E499834A182C069FDB571F708257ED51C08D9BF19DDAD
7BE10EACB90EE9B14A36B5AFC2BD9312979A6CA2B53DB31F0659CD6CCD965F04
EA6DF5487B57B7E97A553596A5E0B6C8977C4A9A213C90F91A066603D002BE12
9CAD3835107DD31FBE9BE0AF7FD0F1D78819716F2A771D723BB29BAFB4EC9D3E
054278D7E60161F83A0EB33AB4ACC641B2EFC188619A21100AF97E3A1FEFE1A3
FB3AFF5F345864B1CFCF1A67F4F10A703B3295879D2B7378F87A2C26DF79A05A
97AA7B4D9FA64FE24E8BAC07EBE584FB011C5B881B6C613EE3F69DB4AD5E17F7
8CB8863A57DC49CD2BA568C305ACDA1AA6329D78BB793326B9EE66659A122458
6F315458354BBCD2F5AB1CD1067ED3A0F881996EF2CC29EC911FFB1A57CBB91C
E68D9C8B452017D26CCA4626D4E8EE754C36BFF7F0A8FD613C9E01AEDBE78993
4717E06CE949258B10E5653E9671B4329C478509192E166A94FC5327524F2BF5
2726188065BF04C2111CF512FF68D475683D7157AD2FA6736D98169865828D58
608BC96BA7CA7C058E16BCC98FEC9B88312D2168A018CD506219C7FBC6EFD9C4
16A5C076728358E5D25F05AE226021DDDA8B1DE639EAB32AF9A27895FB592B70
D96EFCEF65DF56FF1A5FF5BAEA7213087E6E30F99B1057C7DF12DAB81F0FB9F9
A0C829B9D6A19CC92D0E9703C0A90A40DC0225E6128BC691007ADF22E36C8194
7592648EEC8A39919809E162B7D2A5CE8F707001757965A3A4EEB382FDD934AC
589BE3F8D207D39CCC9088C268D21D1C11D5FD78FB20EB23612099995475327C
79E068C1D4DDDDB7C7499618D2A81D0B4C2D32BCCF7C53CCA922CFDFB0AC2976
4D0929D72C6F8D83C78D5ADB873C554945A2BC39BDD10C6A3C3B701CDB3DCCFA
1B2C8E51C6F294D52C764FF0F7FDF288759EE10AEAC92B09E8106D34CD0D4E15
BCAB989030749EC0CB6DA4D0BF267C4C8227C6A2B6516602B65546E2098ACE3A
043A2D429389DA8710B1E667252060D1BBF74429900C366D32F305E679B552BF
755F09593CAC72EA0822D31EC6DE8AB1330A7599CA6EDA04AB18D7985A21A4FF
564BEFAB79A4788E768A9C47D0F2337CD4AD9D8A288EF820814CD3CEF52997DF
CB2731C62283A6DAFA734FEB59C39289B7A32CB642AEFCEDC3F42F4101AC4B68
E1401E81C8E5839F55923CD0169DB0D634855B0FA46391C0BC127F951EA68418
102B9C0853A5309707F858F0D32AD461B94D7BF329E360CB60DAECA49DF05206
31921EDC550DB1D2A38D058DE5A51CA48F2C2A56F64CF9D20DBAE29CE2AD74EE
6BB13EB3631A2E16833D3A81C4759768AD922689D197F7F93F528EE277E64910
D1C29D15AC560D15CCA77E0D1A1AC997B3B8ABD67DAD72E54B91A6D8248FBB38
DC4A8B76F95F14E7C597F03F75D45204B47BC259F4E6E8C271A1FEB33B50BE3C
605881B7DDE98658644D8ED47353D760DF202910752C44849D876736CA4A1BD0
A4B22AF8A1A0A72661933177AC59CA1936547EC0E4D72210CBFF852E84A73231
83F4369FD955873277E3F1AECC81A7B3ECD67E5BD1C1DE3AB1D0E29A8A46D59C
816743111F89842639F2033ED13EAC4539A5A2F8E710284B883A89463C080C84
1613723531D207F7FC3D5688B5B7DF3B83ECC6D0A55E7F13A9761C10CA97D4E1
843E8D675E8B5AB75375557F23EDB5E07D53A387AC2B16D1CC24D01CB77FE4C2
B40693538F44DE01AE8931F2442166F066727F7E5FD971CFD0E9B28726073C5E
069241083F9AA857CF9719661B1A685F0A6875A53AC702D28780BD9F466E981A
1AAE4C0CEAB48921C320E811183C3A9BD1716331681752C08CB04D93371B01FD
59D03E02C359F9B26E5103CAE125C32D47842456E3DE9C119767E888F8755084
6BD72D40D35BAEE9100B65517D78578A57E652E7777AF5DE5F31604863A385C8
DE6CF1342DF4DC3B477FEA807C8DB15485BEF004B77C6F979CD384884BB0BD9C
B5909564E32CEBABA832E8002E2659632B798EFE9A1B9FBEEE7B733FC8C9DD9E
70D9DF73BA30B5DA94752C929337FA1DA504421A8B4BCBBB703A2AAB5FD5EC3C
0B654461D5BCC432F9ED19C64D7CF0C914D9E228532A8069138815444CD2D388
677A6BB5180A2A85F528EDFE5A3291EC34C75F1DC0671FE716186E44B38B3450
61D11FF3CDB116BD1747C5BDB468E0D63030CEFDF5EA2C54D5616C77369EE145
ACD6691F029C6A298F1E03E874B4C73EF15110288DBE2E7E13028D66CD56F8E4
DBF7275B637743811730F5A3F433CDDFE886C4560A327820F25CE47FBE1EB9ED
157167E301C71F19E8C21DB59FD166E6AA2B9B4B2947D20EE8238671C02CD110
85AECDAC5791AD286D5F385AFDB2A7A0083F06A128E714B69B2A6ED531A5C685
7C874A715BEC160B523AAF4F124B3430C4C8AD5D02BA7B2B9FCB2287A61684C4
CE2F99CBDED7C8EA22003E39A956B0DA8EF86D83BA645315B6C2017F1A8F582B
D88C83C55C8260D0DF217CE4C5DC20569023BFFC63A514AF6B385534FE359D6E
7449EA3F232BC6AB53EF6A008F52F42E6C45466C45BF0493F8E862B37FE1D49A
0FCA3C187335CE79B29272B4D9AE0BEB67C6E8696E8DF5A0C8E537C48DA62CE4
C586A66803F4AB07716A4C756C583C438895AA993FD333F83678873291C23734
79E7F1CF21291385AC554A620FFF220994FA06DED12B7A7DC5D9C20D222491B2
F96AF5D82FF2FB2658C35F8C0E9B9C1C3998E445A8A3435C6DBF07D9005F02F8
2E7ED276C629ED28116F6FAC915EE19FBCAB6E21CC05DA1CE1392F664E101DED
4855B0331A725A7776A5564F115BFB696DF151B75E918CA0F5F06D13416F52CC
66DAAA4B9768970EBA40C5D83530D0BDA35EE7A5D7705DC21D7C4B9C9A6E5A53
104DD52B650809C4D7A9AA835137E927E68037F7FC61F82C5F9AF4F4D5C979C5
646C4C970979DBAFBC841F852CB893027E81F2C2C91BDD1807E223508BF24E43
4AC076E2A98E43DA222E776ECF71433B4DC6FC73F1694F1508B4589B3FF9CA4A
88D32FDE5E5B7767F1B8F32FCBAAD7C2397E94CF74AF0451D176398C5C4276E0
79C534F7A40E27D724EBF3D3DC4AEF061F20CFB303654E5689F8663D35B518B3
770524ED58BD72A20ECF0416A16929D213144D12D905DBD1D291C9285CBCE700
C0403F858582A7541FAD69DD0B211B505C071670C000BEB9BEB6E679B3AEBBB6
9EE007D218811D675CC8ED82B323B134A6F57D49B3BA27D59D6355984CEA658B
680D8647382BE1B7891A8475D619F6FFA1E8CE38697CD7404D3F66865AFFC705
DD67E8D0045FD8405E4F97793C6F56EBC690CC320878FA7E4E2C696A0C815E12
B556F6DC90C27F4A88F3E001E8631876392BA8CC2AA7C2249E66AE22EFAA1E6E
6144129773D77801FCAC6FC7D73AFB32EC0FD15AAD461A3204EC530458403F17
13411051E58F09983BE9662822D886640EA1DABA6057C6C58743699915A948C5
9ECB3035A6177A6A93E2B29BA20D99EC2E8AA146FA91895AFF6459EA17BCCE13
F6B26F22485F50B9C410ED610A003FAB795E0B9914AA13F1671F8ED3CE767BDD
981C0E2D284037657E44E5007761E8FDF2278855EA0929F09FC28CBB99AB4482
C2C773E7570E2F87111094C48F123AF23C24EB2DBB0F512DC24D325499EB441B
68B397F4E6BE8E0318C8333EF967F7B3F992BF17F4A4B55CA5DD51183CB7768F
4BCB9BFF09FCEF8DDF67E780FA7914B436BD4931D5891664B163AB09968756C1
47FF9F6AEC909AE9EEB8BB881C838E1A6658102C785932D1E95AD53F0A7FCFE5
42EB867650D22A8FF7418B178B02E04DCFA3C0809D342BEEB7301B3A5637771B
6EC6A2F03C41035F7D54C2150C6FBC29204BB2D58C1DDB212EA0D74FC1AC6C32
02E48E720800861E977DC6111A8BFAF2E989F8F16F46452CF2824F9592C2123A
BA57908DCE80DF3C74ED0C4A9698D51067598BB0A216F8AA7B6E62A334B2BE48
FA91B52256D46E15E74564639FBEAF43454B3BCF60A5112A8FBEDB8A35687415
2B5EC8E6EF2450F6ECB863FE375646A062E72EDE31A57A645E3B1625E54EAF8B
97A069D5A5985ECCC348263EE192E787546381C912B23D2518D72FFDE1CE5055
FBA09304CCC9EE54967AE4DDD7342F63CDADAAD66435229B129FB444DD263B91
81F4F9ACC8D218C4EB61731587592A46E4318847AEB52C4BD7C273D16D79E913
1D7324B42BC972B81AE514ED7F53A215290A902147C4EE52C8AF0B96B5DDE76B
1F7255CA789022BD20790FF517F75A9A9B4D7C2CC685CD95565F4512A5DCDD44
A5D62FF2E6178D6F5B846C7E273EC0A149D786CF36A04C8FE71EF10C65B4214C
634EAFD10D1B02A2CB7DB2800FC27214B0A6B2B4D7F8A172479451470575F99D
58E3814922D8B8CCA2E455EA935FE795B897EDA50FFB99AE2A6FFAA5BA32A1DD
E6705FD54AFDD2DB0AA779BCD088FC1EE17CF2142EF0ED520E0C99474CF0D6F4
8AA018DA0F37544147876D8F2CFE6C606D95A4CC4FBFF97CE7F97D260AECC41F
4B9FFAD9B50C391CED62856D48BA68ACF56FC10D2123D9EBF849EF91D8E87982
A82B3DD1793B05087C426930EE836E7DC29202BE85B1E6771F8DACA2E2AFE84A
9292A17FA1AAD67CA565352D8CA24AE578C4DBA4BEFFC36FB406F326957A220E
2E6E0BAF92B058FC4BAF78BCAB2FCA51561AB2B7CF5E90782A1D0F721C9BF898
044F1F86F8AF211BA7A2BEB384C84C1933FD6C8E6A94FE543213498A110501B0
1099018EC2098BFEDE34C144EE8FF626D615955CFD8ABD2E35D53C1B2C051D67
99064213D43DB287197BC60EA40A74B892A9AAA8C13788EBFB3C67AF740BF305
CC8794E3F7D3CBB483DB35F499739C1B286ACF7EF155134584691AE326C72C23
6C167D0686254BB82C68EF22861BA478B6D81947E3ABBC923BC170EA21B00AAD
D7EFB2E9036455FD1E0D4E894DF9CAC808BC1F6881DDC570E3F48B921F54F2C7
46D9791FBEF160C2AF67684B23B6822CA2F0114443D39CB2577B5D2A05718217
52F4A416F869627EE8D98E1AA03E8D00C98815F2B22880CE875EA91707595A12
7CFDBAC4A68E6B7C9F8A193C3A341F28F937755B3E813BA69A9239FE1E8DE074
20143BF90F84805907524FEBEEE682ED6BFF7A650369AB79428A2F246196079F
1B116FB85435BD0AE5080EB4072507BC37D470B9EA2E1CA643FCA63CFCD642F6
E02310C71DADB58F7566625BEAD1F182F4FF9C1E089B022B087297851E1BFCC0
C8FF22F650B3EDF609C084D574F4412BF2F9A4A6C1BD92857EDF328FEEF4F23A
A1B836DFC712D97A39CEE24F5644BEF93E68104917B8508EEADC1065B4BA7950
19AACC458E1F17E258355E4BCBF7E3A4012F840AB81209574A494A18CBF27881
3319520F8C2B0D0F635A260B4C29478CA317F746E1AEF50908D1B21389830231
5044C3694379F9CC8EEBF8D273908480533AADE58995B82E118716412FFDF83C
36E6CEA1EC834858B9C972EDEB9799033C4F8CC348E1E24DFE59FD63AEDFF2C2
F8FDDCD1769CD64F479CCF21B81B0E54D1E9B8D09A49B5EAA53C9706EF12008C
22D946805A5E76764A0DDA5D96E3A6820B5BBC90F2ED82D912824857DE02F4E2
E1F627D073F113733489BA49640752E2F279F5929FA3E606B9E945EFC8D271A7
8776FB11E4401269C8CDC5254BD4F019B094E12701DE7C86CEB3E511D0052049
B57160AAAC366D0F29101EF4431E4026EB08CC60ADF6F769FF0A9815B1167383
C59F1BA4C33DB7EB160F1B16E81CE2313968AF9B0AC9A73FDF3D025216074D04
F08D0DB03621B3A52440240BFB0E44E865E5BECEF4583B52F2DA24B26D0E5869
AADEEA03F91DB709DE0A3D7A68A158B3D31AE7DFA3CF31A1C8DA9D1ED85D6A7F
9EE3D759976C130261DCC0F1D7A5CB5D680C92385B181FA35922F905DE7C49F7
15416EF0635E6422DAECAA1C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY7
%!PS-AdobeFont-1.0: CMSY7 003.002
%%Title: CMSY7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY7 known{/CMSY7 findfont dup/UniqueID known{dup
/UniqueID get 5096648 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY7 def
/FontBBox {-15 -951 1251 782 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY7.) readonly def
/FullName (CMSY7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A4D9DAFF1B3EA76067
C5493B69F73B89C8B61804A34FCEC826343337CCDFFCE17BF343EA8034BF95AA
14C56862C2C052569AFB236E1F1795F05150C8F28DFEF6BF4BCBACB678D00036
30EE84FEB44B1A8438185EB45654E6853C1159B073E54292D135F0961A64E8A5
AAE49C4BA9C44156C123426212120F99F3E8B7425752A5FE384AAEF755A8464B
51F015F9E2967477D57B22627D75CEF8AAAF0AEBD504EB46D0289DFC8D86C972
F042BD88A90A53613DD93D8A7A8460E63D85F6C15C000C0AAEE4BD5130B6E668
8C9B3F3FFD804745DA1D5EC0AB85C96E1724FA67F9324C59275415182AB48D57
9722DCF602396AD4B5C075A5A89A5D005C9FE11273E5FBDDD1800F11BBDF6AEC
6711C5633A73AC5DF038BA521AC492E138F7FFC7C5438FFD32FEAA1128C66E83
0D3AA40665F05E62D7EF00B1B0596162C402A34B6BAE6300D43F3DFCC84860F5
C0F0F1CE28FC60642BBFE9BC9102E80146774CDC88F9C250DE762D24A3484BCD
1D26B6D9FE981CA5AAB2A4BEDC528115043DC18D7105735D7528C2C5DD89A812
75B5D7B2E5A586FBB0C061E708F92C1552F64A296490BD0F20243986A4707FF9
8AB3C917B8DB92F19DCA6B9D4A1DB57515E51DD85D5C9D2CAF7A036AA3F9E9B1
5B5E099CC05A9126AB274C17D75CB4FAF78052366D2F21EDAADF84B22A2D645A
3E65C4BC0F540B5D9609D88DD0E4CBEEF87C16447D43A5F98528FD45ADD10DE6
41AEC411FD6929308F0E4F48A8D9C9EE386E920D41C1CC98A52073011DF5BD28
5683F280B5CF7F27DC50930C81D344FF5A8A9258A207D2531AC21A735B14155B
C22C752DD22AA33C52D6D4D053B3E46FD4C9129068DFF52695A3A9184D04E8EC
93696A3FEC3AEB3814D9015EC14C22EC3ABD5070E8C28A3B42F5596D948212B4
AFB9978A0A361135C9E18CBDC98E0D1E8BDC17E25DDB3D52E86127E5AAECC55D
FEE61693190E378978EF1BBD4D1AF005D511C7607CCFA4BCBD3EC427CAD82809
B725B25AE8A03EE88F80A7732A571A2317E0B6A0D072EE8CE2EB9E033CDCC899
B64CF4FA1C708A885442062F08D3D8DAF44C066EE278714D1486EB709D327865
A483F62709E89D08291F044325208EBA758DD459481334F5D9AE3BB61B3020F2
A4538CFC2C94BE84C920BE80806FDCEE394230730E049333A7E16509207514FD
695B5E0AEA9E4A9737311AA0B33B15F6769FF865D1ACB63DC6201C3F1062A3FD
1B446C1857460745917A36289DD57C94FE6240F4A40FBDFC10E91B91B79029D9
9F1B9C74E8E5AA011A0ECBEC660230AD5929F01D0325D15FDC0040406F124021
02AE176F4C98BAC1706F03C2B5B40F325A50CA4683B2BB4605E68E72D0CBDC2D
96B3BBCDD01201B650A7E7744D58D1E36D81FBF72E0A875FF29B4C109A1950FC
9621B18D58806392EEE9841794DFD39E3C4E20D45384FE07F9D445F143B922D1
AB350AA6DFC51FCF767B141A392D6A8B633AACBCEC9F56A0CF40AB08020EE63E
08CC0BE01B40E86388A65F5869F2F4D022DD4B912031CB8CEDEDFC2473772569
5B28F66AB74CD7902A0061AA3547D13C7F0C6EEEA7B0BD316694A94E4D672520
EA044AB28D8D01076C486CE456EDA1811F7ACA75D27473080D27D3E681E35FC6
447046120C6CC4C17674F0F051570A79DCA74848F3F300B58B19018430D99858
CA5504084D6BB74CFDB635B6866974A9AF05DF201C69352B2663B0623E7828B9
5EC5FFA8D8F10A7C28000F8C679B180067D5481D6315BF1C4194EB171C8F3CE2
4CE319975B9E948D907F9F7EEAF07089844391555F329E331D52FF114668B8A4
80704B3C6AC0CCAA2F5D043CE44E65EDA89A0CA854CFDCB11D549B7FA72EDB90
D35353C34A771B1FAF96F83FCA5258AAB65384BAFFCE448690C1432A1F749C20
5817205185F973FA098BA856584753E75EBEBF387FC155202885F5B67117DD7E
70D1CD887183C5573B6FB607D4F6CC9F8B94B09B3F3AEC2EF1E6A320CF6D0112
63046321941D1FB3F2140B59370AA9387E24D579D389A166A10C989497FE9549
34E1AC2E546CC06C5308460DBEF3E1AEEB6CBB0FFDAC458E61DE3391480CF5CD
34A647D4DE15B81131B7D1F9EED4C6837A32E89B0EAAD6A05F5F67518655E5DB
224D4833CEC60D5DBBDB8A03FB1A9730589BB4F0FF56191D17E73B9562E0C356
B188882B36F9505F6F42EB2644FEE125C2A7D12227ABC8ADB924E88B0A9E8DC2
79762523B0B88DBBE6AC7968A46BD9E9F0C3F03F5F64724CA07782195F01F130
30DBE895C212E0EE20162D863F46A674D85232FA0DEE69A8DF019794AF6873AD
9CC2A5EEEF9393313CA519BF95C08ADF7A75B6F53EDCDC39851D20E58B97CA57
A7523717AA1821DEA94C8A9F8B82346B16D92D15AEDC16F0011A45A44B09DE47
08CBA46E8511D0C5CC83F952EEFA4ACFA7F3D7FA5E113EF6B70E5ABA6F1AD3B1
E4D3B15AC6D5C3BC70A3946F411A7D965D6FA9D7B6C6ECE19B2C29A2FF476251
EBF0CF3BF658A1D896323706172746F58B2DE49F8B7E431E20304A42694CCF73
11C4E9E96260CC442E2938A1E27EE6744C7CAB01634C8210CE40488B9CBD757C
4277B5E3E43C7560291D945F9128AF1F85924003418F96458ADDC5BB8EC431D5
AC9093D20DEA69B92454613BC1A82DAD4FBF8E56084494D9D2FFABD82A7C9847
171FE36B265B546F3072B0923840E6C6BB12CA53E05A99F0E8FD4F5109782746
7CAB9B35B68050230736AE624B7862D1244C7D9BE4D1CAAE21B123D1E8372377
F1FEF269A9A2EDF02CE0CC8BF92FD7EF09556987B8A3BF6D8C0A663DB6B9742B
E9AC61A449106AF1EA7ACAD40AC6F59427CC51865E6A90CF2AEED8D6037BA70E
4ADDAF622CDE877C98C3B2006B4721FC9BA18E30F0752BD4ACE36221F5CD1497
8FEDA5D643BE2EE007970A68E53D85975116E6CC09F0039A09EBAF0CA4B0EED6
A485CC0B69E526033FD1C1190BC5686739CE13D1AE8EBCABC01FCFF26141867C
44ED291196E546369129B9F759FDD7DC21BAF0A528FC34BA9FA8937813953644
C539F9DA4E55E83DB3D6DA309C562DA1330B157957B18F7618544AB738E25F16
F0517CD13C1F11BB8EA056BDC575D77CDC526EF497639DD89C2098660C5C45B2
D7CF715AC5E76847E0D3178360DAC1BAF6ACAEE72453B845B9F86621C166857B
029CEF5AFE29D1EDB4CA3AD7D008B7550A779E0066D7312DD6C7AFE1C0BFFF25
7B062B0DF30032EA2A2FE3CC46C96A3A0BA1888D1D2B05424A59ABE3EE928ED8
B67F507EFA78AE128F58B54634C7F534B3D0F4AFC23E38FB56EB39CFA425FD37
848545EAD03EDC5A9E796CEFB345F527615C785963F536972EBD9CFC4A6A4A07
5A31A508CA147FBB762ADD198CE36DF86730FCE2B643D1E7DF0BDE800DE7AF89
44A36B04193E44231E08919EE91A8B559646DC4DFAFF0AD891890A0A88FFA8EF
B066BCB7AFCA409C51889E7FEB33F19A3CB1268BD0EA74AF29C1401BABD16F87
ACF7DD65A8513DA9995C5092C36A774BC4260113360D29AF7ADF5D22B5B58E7E
A9BEFC33B9A91D2C397B27A81087376CB623318A8362C3FA9CBE3026675723C2
E711910DDB328E0EE3FCE219F44FE528B70E58B8E6CDB4AAB48237DD933D9639
E9D4F9EADAA8D46537D964D75C27F210B0C2473CB60D65F61BBD91ADE01576BF
77C49E31936138B0FBA066BE910DE1B1F0E4FFB5E81038E8656ABFF08DFD923E
6BA2AFEDCE6998BBF7045393C34811501586A4846E5B942C8E99D4C481D3AE60
2796ADBB5242D59F1116EBB828014BD903EF58B223DFD18BFBAAE4D348876B06
CAC10B7AF0DC270E6702A3F75D4DCEF872F2CDB9470AC9A1DC1ABCB55636D26F
9CB6BF27A0DAEB1F62AFEC12F55F78C9B59AC6DA9DB4B45444B0C582DB4DB8A4
B31EF4AFB77988E92FC0B257374B4408406490D9AFCC495316D6C08BEC9A76C7
12371E14417711EF802FB7151B3F6A2580C97527C9C3A0FAAB8D62FD992AA18F
EBEB36F7910186CD5F70A55DFE932757C299D9D2289796769A00A0C6ABD18F82
E0D4E95D6477E67B4C012DBBD098FE20E2F15C412DD2AD5471A65EACE05B3A1A
0C9C430BAEF4887F2CCE668116B87FFD9DAB4B9B3605CD26E6B12488058AFA30
8843791A95BB322DF5C47387F3EC72343855D6B23D72144EB5EB5157B8B238FD
6C71DDDA64C9539F66A7DD569FFF43DBE4A8F0608A3CBD354DD9BAB5E3C756DD
92C3C1B3E169D86A2230299432488BC04A87E08A80809F9968676DF9157B1C91
27C664ABCCBA9997FAD8966F766B325086899D1FE44581FE07C97688B3E15B0C
234A22646C32BB965B9BFD2CD34854D1488AAF021E169BF9CA9665CF040E25A8
16156C80A2F47397CD370AAEDA731E0D14FBEE1E51A17DB972D96DBCCE33F937
5CDBF1A650BF1D3536BA4CB7A1CACFD5CB457E2368A660A62AC26E64A631B2BA
6B08EBE42E02D9B1B2E95BF9F0A6B59C96A122968FD46A4D17BA3D018CCBA0F9
80BA3C1E6C683111AFF79303CF64F1D2CCBD7571C6E09DD9B27B8E101BE219F0
E075880A0E367885AC94143E777DAE455B990383100EADF786300602C2CE28F2
4F44662FDF03BD39A5181912D8F1243C36FF88882CFC4B34C1D4EBBC01D96A7D
9CE5303042D1B21042E4FEAA455F22A01333FCAD7E4AACA5D3A5386331985F6B
9B247EC6310BB07507321BEF3E4ECFC3B915AAA6E029B3999644C987640863B0
5DCF58CE479497AFAD1208FEFD1796E74467E9F7867C313A3412E6923F4C9144
C69EFA17965056DF043DB465BF2F1E191706D3AAB47E6AD5C9767E4A73B29F2D
E2E579D0262237568F82B360ADB6D0219B7535EFD02DD0688CDD23D84FC4F308
5D2D0010B1A9F4F0321A00C154672D21708B66B91ADCF98BAC7A2F94848E9A4E
86CC82EDD0399BD9F13E43359E71F80086B9B0C3B6D08831D4479ED83E7892C4
90C477BD1F06DFEBBF60F26516EECDEFE4787EEA8683754F2B257D0BAA607DBA
35EC6D1618C2FDF3881827F92D793ECF152D761F2423A96210F582DC9B90120F
26A33025414716A5E6F56D712E31BABE5047EC4855B767AC63D793995C9E074B
6E35C7E5255FBF4C3F17E7AD7B2A6C5F7459794FC94306B581536910F244BF5A
3158E821CE75F4B0565EBE985DF24DAA92F9C1D848EEC6B88E21FB6C51125872
1752F7352291960E5BD36F78AABBCF6DAA4D07AF56E4B6058AAB13D41BCDAA14
C0D63C6807FCD0E2B4B9CC892F224843173A75DC53A8F0FA396959C2E2CFE3F5
9B1C8B62797F34E7A0BFCF0787C73FEF98442234A617CF161829498035D30B29
ADFEAABD0B496E8A2E764D22DB7737F950FC5982F1C5F4FD414C1B0202F40FBA
62C81B8F0E836CD73D79366FD62388B437B81FC673442EE34BF27454F72A08F3
389E60CE28A050601A42FB4491C60DC02EC008E6B9DD2495522BBEC7293E2923
120584E88412DA7137397B41A28706B1CC6BB0C80709A2A4BA79822D245757A4
3EE454198942ED2316FAEB981F7615E642167620EBDDC5B271E273216EB119C6
4F2F0412F0BA6E3BA396217597575C6739194E1F839232FF088FDDFD3695A5CB
9A0E220389938596D8BDB183138E1F73F64512E4FAB5E1328F9B42364E3113B8
004BE2CA0B074EE271BBE0260D31CE555D535C16EBB528747EBAFFF253E659DA
3A377CBE0B296276AACF0294CF90FDAADB4EAD5E2F600E5B2A018DEFB86FF61C
84296480A425687CCE37D671472537E897AFD4B8C6A6175E1ADDF9AD24DFC5C3
A73E18AC2D9B28BDA2F17D51DB3521945850DAF0EE48B0FAC271544C1B4F3B2D
53BFC8DE32BA366FB1FEC0DD6C0B1FEA374CBE2B96F5B235A1D83A240DB442C7
1460980A3E5B96AE3D5784DE2C2DFFA671E0A856DB2FF4130E5905F3D5338856
C11A468D867D0C6EC585F1AD3E7164B8598BB59973B9A952FAE819F052A6554D
EDC342BCCB0525905D1D27ECB9EE43847B69AE116F494CB2DBBAFB2773F1A3E1
C75FBDF8D66FA5AB4005757D631A0D9424FCDA91A1D2AC6FCE7CC7A23E84C65B
3E92BC684F23467DCF8521E0E27CF1441C487EC6E3BCA0AB54BB137E83776009
833D772FD225E88A8BD992FD69819B3BA90BAAD1DDF16E4326190CC4BF9C30F2
AF7CA1FB38E6387D9745FC5E176B248B1581BF7A4CA2FCA8E423DF340EAE29AA
7E07A25FF838F67378F9A6A9A0B404E01E86E64FEF71DD3D540D4711AEB1974D
E2E0D485DAFFC74BA6B8E9AFDA245BC8997BB39BB6BD52B496A09C68F7A8E900
8DB3007643416040FCEC85B407EA0A946827771FBBEE49A3DA5542CC5173A31A
0280AB8E922C23C1BDD88D70627EF124633C318E7C9ACBC14AE216BFD41C0B6B
3A0161757913CA1F7B6626963C09936A52E73DD9B3D86DEEE73C0293A646FCF1
21D4C33DFF1671DA7A53E77E20233EDE51571549AACB7968602CD03EE67ACACA
B231661CA9DA2BEC5795A83DFAF675E9B052C8BDD51490F7874C91EF5ED2E0A6
BE9CBABB98A950F7E55DDA3823036437C11F614E27DA5BB8BC6D955FFE54B825
0201275C2C49A3908BEF1DB3D87792DDFFED23DE7FD9CFC284F6255C77E54A39
C2FDBCD28F2938E4CC135829AC1867CAA5705674062C9639FEEFBE49D6108091
7C58585B80464F7E69966D7933C7019BF336B88B9E0E7073A85EAF297B71B303
31EEE9121347A482D28CCE942AF53E94F88A97EF2F1860A92CE29A14495D67B7
D37E207D42F3891E0423F5BCFFCAAC057FEC683696ED6FEEFA65C8FB6F1312C5
24A1130192B4179F3B08DA1C951D988894E7FE7CFC28C56992A1CA82BF8BDBDA
E021F16E630FF67201BA4DF5F3F4D6AA65B8347FC1575C142C6C1868E8472BD2
CF191137AE1B36F32FD84DCAD50644AD55EBA2694C93BDF984A5C9E7C92B73A0
26769F00831537266FD2E711AB3F8AFC5F3FDA3C9E6439FFC48C3D1B5527FC56
1FEDE991E66E8465C0E395EAD0A22A2FDC001E449AB9C5E0EF187A1DE9B74696
BEB6A525DBF3A60DA2FBF1579150DEE1C5D1B6F55FF2708CE23289803CE123BD
C81E25DB96551A13AD713D5C7BFDD3F2E1D5C12463A195442B51909CC1724E50
A1F6F4EADB3B7355908F36F88521F333C4E7C70B094209D1F883B961DFAC32BC
8C5A2CAF77CA5E6AAB714CC0AF2B42FFF6F73301FC71AFFA9B33A2153F55C2DB
C1C111874DEC37CB746BEC9A3A9A37A2DD098CE7C66B0FE38460ACD77A47D53C
1550F857FFB733B5A8D02FB56790A09190B29CCB4F4A3058B1C82F0CC5E1B2EB
2F8E06F2DE531E1EB81326A8EF0F82843A4AC59D267EEE45730895752820BA93
A129C22A78C1AB28BCF67AD5DF372FECC9EE6719A02E499FD5CA866688E86089
7EE8E5912087E0C4588DE38428114785E0CFEDB1E2EE24CC067D107DFDF1E2BD
B1C4F9C6B740F3DEA0BD315581004E851ED5A9F66C4F9E95DE97D355DB06F482
A43B565F1255A85710B15A281E2F034B1C23FEE6CDF3A043780CB6AB18A016F1
9EAFE545CA5A5B5AAE2459D69D2151E99D029FB5C1649B9DA784BFDF7D177385
4D8B16B9922D149FFF6B4F99311D52BEC9A9FC098E7192180DBB38767DA9B9C6
E8CFC98615219EF3AD4A8157D14C72BA3F91C8B78381383E0BCA1A5319749E08
D67D1208C693A6640D1BD6B9285AC0D3110CBF8F7747AD12585141C3248D0BB5
BDE892F91A4B3291F21F30294693518E4629A3ADD7C8640E424FF615602C603E
1E14DCB3B17D34C090BEAD2A523E260A599522329B698729A635CFB15BE7E79E
6A34DAC7C3ED57340821A4E7A0C7F88F64BAA69BB80DFA8B659F4756878E3044
E1DB7EE4FE60074AF97818B3D36CF51110191B4E10655F52CC5D11F56517CFF9
04BA2676F4147DC8192C98C555B001D54301853030B2CF0C068ABE831158B1A3
F30593ABD51F5996CE493E0622323FE93B292844521051C1D3799C07DC879EE7
9D047DE1C7127E2DC6F94E30C34FF87FA03DB3A3D597697C133CFC5A9448E067
51777DCFEC80352A92D9DEC0A2F40580A0242C063CD1086D38FF5C6FA1BDB0A5
3EDB5499AA2322CC73A38FC826DC202679AF4A7B571509B715CB8BD1D0C5D1E5
9F5B2D6DF5E9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI8
%!PS-AdobeFont-1.0: CMMI8 003.002
%%Title: CMMI8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI8 known{/CMMI8 findfont dup/UniqueID known{dup
/UniqueID get 5087383 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI8 def
/FontBBox {-24 -250 1110 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI8.) readonly def
/FullName (CMMI8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 59 /comma put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBA9B440A6DD72BF8
97084C906B05FAD969086ED21AF0AA1471613182B26117D7494DD9F9270EF3ED
8DA4D957225F75D060237B6DAAD5A0AE3E702B3D1C437835B93B8AF1F9E7D966
E739CF3AD5E256F90286A34069E5BB4122F94F18F3485658D0D25B938522A879
8215A417CA2CBD20F71C5C5FCDE21EEA7BB27876D93BA667868A419287FE59BC
F538980597DBBA743DBBDBEBC61E3286DA7977833DC8BFC5E52FF5DF5EFD9A92
D070EB769E31E760A50FDE012DC0057835E8B9B046FCC83F1A0C40326AFB4E3A
0CC3BFA35FCC64E32854F32EB7DF10A19F95830136BBB8139DE1663B7FD790CE
464EA431AC109FCA0E03F3E0D355FAE20AC8774D6B1CE233C27680C77DDA7356
560A27C75993E8C980CD1E3B0683F7E8A05119B3AD567DAB4851B66E418687B7
F9B21B3BEF607918D5973421B68E65DFD8B6C8DFDCF1CAFE2637D365148EBCE3
FA4CC00052A2A522205EA3AE3461CEE02042E1A3F11467CB6C8C849B200CCE3D
0BC188EC7B934CBBC0AE2BF5DEA228181DBF0F774119F313516E7D97FF532621
9278F856C166CA6547504F34991D588A0631A5CD06363F3FEE9FA0772C783447
ECD0A200929CB58EBFB6B72008E4082B5D14AA560C24915B9463A92F38237886
C35CBB2D4DD6D0CA8C1D4EC46093041C6181C2F6586EE3E7D4E647A107B6DB23
DAD9AB5A0C2905455FE58075EFF6B48597078BFCCDD84812B98986F34987CE49
7EFB19814F2A58B0233A59331F6F8EB66401F04EE7B1ECAD9BC90A2BCEBE213D
DDDB1F75C83609ED6A669A0CED58B2E269E76ECF73616D94F13CF827C9BF354A
E82202988DCFE856786B8AE569AFF3105B55C72C58D310FFC0E10B2ABAC8DB06
40D5F72E54770E9DED1AF4616008595B8481E3D9AF4191CC9A5BFD9DDD01C9F1
FE7165D21E488DB40879E863D470CB31CA06E5B5F1F8C3CCE04B697CEB0F3557
ECAA358D2EC2B370519CE06138FA702314BA01F1F33881825EAE1230098BB3C9
59666983275CA4E8D9DB34979F86535577E79393A72F84B0F768FE8C92692907
15E9FE9894E98A0EBEA490CBC8C7E5A9F3E43B24C2C5A4BCD71DAAD3CC0B8B82
AC13933543E295C163F61C9FD18371CB514493F90BF7FB460C029B8DD2E2BF05
FD66B451DF277864DE1EE42100BF29E01A50258C2758F3EDE211BB3457B8243C
20BE72983FD6FA2581C5A953D94381E32E80D6D6095F2E93A5455C101BA71E8C
E560D4694E4C167EFA25FB1E9D214AEA745CE34CAA5468FAEF8F6BDB6C6BE8F4
3D58836C26A2392E4C4DECE284A90DDB3858A16D6135FED655A600929DE71605
6CA32F6851A2A6F71A9DF3D5D657593BB729CBCA2F4B059365B7263DC08AB211
9C547096E6427F6AA53CB2EB87DF0AFE2ABCDBD15D7EF228D3396413B83C6B4A
79E41F9BA55A2688F62A10472675E5658F151F9FD6634EC94EC0682C17448024
CC1633077C07A93E4DA8749D974FB8F4332B5DECF97D749C10DB60D4C90ACBFA
E65AE928C88BAE19234690EEABDB30BEDCEF2660D7464D5071058C30C572A2BC
7DEE5384BD7614A4BEC4C84E18CF7EC81C810256E8CE6520466C033E2A36D3D3
5D6074B3857415011D8D9D49A474D994571CDBB89AF92BEA879BEBAF67663F5C
17ACAE809C2231EDD0A76641BA52FA7B19A2798D54A4A9B62C42F9905851229F
2CEE0191C8AA5AC12BB0CE9E5E3E862683AB57DBB4AAD6AC0FA8BA4F408D41E0
755F72B82B7C18EC6B13995BF7AFD66AF4BA0EA7523DA8B75EE751744EBA9CA4
4E8BC1FB37734503A5B24FB9F2C2D07A47CFC477F02413D55BD7DC180B0344E8
50248801FA6BE26C97F397797F5F9DF762967E7CD92CCB8B2E587C92177619A4
BF8046CBC72C6E69DC78B8CB6B7381A290080EF59F5B9F29C1167B261C932E9D
010D2D14BB425D157F22BC0305770AECC5BC80000F8CCFB9930255A68F299ED9
D3B5B83A2CC00E3305EB281E1A7054734661B175C6CA0AF168790985F173DF03
A8693B677BAFE23C3CF833FF6463B136FC370E4F0C29E322DBEF637F62C33CD9
B0A8338FD67EC628E3BF2FCBF7CF0347D5CBA1DBE6DE878DD670176B85F69EF2
3C5CCA1BD2B8A385F113EF1CE522F5A6AE053B9C1E39408C9459DE3E7FE2C4ED
77F026B0081BB80D40185458139C16333EA27F43EF1204BFBF80BC5301B2A3AD
B10F7EFBB4F5B7E04DA1167F68BB6D4049440B0F57385FF0A95E72760C6A12F8
1335BB31CB74081FBAA319180DC00113CF50CC5A41D2E751E055DA1429CD75BB
0060C21CED634FDA106C49A12B356129D010E29F2919301AA7F80222AF3905ED
672FF85C9897A70241E8DDB9A53034B6BB44E140D9E739848E7A782F24B98AC8
00DA09EBE4532787E5CF3ED815705F659D8E52DC2C2D4949374A3BF192BEEB99
1D9A90A4F3250BF8A1FD40D91F5B34AF2CC561FD02FED712500B24330D87DA9E
4AA46B6E34BCB40B1F73A1DDE07E002B9478E9651D2BF85E67585B6ED812BE03
A594874A235B1C1840C4BF4BA6D863583D8C12DB49EF7F8CC24DCBB6B21FBCA9
378F3E2DC406291AB324571F76E0805DF8826090F0E8B50599CA58D124653D16
16C782B01C91A6F3DA6346482E3163D28D95EA49866360147296838A3FD0CC53
920F91D895F839CB61FFD2FBA296CA4C6304EEE579782AE5FD33D0FA652BA7E2
CEC7C01DD0D3E0D56E6177EE5F609A396F7FC8EADABB465DBA7F384E215C4DCB
E64F807A50A461545107F9C3F7D7CC7D33E6EBD6D9228B1DCBFEF160703E6129
0DCED8D45DD54E2A36E698A616E7906A50901E453BDB2A363EB77144E9EA6F2B
6BD927495EB0EBA5755165707CCFBF8759CE5856881117C7F3EF6D494EDDA7EF
E499BCA56C86467AC573DA9C2724FCC74BEB331E736FB093DCB67DAD42296655
415D110F2729BD1D55E5C9CCE2E724116F45FB2E66AE0F790258851A5C808762
68B8A110BD326F8D3EC45004E7CC08DA42F6CB80A6B6E7C286F139534A275BCD
2F812993DD9C9A1AEB5E7E4BDB4805DFF3A7030263AB060C9B74F0C25C5B9005
965284884450CC2815DF28D5F9B0496DC7A3AA85E1E42741E1538797175C28D9
FD904699C771FB066397FFDEE8E8DD1ABBDF67E6BFEF95BB700A7C1BA91354C5
42EC3864F6E19B379E79A1CC3C786C0DA146C6B0B8E507ED58DBB1F12F613A98
0E1F8967991427A22ED323901C4B83336CD343212131E8B59C2F5D232702ACC5
7891BFD4EBA5D0FA35AEF9F3520CA82D121BF6885BBDAF15248A9E4649ADB94D
0735CC4D14E1D7275427D00C8E709579612F7F74DB6FC218C10C278CC63E2AE2
37EC996B10C0229D687F0DB5E38A8C4DAFB3DD8A9E7ED37186FEFC97790A1EA6
636A88FA9FB4D282234BAAD301A1F3AD33F252C5EEC49410562FC52809CEC466
A0F6D148E9AF19D6DA2337C8283FBFF6005C37AAEB0B7F7217A8DC6F949B9984
72DEF163E4D5ECE4288404448C96A7FF0AC76F732D50AD63A1D286C9180E80E7
C218B1F48E3034FCABA6BF262CEECC284AC29E9F3CA1CFC1639A681ED66C1FBA
666F073D45C84A286E05FF809D4764FE819B6A330E73695CCF2F448B4D4EB4B3
F63E94EC289807A2F9A1159CF328C002B467B19D6E9454CCE36FC19E0A214190
B251818DD456EF658B0398E275514B72D9C1DA5F806EABCF1DD56BC025D69FC8
A0C2FAAC1892B64D2AF79EA2F57F103CA623E440307600D50E783FAA998EBD40
51D23A0CEFF8D8649B48B982DC38D613F882DCCAE5F51233A641B3CFD783F830
D984F116DEA3ED8F0D3369AE629A006BAD4523F8E3C7C6B39A6C972508B67AE9
32613F28CCFFC4BBC86CF31A0C25C786554F7A1F3DE97F5CFD1A941F775067A4
784385E2D02EE1FF886701B1E87D966D3F500E15591A5012E645837FE2DBE3E6
A3D375C6CA0ADBF96B33EC3FCFFFD888D7344B31D40427B8A8BED0FEC6FBE038
1FB5F0714C4B5A0E607E215B5B7F76ACF0FEAA4C9790EB7E13C0E3933B7C63FE
5B934EA34F4B741C3667BF1735C685CECA63507E6FB9EB06AA010311F12AC1AB
4CE3FE8D1EA1EDB3C700BEBA516FC71D740B1CA1A60D4578003973CC3EE21DB1
58FB1CF7E2EAEB2A4A6C742EBC3575EE6378531C6EFA6E6986E68B8E25CEEA67
A59623FC1ED2ADDA9D72DBA627D179E47DC7F5551E07EA4D54ADB6CC8109D340
7279F288E552EFD79C17DA3431E53EED66D16F24BF86468C2FE7EFF421560500
12FB048D6CE2F370BE4E560F8B4AA12362ACFEBC839351C1D5100C625B14CFDC
747B66082D4AD5474A63EA0054E9C3E6295AF6B133348487B0471395857F4B73
4BF8337DCE2FE2E1A4EAD7E7BEDC822BDDCE42B79B308C11897C98E3ADE253CD
09CEEEC0CB1DB66AB072E36E1E04911F40B535B0FD85982C21B8A587D65C38D2
DBC5A07A0A26DFFF7460F10781069490AC1B611CF7312A14B4AA6005A4582C5D
336BCC30EB47749193BE8D457A43F54204B070DF5AC2057B6437E23705C7FE8F
7BB150560F7044BE3E48EFDDA539FEEFB0D2A7856CD4E405FCE0F5EB190D91AE
578E2EDEB9ECA218573BB1A8EF116043A27DD17A4047BCCC7C5F3C563A910778
45ABCA32C7347E6180ACC86F9D665FF025DD8AF514FC3724B5C3510F3C37E0AC
5101D1667C6ED4E8F37F06CC2BDF66CB5A9FB7C52CAD26344FD1557571336A1E
1E340EBA149B4EB99016D1A411FB874914AAB2A415CE3F5FDFBBF5AFD7959B9F
CB127BDC68D2A2F3F07FF3D4FF32046C0371CD2E68A6471E46B08413FC3C7A80
A107EEE57979DB387B2206D2810DB310B7232B2DAA385256C8A58964B512003F
A0C24ED21809E2576229627278118107B9C32345C1EE8C0CFB452CA362379369
31320DEB5371037AFAD093B61E8AC7A6DCF7D49C7F8EC32DC0ECEAFD7E892810
039570D2956289B15E078C2545911BF535F72F7DAC619BBDEEFA855BBAA81704
18F7D351B0936357085A32157AD8E27438A58B2397D69264E748B0B8D01B33F4
D04DC59326A7DED39E247A1C1A1AE49382BDBDE9478A1CB48F88BDF14A268B40
A40B9FBFC4C87FD3DF1EB2464C3C14E36CA41E09EE0A9B75FEB0769F9ECEB1BA
EBF73B818427FACDBC33BB95B9654F31C59A766E931C698A8608F15290FCDBD3
5C535D9036A19CB7B55BF54E96F9B2206DC71624E2E55FE632FDFDEC8757AEA3
1D83D190ABED5E7A7AAE2F41FCEBC7C18626BF58F9E9F02FBAE0C8AA85E9DB21
A3D8907522DCBAE4923C6A2A09FD2F08FE32215C544AB577B337D929E625E704
E041C2381AFCFEA37F3133B6CA20093EFD457C772E428325E56C9CBCC447EF9A
05A8C3F28017DD4FFACC51B38E4896C5044266EAB4EB7C13FE855E790DCF8A17
B61B1D30DD866BC57397EF6297C4891451FD6A5C6AD6D7446F58F56A68650908
224D9F4C31C6906FD29BB51DC947465B808438E6260325752808963C808A4AAD
60422ADD62CAF315F6AE92FACEC55D5B682089AC0BC051CE1E2C06A3874736CF
0DB5F7C8F178479E4F11665402781D80397C75456F5CDF0A4F382A19EC6AD64F
71A9275264800E178F212269154DD8352167C57EBC0A38BE794AAD1601C8E541
7E1AB8E969A76E1EB4092644958FEA2AD29635E70C4DFE2EB0D9B3E1644FAAD9
B27AD5466EFAC724718962B62E7B8C32F412B69DFFEB792587D571FB5C591D95
4CD441662CD1B07595E245FA537FA9EB5A20A97E5C9251EED22C9961B48B25ED
85BB7524F635F9CBA3714C6D60A6BF920C45A64F4C366C1F9D22F53084997C9A
EFE2D79FBE3347111F5093E271DB7E3770B35D253DAF93653F6A23FA145AD775
AF11E188EA0428137D9A14542E3EDA6F7B2E5AA86C9F3D3649A85ED2F020C696
01A339FE6D7E42BC548C8F92A4E3809C67A986C99418772403D16D0E8662595A
1F37563671D6DA0F36CAC99DAA8FEA215DF7D45E61314915A30A22FCA86A50D5
2FF2EF08E240F9FAC030D92BDFBE40F1972DF413E6B452024CD11792BFDAA2D7
C82716528AD4B3D637BB43E748336DCC86A952BE96F1EA423E31340FCACDC1EB
02EE932F58734AF3A5B2279361B63F1D824EE3BA9F4D2EC7B33A300A1CE8CA43
24616444176DB8099D85AC68329B1F85E4B5B16F3B396FE2AE7774F3065D0203
AA140DC128D6F935C44733EF585F89E8639A2096A225A2E5E49D447D8AF9FD44
CF6C1BAD5C5E5262AECC5543EC8199B00B72BE32A0F110F64A1D0D5CCEF38FD1
155D6198E9A343702F8ECF5052333272CAC2FE016681E12745CBE14E1065EFD5
407DA3686080989F6F6D650A9F1EB3A813B070C30C0D3B4A1E9C206E2E4DFD51
D8DCBE9AECF956640A2E79F1B4FD0EB8E0449AE1B8FFEBC43275743B4D7F6605
0673B61EB3189E74F51F3780A91E6A5C6464C8CF7D563D9958D46F39B1A12087
6BBD4898BA9ABA468AE1F24115891FD3CBC2195F75958E26DF8BF1B93F7B521A
C12112237AB23A8E5A7B7D0DC4C53692B35F3CD813EB463C0BD3A6486B0476C6
3B36DA71FE512E5745D097FD4AF5D056E434DEE2AF926B2EE79F7FC4FEFD4130
BB4B4BE01E5C720325A4884507CB51CBA4FFB615B78A4182444F0ECBE4161A58
E86FE1DA2E39C2BECBCF1F1D7B9B776A26078FC252128FA8108CB83F673CFD37
CCDA493234FB93E1550EF8D2DC049ED95B00A8A57834B024B277D3DF062E748C
B61F183F2D72AD075474F8165528CE75E4F40B38B0FAAE45751C1907F8D31619
E88EAB02EEED415F3EE3BC5BECC6AF565D34E0BA2958FF337A2B06012DD1858E
C53DE52C108BD5AAB76C882198C72CDCC958D68EA8FD26F76F04EC1A08B2AC3F
A6D0E8724D2656555DBC0C8C42A3E22ACA7E1BC8E9F897D9AB692E0FB9EC32EC
59E31CCA4516A3C3BFD5411BAC3DEDCE374D48681CE7D67DEAB93F5B5C5290AC
FEB29C5EA2C98095692873D36C7DA24847B66F31E4CA4C7AE5C79D7CE4F0532B
78620582E3731A2A6533A03E7155B33E7CD142FE79F72721862EDB24959B9783
F834CB616FFCB2A23497BA6D99AE34DC459A2F7B3E4DA2B54BED118ADCD92178
66C40F4E60F6E1327D5DBCA645A2A7C770807E6D7E47E1265C753F8793BD2D1E
BDCD749CC24D4AF9315A93F01180A0F9A7F420DA1B87664DA5FD967131273271
9DCC45C3D57EB9B8AF14771E8E751D88B98D2FFDC72F5011D402EC34FD010ACF
D3B0660304725191D64FEE106253FCB3470F1A16EB7B45C1489D3534BF94F740
C2781DAFA5E8A9E7B25A85BD7935DF3ADDE08C960E283D8FC3976FDB4085DBB4
B6B35FB239C28C785B18BE4FC98F3A5F410F562DB5FCA04E8074E4E790F4265E
F88117B3D0833AFAE6E8B8A71D7731BA6F14FD6F217EDA3F8CC687A494FC3914
B84FDC37C8C335AB1E7E0BEC7FB6B7A595C50CF8F0080C8D461BCB8B579A5155
F963B6587873FA31C3A6572740C63EFBE58A2EBB723B7517D2A243F6CB08A038
54F4DF0F6692022B2EE8C6F6B73735ED3166BAC58D9216A06EA6FC7B63B20031
D0F0F99D83D9030B413C2360DD2C553E34BD67851B743C3FDA676AD63C5BD759
9131358C6BCDF05FCC048F4EBB9005899ACDD8E9EC9BB8C5A08E83485047D263
0ED69B4D1869A38068FDA03524022A1D32FA2AE0BF728D2A654E52B6A6C90A3A
725F86627D7C3EC5AF5AC512976D35FE42AACA3FECB401788D0BFFD9F4743BB2
EC5B4E7891F216DCA5A69E917A171E0069A03FB214ED307DE947225049D46E0C
4707503F09811A597A9113921AAC23AB1CAA9866F81A02BDF349FAB129F23E86
E384C043053055938D42ACBF9F0EE86CEBEB011BD5BB7D593104140E6AA9CFB0
4E0B47C91E504BB6A95B2CBC36EC03BE01897C3D498EB30FBE4BD9584B9D766F
CB3CC7C96FEF2A9512B7DCF4F362F4B6004A6F2F8156D14259385414177DE692
D15F2E9726ADC94044D88478BC73592189E9456E8DCC87DC5A72972B3199547D
7CB997D2C73BC8FB7E3098C5E9965C9A5FD4DC3F610428B354B30D80C1E029CC
B891B4EA9B6C30F1E55A719FEE6950D877795D854740456DCC1DC3C64CCBEEDB
27EF291711F1DF2A02C28E4EFC67E6946EF9A716F5D7ED223C834690715E067E
E259E4BA6844649E19EA36115A6AED95055616
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSSI8
%!PS-AdobeFont-1.0: CMSSI8 003.002
%%Title: CMSSI8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSSI8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSSI8 known{/CMSSI8 findfont dup/UniqueID known{dup
/UniqueID get 5000808 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSSI8 def
/FontBBox {-100 -250 1135 761 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSSI8.) readonly def
/FullName (CMSSI8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -12 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 100 /d put
dup 110 /n put
dup 112 /p put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2919BE7F4ACE8E907D5EF95D
3D767387C90E3340F994983B26E5038E3EB949107C5C55ED5392BC8F10BE6BFF
024B7DA024C42E9AF989382A9374EB2235ECB8D3E676F531C893D3D5F160C3BC
69A45272FBEC9D30D4634423A1B22FF3768CB0F22028D36B8B8534FA62DD7EE7
5DFEE3411A25C4B2CDC4A55CBEDF5ED5FC4BE6290E0DDF41F6B0070810F96F2B
2E4D5EF987C11C31BAC419301683A1E66DC5A52B93D416D73D8B8439B96DFE48
0F080479FFF69E2F97BDF7944D73F55F531755FA645D37AF1A508F56410CF8F6
9AA2E6C87E7A802C7470F4B2742EB91C9CD3171253AA0C61BC85B59C1B9C8C1A
669EA311B271ECD3FB501A20E03535BFF043F326258B5738CCA2C9E375EAE10D
C99891F640D7BD20E96077815E2921DDECEC7DC2EAAD3A72840B378FC8EF8D4C
21E4DDA91D2EE5BAB4BC9C6CD6EFBCD4EEA34C2469474DA6818D3E0120A5AABE
DABD53296290B24B18A91093927E5C6D5626FAF70CB340717E4ED27F57E91CE6
01CA47D739EBCAF2991F58BCB09F3F12BB23D80A61E315DCF270AE3E74DBA3BE
E99D15ECC1B965F48442783DB0978A366ABD22EC999189168B75B08163C63E10
7AF0391C86471F56F9EEB994419EEBEEAB58126846E4EC066E4E81FC2C0A5853
8A7ACEA4ADD8F157C86A131FD8ECA22A2D7D6AF3DE989C90B297B57CE6EDA490
BF7F5E03B71F153A5CAE98F655E4010900CB5B7C4B9015CBCBB0426692A68DCA
AC3A9027B4E8D3CCA563F9B31F349B7A2E050E85A6CBE6BB8B3173B3E45B7E7D
7C3E23020C431AF58EEB4CC1ED401583F9F78EC63ECDA9A34D91E0739BBBEE59
ED973BCA5A43B128E467EF29074CA2D83E0826C01C0A5C1ECD79C4CEDBFA8ED7
9DA61DE7DD024F24F6FB3A3FB6D19045387DB75BB697F10E2B313BCF94B67AEA
32C89BE746E228C7350C9450B198581F6A293A9C48D148AA26D562632B052067
31603A86944A9386A480173360490C2EBA6B659275A5FFB5A8ADB1B70486D9AF
2B679682D31993B98C4B99E3826C71E04E2FD81E44493942B68D3192EE150289
74B37C28C833F8A14048E5F6F780FCE28E38B32FF8D3AE0723B3C1CA0A5C550A
013B63C8A08B595DC22DD7CCD8CFA1655FA2439E9CB048F485999E3BCD59FC0A
E0942984E2679A4A795477F6433620A679E479E0C3349641AEAC17A7948C911C
B9A55062A53311CE0EF67DC8ED11CC46D1DB8B3FA02B613AB701A8310AF78215
0E66FE01BA698D4D1BE57D31240DD20AF6864FD915D3154FA44147BED97BD86C
9F8D50CD24496A1C0235C6AD747D1DD1465B5339946DBADC561E300885540DA6
C49AAADB30C39051C993CB547BCD573D6448DC09BF7FF2D1B108ABEC2AAEE447
FC64C4E76423DE98198BC093A636DF591877505FC6C9FFA590D30727E4734BB4
E6EE21BF4D6F9998F9E13C5CFC864639FA1DB6390631198DD5A4E83304A418DA
F28A90510ABC3A9290A76BD33643423DC378E8B15479BB5E92DA062AB6E33568
A3DFCAFCCAE6A87A86702D2A9EB6A1411293CC7389C2B2997EA9FA721C5D1B46
9C89BF6B41822709D1123DE671945987BB4678019A410F3F6285DE6C3924138D
62487970A8DBC4B3CCF78DFA922AB5FF94D0D0EA6942FD83DDA3E49E44C32118
9AC8DF24B4EEF2BC604B5C573FE4815A14C063E44AC8B465749C7D6F524816C1
AFCDF3889EBDA13DE2AFCF109DAB19A7158D5A6A86F941BEA8D6C1E41930F276
3542CA3C688872AAF9089B736986F30FE73DA3DC30D571E773925B86CC3A5401
422497BD1EE99B8CC60984585232FCECFB8CD7EA278531A0C19932D7E65FA260
08110E0CDDFD183F87F177C6515B4472D6FFCDD4659ED4900E4EFA450FF0632F
FBEA3829A63E6ACBD73B940E850F15478144FC91C0C6B65A3D21DB024AED7227
2E9CE60983D6781AC2D82DC13591ED2847851B38D6FF2C1AF3A177C1411CE5C4
77D848A72C4CA03B32AF94C0BD369DF16F84FEFB9DCF203616AE03B80A6CF276
A5FA2CADC85170D5E7A0F23487003CD0F57C409EEF9768F3E26CBE9327673F5F
3F8E258908B24BEE940432D5F5B7B537F8F178D6D4AA81451FBB70DF7DBA5141
49BCC342C9A006F075E3C5A4D75F1A972F492B5AB2CDC0010FDF8F8A6665D242
5DC50F2AB1D1C098E107F7EFF65AF274A947AFFA5151EAA0E38D584F4523ACBB
9CA3E8A7C78C0EB6BB75C44D60A811DCC5910978A6E62553BE1B304BE99BB559
7384232CE98EB577261419251FCFE8E37AA798877B1D1F1BD1D5C4D3E75F0A74
CC6D59E91F7124523DE23834EAAD90511C3F6E21D613B1BB91C601DA14449768
F2DD1500524476F3120F4272B995956428F130875D2F49DB95DA90DC9EABF7E8
C6FB98896D32F008BC6F44CE478EF946A6B3D0E2E8123782CFCAE81A62D6CF15
03AD9A6BE8BA27B98682EACCE341746E80D6B34446419A6E5680C60942B653AF
4B87765CA3DDA25D36949C24AB49990EDFA34BFA933C7BA60AB83A03D3321FA6
63FC28B76A147473B9DFC4AC4FB4E14B3E50138190BBD969BF137B90F88EF815
A2E433FBAAB2908CC7EFC2E76EE845A593A5C5C4891850677DF0A5B667A9AB2A
49BBC9B79553E5F14AA68A10D93F96F619700E5278D4B73CFFB60C115853E8C4
2045704D4E0861711A6D8286AA7691B7CD68C4505BCC4E39098B7D1015513208
7DB6E9513DCF3647266BF882A1DAB7DB72BA8EDF411ADDAB056F33CA16A8BB0C
74EC3A387612BFD7B47D8FBC321130B3066B454804E0A886333FD7A54F6C84B8
FB72399D9D1AD9D20D10058945FCE9387361C5A4C834114B7F35A01DC1D94CD9
32AE0A329943D48F05B3B7BA1877798A1B78CE5FF4A31D024A7F02D1784EA28E
4AD7C665FA13B93475B263DD24F362A44E1C56AC4045C1977CE1A859F852140D
A07C91295677E868E700352F9E195804A8D1B906594B3DBA293BBC87437D4525
96244D7F4ED03C1510601CCCEDBEB66B3AF0447ADCB87B1004D67ADD41512BC4
64C17AB21E88926F88486E8550D980941950C3B5CF567D17751137B2010269DC
F0C5DA0368B5DAA2DCEB8D1DFFBDF2DB214D1E73D943DCBCCB7FBA14418E4808
81DF9B8D60EAE203B1C1046EC4B2F0932986E03736581E2680CF0676F934CA56
C07CF644F6AB64756E9C016DFF6052B8BC9193EF2A8EEB5EFB5096EAB6E439EB
1CEB16603F0A525FFA7509CA17FDEEDB2052FA61666677A3556B38EBF9FBD242
215E3D083011F6AAFF7F534FD32519FB87AF4A41C77504F56703BA8B2583938F
7009C71963D94C91082918500E4320491500187032623DABB91AE4099482ADF2
AEAC3C50EDE1A33B262FAD61B8BE69A4B01A4E9B60306CF757CF01709E52D687
5DAF31C7178C962F27AE88FCC5F7BE159479AF03293563C37EB8F79E234F05AB
1516AF56212EB816B7B80C872F2F8BB510AA98E19C2EED6D965DA5AA5CC43470
D18727DF7940B43D62ED8BDE90B8AD9C14FF9FBEB92D2052FADF7A1C96B52BCA
0620A2623B9D25A81751FC60E9A27FBCF995B9F816BAA3733D2946655F991497
7F9CA776C7A9A1908FF4CEB0DEEB8316379CD8F6833906D0C5AF68E424F62ADE
B8861EF6C4644A2A27286DE776F5A54C90C33E5710E6AB8091C86A86964AA279
D92B91D5C8C9B74EDDD5D3553EFA1B1973B6FF49BDB92E0C18665201BB9EBF9C
C779C8CABAAF05A0CE11BBB581FC0AA1CF7F7B3ACB85D48B70EAD7B555AA243E
65797D3846876B60941EAE2980F3CCA18ACD94C4B39B476EC42CB2AFCD8B83F5
53774F74FF8F317E98CE93B48B27ECFEBBEBEB3106E3722B6053B5BD96200028
328FCE620EDEB9294C986688F1A71063DA2258DF8E25FBAC17E2021C981F7F27
A7F3C2042C1F567E4EB67E410D20A3962662140EC73D36D041803AAFF64257F4
C0808484C8AC6C25E3D23E97ADDC008BD27163626A3CC2829466A6539B75CB6A
E249172A5523779E7DC20BF2916F6DE1033062418B3EA1EB48FBF2F3A30C9FA2
506BD55D136BF911E6D7B6D4CA2B5F4473316A51A1527F22343BFB159038AD3E
102B83AB7796C78FF192A73BB713A3FB3A7507F659CC3C14DCFD076FCEC0E24C
9A3F75BA90DC175AF0557451A0048DE14D03F3133E687624B1FE77208AD8CB42
8633EA109BF1BB84A58CDE3166FC7468C17849C9A49EB8264CBBE15C3A58132F
561E3A403E1D2FA256954720B4C1D8FB7496B52535483699ABD2BE797B1A3759
118C7EB3C4936241958C32DA6FA78ECFEAD0E2B1F752C1CE761264843E776452
8D1CE6040F6471CC8D931AF1F50554912FF28C0D009F2D8D1C38C94A0BD73A0C
9159A8E75B4F8653F3F3AF30FAC387B9984F78CF28AAF34BC66E14F655E59153
0CE97368A17F5A33C6154D80F3C3FF1282CA4B53AF3279C1415D122AB2E159CE
561A160A52A233F913B6FBED832FE8EA5D7DFEDAF025097800D59C5204ECE9DC
AB2998063339D2F35C55A5B1025ECA6D0777DAC25CB773D92F9AF58F62C80481
6C734757BBF5D9385F129C7BCFE3B63053E8F30F652C81C17C6D4D2A87D0A900
1B00FB3F203BB09B49D5394FFFEFE77AC70F0D4A8CF5537523A461AFAF503C78
1AB2E7C60493B7BAD7CFF2C57A6A1AFBBA33B82EF7353BA3962128C473D6F47E
CFB11A039612D0AE291BCD1413083BC4FA5EA155E11798FC9DB89CFA81578C2F
76FF5F0DD71D0FD17ED37FA3CA3369BA59746E547ACDE18A558D80F47CE20381
B5C377AB0704C33F71B332442050297489DC376C776160DFB4E13510D17FE2A7
DE9CF4C7C06114694D48A28D27066E4F72EC33DA76F5162A75CDAFAFA23949D0
ADB5909325CB174D41E00CB6D215C63968DEDD7E4B614CFC90321881C0D81F46
1ACE669F3E268F89C5ACB66244AB801542AB671E83A63E3A05FC1A46FF0AAF78
5F5EF9C347DC0BD768EA27E177E0EDC516CD6C6E33629AD2EA37DB776F679AA2
D609C844F228B1A9E621B8923FAACB1B2A90CAC1A75B8F08D4429D25BA2455E1
03AD85F26430A971719CD9ADE0B67A4DCE5A00E15980F72D20B07C84F0C6F685
9FCB6A06030FAABB8D704BC9EAFA26B42B9114F36B9523749109C04723B29A04
EDD3F3DD4F2EAEB87157D2491FFEE09594E7DAE640F710610308D86E3D6D4D50
A7050E627BEA62CF2C66DEBF69220221CB1A195A32121A34D18445746CB6AA87
CFC5AFA8FDB612A78756BB4D29A619B031E979FFDC9B35415F7EF24398041D08
9A738F0A37C566CF8CAC64ADDFCF5A10291FA88847058FC99A43121CCCBC1059
DA7F4BE39B70DC469D40301303ED32A7EF14C4B9474CAAB02AD605EDB1D1D614
7E85471677275B1745CDE7295EE9A410B5A6FC005D009AF762F9EF7497BD43D7
2322D5B3D6525C133244337F3BF228776C42BAD9E12D6D0AB7F9870FE64EC39E
AC4B92396F5CDC34495957FB94B9888081AFD965A00BBC5B6750451D31B87858
6C5D30CEE24B216584C9B44775223DF5A18B6928CF4AC9C2B13E6C18B3799E3E
CCB8BB9436199166D75671DE04E604B39B566CE75840C8AF7914AC4380DFE875
C12A66B2A583C08BEC6FE29F895400C6C21D50B3CF549909FC48BFBA1BB5A92B
DFA4905E529C70C9B5C54314A58E04CD7EA9EAA813DA87897736DAE66F1F99A8
1BBA325F0EA7A23060DBDAA864F535BCBE54D23BB1914FC5985236F2BE93CFF4
97EA426F863BA392982083968E25122E6101342FBBC12D5B7AF2705F6497B3E2
53C7E432E5DF6B61BD508E6F297A617D863E7FDAE784986B47EFD87E449835BF
F135D46F3E02405D4149BE6D5FD2B693AC09EFC4EE1CAFA4AA4AA4B0826FEC8A
5E04C9926DB7CF861E6F8BBE8B3C70EF07814A5740B9AECC0025C597DDDD9E6B
006F14755486E4DCD38D801B05F58469DC0CAB452FC8B48AB8E5F5AE346A6EE5
8851BF74C4BDD84F46FC3E233611505541012258D9EA9BB8CCFB88DC2F425EF9
C128038F8C95400E6E24238AD20F17EF48C1DEDDE8A4943008E3B4BB66C1D672
2CD6E464001EE18DF2CCDC22B184EBEF71BDF82B9873FC3F0B6EA4A812BD7E8C
C8F9449211984C8CAFF2097A9243D920AD9C8BFBE2928E8C79A84345CBFEF14A
DFA2D8D078ABD2AF9A4A73F79B21A7F2E8FC28D01D95D4983EE2DA67735DF7CE
381D603B9B1206D4AD1656003DB8DD8F686BB2859D938F54074AF8F6584D122A
9538CC5ED97AEB6365998D12B2D1854529AA52950CBF21973604C577B6F1A185
E2F11F1B9BD4339611BD2727362273C9BE6DE9831D49603D30632567D078FA83
66F0179132286731ED10FE05E6512617152311FE9A70884F8CB6F303765940A0
4819FFD462917FFBD588475BF7EF24D19A5C4C35CAA29614CEFADAFBD500880A
66A5022FC20F36114FF6F6799491D1898354E3CC39987C8DFB5D4FD605C76094
6AADE9D9B331102B88879A5715832764A64E9AE3D9C3288CA76CDFC531AAAE42
C9DA44185E5DE1A3BC7A08F22BC14C34B0319786A21251995512710A8C1EAAF5
14479A9342181EBCFF0DDC93564127A1EE53F5A7FC71D311950C6A76E5F8C183
298E16B31234EEB0F10ED30ED08BBC190B657CD51C69C5BF1B6C607511832F8B
E694056FBB753E5FD8B35402295E5305D12D1E856E777DFD2C0B885A4EB84515
D04301F4AFF70B590B8D520565B57AC2D4F6F033BCF873B61D7080D0FAC5240C
EEFD3285CD52483F172E20A17085A69F23C12B4E10C21797FADD653E50F2A372
18DBF349C8257918EBF9400400A96E2DABB0A5AEC4E25334B1D9C2B6D47BB7CE
D68DA559F05B1817C34FEE6884A545A9DF698C9FE95C11192A124278890243D6
D09923A9CC287ED2233DC6C11ACF910DF593C3C6585CA7C8D679E051CEB635E9
ECAA5FFD70265235C289534AD65E209ACEE4D4B772F49558BFE675D7198AA28E
DE0D9C92E39DA2299E12C69431AC2C42A737EE0F4784B14FD544C70F4520E5CE
6BBECECB5CB3CC4F85C8A7F259198C40F8686E98953A2AF1A7E6B48A40513F9A
9583B5504518448053F35CAF8BFAA9EA20DDD8A0E49FA5B084AF43B318FAF385
F34D685151939FD2784DCF97994476D85DE98CBBA0D7F6FAAED2A6ABE14AAA2A
B954E2A223DC22F3D268DB1B85D7F169575F3513CA99951A18614BCD54A8AA1A
F324D723870087B92E05EAEE2081C697F00B590361056DE780C33D0290CF66F2
57E223C416138FE974C66A267A6C8549E0584019749B81C5DFB8E0B6947F1A81
B02AFAEFEEBD02273E6072C22F581E1D9A10B55628ED03736FAA03854784C252
A50085F1C008D56527B4C2E2FAA0A42C9E9871368E653A0B16356CE0FBFED150
EEBDC2CC0E26953789F92F15AE9C19B29AF6EC0A4593782A599B1207F7EFA824
D8E5C2C5DDA6C0E18DD3A2A6A0ED9EF3EE7FAA86EF319435FFC8189C5C3E15A6
D3F668B023E631D146CC8D5C9E6041AD6B07C7533F6AB848E296D83A2B530C44
B73A5D2B48A554C5351714C28B6615915C568F3A5CCA67ADF530C8EFAEA9E220
9449D2B2747D0AC3B46F44C36B0FF273FF3E2BD4C9161EC444D8FD38DCFA35DF
7D956CE18CED82532C40EFA25C2EC1F658A0DEDDC8EA3AE9CF3B12889AB6CD0B
DE7D23097A973B643F3DE8E97258420F9BA2C650759F636A62DF3DC6E4DA8124
8D980C452C638A9A32907BC6ABEBC72DE6B731192CD2CC749C55056AAC333473
EDAF840B31E08031DB686D51ADDAF8F134BFC5A88A53C4784C9DC0D0114C8B49
875196C84DFD9A086884C6AD13ACD5A891975819549C86332833AE6FABD7868A
30C9A3939D09C0A4F2BA13A51689DA1159B1273D97A29167B1F89F9FED5DF552
90ADE2EDD04540C828446353F9375C38EF3563B9C6EA7FCE6A387A9540CFE948
05524360A2B1E87151BE64654EC7DF5F70702343B33E0A1623A7FBDFEDAACFA0
870ECA09C8F363C1CBFBA05F5DA0E482765EF0AFE8356997AF95C25AD0B4748E
47C9EB20ACB2D0EB61788B21E2C892C686935409EA9FE3B84FA41CDB59CFCF6E
7C9CB5069B2DFC3AE37CED60B8C169FC12EB366A6655C398C342DB3CFCECE28C
EC78717524DEDF05F254BA650F2386720563B55CA9D7AF3935DAFDF57168B663
9CB905A2164F39ACFF426DAF60C5680EA05822A6C7B372CDC098D4AFE6BB05DA
F1F1399909127F45C13FBA74F1DBA79BC6A26960E2FDC1C93059FC4E60E5D6CA
D1A0C9F24A3530746F2281E0400F7760F75C0F7AE4B96075D01A506B3DDEE44E
DB1F57DB294575CA7CD57D65F37CD3BAA8285538734850D27CB57F5C20858379
6EEDBA6D524DB27ADDEBE9E0CBA6844E5E5A66C6A702E861963745BAD189EF18
04E43A8E63776BC47310DF248DC3657E0FE5683003D0404DC95713B4D58F237E
25CD840DF23BBE2EF9A385AA2B9B734377905D6C2F36AFF88F9F93231B8E3997
5313822EC993A55AE14A35F8D407A2BFBE3DC24F50FB42D5678F9776A05D266C
0C6C5591CBBFBA342DDE38AFC881D8E78E3574A8888047DEB4585D88E1DE528E
9CC9668B0C8844C72C7237CC4CCBD52A3E30AB0489CBD5937E2C7E1555A1653D
4728B74D7137AF4E1FB04CF04AC62CB7F38FA45B8809B4F806BA28C2F2A7FD4B
F28295AEA7536F667F1243F792D8964653D71BCA9C87857D5ACEE77409CE2864
CFDB9C30BDF833426483A0F8C50F21F1A7FB750923F08E506807EB964649435F
878807224259E950579EFC1FD6CF3F02C8F51CCC9E2056AA162C0BEE873BB11E
3C844FF65578B5525491CEBBFC38B12DE5CCA17D13F545D55FAF956F5EA1698F
046DBD92690361985CE375B6A7AB6C5B8AD63C1A55456954AD5AE2A43AAA5804
B7813730B4DD759F52F1ED1DB9AD0F3B7A224102B9D97EEC9262945F9969030E
6448C42691F9EDAD35A2BEFA4D00F1972DDA7947FF9716E213C81C9DE8EFF383
57C756240C43D05A0536408C1502375CEE05441147585AFAB3E1B069CBADA561
394C5B548186AF41B218D72A95BA3E29C322BE7F5CA00AD443D7AB4EAD53
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 63 /emptyset put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F4DE2DC90
B8D31A953343D5DB78B1F2CC6CE631EC7E3D0041A823DF2A4702AAC0F0A2F018
E5ADCD42EF2EC8AFF6F4705D30042BE7B6F866C14AEA1CEE04DFF82BF14931B8
D297C38E6DA6E587C23EF0864F69BB0DBC9C1EFBBB97B92BADC336A4AFAC6A91
0A6B158DC42E975CB5D8D2054CEF367FB112456AF50684C41F80B1E7ACAEA853
B843CABA76BDE9582090299F423519EE3AF8F83AE7F7828B314B6E36E9127419
F274E9FBF5622C5E48D7E956532CEC95FB91B9A25FB4518456BD3BA58D0F6CD3
196694531D1A0EC1A2D69F138A0D661A72C3ED0EE761157679DB3DB67E170C78
3AA8EB92D0870FFF9DD1469A3DDF75512BF8763D5D69DE65328B4414BCCF8A5D
C3A66395C916539AEE6B7CE9558940573AD2F997C52F2B173DFFE64213108035
4D2CCB7B891E3C12B3391732BDD226EEC9CF80E09C4365ED93AC18C0A241EEE3
B24795732CA5C5850096848D4ED16647264B7C165B32BF55BD53861FC8110012
D3843DD2DEF621807E78674C7CDD3DE953DCA440ABFD3A059471D2ABD590A2C4
2EDEE0C6A35999D7D91305C6A93567CC9D3106B1F7668397EF69C17676C8044E
11D17D9A0FEDD6DA5CE5138DBA91EF10AB3B830920103EDCAFDF7103E0867E8A
516D5F83C1FCB3051C97702D0033408CA6E53CD4DD68E237
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSSI9
%!PS-AdobeFont-1.0: CMSSI9 003.002
%%Title: CMSSI9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSSI9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSSI9 known{/CMSSI9 findfont dup/UniqueID known{dup
/UniqueID get 5000809 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSSI9 def
/FontBBox {-99 -250 1104 760 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSSI9.) readonly def
/FullName (CMSSI9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -12 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 101 /e put
dup 115 /s put
dup 116 /t put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2919BE7F4B9C57D5509F47BD
4745A182A032F37FA4040741995B4323EF6C9993E308FF6AF1C8F64125BAA188
9BE071D826A37CE55C63C2C93DE4B979FC308E5DCB64C4A793B82B91846C37B8
9AC5395CDC07B1E4E30BFC0D9162F2E9FFEC633D5497757C2125C9187C66B409
B40ECCF5D50B3A7DC73F5E63D0672E5F940C1CEB5C7CC98E545EA806404F8709
1A68AD8916F63CDD4DE9442EB9AD09467F05DE4F1E754DD3949BB58E1CDE4FCA
48C3F1E68174E39FCF91837F0926B95A7DBD5B3441E3F2DF6AD804CD9148FD75
6AB13AB91728F1DEADE321418775825B384449F60E8DC0E034FB977A29A0DF90
CFFEC1C3BAF46E55B61C4C5EF5536E23DC87C2909BE363EC4F0579A42DD80DBB
6BA658789EFEB32DE93050B0106C1068E5933B0DD21336F02FA03594821827BB
1DDCF6E9328FF85E3C82BB3E550BCE195F33D47A206E3E45C903301C8A2DC0C2
6D77F33CD4765FD1D6A7EDF19A517ECE1C27B8CE9D1A028B34A51296B2A5AA3E
89AC93B631910A882105F6F301575843B4FDD0EF77EF93D39969C3EE27D279E1
A561E971D4B2DC73590229A4A89FC7EEB14B2DEDE8B421E7D5B6F388BF8DE5F7
535417A9DBE4604EC7112C21C309F64C6DE29BC78DE9C339AC70DF924533AF71
DCA79B031BDB2D4645891DA3F953ECA6633B4911575633D2F0FA9BA19270544A
B255B383596E8EEEC34D52FA714BEF24C4CABFB93D9CB1856A0C671A4ECA7C62
EA5242648A84E7F3BAFDA9554C33482C119FD21746191929424A328CF3BE579D
BB38EDE986779105A123063A19A5BC99E8AEA142C5F19C5887A18530C65AAF1C
16819DB52D4571B737D4E4EE423F27D1B21A22ED23E74015D22F62BF2BAFACFE
9FA960A7C237A2ECF2A61D6A0AFF2AB1B2A9C328A6C9FBFEA530A21205BE6F0F
63F46EF1DB81D7D62F1E731C9DD517285E1239B5A635E3FB87BE3FF065D03D73
875193E15C04B5F61834FDD2C5CE24BDCF72A09FF873875A247BD395A2355162
A2D5897E7A4CAC89F119C10B62269EE7C6DAE8B3BAD2E3B84A07D37D68319C93
C31B4C492685C1ED0532035EADCEA60CFF240131215190585C8579E73F74CDB6
F122F00E9F6B5AC3817B1F5B4DE7638A61B56C96FDAF27F527077B50BB945DC8
E52600EFFF72A6FE4C0CF49C08505598C801D225BFA0E4B52BA5392EF0C460A3
B10E7E3FB909A241BCE71A390365EA01D27E20CA1AF918EC59B1D62E311068F9
3874C0BCA2DFBB3DBB43BFBCE2EAF9FE2DAA703D22F1996B2386D4698E03EE27
7C895DCE839B9421A04A0400A474BD98F17C15E73047864FA0EB15E31D83DA89
7666483DA11C58C7004519200E89BCDC19C312264AC5494F47745049CD63EF9D
9E2FF6C2EC21A75217A9C98FD7B4EDCAF7379428B9F2004BDB86AF07C994BDAC
3BC2C1D2D7EDE9CC455D382C7FEDEE37519108BA45C4F6F5912C4C9B5C5B8E16
D5AB8426A51C702224BBFACC6762D8F0F43E45D164425800162DD51B548DCA25
58BD38DC41AC0F3FC917742CFFCB9B115F1DC41F86F1FE841E250F1B0F2F9025
D995ECF331F9FE5804375F705890E9EE0B46FE53A7EC41AB8389FF7B2AF323D3
06C0320E451E7B5F4DC34E6D12ED5DD3B582E9F6062D896DA9F82BE7E80C20BC
EF658DD1A4C6254B2C943E4A6C5F13CCCD723E72A8A15A7BCB0EAA8979C2391E
1C975AD66E18D3F2A9F65156EF83623122A1DB67ECE7C27F942D8D81A11B4C72
5C335F258CCD234B3A30A3D7E7FF4A6BDAD60A6556EBFEAF9C81992D64D6FEA9
700D58ED4ED3918155ABB0EED95E3D32EED709D8B281F171211D85971696265C
9E1F791E89F13366E181EBB86B46304353B8C392B04214681016E3B2D7D00478
70FE1972E361A6D5BFB92D3FB23864F60EF0508821BC7F745BC9E6800EBADB26
CFD66C1EF4EEA59992057BC2383E74F59C942183F2CF9C2FBC530D548175EF54
B0C3D96D706CE5889E23733219A110E57DD70D726A53D7C4AC54634A4AF37794
C5C08B707BC7D842EDD118E4D8DE815CDBAD0B642F99B917AA058A79E73E2C61
DCFEEC7591744207E38551F58342FB353A991BAA8A1D5E07CC19609ADC4FAD6D
8D6D3C6C7D80C4758273779DA49240B6EC102C735DDF1AE067CF928F2DF4BF2A
72B4BDE95EE0346E406D506C960D62C8CEDF9B24CA2A9981CFAF3FCFF800117A
5F68DFE687E6109535D7E259E25D5EE4EB80230C537FDFE8F8732315F1BBED33
3535B72947B65ACA390B176091D416BB5820A8B3AB7CE6968E5067C8A63981BA
D176FE88A0538D601EB0D0EDF578857D800D33A5FE7E6C047897C2CCCD05EB80
0DB22DD7585A0E1159FA78ED577B92060A5B16ABE654ADDA5824E0104B98183A
6355F261E249F06D623D1CDF84E7AB3009E2DEBA87440B1FD6E41CF472170D07
1C7868A4A0B27F47308D842C6BF8B2A87581DD4A31B82A0313E48E4B85A27B99
A00FF19C3B627E4BB6CD546872816A5712494FFFF5332670D94D77B8E6A6E77B
56B3AB23D7B3C4F6D9B0CEF30DF59F9AFC01735C9FDAFCB47EC1E393A073D64A
5B34AF2CC561FD032DC935BAFF54B3197344A78B43C9029CEDE3CF20E6A11AB7
CAC4A4EC66ABBA50A43DB089FA8717686F2662C92A6C420A649DF5D1FA2184CA
2E09EBE398CDA3E51940A6B5FC387B03914A3FCE64D2828973C73876FC2F4BE8
184D321A1BC2C7EB77B0669699C8D11D94CAF8D576E3383C25DBF20AE3602A23
97E877B36D0DD07852818C7145160FCD1B95AC63A0B5F21870948E798648641A
7225E5646FCFFB2B869BE7245053BE02F8F6860AFEB9A3BC352E10C483178ED2
22B2E5E6F8636918F6DE98EB5D5866FA4FF754C9B37AD5312E7886AF6E1AA30C
AC84609B36BD3F836F97A1B4F48B2325B33129BBE05092F74F27AD45E1CAEE8A
0F42138C1CFC25F3779BE3910E08DDC73D78A6C7E13BC631D92E3BC76BDC0E7F
7C8D2546049E78F75ACDAE3566B87E6053137AA98AEB88E617271926460B9094
03CBE842A840D73DDCE5498506FAE8589821D3D53828DE8A8495BAE829427586
4C26E2D8C499F79CB9E84EEAAF4A8B64EFD04FEA979277B1BC51143283363D4F
4CE424273D69AD1C42A2FCE5A5A5ED6EB2521F5B16E57C0BF19592ECFCAAFEDF
0F4AE836644F6FF6B7E0AC4F94C43E865463258A3F8A0C24D400F12E1A37A026
66F50C46A4EA0849E59CC85B7B90DB73534209D0B8D7D016191D85BDD57D4B9F
F5A0206BA114238B2BCBCB4F5AC741E4BD7472BB66DEB311DD74D98656CEA7AD
8D64F59D715C357EFA53CBBEC3D3B75AA0CC77ADDE4541AACE9939C6B59C18A7
B35A74C25D15808787A0EBF6A127915877E8CCD7E765EDD656849471FBAA8B3B
CC70A46E3C55B300042D1E142B7EBE8B3761D210192A1A66E0034D5C1AC39697
0828EB4699F771656882B0E8E73FF92D0F9287CDAA0BEB3FB7A00646128321A0
BD41DCFD7CAEB89955F8324A426CE6C935BDEFC3A1E988361AC342E1A8D67E4D
42F97E8E2DEE23DCC7908960FAACD4FD85AA2979AEA6DE739DB273E0E87FA70B
7022E8676B7448841161D67AF07CF1D6776BDAEFC876877F18001FE866F35C8D
B3EA3A498914C41ADF9914FC0FDEA8733826A31D78319E3FD9B8CDC95DB76856
966E7B06A6A0BE8D77E7A645C20725DD30C603CFFAF6995EF7EEC87296997CF1
E4352108A152BE71DE3682C66E9402181827195086F56CBD5446763CB4F3C944
0C5B8FAA9892E884F72CD1D6AC13270BF6B5E24FF80B6CEAABBEAFC3B6CFA59D
0CEAA59040628446B4DCC9F10363DF44D5752647E8833B18A0676A40375E61A2
8DDFE442F9096E4D81B7FF38803B5199F30B3C33FD2C4D1A99952BCE06ABC519
B175F688AA910DF00031A105C0A92E0C654F1E6443FC7B79562E2F84B18628A5
7C97629DE1C7D527220B549B2DBC1CACF7CFC1E75CE934DD0B558461FFEF478B
8A7ADCBF66004382B436667914EF030662051AD46077A59E8DB97C0955DEE0D5
274090A09609214E52A166732232E4FA084C777997C4B272C6A0EE5B7DEA905A
ADD96DDCA6430A8C248432508AB67B76CED5CA36C8CD958346C5F3F3EF5D9A80
6285FBC7F43F08D55E9128E2F250205EBEA6C42F170379AD3A14A4B01E53FFC8
3D3360061F8E6C98ADDB43CA8A7269A665977F16CACA4C94A162525A37C5A740
8B61D49BDBD5135E03D89D3E2C4D522FC8B4E730512BBEBBB47C9DD6DF92ED76
9FFC375131B69BA6272B1BD3772261F3922728417A3D1A3FEBBDC65D2E16DD70
193287496B919933883D90FCB54FE3CB03F527C0CE6502848B7FF39791EC9670
183BDF679AFE2806919DA9E162B764984F60A126CC9469F8461A376DE04D2F03
1117B11BE39FBB436B4B4D22A58AE7DEDC304D4505A31EC67BF58E94F0CCFF14
442A56B39009578A4B96B1AD84B422E538FB20457A1F4FBD4CFF2D9AD9B86643
1A6DE3D9161D72263983CC5FF3AF75F7BC285C3D2F6DB72BECD4EF78306A808B
F127154A8A78D6D3F22C3338301F62BA990E5A3E16A467986454EBE0EC44085C
AEFD9F6BB842551AECB94313ABBEC6B75B51F6C7ABC07D5981832A1FAB1A8648
766B5BADCAD7F42E6394766B020B112100499D6F1CEF01B1FA15159794540C35
2AAD0186583E5D2B6AE91C9E8E95A8A4BC6227B675CB5EB2A6C1A3655EB32C64
B2FB79878F0779B707D07C16394F191BC55BB563E9B3256B3CFBC86D44EAEE94
A506AD7EB6F9AA69098377BD45096AAC9DE9283742EB363BF1091F5D5F5EBC65
DF6E66F55D71B2EF0930B76747C3C6B2A6F2A98E17A762E6E0B868B899016F5E
B706FE1C111734DEB1982458AB3D5EB8AF8F2D25F86EF14BB95734B021FC9890
DDC67774358390A025494F5694112EF7EF67AEBD5F4F8091EAA5607DDB272604
5A5CF90D0C791B1295EA228615A57789C82E06CE41D98854E984EF550F590759
EB5C82205569EE1949E2C7C55A9519C205C5469A3CE5E181149201706242C79F
427CB7ADDF4A3D2ECF161776B5893CAD56F120CA68CD2A7903C690A2DA750A49
BC4C55CBF90DDF43B0EA974FE3863369B972A8E52E16048B4FBA9252C10D2BBE
F6562BC6EECF54A94450209F3C749A8DAEF8A4B68D0086F490A5B2C82D6FDF5D
308CA49D46C5C3864938CEA76EAE15A6E6BC07D174A77FB79F133338BD8C6765
286BDC1D50E75D2ACC89E95C57EAEA4BAB8740DE6D11304047D81A23D1147053
D68758CAAC29CEB4C783F51FE36300425468590639B22B28D865AFCC4E0E2D04
95AE1F62742BCCBCC3036DEFFEEDE43B26123233D74770E76507AA6A7A51F630
D2AFE053E0B49C97933F0EF9DABC1A627BA80C90FE87944B38EA5C935429F6A1
6EE7DB3E564C7530D8B919E6630DEFB48209F687DAD586CD5757D47C8F2FB120
60180D92DF967EC4662C79F125E4680B4F501A9CA3BC48BAD7A3A09CCDBA7DDD
D5F97411091B30E4E02764FD85098132E0A44D903EBDD468A4BDBE1F832E951A
E3938EAE6AD8440426214AB77EA24924575C254475676D17311518BF9A5A1F4B
FBA637DC99FC3953413232C4A7E81817F51B85F11F3DD2BDA7A8C7FF2BFE4E51
4DDFE4DBF1B7BDBBDEF2751751A12A89491360B63066A6391E3E91ED00E22615
E7CC7F13D88CDAA41520EFC1394180BE2B48346C4AD08AA0239C16BEB8A99D62
DCEBEC489064A7E61B50CD45B537FD87054662D9A46D99DC99D127760C514055
55F5CEC54F54CE7E634B6943A4BBEE89A27EB4500758631A6B700ABB4C559CCE
9A735C9ED370656B6398E11624BDD92762EE422D1F405630066EA7BF4CFA3D8D
B6A63EDB6AA469A69F01B56E52267499A76C5F254D56F8F0AA1A190F174EA9D3
38765CDAB36B437BC30FCD5372650E9CE265B813FCDC1E8505B11C75B725909B
22261DE0280CE9489608DCF025C539A79CD308981CBC07C4D5D7074B6C555A42
68DE7B33A34A699C8221E16E7E1B128F424ED0EB55ACE64FA6EACF17270E03DE
EFAC6499E6EF610BC770D5E241D6214946854227FE8C0D6AE1484D89FC9B3C33
F75135EF679B2F193F364A241C59C2ADFA5E0D40A13D5886895D6199A2A614D4
783EA355B7A5EEAFF0E21C8829A78C83B11537535DEA12C076743C5A61727AB6
A693EB1FD179CE5621E0D50066C3A668A0D073DB10DEF66B8C7D0C71D4B2D7A1
622BE73173C670D8FF70A598D6AAF7F2D436B8605DA54DEED3A56E8159C53552
525497E9156F9D24643F5FFCA9CB1B1007505BD40DF9463A5DA229AEB1967401
2145EB944F9861399C163E0F29504C944689C9941DFF16580CC2B84B7484BA24
D177ED1F9ED44596927B398D114A6876C89BF4E320F60B1342FBD09D717484A6
839572129F52BEDBA9B91232870D88A8AB19A8AC3D2AF85BAB2F51E5349F0359
F1B3952B35ED25031636C2CDB9FA747CA4176C08EAF25BF1A1B88CB6733D0A2A
9C143201422E1B1E2EC85383D3A8BFE226E11B96180EC1B78244EC386BF5794B
333D90193E689FCB6CE0ADFD5024A252801AA5DAA236258D3157D16C1CB4716F
77E85288C8F7C5AB78523A87C055F0CD1C687C20ABB80259CF2377DCFD9A13DD
C3B612D581988F2E8F41AF65C2502898F17B31B1253BCBF1C67D300873AD8249
3689F7971E8AA695C732FA8AA1DCB884D4376F9EF6DBEF5E30FDDB9B55E46C85
6B8B061F57EA447DC8DC663CAEA72EC71F563404930A4B77AADD8AC50829F6C7
E5969234C59CB9DE6DEF9F1B00E1CCE2C469D459BDA1D3E3FD6C6384943C99F4
766BC2BA4774DD989118D8D10BF4A4E912168D0852B85CF12D7A1A0BE99C0FAC
88ED0EC05515D5025BC2D45AEA2318FB3D8D814401977D4E9D567B816F5A7057
8F55BBA5AD5B99338137812C544EF9DE8CBE8869F064F14EC81D6D27989C9E6E
D8EA5A6D5EB0EB87434E7479F3FF2F7053010A7D0DD0A9088E12A22D52114ED9
A16647BCAE80C392DCFD8B0CCEBDBFC9353FE84DE2C3CBCF55E78C13C0ECB7C5
8E5176366869D605A7CDBE1E528840F400C967CA998014C1D19006AE70D9700E
10F9402A18632D38F853D9986B642B03056A8D79947016D40495437688694C7D
1733F5E958C9432B5B94198B06E025A1A3CCB57C947301449BDB12B2DC4784DF
A3A874409500E8CB8EFCCFB2819C484B509461CC481A7FA87E6D578FC1A439F9
3F74490AAB3C6257A26E6BE28761D99C47A7F7482CE63EFC0BC794B97797AE80
B4625A924F6F05B1092206C401C845B752DB3F01AF82BD9D8ECF6F2D491C0A51
CC0AC7EE1FA0713151EBF1F4B28775DDA6277354DAF2A2611264494F33937C26
3FBC1300E974BF1ED37F55B481C95BD99CA52F224EE923E4BC9E083259880900
33C338AA98B622BB956E5D6E2E163C1E2FE93B6A9458E62BCA57B0C3F410F8B6
631F59E676E1089C347F7EF05FEE0DB5E8362E836E85E03ECBA8FE75086CA0AA
B97BAEF7F04769090D1F2C8D8B926DBD342E043EC30C54AE6DE50E9BB1C09183
BFD7809CFD954D41AA8C651038DA0C133E3B5813CF966973F770CEC84DF4F252
BC1BD0477D06DC533FE2253A2F4E6CD3D7B45AE4E64296A4764F0FF6FF630380
034931B36AB76B3966E107BB726392907D65BB441D36F5E492B25EF26E27FA79
78730C651193D80A5D6A6D2E1EA330A1AE8115DB66A4016B801C8A2BFC379A48
A2DC3322F7133792FA609E0676FA054E1B82677EDFE86FE965C96012CD2A46F5
111DA9585FDF9F14A5D001C2C3E42350E95428ACD8ADA7B3025203AAB593E649
8E4F79365C2C54E7E11903E963A489ECEA30903B2B6E12752C1FE520685682A9
60546C75B1DD4A152B073B7ECFD71BC538D4E80AF2A7BEE252F72CBD01FF01E7
132ABD1B4FFDEB37995F4AF2145FA0FC56732849A0A5BE1E7A116C75B4F3F8AD
F296C36F1543B36A91DD55FDD2DEF56CE1F58892BECC6F19A62467DE53782791
46AF72982B29CC502B808C03F9E2F9A4EEC45A7F72B2595720529390D23D30F9
390A228AE23E59F232258B9A883B90B9DA0F6D29066957B56B15709AF4421447
DFA026917757F1BA59AA153AEFA78E1E72610F511F4DCBDA037AA27E132C139F
5887CE16889B715E45F2757A04C57E3D4D849BE241D0149395BA503F8F5E3424
5A506EC7E28A0F60904BD510BB85DE73D8A9614B3B88F4F6E3F31989D101E0F6
D90CA999E192645E9E62F92D22CCF3DBE9FA7C43770D3DD91C3D0BD3F93DB934
ACDE4A00402D9B3C3593E82A411AA1CD5A540F9D166881E1E429014E72BDC4FC
08916A6679B71A24FB8573A04E84A91A0A311784587B4E764545B63C40804A23
F4BE657F8CED2902AE7569482905B369912E875F7A8004824D103F23B26A6852
E0C6BE9F0BE550B3A2715B9266913B67F03FBBCD9051AA015470E20310A1BA8D
D841983EEEFC2C30515E40F705066BAF9EDB667DB10E6BBBBAE57B5CA25D8F41
A717FC66CC744CF7DA8E5741EC57C315C209C2125250FE2C51BA15C2014E8D64
DEC572E34A01851D5DF59F3CEDE7691A9684
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSS8
%!PS-AdobeFont-1.0: CMSS8 003.002
%%Title: CMSS8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSS8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSS8 known{/CMSS8 findfont dup/UniqueID known{dup
/UniqueID get 5000801 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSS8 def
/FontBBox {-65 -250 1062 761 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSS8.) readonly def
/FullName (CMSS8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 61 /equal put
dup 63 /question put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C295470093CA270C6258F0D99DCD775
734480114DD0CD2931DC18782C4CCB90B6906CE08BF4CAEC2D4283CD44730A2C
28919598227F98FC5524B0CC92540E349C5B190DF5F2317AE46FFB97221BDFA5
114C21D5E8FB0D1C298EDFF8836AD72A9B2AA132F52DD5D3F30427563C97CC46
D241B7024B4CD9F1E0037FFABCC88D8CCFDF3BC6EED778074F9590733CD147B2
5B68387E0F19E6A81961077BB7640A3C0E27ADD72556CF84ECD981ECCB64184C
EAB8BD9B96A873D80E3E0D5B4F5925983C80EBC3A8A12FBC452582A0B37D3C42
4DFD22E9BADDCD2E69644AA271EECF366D63FCC29522FD72D6C1EFDB3597E866
61443179872395E99024F152F6D6A4FD71BF1C7383BC1CC27AFD2DE3DAEFC06B
6BA837BBEBD0BE09F6AEA31A83B1B45255DFD6FF33362AF8BCABEBB0D944B3FA
B85FFBA0B370B9035460905432EE87395E518B4B670246FAFD535774467C059F
DC30EA01C95EFBA4ABB41711818E23D7E69D32BD63243A6D98666BD46E234155
BD6ABC76F551C31B6CE2E52323A9DAD5C003FB116AC8A82B46ACFC45EECCCAA9
E12C2C8E3CEEFD98D49ECFB824E8677BC9CE9B682BB5A7117174E4B2A0B925EE
553713780CDF3A3A4AF1560343A8A448C0B5DCC4E11EDF5ACBBA0BA8E5B899A3
7321AA7D4B283AC9234978C2DD81813653A96F2BD129FA5F355D56C4E50310D2
0FAA8F304D8BF333F97A6CD20CA4BA7BE6DC1446759683933BB1F1617AEAD131
1C9EF2212EE7EA9B64E5ABFF45E1727EE82C00FD371BE1387987236F9BDBA4ED
A966658ADF028B5DAD1F0878064221D0469BF17CB4E738258FB5D92E9D380C64
16E95BBA6A2BD9EEB1A187A7231C53BD8ABC9BAC46CA4AFA94A4920FA805F67A
A0C61940F6826CC4539A6CD1F9900EDC3F720AE4FA097F1D7510746BCE2E67B6
EA2F2046613785AAB89915655408AC9D03201838BBA44F421D5F25CFD88E56E8
1CA23CBEE9C2E323DF1866D31F309C92281E514A87A9631F33B238AC6520A20A
346DD6A206C3CAF2830FE244F2AC5D894686CAD5F4BD1CC51EC0B547603BFFC4
F008FDAEBC93542A43B7C907CC85046313348CC8A017C585CC370604E40AC820
8B9D8F57A01868FDC93551DE10FA83DDA3E49E44C32118ED90FA67AB1C66B3F9
F80CF71131977ACCF4DB44CF1EC26AB363C5F95FC2523B5DFBF4D60647EB23AC
89CB971DCDAB3BA26846BA9317C051011C37468B21B159412E69DCB84A9F5876
F418908678F38880B95A4BFD3566A6EDE93AE05BBDCB3C4E240A5C0A06301896
69FCCC0B65BB269F2E10609B6446A68E2DECA905FC26D4F502CAF0EE9AB15E60
CF42CEB376D92D80A6AEE55BCAB006999BF4415815D0F5BA3B1FF9D2E60201B5
833FABE8B883847ADACF9B032721DEEE7FEBB583B89066ED9608F1EFBCDD09D4
3F3C2B7B03154676151753DFF53815F2EC1517C094B0D2CC5EC483AA93772D24
AD3B0084537B91BE1913A31C70750C6DD707761DD733F9ECA552D3F26825B2B8
3EA263488892C929DEC07E2F988B7F7657D53CFA5542CE336D35B462E5E8649E
05973AA54C0A4E63552004E3C77E5FA77F821D820B1620CC8CB3EC5B1D7BA751
16CC155DEDD4DB0FFD3009729F365670DF9472435557201D8E82341B4056D2FC
5D2F7C57599249DA2A99A522868716B076320350FA7415C3B10D77A6E1DC77EE
2D929A038DE3EB4735A4D4F5C8C340D6D293D57E83C2F379ED0EEB16AA3A2A2C
ECD664E526D918A3D0A934170B6E1493843E6AAE87E850D70DE65D34AA2A36DE
8687D57A6B6B1447F9A4380CC3D4D11D54CBE762258426C46B8DE6059E6A2F31
E748549310FF4362129080CD98E70817A06422743780B86E11101BED14BB6569
D36903BA8BEBC24A478CD430801082CCF49382D6F04DE270D51CA5BAFEBD0F8D
901CDBCF10DB97E2B059C8CF7CDB45BF931203D5F8CA4622DF19682DE2BA7924
47F78908BDA23C4E21C0ACD2DA259B23648B6F233EEE830E7B82DF4371F55C30
71993EC2BCC7BD6411690B9B1621903F358450976D6B6EC6B505A593A9FB7D92
7223E2424DD5AABEFF254FBCEF934A4D51949BA0E8CD614AAA3AE6C3ED7B37BF
5324BD4998D8D5DA95E4741B753AEE580FB3913770C00277C9F609B4DF3D618F
148E0EC7A75218AD788F98D35989F3DB94413E70955EF586C0995A450BC75820
F5490EB55E5D0D21343565E1FA94FA64A74377F87E55EE0EDDC8F4286951A4EC
ED6FB3B444206D89BA71A9723E41E93A9F6C80240437019F3C23DFC2491A19D5
29762876AC60A14404493D04B5537C1E6FCA67B69DC1CD859F9C956FECF4461E
EC8B6CD5B5A89A8A838660A6C3F47B79ACE3B05C0AA2F17CF2DA947B893B42FF
749E2CD5E7B56823A119629931B1ECF65C51000A10412668877178F589B4DBCD
24D39F9219C46BDDD6F101C6AECFD3876056CBB858FE0C4BA2BD0B5FC26AD5BC
7FA9E295E72BEEEC721300567B6894FC48FFE5E3067C538CBB3B77E386F50D22
F8DCFDD0E335060CDFA49231D157981925F1CB36110809C12BA28D2D116116DE
01898E311FAACEE0E5402CA30B64D3D5A0CA33E417FC322F2F0BB7AD3FEE2039
56A15DD6D1E86971AD3A5A9A27F33AB62A5A3BF5660B59235398926D6BDA33BA
BC43B062EEF199E4ED991518A62AC374EE21E8F1E1C954BA6D1493388F708D0C
961612444BAE019E1DC18BDE900BD7A781835580A74DC696BC512F7BBDBA2D0C
ECE5D83A049F7A3286B94FC446DB5C3F33CA2CD3DDE2D0E774A579831CFDAC37
9612858EA613AE6939CED001EE662DB17642D0357B80BA0F82ED306218DA8505
A613CD622FA998EBCDFB7BC70F4E4C8F1F43241FC22FC5BB208F4B20311A98B2
73F30E4DFCEC93875CBD1ABD29ACF80585F59947F23A96D218C0CB8BDC1C49F5
70DF3D49704CBA9A23294A88A2AD61811450921B1E5C3C86435C55AF87AAF6A3
A13709082DA9C47D372A4226116342DECB14E4A4ADB7598321516DD637B64148
12AB17AC5B2EB25718856D50BFC8D64C78DA6E5C145187DB0325C30A42013A81
590E58E74094610207FC70BBF1A497395939B42A6EFCFABFD9D43221DE484753
DFE5311F1845592B4484B1CDFCC32B4E068B11A82BA189D2268D88FE63B9C6E9
20C9E40B543B5C401265D92A932476DAEADD4D3E2BD6E4DBEC0B30FA90A1924B
41D2EE9D8AF2D8CA79D15518141665B542C696C2507DD2F4D987EE5E22397FA8
FD80743186872DD67BE58103321467CF3F4B8898E66584DBB9688B9C78873CA2
9B72AD7406CDFE8B58FACA2904869FB0EF126DE299CAC08CB89F60561939D75C
2722CA57853372C14F5BCCA5C4FEBCEB0728BF9E30140E6B0D6C034195FCCC89
291CD818CF66757EAEB0AB5A9D5710988EBB052850DDE97BA0DC0B054BDF5172
2002AD6FFA44AA5D9D4EBDB6B2C04E8EF38660D9BC4C995BF37DE078C279328F
4C360B8EB337D798962CACBBDEA517A5EDFAADF0D445FBD1099837F9D689CD2C
E330CF587246387EDDED64A2F4C397C1B2BFC325B39114609EF57DDCD7B93C53
811ADEFA323C59441ABC447F683B5EC43870C057463DD502E9B9DA7084C3BBFB
2FB864D26DF1BA41ACC815F2A71E96D2C6F572E1F7E4A224FE57CD605682F98B
AC7BDE4B85A4C11D58981E981E9FC43B87A368BAEF78AD87B7DA0FE403AABFD1
CF414CBE75C0E9E257DADCBA035E1BF05C4E17FE92309F18633D93DF885956A9
6C27E77540F888B8336B61598CAB04F3B5A1767C1ACFE15D32A25E5B1BF51FFB
CF3CFB25CEE7DC95203CC44805A935D5A9154A89FBD4E465F0E599EED4033365
0A31612F37BDAE8CC85BBC67F7E375EA68C2982FFD89284B027501184C4D2232
CE0FE4E905C4B504EAD009F047FE627C79AF9EEDD65D00A3858F88E699E5EB45
4957086CB22776AD06C317DEA41880D88F0EDCF71B4ED76BEE665B7937D5D0F0
E568C7615025172086BDBD69670EA154CC52C85CBFFE88C1A4D1AFB6624EE667
1B5BE2A31FCE8B2A4B03BC5DC57280199CC0970EBB636DDF8DF54C4A8CC8805C
AD63CE866FB20C64725AE4BC9F0EB275BD83EC89F2F9CE23A084B45694D8C3E9
3F3D3C1A678690877E8B1B77ED85D4F6E03DBF1F3B1D177E330475F172E0E729
63EAD8034E6100B2A5773E2605180629972DE6BAC0A8C2F9580E9F1D2E77791F
E1D33C2DBED3FAC47DDF1B74FD02583C3CFDBB2D1CC2B735C02B14B7AD3733CA
1682944ECFAD673A9AD5E80B6248FBB6E5036EA7FE5CA8C34FBCA6DBD0E76EB6
C2CB89D9815DB3C45742170DA926E03493AD86BB19A1D3FC623BDF1C920684FB
7414EF69CF39713A9495D8CB678BD4592B53C36BC6CF93505B8E32311D42532B
5661051B855F01A9B3D77AE38879853AF0FFE2448368DDFA3EF1DEB88AA055B7
91459586DD2DFEDA192306DF7143F998CC5D67C1CED313430E5CC3F9CE265747
8582102111E7AF9FB94D95B82D8E1DF01F04F2A2C22A20207B59C8976D56833F
E3B79DCB727EE7537476A052E92F7C3D6A625AAED8F026F22AB59EC0F86E541F
BC082D8E35234A18192862EFD232C9950B1FE0BCB91209FB540DC5729B9E36B9
94D0913A8F01FB6CB16DE85E6B89F144111B1D911DC527C24917D909F1CF501C
1AF2923EF71530F21F9BF049A56C7AB3249A420C28954E981EC464F61FA167A5
C6084661808089EE7DBD80A2D92FF4040B37B2D81A2F5A568D461BE1C62B0FD1
BF6D1063D2B5DB9CD48BB2B2AC9CEFA543E0AC5C86C462399C1E82F25A157282
D32D538029ED22CC5935E63FA076BE22D3F53B7D7CCDD344D68B4E73F87A5F2C
691FE68C981FF7CCFB124506FEF93F36F7181075D7BC6FEEC0E35AF57855BAB2
44AF021C7AD8912D884424E8BAEC68A5562B881793A1B47FD338B1EE4C0B8583
2867C78DBC2EFC8BA1431DB1C8622C99BB2C2D4D5475BFCE87B11762427867B5
7253463C6F2E1CF5F1DC1F7851F2EF6A957CAB0C0A55076C59A6FF9237917C08
5F97C2CB4B5CC903B76BE8C057018CD962EF90E1C0CCEECD52F2AE35A94C6EF2
D99DF4DA88247C920623978A1DBB81D8F171B588D617AFA8285F6147E889523F
CF11EF4BE498842D3BF8E811B4B33131416658E03293AD911516D8AED556F7E8
0181391AF36D862F5F8B4588BC99585BFF0F1ADE4BF73320158DBACB2784768D
D9794E2B0F2C0696E5ECE5C7A7DE78EB5CAE85EEA244D43D0280D4C87B6B93F4
803718596FBCDB61A0BFC2DC666128E56F3133B9D4F16305940B50ECF66D80BA
06C0A73C02F689314F1B4FAC22D16BB1E414C6F0A1A548AAB1364D2CD9DDFE5E
C8887964D26BE84986A6B1246BC306E6343CA376F990B77BE8D68A4E54304C3F
250B2311586A1D1EAD2C0221FE1828CE8396DEDEF13E70E0AA75FFB6089DBA9E
9FC3FAB43B3633C8EE7598619A0C6FAE2F25274787348E3660D0EB7212F5CB38
032A41A54FDF14B32E721819AEEC54E8FDE3AB8F0ACEA267B01081F284B008C0
5861CEB5C236729AA17DC78E92FE1EF9F047B53A59F2D1D6A6734D0413D1A51F
75B03234F4775523A55978C73D5BF9031EE8BC6BF9E2637DAC07F5AAF2A6C41F
77620B272300A78E86F71F16EBCE2DBFEF4920BD3F16C282E0BA4C872E5F7E52
7ED2B663FE45D4A36A588D228D32E2861F26AA6FA8DDBC8110F4417D0DF29285
F06B57B1720D0D13828A4DD68D57BD530FEB9C3CF305594B70E4394BD60C82DE
A64EC17661977B18199BA661C48860919CBEB56AB6C32848D51733F1E959EA35
DFFD823D92F11065C643AA69776F71163A60D4941B753BBB4A4C0C47BB1D965D
06C9BA1FDAE47926F37C0C5B591058F68FC1DF3933B2BE014F99A53A617A19CD
8BE011234D48CB7E14D31B02B1FC47C8BFBF04C4409D32CB454E8FA0EF9AF16B
8AFE9FDDC41F6A23D700D4AA922A0316A895D240C5595F21FEBA98FE0E74B762
77FCC80F4950A8C55B4A008FD381E9C0EDF4427CB324BE4ABFC790CEB53E8BBE
AA90163A7BB19E2840FDA404E830F5478DD69B85C5E69573D8CDBBDFF41A8126
24A6AB66333C749C35BE314777CC222D54FF2C4C75717FB938724EEDDFC2EC1A
8DA77B5482E760B68F0A2D240332BD48803004BC157C6E8E192D512CE83D5572
D388BAE80AAF5E7240A73CDA7CFF7F8CDAA4ABE1D3BF6ECC3641B6BD1C2CC703
275D48D62A15E5A85F003E76D1EA7DB65E3476CCCF6B504514AEB1FF1263FDB9
81FBF1A1873FC287FC6B6DB11F0FB463637D4F3280EBD19976588F900B956FB4
36AAA8C1F040300CAB9C4F624B22C1D3D6414B7CAD36B5AEEC90105B5A5C2129
4CD540B9D0129813BE7E20870365F8C46FEC92DDB64D0A6C7C5B9867A4592B7C
124B1B47899CE2D1C03811AD1B8BA253B0D29DAF2B53E312827478DBA274010F
C919D122DF24C1E372F7F3CA77A2C0EDCDB2635F4136EA0C202D4011346902E5
1524609DC031656660302CA36D376245A64135890C13A11C0085861792384787
D0831FA01C11F1E7B4429DDAA0B3A7EC1DC3CFEA24C34DA4BC993300F12A953E
80C8BDA360789FCB0F1AEEA7AAC310D0C3C56F43F7914C3B037DA02C31EB740F
2B1A696E0E5553656942BA567DC9C4D3CA06E45EA615B7B5674016DCFA07C0B4
285BFD9D551117A357F4BEFD58BCE60661187A5FF20D27D685B24BEEF563F0C2
B2CFA2565112F7F49023CDD405AF3E54FF994630BE678B0D6E1CED514FC93F7F
63710D289026CEE4B074253E7E0AB1DCCAB57DA7A1E2050D2B8D3D75F2AD7423
0B0A7081DB1FA44055620B0A2CAA54666C5EEE3C01540D96ACAAE98644E1D210
E0E020214550D723431813C031DC7DF0D177E82AE49798F8E0E5AE0BB8FF664E
4793F857BA380297AFB977065B7500E4C0AA1735AF4E15703C860A016F19E593
319D14C497F24ED8E42F3FFEBE976DF33D697656DC11A8A7C6A60219BF63F186
E0FFE55594B31E5C312DBCCA08E84E94E8BF57CD5F5B70EBE59F0D41DD3F6B05
F7635EA92FA9E082C80075A5A5F684160AADAD501BBFA7746327E3E606D1FAC8
EF7AE7C612371BB52FFF41A97A349D111E861A83C9C48B0145ABC3582FCE43C5
D121F0EB6F5D219E52E2BB660AA1DA5551D6B66A732628D640BF9D8BDE2BB3BA
046FBFE2E28DB31AEA2ED8F9405A39C16C3800E9B5611B460BE0F6716F2BF79C
902AD4FA3B6656E13E9DD7A785C17F28BD4D646D66058721610CD756E0D18D32
F09C740B6023DFAD45A718BBFB2E65544D4754A5DB23CC7988A3EF45CD3786F9
E100D9684549A16BC2DB736D43C293097E082A968C27F0C120C41A53E3464381
F7DCFA8B36344EDA85F53FF65BCDACCDE7EAA41A6D38C1F420F8F2E287AB0F98
A0DF7D8A6CF2E4C78D606569BFB7C51495493FACED57CF2D507DDD366247D807
28D73CBBDE2F4F666099411B1FD2CF7B93D0E9AA161024C58892285BCAA65E55
9FB37468777706D2C57A0DF6D520844B56D62CD10F2D7B02D17F97E4F87C16F3
9BA09013FBD7ED8C2DBBB432288E598241369B9DA6E3EE324290D73BDBFB5448
E9D7142036C0FE538F18E866A50DD23152E2C096E1045E7777888AF5CEFB83B1
C6FCA18A26E83D75AB66291A5A5A285DBB1B9525919564600D71A767BB03A8BC
7BF24CC3B318BBC0F40C79835DE62368052C09A577D0B45022C212235A2DC0C0
042B48793475569F1036393C28C27E57F3B4ECA53748EB84088D6D0653E8065F
6783F91A3F1A70E147A56A6630E5D20931E04BD025DC8FDEAF158B62BB902CD0
F535C03B6E07436B6560B4C23BCF60F05E76FDB386C31B35A7C9DFC6A98893FA
DC15213545D7EB212CD29841E176122E3D1E128D7284E514F58BFEF59AC638DA
A66BDBAF071B0121DFBF5BC78580A7EF7997467C254D74D509224670A91697FB
E8DAAA2F2AFA130DD7C6471FAC0F1B305125EBA0BC7DB7649E845B1A22564F63
3E1D32CCD4447BE0C2D6DE59B1BD629F4799247575487DD9B4C75CCFCD3782A6
99B8F4E78BC30354529BEA522C4BC0892953EAD550817FB700822EB157C4BE8D
E3676CEFC459AEE958BF6F00FAAA0421EBA206AF5CA02E3A50C3275885620061
EB2DF4472122948167369C31ED3E3B74F586AEDFDE61DCB3DDA0653E4D3E85B3
22D5E03AFA09D383749CE7FBEC65587C59A4DDEE22814C3550ABBF3534774D5E
A56E3AAD601EF3B6A99E2E718AFA2A49D2598872D49EDB1C9042BDF2D9570804
224348F8292C4BEAF6A9A382631183DF5B82902AE19781DC094C0D81F278D5C3
354C175115C1E25924A05085527C2DEECA7A8572D471E7F05B8D2852F440BC61
4981CEF796066487242C537E7CC87C1C74AD130FD9666459260A11C122D00458
85292C4BCB7F08C60FBDC6227B9897B584731BC8291B29257FC4ED0354F41B2B
CE9C99F67320A0530FD3DA703EBF380EF4FC4F7248D92D29734FFEDE6B5F17E8
E4CFC84CD51CE533BCF92CD52BE66F7C48F3DF64CAF639D2B42D8B4C8BE8D58A
8C2E083BAE7F8F731C1AABD5E6C168CB6017B7D6A8FF528CFAF0F59B57EB8CC1
52A4BAD6BB6D34B015536AE5A43FD92EA19DA56983F55DAC392C3BD284CEC5DF
AE9AB62EE168D630C4E4B612DB86621292E5BC71ECDD9C87C2352A7D235B9DA3
543E3EFCCE72909BBACE0B632F34CC535872ED743C35222D6E82941506B9503B
D34BE21F11D460942D2EDDF4935D37D3E175481040282DFFA777BE07A2C66F79
956D5020132D5A73AD9C03ACD89CE16431BBF41EDA5E813BFBB9FBF7E1311551
B1D86F85C68C37581B82DC911AA1AA195A938DF9F55096D6F9CA7B0D99A7D4C2
31B03053C1A4BAD9F15995DBB360F1332B184CE5EE3CA930910F27AA5E060E60
B51AF8872CA441C8AC0CCF77CA70652EBC514C225AF2EAAF5E957195DBB9D31C
B6B735B9764FD6FEF8B1725C52F497B817AFC5AA9DFC2A63D704A2BD4A69613E
B1219B224940BD4D592C4455220088AFBBAAF22529DCECDADB8EB5F3ED93F717
07FD2E20DA45A240B9731EA8D09A0B8ECD5141B7070D5182352542A4D5D3A580
DA988F62AD3151D3ED863A70693C94FE613E338E369F1D6B1F06F3A676F5389A
1E2EB2E7D304AA08CF25145A1F17988963678608E5797E2AA2F02055D883B63F
8A00400CF3D766D52CB7B17C5FB564DE62BBF19C6A7DCD35338B75519CF393D6
693A7FD7ADA75F6B279E4896FE4198DAC4BCF6F544EC03C0385101CCBC904083
F4BF0F877C17DDE949E3214C1503F92D1A7781F8E17CADDDFEC449F48EAC5E9E
4108B152BF6D0BBB684C5D243F03C0875C45BA2C8A90F3F91F5B2596CE96E7F1
B5175F70B461624402D050EC27DACFB94D0A102D8A5BF7325619C2F03D563C59
ED4BD8956E022CC5F7D31173D3DB98691F71CB034E99D0C4F41EA053ABAF0587
D4E1F7AB4D92B2BBFC00055A3F29D362737A8FF84D0A5CEFC3743BC00FE021FD
9BF89711F26EE85203B10CC89834AD3BA93A24B2C5844C9B37DB7B9DF2E52F4A
E89639E76A35F7B6C5C3A60DDA3EB91C246737F6516E20C0BF14903380608436
9B763665463270FA0BD2A7F0EBE9A7A19CA60FFE01E63C0FAFBE0D588B2A1D28
5F6B4355373F4A5B8F17CE5C691855BFD58BA0AF57BAE24CEA932E0605AF0E18
6E1B246F43490B6BA64B973618AD8EA246D188702E647026BFE9C8DF690CDE8E
CBAB1C047CEB062B5E3D61975229F9858B39541AE4B3B1119EADBBA9FC3ADA1F
AE1447375F6985C692FED61DCD50EE7680CACE8BE8F6A5E4E0CD10CCA8041730
7C48790353F142C4CA3E52E9E08BA4DD750903C810998A4CAEA3A54F07C0B882
3D0766AD4CC1A6E56ED482DE5E21E254D1646A5826C9CAE4D998AB3EFAE2345A
909161ED9337570A60C53024B03DD8A689CDC48EEBAF9219312E207A4E997361
B19576CBAA0BF44228A0294699F8D42E76BC89C401FF9FAAE63CA6EFE97CEACD
CC1DAFE0906DA308181B205D10BE28F3BDCF8401B2E71F33CF37E16FFF9CF2C6
BEA87E2D8A4490B6B8498C2F67209A36255EB514738C62A3C7081B286C62CEC7
E610648655C35FF4B5DB36770EAC071BAA501DCF82481560369E0B7F2F210C55
F60073B1F953F2230D10AE85136AE67694B3D606DF45A1578D2C4689439A9ADC
E281F6096C694F207EDD1184877C265FA1DA4C2495585848BE6622400E264C3A
CA45AB9CAD7B59E1367DC85D5744FDEC08E3213723A529898AD4B6367605D17A
2EE6F1FE0614EEBCD96C594CCBD796BB155E69A8C01C49D5D3CCD6AFE6A9700A
C230A381EBB95C1EB264B96B0DD33B9AA47C35CAA1911D3760AF43C0468011FF
F06EC9D8496BDC6595D07143040F1554391B06FCCAFD504F27DA154089CFDB46
394BFFE02050B825E5E7EDE4B0793ED89B5090B0C5B91A3E2CC7DB2820DF4CBF
312E67CA45F4749C0E546F3BB13D56B5EB7A3166E614377FD3EC005EAF32EBD3
8DAFA3F6719584FD7AC1DFC10FBD044432EC6A76475A03ED624D5CD7944CFA82
D3F223CBD1D57318799131973178E30FAD8DD667D10293E0AF9D961D193742BD
8ECC9A6349ED7B90AA80DCBAFFE0FE585F8BF148259621685D9A908C3D373200
0512A8E62C3A86654202E752E6D19C2C1A6A8C1A6F91AD83385EA4E6ACB7C308
FF32110146E156F579B386BE390FF9C185AFB4FE4ADBFD426D905BBF1A9CB666
88B6F83A6F3DCED5D3DC32A37C5BD00D1D94688FD5C6A21A0B22C204358DF039
B6C97C81FDFD36D88A240ED315D7FD147750B42C46904F3C8D6C452CACDE4261
CD95B4BE8C224310D91A7099D39AD849B1F930BFDD464449E4F085BF3E89B7A0
0E4F15D4EBA01E2B5028B91D5ACCBBADDE4463DAC50AD676E6FC3C861C2810C2
0349A74B507436003A22597B9FD4B185BD2D06AC4F552F37E892B35628F2DF4A
8AC1FDF53216F34ACCDF334C60516ECFACB4C76DFF0BCBFEC8569AB0B8A7F6FA
F0EA3906F89648C86F75AA15DE66CF62BAC8DEC4E1E3FB8B5B84DF43647DEDED
2797F46371A3DC6AB774B46C861503572B63B9EE64A2B3574EB8780078327DED
E6B710F2B1FA5E05BB1263
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSSI10
%!PS-AdobeFont-1.0: CMSSI10 003.002
%%Title: CMSSI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSSI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSSI10 known{/CMSSI10 findfont dup/UniqueID known{dup
/UniqueID get 5000810 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSSI10 def
/FontBBox {-97 -250 1077 759 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSSI10.) readonly def
/FullName (CMSSI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -12 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 46 /period put
dup 65 /A put
dup 66 /B put
dup 73 /I put
dup 85 /U put
dup 88 /X put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2919BE7E94DF619E5D4CC604
78288A019B254A5A0A8E2D5ED465C9DB3CFEF0F444DA2A7DB2022495EA1B3FF8
BA3E769C503BAC77336BAAEFA8F7B4BCF9BD63253ABE621C7C696DDD22E0EDDE
ABDE1706338BB5F604B4F42356E2A96751B8EAF1112A1BE30B618E7F7BAA96CC
A264B5EA7138FD007E2CBE19B1F008AE13B47252D2956A06299FB28035624C39
08E9E5A4BC08DADE08861DB9940F6F0FA67E97E9A73C9F41525E865D0BF68F8B
6D48D1595EB69B3FF78F5F4B18470370BA219A010F9B5EA904289205DF20C7EC
91A2B866BA05251BD3D00FE5229CE2D2F220B6E25DA5B3C0EAC68979BB312E2C
532264814FF214CBD46C8B9C8E45878C9E28FF334C5CC7DF9D378EA5A37986DF
0450E2D5645371B8C577C28A008AB7A702E89FF337A17D05AFB0FDC55856AB3D
FFF997FF51AAD70FED81A5D307FFBE26E862070E361DDF6D162934B7852D2FC2
F3FE611F218E28CE0B964BE311E59D8729C7C0FC2B2D5781F73C87D64E6388D1
D7798FE70E74E76368174F5E055FB8CDA3809536768B0E6028826436C7E6454E
895EB7E435FF8AA342BDAD46A2C7BE5FEC83B8AD16F2C773F55F58870E70F2D4
FFCA12D89B06A706CC204383C0238C17EFD01E0118FA4CB77681CB7260BBACE8
30C8E7B16669700F884F234C36EE9694841EDD4FE5644949AA28AE2745FACFDC
CFEF1590F99B0DE494BB0851205DF4E7F2EB88CFF794DFA7958F6EC9197021DC
D4C3590B2729779345143AF6C349CBD2F17AEDDDC23AA8F0998C27170C44FE2F
163C1E2FC314C6CE27D6CB497C3A12F6D10B92D699E1578C23B5D9A907EEA297
4BF7D5C4ADFACA310E61EBE5655745FDCC48B661CC2D3EC016A87632AE410B69
C2B98B87D3F46491EE8611E31CE17843B05C05924FA42FBAD7687003C14599DB
08D72670855271EA55082BBF6AC146D452C1531338138D9AAC7E4D2F0CA1FDAD
11E4CB830A9F38A83999F6F0ED15D12FA631B8604D4E3018E625C8BABD8E1075
93F5E17CAD3CADA2210088E71C02CC6654DB4E12F8C2B6B7EADE37E52FAD3FD5
83E45B62FC9B573A6068EF3B43856CD4B6C3E096BA93728B05AEE2BB96C60AEF
58214FD24DEFA63E3FA299289B211A57E4B0CE9EB58414FB78E20151BCED3F4A
9AE6B1D7ED559B3B619385AA8496D6F56D2B353E4B1BCCFA0A50247E283B1540
4300E1119F710664ED5DECAAE9087B8C0CBA63F3FA09F217757B8448D13648BD
D16FEAB50D245C198EDF27C8628CC7BD02385EEB04AF8F4C76308BEF4D640C8D
6F2FDA7BED98F1498CEB1226F009BFAF6425265EC0D13FCACF4909B7495F4211
BA32B04A3B0BCBAC89D6A9088C47C47B4BAC36FB59D9B5D73B2E9E926A9DD183
1AE00AC58E9485379FC6DA119EEA3F6E478F22B60A464F192B2F43379407D4A8
795073B4309C27D8E945468055493D0204B4A57C39CFDC951A04E0288775FCFB
DE3993852671BE697999C9831A33CADEA75B369C179EB8A807CFEEA5CD97BC55
1B0EE49DCC4B6BF4137124123626A5C91603B01B4E0AC759526C129F6AC5BE74
B77B4E431B596E29C17BCCD1CE8279E9C00DF7557AB25770FC9B02762D7EF141
84FFB4730BB8451A485F784A34647741D9B8D2127D158283E01B38BDC39BFA8D
EAE249871ADB347827989E11FAC23F76C2389F8E883B01FFD1EA4968B44D1B1D
760A1FC8F79B50385D8327D6A6381923BE9A2FB8AB0CC6ACAAF5C7701C8F7BDC
81424F63D2CB312235AADD050FC4B71448EE02B7B25C82B6BFB070261919DC1E
32F5E6DD4C38691581D472C254BAF83D7F568016B5AFAEC895187E88AA4D05C8
FEBB3AEBC348AAB84907BC4D85C1F888ECAA5ED2714598384D7369F5FBA0B92B
ACA0B6BCD2D22F9F10B27FBF11A8AF204794CED402A3597D2D469A99CE64BF1C
9242867251B8EFEC0001A1ED0F470A4346BCD9DA22C005A079EE1DE3E33970FE
56620C318D2FD3DD9DFBB773B4FEA7FEECEA9FA1923AD4B2F49DAFEF48E1C529
DBE9EC77299E02DEA39C7B91F9E4F6D68EB224F4555F53E66CD00326CCB5FBAE
70243CDD407BE63DF7BB85E70A99F8B58BEC1562C290D8E50666E1E4EAA484DD
487C567B7BBFEED34A65A6407E3D8925E3C667AF40DB0EFBAE2C07EBE60A83DD
C1A02842861C994C4D314A87986CC94EE74DD4E29AA9E70F393CF956D3BE586B
AC618055571DE00541BA60D022DB49CB62C13FFCB3932DFBFD2D52C8F0C72F1E
9337D95767E376B80AB35264405CC5C385ED6DC9F95535E00C5252DE66961AFC
BC7C83ABFCFD5E0A055E37E7D261A19039D47EE792CA30EA673F80C48C0EEB20
DB21686ABD169A45DB94E35FF086C9946F51409E9E0836041081B04F861838C1
87157DB76A983928BB4122798551318EEB70A32C11A412FD56B7805BDA93AFCD
B11D35FE799224AE30C3BD09D971AC651D06184FCE45D898D09685009DA35EC9
CAB63751F8241297562AE2FEB577AB074D36381B0E5FC0DD5572E3A3079B166F
56C42FBE6147FBDC7EC2ECF6380A70F87D1E44CFD02A70BB3AF4BD9D350C7B21
5DDFD4FE288F0D9EB2FF4C24612FA759B41D0854C04163DC973570B974BAD7B7
BF766AD59D543E808E8F56F831472ECFEECFA7BEA74CBCCB025AB04079AE0838
75852BDC83E1D723824761459DA6A8920A27282043C38BDDB43157A70D552072
400E84CED5FDFDA0F09DF94431956F304F6E92F3DE5F99874F995B467E2038A3
B9C787E650C4A31B2FEFF078BCAC93ACA5816F5DC3FCE322C9DDB15E34856182
BA15F2D56FF4E91573BD2D8B34767974BE928F10EDB3525C2B259F320DF99B88
87801826F2B6AAB2C178270B27730496C44CC83C8036EE6D7D33D6D4C0D871A3
62B7BBC8D8A4E86AEB2CAE76CC7B091B7DF5516EEF043C7D2727FE569B2E28FF
F6BCC6FD3696A85CF5ED26571BFD346494CD6C0974BDE257EDD4A2C53C70FA89
C81F9D32F5CCBAB39A7C00A1BE116FA1254F291AD26C1DE4CBA27BC03C5E5561
8E960A7169F86C0DF884419ECAC607FA82B00CE0B41F7696B2C384582AF6A986
5A9FF800D3A1F4B6C2524F1A4300B9FCDAE2C2050B9882BE4F512FF539FA6BE4
C9577484EB323E7BFA5BDF628875A3634214B14947F7C16541CCE359F72A0E27
C0DB4CCD1653693F7D0BA68D02D5A61AB516173E794BBE4C2C3F34ED9C33BE3C
4A9E20A687498DA1DF7BCB1F6C595B90A5730A10070A54180318A1BD01844585
E78C6EA28EEACCDCB49F1CAF1D21EE97B1DF74523291FCE2ABFE2C000E8F061A
7CAEA494183B9261307CEAC6CD13B362130AE56A651DFACBBE7A6F6747CB61BF
F94BF393769F2A1BD493E1E6502A3507416984FE0F7E509D901A106B857E2448
7284E7ECC2D316EC1C54EE4FD7DC9972DE33B46356E414C92CF8DF9E472F7FE6
7404362C8DFF6BE223B8886503A83A83348F7E9F88726CE068C904D45496494C
641E4443D9474344508ABACF3FF3424383D79A8BDFE6E9D9138E660EB3FFCDCF
8F4E01B24B3070E8B480064D946D0D200F4468EDDF7BDE9D3DAFF03B6D8165F4
0CCB584D542D40DC72554A7597A19EFF3BD72B8520EA71A51048F15E2CA53F3B
C3432278CC19751B38AEB52534BE6CD9BBD489444D313F8C78C2C252AB25AE6A
5EC7D05F3FC21202C4B30A7FF9E1BDC6AE3F6B39B1E09F65E95292FBB1915D20
44D7212A60408FC0F5A2E957BCEBE93DDDAD35D05D23F7E58A3602FB3FC1D431
754A3A21F181C437437D7A22C402DC82275DE903E256979985B6E794B459FEFB
393317FE573DAA5416AC52AED36AE9E79040097E2BAF6A0C6CB68C346E4EB059
5E8A6AA1C751CA4A4094257C39ED48FE4414BE73B4E0BF6394FAC05CEEFD1C3A
F5F5233CEB4625752057789ADF113E1E2F77F5B471A0AAA761AEB46CF37C2360
E701B0DCAE13D4583D8DA516BE2E264230DEEE5053AED15368B6CD81DB761A49
9987A07FC48E1EC246D04D80D86B32F7A093AA23B769B0DBC554EE48DA202C28
55847E3D36D80B7C8E779DFE6EAFE3EB35811A1EF80DC639195D5810D90B4DB9
6BABF8F4468AD92939567DEB43BB00CADB46964B73AE13ECC82C3A57A63A23A9
92A46206C70B027CE34FB81E6919828462F8C2166AEBE9663259CE5D4CD8084A
8BA479CDB203F1B0C3579B3E0B8B8E7AA616D798970A11423C391C25EAD95351
A46A856512518A92C7693B42BE92C2E375047E9DF8620B624AF8DCF2836FB1BA
801C822472AAF5AAA719038D3B53D0AE481753F2EC689394CFF9A911C42BE535
C5B4A187712D487C63A0C8607D67D1DBD0EE766B526184768A93416366B2CCF6
364F2D24B44021D0935CAEA289B120A613378399B53E2B50C11F67B7DC4BB1E5
861D745B7FA3C7906AD591765884FA7D746A19EF86C30309DE0F43D4747EA290
8E3C68BAF4D5F4C0C4E08DCA301E46AE3A0141A58074BA2EBBAD8B3F326C240E
ABE33FA5AC689444E7E04B78C29E49D3A128567D08E712C5EC42EC1BD3D95E19
5A7337B8AB2AA410EF1C0EB31D5766575340016CE477CBA3478FB68A98362C60
18CDC9BA410A545AB339B2AAA2934222DA734F6A1AED9942B43B18BAF77FB63A
71059FA66EE04B76730B499FA022A52139BEFF9CA6CE3F9855C7706E3F804F6D
D622A6929D049F921079DF979F31828C31A73CA0238C0D2F11BE2FD68F2228EF
BDE9837348C10E9F08477F754F6343A39736386912D6BC865BE30D1862BACA23
0DF2061049CDF9F894D73A549C10E7BE7790043F9A642E4676F9DE2B934A7F8A
7B0917DDF3255E6FE122D88DBD80252D0C1C8047A13F835E3FCFBFC0AA1D92CD
F1CAB8D1C673EBDC5601B84615F513E4D9FE1F8CBF2337C9FFCDDAC85B6922E0
0BCB0DEF0FA647E6828DED2F5B20F227AF3A792C0C63AD888D7AF39B10171FB1
A24840EDC55158FF3D8513C89F666A2DECB4AA4A1D46503919A4CFD911977DAE
4779F23271C23BDF14F4EF8352D9C66A7C24100C28CAD7BCD89E6E344EEE173F
CF8BD462E1C67F06D73A9085A2AD1EA3DFCD19EB5FE217406771B80C8A3EE798
A4CBFAB9AA93672B8FC9D02014F7076FBB477A777867C6A6AF2E6FFE3CBF3917
1E4F68BCED22EC345F87A92480F4568006BAC16A2DAB940CB9F3462D254614B7
78ECD86F7C3B3A7DAF06DA2D790F353D9254133C38D668C38082D0CC1BDC226B
4A7EBB1460735A5CB04BCA4D71995483CDDC9EA7D3E070C00D5EA6DD4AB539E7
E5C8E436656C99F30B3B464E5BA6CF7025E098C1FDED8B76260ACF62D1A08DB1
F126517B05C47376D20C999565399B06CC686A817B226101AEE3644A706F3767
372117607576BC2B9AD2637DD13C76F9CF2A356F1B9101496868EA8875C94C3B
D181936A02D5387D1C3C285F2DBEEA25457F6A74FF7E00449FA41878776C0DF7
C58FE07009574AE6B457F3BDE448E71CD04AC7E3C22E0CC8AF56B8B5611C4014
3CC20A39A5FA3D9F6A5599495BA0457109823CE71BAC2B7057AF826DC623213E
A6738E640DAECF08E69FE365741CFF8858337131B53A0AF9E49C3655F62E367E
DE824A37A5DA853E1DD5970EC07D3594A59DA1AA85D4FFE3E9E7745FA7FC7F2F
AFD4B9405C7907F383A5149D4DEACA083B457151CDCE3BA5F0C350945E8B92A1
635239241B8FAF7704E3013EE5D21F421254F23194B537C36F8B673E70073189
8B2DE6C30159232A2D054AB8254A450759ACE9C0B94DE035D9D6E5024E8AB56B
644A5C3EF00A5B2EAC0F89C5FE8D7DEB9BC817EF1F87C2BBD956AFE4DD4B50C3
A3BA4931A32827E612DC3059E97069D3894234BAC0E9AA1DB7B7EEE7F97C648E
0B7E7012CA4977258733C72CE466A2EBA8F2B391BDB7652BC07C2343FC8A4B5F
7C6B926D1B751BFFC6FCFDFAB9CBFF6D630CFC8BF374DF4DFB4B0845237E1E0A
E2D044324B4F05C8C96970451C9348E8AA6F1153EAC8BA1C57FFA09B3A181CF1
3EACE89F204BDBA7884FF6F90D1D0CB578DE1CDE56F526AB11F9DEC4FC09642C
A68C8F1DD2EFC7BB301279F474967B1B10DD7FBA6B09B95E7B4D34F66CAAE07B
F792BFE7755882FC790961FAD109A7C35258021DE25BB14410828F9122E01428
D72EDC917C835553A30FBCAE5D067266A205DDD3AF3A4734371426968A7BF7C7
9F48A5D91B596D765E15356F388E74D100B2243D230BFB33147BBCB298320930
000670CB15B7EE9C787EC751621851C3BD5EA6E70FDE66C9834189A9B0D796C4
1FA4179D594B7E8A39987A3DB806F337945A02DDD2B33D43F1E39FD20F41CA25
BA3B5ECD3B32F961F4A98BE40604BF61732690F3C8B247C6E381AED4F277788E
223F8EBECE8CBA7F48801118966E39D4EEEE3F04B254A87EB21C2E4B00F15AE6
F1E2E59DA6353A45BD0A5BF4B822D86E0E7237809C1F0129B83BA2DF82D5D54A
522697FD78DC73D8A75DC6BEE09FC523E5DDEA837BEDD90DEFCF214640DFD4E5
477FD73B86A08885AC44CEE72F0E27AA63A901F2DCC7C42EC261EDD9699A278B
507ABA7BE7101057297C6A3D67C37D61CA4015E7A46C30202617F3585D719309
7DFF48AF4FBDFC7DD9F66E9549B8B800DDFB2D8AD69B3C6D2C3410E982559191
93498926825E6A96A2CB12F8FD15F858AA28E4F9A9D1457D7B9AB16D9B9D4D45
8FD6853853DF5851C529D134CBE17C6B99A8286519535CC1368407909A5B3CF3
C75B4F86A40BD2EAB1918F03D93A283EB119A8F63E346E7502F0CFD12369B2B0
09A2AD610FD210E8CBAEF4C0498B0E53BF4EE1A00B0C067C113F88E5E000E6F4
FACE37B09D72B4242CD320E4F72F5E123E5578ACC48F604124A0A45559E1DCD9
B58D9EE14F3BC6B4452B9236F6A3CAD7FB7E7D5C949DF2875CE44537DBA8B1D4
C7ECEB76F55EA06D56209E0BAC984AD37A459B6C45B4D7F8B84CA66BF274F1D8
02BF247751733715BDCAFBD55854B0F436BCC787F66B44784838F56AA29F83B7
7D46F0D88835E45159413BEDFEC525BDEDE44291003D313CD2268E240C2388DC
37380A430557D988332DF505B16CE488AF68C8F8626B7EA790121D6ACB87D94C
83418919E0CAF58E41A3E036DF13D13C6B107500902A747CD7D7BF12235A766C
00539129C31EA3E738733C4E443698673AAF4E9588AFAFBD00577721011A12BA
D556591A82E2739AC4234917DD7A850C05F595BD87E0F7719D42DCBD9D724C85
520006A9069E1CB2557D2F97D7A0C54AB564DC62759F793D60A4760854AFB05B
AE445CB9131D0C14B6A6ADFE12DB225684D8254EFD295E7542031CCADC4B27E4
F579C84F35DC502F17DAD24C1775F15F505888F0C3E0FD42357ED07FB5076E78
E862016F7E5835CD5BAF87CECAC4BC92375B426E9512928E748E0328947B1844
E251F3A6E99BAA5B97045D1ACA798296D0CCEC2044E59F32075BB7CB7C636BDE
755916CB59C802761A99B211EEB550EF9BC14AADC70818D0053993C9F299B3D5
AB1427B463A4D76459385F036A95770A8157D225FB75B2C92CA39D1AE7411AD7
19AB8DEAABDE9A2F7530B474CC7119E4335AE12A9CE84BA7FA92AD46D6A7AD54
A676EF1B2B0F3A73E6FB24B20F9702ED522DB7BC30DD2212ED63C88128ED1FA3
7B05D70B0BD95BC58F1330343EAD91AED48EB4252314CA3B7FF921B61E040858
EB3F545F8A8ADD86FD770249BDAAD02613AD5A45C3997E33188E59E004E2255D
BDC14AFFD80F49365D5006821F2A4A2F801820D4D1DA9D11F02CA514EED93425
742D97CC8F84E529FDE0BF4C6437A849A6630BD6760B31870D69C4C15EEA09E1
831354F7C4A70C5F04DDB4B27952C3745B76EE5B168F047E59360CDD5D084D3D
BC8BA0C569C7DDE62033CE401D65C35DF34D2875D4E6E83E7854E73F44EDBADA
9368225C6160F4B0C4032A9800198C83EABDE656CFC1C1B65993D629A1BE0263
41D83EDDCD589F05D1135AE5FDF759260CAA81FFA75E52E7721686F09ED30B6F
A7E3A8B23FD647A7156FC46A098835E130519E9B03D51BE72D93AFD1C8E26369
1003E8DECAB113FB42AFEC3EB1B58E4D4C57DA6A7EFF05766E9640AD6221244D
863351C7E11AAE874D2C37B6AD9F9324344621662E0F626F85F2466C4DD58751
8CF9D2ABFFE134E2281BEC8D06F7B41B1E46873EDDD6D5EE7953B988399A6C98
57B8186F02ED58B05FA74B94FD084CB58F31EBFD5EBC64404C2DAEF49047078B
06C8A968F278BA7BCA00EA900B268D5205B1E8D3345EB3D72595DA2099946925
72B00ECDD85FA437BC0486514F6952B573AF0ADEB9E04EBC6C135C1123CB216D
77D921FA514C6B9EEF4C5804E7FDFBB5D0A20D24A42E92BD589C935C3D9DEC1F
9D7C710A311DED061F8AC66D2A51B8108408D0A2778771850237189ADC89E733
AFD301565E9BCF4C0865A145409C937E69443CC7CF15CC460C413EA91717A0A2
6F27F38CEB2BF67DAC531BD3F46F024CCC68B5D4F0D2EEF56266830A357F32DE
BE2FA7858FA3D48D7F74450ECE9C9FACFCA20F274978569CE6E99960A41FE807
35B9F00C7156DB3A10770DC0A497125A0519C57E48DD815BD2059A1D2904B909
FE52A5A1AB36651776FE42467D9B1DA1F7350D1FE90C69F8C1C1A963BDF9704B
1157C118E9B514FDBDFC3F27A2C256F9CFD8FDE80E49B6D90D5CE2A98CC7A0FB
F8E147481FB6FF49959C5860142127E56DE4D18CDC3523B8F8E21719E8BCDB10
908D6E3041423DDBAAE4F4E50E62F6B63D1C0023EA3AB1A1E33D8C59CC7FE280
BD36E2BB0DDD1A340034FF65B80761062CBD5236FACF7B26DD1A2D6FB390ABEF
22AF24628FBAE304303EC2F52E21697F427BFE7A8BD0CA855E24461DB5B5F643
8AA1B788C9277867F0418555114782DDB223FFCE3259E6E0D5DAFD311F95CA8A
B19449309E4F5B99E55399FA37ED2F2F247D6B74C543529495A8B2F2BEC52E10
8D902069487D4BABB4D31239352D2F37BF3DB2AC48E4006E669D2E62B5204EBA
EBAD35AC79184B8A381CE594688372E5ADA3E873BE55D1A8017A055E50414FDF
F9CBDBDA528198F6F0680BC93F5ACBC86A5ECF1706A74DC4BAD27A0219B5DCCC
532B400F09D065FA4ED2C59ADA8AC8CF64259F3A09FD67FDBA705E7AD576EBB7
1B2ED7F67D44CF32D41BBDA61727A9F9759640D55913EBD80B34377EAFBF1735
5876F9BD152DF60364BC3AFC12460E264F73377558FBDC1A50437799DDB7C788
8D3B6562DA10FD63B38A36DA1E8C44B8FFB25D3E507E0CE28C495316D83C29D2
DCACCC4D79E08321B4607D9A79EB8B143F915678C155ACC91CB7CE4FAFED7A7B
F813D4FC5220E86C5E5DAA586ECFC54384CBFD6C61AFF151C53A2074946CCA4E
C7240F28DCAAAB022DF8E21CFE66DF1F72E0755A19AD5821A01C3A598B3D7876
3FA4230224EF92A89A1E1B6623E73BA8B7D7BF31759F1D8068533924C071B118
7FED13E317AE98E1315FF8AC2ADF73110E362CF59DFBEE1344F0BCC24B1DAD45
8C795253554AF03E81DE638A78723AB7FD78D556C4DB96233248649AA46E8999
6BF4EB6130EEC9F91E14F226C7B352A20A0DBE068A9A7EE2B54313AF9FF8D586
C9C03DA1BE102FFD25DD62438B43FB906481AD556B2190CAC1316FF36CFAD060
E546F8AD552FAAA5B928AEC36DF1BE40EC01ADAD1E6CCE40C921AA0AE9FD175B
B1F59B2B1691D4982D3B38A5B8E3B790E1D778EA2247354077B0AE0F6623EAE2
18CD0D3573D6E877AA574266C520043082E8CC81D9A72034A4152676EE343360
D8BE42B6FF924984F02523A6A12BC232B893CA68B3EA13DD8C073945A3E6EBD6
D7063B2D956B46B956414861E7DE287FA97D0495E28C648A13840F15169EC72A
F33D9BAC6DC2986BC61EE3C15E4D94FA8C6E649AF89EBB93716E15D555F99C41
C68021870DD5F02D10D8B79AA9E77661177495EB9A5CD973A71BD383CC95DDDA
EF2E0B005A269B0B666594F7D9BDE1181AFADFB8A9B8CB8B93234D7F25F8BE9D
E48A59EAD687B9909D602F361A31030AFB63783EA8DDD5069CD89E513B83BFBE
9B1085E0043A92ABA32582B656832EAB9D20499C9FD1B4E7FCD10A4667681C42
51FEAE2140C5A639B54FDA5C42B3BF16EB30C911E68620B08B324ED3C24BED45
1B700BA2F5A7AA820020F657BA35C1BAD21D6482A84C50F8B7FF1CFC139764FC
D953C30EEC2345585A4736B10456407BEFC300CAA0FADD63DCA32EFB4F7CF597
2E59799734DB1936A490877A9929E97A3253CC3D952AE94FAD15A9872172936B
CD536F1EDFBEC94C2130A7CB02B3C3F317D2C610BEB2AF64E67A83ADB9B6CA21
AAFBE3E74DC9E60239A47C109C7B22DA9AD5E4E9BD3BC7C7941E43EACCC21892
2806832697701475E7F525C97FD645F32B3B0EEC3C07AC99B31F39544E25DBB2
693EF541577F0B7B4E4EF5617DB6E6544BEA1BF513690D4CC433364DFC2D6DD3
2D29D0EB40E318630F39BAC8F247DB42761191A2ABACDA4CC04D77472ACD2F70
34045199903997256189E44C5552E077FD2DF90BC833B5D6DF45B90D8C0E5B76
0353F6B92FB5E5019DD23E37462238AE436AD0F4B9290716101B0FCCB854BFF7
1E5EC5E0B923549EA9172A76A25DDCEF72CC08A295D18F83957CAD9359E59C0E
51A217FB615F2BC68615CBEF259978932F2079DBB90DF33405B6BF5AC4AB3051
1736DE3C1BB7DCF90A429B56F587E33CAB3DB7F7930AA3C07C3FD5B702A681E1
3522525788108FED42F6736BD6E43159F482CAFA1B5E094B5981FE83CB373955
66226AE0BAEFACD91180D396A2EE8EEF822C4D4A07023EC1AACDA7BF1E9DD09B
B9C4F90414088627A7100157A4F49929EDC47605305771B034E1D787ADF572B0
B457E87056FE614FA86B8033AFCCCE7EAD5C7655FB5DC178A06A5DACCBC61FA2
ABE57BD1475731620EF4F0825ADBB97859C02537AE55F39C5E29D5D4E64C81E3
18BBECF6260DF1CBD5F416297F371097378BBD67FC119C4CE7061B8A67963C26
CCA002251A2844427A2228F52F4C39338CB25F4B41EFD8F89A26438EE3E3CB95
D7725C3684DEFF82699CD83756E9827B924FB22F484F4FCBA8D5B542A813E7A6
15512FCC4AD6EBA657C241D2063A1D0C54EF868369723A4273D16AEB1C2CCA12
E06D48D17E19E9A68BD696447B36A2CA9714D3B9C784A06021E9A9AAAA8EF15A
05DF9DA5111CE1843A48F3D2E2AE4D499EAE40EB1D190524ED374E3BF755E3DF
69C8C1F89A33AFDD669C012C0A744267E34A25D6F5EA30205215AE20DD453637
0B04819529041BF3AC3ED3846B7968AEA5E8947B33A72787656D3ECACBB7E570
CC0475D5F833E23FDA9E70AEF9F221ABA8734F99D07CF5A52DF7EA1E0B52159F
20759D1AF1AEE48D1D876F5B82163F0FBEDCBAE25C127132401288AD70E42003
76BAED8D3D4E9D1697A3BC6770819F4D560075FCB325B52901032E021122E962
CD756D3D901AC0E3BD0FD658CA96A255F73A3BCC923ACC1E6EEB2DC4CACCEBB4
E7D399CFCE3F7CEB3BEAEFA3C03926153F657DAA7A61881D218EB9CDB58C1398
5AFAAEE54AF7095137153D73DFBCB893E4388170A262DE541398BE270C9C6D41
83E26BD10F9906C1268D510E26D717651EE52106CBCE6DEE8B1D11230F1A8719
C9A59951167C6B08D28C35C83C1593FD84B718C1FFB70215BEC4DF9B9652D977
DC89B7F32A0BFA3995AB0CD1785C9026CEC137AD72EF0E982AC62AB4DA62C6F7
BCC07794C006B5285CDD9D3D04DD1E84AEB16DC6BD80E7CCB95C1724A2007BA5
661166F38989BF1A956D1E34EE175FD45C5B2E0FBF802BCC0493BE3C196D1E1B
8F1B3E1645DFE3C6A19A302CD63322C5CDB89F709CB7A5E4A20076BD27CCF4C3
D1C0AF267EBA9B8EEC3BA415BCB891DC6390FEEB634A4B7513C00FA17762DD83
04B29F6FB10C6D8797D7A918BB3B65378E95BC5D939449BDD74166B19FD54E5A
7076DE164E853CDC3AB76EE16BC517FF4A144A0F8470EDD57C15EBD9CD27A223
8F0022FC1F1BEC145D1B1DACE9E271C29CC564B512D035B9714D4368D3779922
06E7C7FCED238E4B22802670C55A6494933B0E7D24133395D9624903165537F1
5240F84FFC0170C2478282D36509D92428E873C1E58F2538590F2DA0A02DD756
68B5104DFC8CF32566D09CFD0DE6DC4E3C3EB1571A56C2CC1E81B5DD87D24374
FB509AA96CFF14DC09D7A3DA37B784CF15A35E1D379424FA3477FD88A109F04B
50A5C0005F80D46736A25EFD9E4E7C2F6B0553D99636596AA114C669BAFFB905
CD432197079325D8AC3209FF3C8119E9CBC46AA8E78319CEB1F4E067F305B576
7EF5CE0875997CA42A6DA32CF03109E00F2F74F9717C23DC6BFAF0146A2A250C
728168F0EF26EFE13733CDD1DA89318D677E15CC28BD68DC110C7CC2DFF456F3
0B466FB524E0AE71BF286AB7EDE2DE6A51B672EC8D08FBC53B04BB661C9B1372
6A7B24BCA172116DF53B98A5D2E0DA44578A46EEDDEA22F769BCE99CEA3296F3
2A51B7BED9EEFF5907C018909BF2763B1F63FEB0A3FDD24C9C97867032443DBF
E44401C4BE9B136E0272DA6FF9635DD8C6FD5073CA52F8392C67445E0C20F39A
4423127BE74A4F986C80F1471181B8EC1BEEE9E57EE266C877DA34F65DB72784
83CF7C1E262DFD922754E5D8C2DD42CD0F2A16690D2F504BD6F48D79CBBA0ECE
496B95E89CAFDC9788D4A2C48327A4E3BCCED0FF77CC667B34E0DA5F59D67DF1
0B9F733201BDFCDF3A47D1694757ACDCF00FF110AC62A39739C7D2E8738F6B51
E8BBAD31921E33D8FE75914FCC737127C4F7B4D940B531B52AEBAF08B0C7F61D
B3C5CAFAC0E3BD268AC0C7213AC602C8CE220EDC5B03B78CDBE17DFD030C3486
CE9F022095E6B20D89A9C4746392E83E963830540C37E30A4FC23C89E288F23C
1EFF8FF73E3EE5737316A51C0501492FEC60DB80768A00666089244B9095A7C3
97B76E07E9B2F71D7519F0BA4B2F52EE60689EAA79A74BD82F64ADEEA9747729
C0A4C51392913B55D889468403CCCEA6280E7B0A0388E9263D89EAA5A77F132B
972E124445A67C4DC1648A518FF066DC4990DED83C7A76E9F8408AB1D5E6211C
ACD66DCFA125B029F00D0317FCDB701BCCF444C8631A212CD3E0048B4C8E6B44
0D744730E1E2CE8BBCC055E642FF826B66C0AE5935AE70968B3697D72D2EF19D
984F58787EBCC5DC205ED532271288A8DAED3AA0027CF2AABD44D24EEFBC18CA
81FE6D45229C8F4022D95F610A3C7449A627AEAECE71377826D9C1DA4457EB95
767551
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY8
%!PS-AdobeFont-1.0: CMSY8 003.002
%%Title: CMSY8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY8 known{/CMSY8 findfont dup/UniqueID known{dup
/UniqueID get 5096649 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY8 def
/FontBBox {-30 -955 1185 779 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY8.) readonly def
/FullName (CMSY8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 48 /prime put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A4D80B73E7B6CB7548
0E1D77FFC695988391DC44AEED8CC947B3D7E198B9620E2238DB3A2819182F03
14498B8CDFBA48926DA721920B221FB33BC21A8456AF10891403501D0F6415F0
7E041AFFE109F640E54FC1A365674711EFF94E752652A4C8DA62CDB1149DB899
2C4A4BD77A06E81E93C5698C05DD02F74A0756082738BDB53003B483752AE498
DD718AEA8F3FB5A6B7E2D2AE8F309065F3D556F9A34AB90C88833A54295E0982
209C466A301BA3372AABEE20D862C6DC6B6FAC1463C8CBA8AD766ED1B4C9D712
2BECB4E6ABF558D8AB5281C35726BB8D046982C0DDAE17BFFC9394125E4E84C0
B283977D31460B8EED4346CCB09F64DA0ACB640C6DBF32F2DC30D54668C1CC12
24C7280593088E9958C047125C323E9C842801346A9CE5F50413D69F6DE99471
65D2E387765E92EA4C43F17B467DF6E266D92551009C0E52E7219AE9F5E2E8D2
88852086FF3600BFB50AF3EAF8C009D8D5F084B510F792385F328F7EFA8C38AD
CDAB2EEDFBC6AA45F6DD7364C2F02DD2BE6C79C8361E83D4267CEC2407689864
B57B5D967FC80AB3BE8CA43955FB0FD3081D438437559AD24A7ADD484C1E4A77
B00BDCB0D1B121FEE983412E1EA5489BDCE5DCB4A7310135956B230C0DE7BBED
516369A92BC41FAC8D73490984942D930DC193BF0C774C1AEF627B969EE4B001
11381AC57815D7581E2372A1DB740B09F4A7FB4318B765DA4E7B44E8805CEF85
44EC3B10613FE7B397BF91B69A5CB2E9086D1E7A1FAE0A9ABF2A237A2D29ABFF
E392A18AEACBF28274E775D3FBAED4F46B982B9DA4602E24094EDCCBC9D6FC0F
67C60376879245606C0B9C9A678E8917516BE1CF097B1C75C9F0DDAD6899F08F
81FB7A198D45FE060CD2A550D9B8D58B882B969D7BC3EC018A1FE92BDB262835
26516FF97AC387EA525FF987E5EB1EAAE4EA5866C9CC043D183763C530F7D7A1
2070E4044507C4E5611FCC117FBE4396E0B24F672CD53D5FDFA56D561FB86D40
90A52A7C7F29A119DFFB694A8C445367746A49CA5FA83163BE448EB19625DF26
609A8C8672631A10411036CAA3D6C2F822A4B2505DCBE8E1CE6916AE515E78CE
E8C894B134BF811671D17C19248853131DFFAEDB24B15FF17EAC194662460642
48D23515AD434C68DF56753806FE96DB3A29F9D4980E0B6EAED7383F9FAD2584
8F85679D6D1933677ADF5D31FE6E43DABF137E834A1DEA632D36EA5728625159
8F33348893C9D1C510501628E4A9A80587DF6E179FAF68B158406A3EBCD726E2
AC17F2DF8B3607072824D2E5A6479F7BADE32E603E54E7A83BB2DFDEDB0D80CD
1F1BDD4F6C9025CC3A8A3685DF10A8183FA80CE0F0FE2BFF2500F76B1037AE41
56D2D7FB468C3CA7549E3599A2AACF66302572F1B35BC8EF7C23F6FC4B720228
1D673D903111CE378AAE83480B4DEB7EA84BB35F4F7BE997DD4FFF5A9B5E7650
3C7365BA0965B242DC369D03215651184024A08EC284F1798B0726152884B4D8
46411B3BC8F5CB53A70AD53BD7B1AF23528849B56CF2F75609FE715878CF6448
38579380688B47AE3D374B0DB6ECA5B8284414090123D47F3F9DF389E023F431
6B4C0DDEE4190DEEF4CA772742012754DA9A44A8F550FADA6D8FB0C512D5BA2C
BB7DF71B1DA41FB6936BA71B710CC6A80751E43436F0F5888F51AB370DD4A088
40F402661E08732C960705C7E0D29B8DA1A8A3E119409E51EE575E9655F47568
023977917C8EC610BEBDB9C1F4EBC192084D63EAA00EC87B53E86620BB5AE51A
579B0F8E1972CE1DA02832FC75184F45409DD9D413402C2FA27BCB0AE6DB4CE1
5AFB114E23232DE07C4674969A1FC94D152C6D3A611F029ACF4D949A2C0755D0
31C7DACDBB4DFCFAF7E87295CCF5D4AE28D87ABC3533D87EEF1507B9FF9063F7
F007DF03734A20BC3A198B049000C92D2849C62DDAA719FC28EB372793E20128
D786670E08948808BA45C4F6AA0DD8A8357CCC47228A760C5C7864853BD9C9A4
285E446CB72C5C9D3F03FAB000810DC5674061FA116153040743E846506CFA67
FA8770E785D7DBC7293F37389A0859CC22275B23C44B57B92A033A7BD194340A
D6BAC6E103402F8396A5394C617CB2A27D9500921D5DA06115EC81715EA8E360
4A95DCE8689CBE268B8E6C8B806CFB0ECBF634250243C9E1AFFACAD65311FA4C
1DB0988203537E5EF12B86FB454D06CF05E4F4FC4143D62920E99304245B6ABC
82E21192BE94F5E980DB21E07FEDF0EB0CAF4ABDFC20EF08A2A44A7940E2862E
08FABA516152DBA899D6CA561EB08C7C8298DD511084E5230CEBF28AB1D84C85
B5BAF4616C28FE05AFA4BABB3BA03F8CEEF3F3EB0D3034BD3D8D06629B8E9EBD
72484057E71C9EB4DFC7C2CE7749271AC926C2419D618FB0B60FD6F81F0F2C04
E529CC74DCC9E4AF32D935D7CA65FBD0842A7BAF162D08F782E65DF3AD9EFE69
198AFA9208B22BC21BC4ECABB9BFFBA84C8421B74748E1EAAACEB59E566838F2
C439579D6C75074F94493F7D5C8942D881AAE6302C37A61003AF77684EE99AD7
EB5EEEF050C52E75E4E842F8174470FA60CB213BB6F257EEB26CC55D1202931B
B981DE2535A87CF37BFF912220C117EE166CCAE58BBF624170FFBC0716726B36
304D698F2CA131675F7B1199E6581B8C812C4FAF75814282477BE2B7EBCBA7C2
FA6356B2876F89698C6C2493989E9EB252DE03BB374622A7C88B8EE9FEB4851E
02F85CF70CDCA7BED5EC94E81170FB557C3BFC6F32CD70B506E56A2CC5451592
130C6F570C679577C44D60A811DCEFB3535D855259B1021AC168DB76DD38B459
F1813E3DB20AD9275D58880CE94058490ABBBB0D8DD16D4A65F680B30057F15D
07FF54D779CC978E90A850A2D8D79961EE276BB26B594C16F56557435671A3D8
ADD3DD0BC4BC73B0652B9DA8462FE614A14A11ADB2214EC4910823FB4CEC8938
24354C5C62547EE5710FB5ECD93AA45DEA7411F6CA8D5B5FA222685E622AD73C
1BD5DFD1C8F253352D6C7D14FF2FACF07CA5EB11392C6A33E9CABFD99F743BED
55E8DEF49E07B9444171D1780C698E5B65B540F41F845AC188DC7C0C8B5BA5F3
546BEAAA4F29F0DF30D5AC12A60862742623100074457BF2D820DCAAB340C1DF
22FF26992DC02F276B40A7C528C84B72CD189A4088C90070486C49A1014FDDA3
5093FC12DAF309FBC063653E6A33E14EB51B081126AB5BCB8016E975060B796D
6CBFDFE6CB9E191F12E309254BDD6660E3227012F5DADE246B02B6D8127F1EE2
248F48DC5ABBD229748444420C868450602120664984FE3A8B2373232CE5CA15
E67172CAF7EA99F73A66AE33B1EDE5E8351DB02497CE3338930147873D4E46B5
E918F5592A21789FA9F46232BE693DFC33240E2649D6AC1940B101D806089436
F0CE230BF6D0363510378822891DBD3EEF3365430E74FB6C994BB40C8EEDA593
CEDAFEBC3B87C7C04F52FBD7D557A77B44855CDBEC8A8D26F44D66446B5662AD
15B6B79D13BD262D79BF51C09F8F690A61C7F11EC2E05F6BEDA273648E9E1EBC
3D5F1D6ED486797F753064ADDA8494405556D43D395B1487EDE877CCC1EAE954
1AEE2513DDA94897B733609E8179DFE1975590568202EF20D58A89B34874CC3A
A5579473AC65E0EE61545AEF578ADE10BE3FB3E2CDC96678F613E4DEF7BC1B38
8A551C93438A0540E292F65F1FA73D9AB30A5F545284085E4930A570C1807995
7108AA8194607304488616DD4AB189F8EDC5F4507AEFD7847817A8ECFFDD2DD5
DE95E04EAF2774F8AF661827229F01E769A32734097C457EB6FF056D90C46C5E
9F936AA6BF2EE8244BBEDB8862E56423F5845BB10C8809730B011D650EA18945
83C320A3F4ED095A5EF91929FC877ECC28A1C2CE74A53245E629BF46C6534983
307B1C94EB35CECDEE86551F0C308F66690E591C5D9D8FE14F534CF3F5DB6D32
39D7C799F392C4E65759B7BF61F4D8312E3B26C31466206A367A0DD7A90D25E2
805D36ED5CE0A4BEBCAC0A348FADD2D2AAD670E28BE6E33F627B4A9F35078B1D
6688084C4C18840673EF9B3526172EE14EF64E97C8B006C27DF6EF73BA6E6459
3608F10EB1EC4B824DD5360B42AFF2084788B165747AABFB2C9C0EBBA9C6246C
08F28143809315D6268E386F09BBAC54C34213438B56C386B34AA457D149CC39
A3C163F56E3C2E637C63A79CF7F2DE969EF3AAFF75F3F20499A9ACA61279D545
866FFE57D25998244F448AAB042B141952BD653007A889B1A716A4042CBBB827
C1ED5E3C616C22D5FCB39D3B3539F9B71D50D25ECD2E5D953C7A5194C867DDB1
75CE10B2C3A20E8CDE15AAE9F549D034838DC066CA649C31EE365D46450AF18B
893748D055DD88C72391FD92DDF0AA1A1316051BC756F87BC9A425019B2FA7BD
CA9F35E89E2229B3021DD24C9DF0DC3217F44DCF510116DDC9E92EFDA3E0A892
491C8961CA484BA29B8CACD2FED2E246FA7414F892AF7B9F08698FDEC82D2E4D
8C6ED1FD9E0BA2645663E7E97B0F780033D025F2EF3B364574C03F04FFC4E09A
3D4182BBFCCCD8CA54A92434E2208803ED36F931D31C7498B7FCEE4B78AECF11
B27123A10F031F9CBA36066680E4748E346D18FD0EFA395D1A9227530618ADD9
64D96C50A0172F712CB427E8F7170F8A1691FB95B247A271499F0E63676BD64B
167438333A3BD9CD9641AC637E0ADB17F1E394DF34AF5A2BD02030DD087BBA02
E1209338B74075744A9A9966039AB6D223F385E06FF359257913E6C01BF32F5B
A3640C7CA41A6C51F296E50DC1CD1D68491CE5D75E0ABDD4C5C4A97C8BE2BA35
D91AF9F8F38E7AB8C1778B06A212D0416E6137087329AAA2679C51D014CC4DEF
0F1543E2FD97621E552E19B29AA1368CB5046C188BA59B1E1875B25FB269DD2D
C0678A42CD310702465694F2BF302AEBC43F714F7C657505132DDA71CD23D17D
628BF3400EB5DDFCE2850F31B40C5913394649AA4241CF646F3939916C2077AD
C11F8C3E478586AA7931E327333FCD8A2EB31DF4B47AA2F31B999556602DD998
5848143C0CBD0B5187DF08E675550F2384D48C2954EA7D16AD2B94DF97C194D2
302CC47BF968CB1F6C9641A87525D5C6972ACCA1D4A4B4DA8EC54BEA6E7312B3
2737754A9FCBED3BA5F8220B751506BB0A5BB5CF706AFCC04BFD713A3BE3C842
9FFDBAA0CA5691D0FCE76134841A169970903843163DE68FF09649E99945DB64
491FD6D8B2DF237DBAF550D1B74263B3BF1EF6211F40D4DF2DEC46E4DE557088
5D458A7CDC6F34B8C3F5C76582C8B7D24A333AAE0B43CA67436F8ECAD7C50B12
35BAAD521033D8024E4DFCF01580AEC63BD5F8ADB778F822AC4FF0DA608EB7CC
1A52A51B9F38FFADC0D2F4D8394C5D598123B483AE5AC1215F24F2492EBAA134
3C58AD4E3B493AABDF753EBF1F04058C6981C353D6788C2D3294165B667D3765
7883A8493F5D772F789F73979B254BB9397FDE4F8B76CA6FFF312F4B012949F4
3EDCF1AC60FFF2681549DFF430B498405E79CB407DADFCEDCAB1E2FAD3B0F4C7
B575A33EAFF9F67D37F50BB06D06834EA683862991C5BE340D4A7F8D131E733D
289F72977870F9958102F5D835739F0F5A642E7194E8AF7FDA2937E5C0712CE4
EE15CB475725030CE0F238C32775D3EC95CE3D0886046E3EEAE322F59D423E83
DE88DDAB5CE0F70537487EBA5A16A9306BA7DDCA14A85A9F83B3BC3600DC9421
BDADA2704A5A24F7174A3A486ACE68739EC5960038CB44D969A594E97AE1F42C
42C1B7E3A456B3CDFC7683537B337AA8777F18CA45B22C8BEB18877DC624496B
9E8EF9F386B7FE4D94ABD5CE3B5786E76FE04A35909C472C04654A4405932EE6
A4A3E0F6DB088603FDD82F0EFCB85A962002A662D1AD0647A2F484B59075A1FA
9F4327D542ED7962620B998ECC3A95CE736089593461CED9B5AAAB05C2DA3820
5AF29B32904E1EEC357C8E282189C6D8F562DB11291091E6897E24CD8F8E2A34
67F35D261E01336152E69831B0CC6B03FF1AC7EA22B745F513A25FE10F70E74A
3FD71FE1EC9999BEDE7CFA6A97EA2DF621711BE950FF8960965685BAAEA71FA6
36F165573A0A6A92DAEE41A9B0C97BF03419FF6BA1F44524D00FD671EACC4233
9A857680DFD27B9F1E7A760058C8277B3761DB9969241D1824A7DADF70BBFC38
89C6DB9091E3BFCB36851CB9662B365A4B7384BDBA1D385902D1E5DABA72A159
63790096B927EA49299AE03E41C7F593F3B995D1155E91C62D5F68845ED3C797
7798B56858F96C2FE2E37D812873B7801767082A6D6B60602CEB94B7F6D7A142
72814734DC584A18D1FFEA7333D4C7E2DFE5B91E9AD92EB52533CA52FA888980
C79FEEDF0FAFB3B20B497F9AB668BDAFA364B405916526D5C48E57DC30BC35B9
BF684FDFAD199D9A28541327F3899AD505FBBBBB22F419E22E0149EE5FDD2B43
AF442E2724EC16934C307FA731F90AD1C76B74569B78CDEA7C19808233C6364B
D049F3F50A68D3EC5F29F2B96BC58C44AF90FE13F244B7129F14B5DAC3F3F310
B330E67CA4EB76F895DAC8025F11EC7630EEB4826B5721348FA38F28B2AEEB1C
5F7CA413C486C94B1DD96988F07F7A08D3635E28624878E55D4FFBEB5E183CB5
93014D8A272EBCF3A09133603CFFEF43A6FF059BCE525706D3795884FB495748
C8AFB50DB464459A5C36D7CD087631BC09C693A11BDF1C6011D9864FE66EE8C0
4824A42E97D16E017C0BB73732D4537E2A5BB283B3568950E5681364DBC1D6DA
058A122862A44ED85029A7B39F2FA7C362D859D0B429E056891339626AE6091D
74F6110CA32F8F3E9507216997E6AD1A2F1FFBE8B407C9880DE230E234F6FD41
A291851178BEAE5DB9DEB22E3443807E2BCEF12A4AE8C490AA9E3D2918329F47
42314CD258A0760DE5FDAC4AF7209CEB530B8508B278952A3638CA8491C3B493
516F461610DBAF32E923ACB834B15E2D169A10F2609EC0ACDF7BDBC777DD2C19
2DB330FD557D3B06B78824D6AB237D8F2D57A7ED35F02CFA9290ED6893B41657
A2485524A3F1642FF5808FDB77015D9467EDAC4A6BBE8A175833B1225A5554F7
2C60207F7A2632A4023255E8EF1F38C1B8216C9B03319B60BEC9799E5378683F
46E698FA75F2DFD40F17C603F3335F1EC70DBA1449C7A33EDDD46CC3DE4A6557
EE67BF349AA8680FDBF415DC527129288B5879500180F75DF80394EC7CF11BC8
9EE9A4ABD64DE3076A2963F83FA333F19FF74F79ECF36A87A31D6F125FD2415B
3F6A6FC33C179F54CA164835F3C3DB62AF444BDF27AFF23098C7212477F688B8
6F48D9AD080D544D57FEDD33D3D9AED9346CBB644C97C951D4AEEB2BF6F0CB18
E2517BA7ADCFD00FE44E290E731D53E5C0D762FCBA08004562DCE6A5EF2FBB74
B3053CBED3B6E896B1C3356DD9E8FCB69691AAF6BEBA0424D62B9F266D560B40
89E20A9F35AD4A7F65A7183761ABBEE0F7EF26ED3565A25516A3A5A57143979A
1EEED8CD52A69E4E1AE4795F3EE0CA21B9F4D166783A9AF54B08B6C56703932A
310197E328C6E6A6BADAA11D66A952964F31FD690082FA02D1E2A4512A9F2742
33B203FB770A3A1C7490ED630D0FAEB3066429D0237E18818EC368D0DA72EB08
1951C70139EB0DD59EB53AF5039A7618C77F6CED9F0A066FED6FEE0C0E328351
BA39746C1224A29D191D8B86491E0A306ABA070CAA2756C3A33990EB6DDF34E8
06EAAFF94AE6686EEB06A17D6D020D1F4E59428D533DB0EDA6434E6E1A478D5C
2A0D08CB39DA7D5F5200199FFFE3F41729478D4F63AE01FC0BF3B378FF6402D1
CCF0F096DC5DB0696208F8543514A437E397416E28B11F692521A6C01140D481
213BF1E96355950EA688F3F008193DD61970FF4E5518814287AC06CC61F27C9C
18E9427E1B368FE81FD75D5BF4C13CF381A7861A824A5746B5BCF0A4333AFDDA
5A76A9CE9489F815CDA35E075BA25F7800DD3E376AC21FA581E86060A0AF7081
B9BC621B017F11AAA41256E7E47DF9702E74279DB16C2FF516A48B38592C99CB
9EEB003200578CF8D9285976915477C4A741FB6140B88E666C03704FEEEB5ECD
C27163DE1DA6F298B099569CA90A69EA708A45B9F9F5F6A4A457273FD83122CA
B6ABCF8C55193AD7F5153B2840432231BD333577124D9A3EF42E6F6E58E806EF
68AC0D0A127544B1DC50D055448BDD80A1F67DCF9E747C4EEBCE8C1940FB7088
3A4D4B5E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY9
%!PS-AdobeFont-1.0: CMSY9 003.002
%%Title: CMSY9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY9 known{/CMSY9 findfont dup/UniqueID known{dup
/UniqueID get 5096650 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY9 def
/FontBBox {-29 -958 1146 777 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY9.) readonly def
/FullName (CMSY9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 33 /arrowright put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A580F0834F28818EBF
F29D3B2C7C9AFD969BA6D3B7429E222AF78F6DE00CE2C8008A5966422936DC5A
DE549B458EB41026E123FE75E703E046F665B7DC78298A145548DEF8D579E008
39279A5208EAF898A357DF3FD9CE4450811F20B454D86B2947BEBB11EABFC62B
187B12458E022CDBAA6EDF4A89D79300F635D8CD973E35FA8D9B1240B3D30D72
4F30444BDF0B51ABA15A181A3196A6CDF9CD1D38D64C83E745A767446641991E
23EAE067609DC2E84B44D923CC98407812813D5AEF0EA21E560B31BD77D735BD
E35EAA564A570DD3294C703E16BB9F251D54407269C8B23DEAD063018D6EB748
4204A415AAC8384025FA922E7074FA7B8A6C31FD3761E7B2737D4D9C9992B7B6
DBD0CFDBD87D42E1A451FC5C7EFAAEC65D10D278470DDF42DFABC836CF15D042
6900E0DCDD36E7153BA186B8358E74F91A1D43D62EB0B821C0E97FE63F1586D0
98F01E8F6B6F2A435343A25CDD80D3AEB42DC8E5AE02F8837B84EE5EB508B02B
6980D2349984FE1A0D3ED12355D556BA483CA078B7921FB336EDAFC22AE05C1C
5614F5025B890009272DA8C838B81913C872A54F7E932237FB1BC2CE5D64CD04
2D320C8E2E610E9EE36EAC7C28C833F8A14048E751B61D0CEB342CBAAB34D104
311B421B8CE4D903D2E2518BA8B734E2637E2CA55426C4A87EEBCE637F8D71F1
54626C52083262A5A9A3B49142948BC1AC0B7698811AE81FC3D3B1C14E6C274E
CFD6C480514F3649D7725A0A14C82C9D537B1C5A9ADC816340B8B4E484AF55AA
905EA936A83FE2BE788D084469008F407447E0077417096333F163CE94CD3098
4B9712EE23120829AE2695EA63975492DB2615214B11C87ED0ADB776ED4BA0B1
40D09D1A617D4F57EE1A9B05C8D5F42AECB9C6AE67757DE6307B1A9C467123DA
773239976AB0EA052B23F263031ACABEC9EEC7A43ACD0DC2D7AD66664FB0D937
6A0F463A173E8B90B2596DD323D2350435D9D31B638112D70492F44769FC0C6B
40A291FE78AA598CAFC19E5AD195BE7264F0EC29305D36C7AB8F2A733797D75D
94C8F7AAFC49C13C108F514745A394F460294C6F3F44162BBFA878F773A5115F
062E934253B786DA2B9A6E8E843E06B97075BE99F21B330D6684998C5C340B72
09D69B655097354CB682D42120ABF5109E5522ABEC94D05E7211DACE8737A1A9
0BD3EC16F48798E67C7C85560D79366504BBFE5F7F5EC1B05B9F68F98149A02E
E53F321C213456D802C01871E9024F965258F71215F40EA71057C15E349F06A3
A016BF1B7E44DC4766FC92EE500EBF7C47D36B1EA34981EE6FE38FF4903466A8
C9020B91CFC731642003AAEB145EC0F13D6281B0838BB4236C220F6F467F7DCB
C79BB9CD5B6A180DD2ED7F94DA6B5CB833E62E898BE832DF601BFBC8148F9430
C8AC459F23EA2536E301C9DFD3FFBAF4D01E7853B60A69B5D012DCC0054C0BA2
1293D3B4EEDF7C5C78118138544A60FB1A500F72BA39E63EF5D97D68369850E6
9B6336DA577128DE68FEB71877360D97204B5F3C06E808BF95AA6D6013524BCC
85CBA9FD2CFEF383645E7E960E7AD471A6A3B8B8C3A0A0B8464836499309D82F
52004FCDB68997BAD9E4B5B881634FE1213283B6B19308BB67F2364F7ECD5534
467EF07CBE71989FFCBC6224417C0710EB3EF2676B9DE846E7FFB1AA6608EC9A
76C31724A19ABB2AD08CC102F5DE8E4E513F90A53F06D440A66B000CCAF6AD12
6F4B161B56FA5FAED65A24FA183B84F4B45407AA69624068EE0E3E47BBE973CA
C72137823F1D676131C8CD5070092CD73FC2A93E0480310E21CFB14C031206AB
411694AFE7B639ACF35C28705A115E98BC69C66F6C58E9E79902453798D76267
29B780AFB6B895B34CBEA51530E8300569EE4D500527BA294282FED81F730A46
6ED19AA5AD45852739882216EE937FC45D75116BBDBA6FF4B4423B398E383CCD
A7D705B8BA85076133E823300C3EFC9EB9399575F5F6BBF868265304B299AD77
B6B4EEA04C83E163E8CE2BFACA65F9DAAE3AD2B0F8DA1F986E6A12DDB2AFACD2
217E37B093F46FF3E20E587A9490401C2833F5844763FE2C528E151214E8CA95
018E1D8D47C9EB5FB4F0EA2A6D064680DEFD2C5489298F83B58EA7FA8CB019E0
671028C59C3E007DD86CD247889ECFA6AD6DA2433B02180DCE6ECF9E495D0976
D063A61B007233DED5E3F351D790F26D4011582735A69F37E7CCBB0AF254B925
B378522B748BD9BF152E2187DEA12BB168C42AD8D67D18567393B35DB2AD8403
5A7093EB59FC276525B8796FE81944F7F03349BB077110E182A61754ADECECD8
A5255DBADB523F3DC251A7D97F17DC76281CC632FAEB382A972D60A15FDDA57E
2F42AA338D889B47F6A3C1FADAFA8D11D63EF8D0C8C0FCE61FBD8AD34EB8DB3B
722BD86CE5B1268F704ACE82A39466DC2D96C9849B9422567FA5E728B17FAF61
59A77E9B3289DB807DF54D076139E3DFE176C3131FA4540C1542AE5AD6200FCD
B92D5DAA77DD4D3022049B6EA2A037FE96E0CEBB1608C663F1373246FA74D70A
BAE7BD37F3AC23E003204FA8270B4514DE1FDC5401B69CBC98A67A5CAB5505F2
87C242B6ECC86E88EEF44B9C79DA5F88CFADAE8B4CF437A7CBD5E0C01A9BC479
E92EA48C808820C567E74D62ED7597FCEC53DE9A0B3EBB9A3FB50AEACAB82BF9
2AA56D029357AAE016582592972ED01C0ADE565E87607F17BCF4983E3321F606
ED664B9516D404B277C2C1B0F873D469D64A9744D9C1897125FD471E71BE060B
A3A617DC8D812E184664BD83EC74EEB5197611380F2D859E1A61A14404493D04
B5537C04541E557CB5039905F37E72B762EBD2321633E12C38C409338AD5AAD3
1A507BB2B8F5235F0614D0CEC2BE44CAD504C9B2CD3E45437A493A33B9BF8A1C
3FE66B1E673449A54E8E3C3470688E94EE4404C888583F7C96B43A592D586D25
8AC1F206EE5FBF3AFF7EDF9BA91EEC6BABD573D455E0AD6802E7E23A662D4F12
FDDA00EA054CD331DF86C099C4BE8AB4EAF5D8EC1BFEFCF50302BE61E6FF26D8
1E88C544570E8D6F7D875466C70AA91D6CCD4DF4BBA34FC67191D1692D3FB76A
66F114152956A5E38345E7495BEB1A389B7D0A59624ABA784F77C1BF7728E556
F9D97D71858D61624C22C6914A3A995BD75922A2C37EF2CA91F923A4561CD3D5
2DCEACD9C3A65A9FAFFFA4822E79D6D89D6366DA6362DB16FF061840582DA35D
E4EE8308040C2DA5F298944EED470D6E4E1FF58DFDDA96C20C85E2DF2652E12B
2EFB8F890D301E8CE777678FA786E552A62A60DFC369AF4BDC069F5457FC86F5
1FB1A38A2222EEE86FE1AC9A8227663AE33217C1F381115CCD04D2F381A27E97
36D356DC64615AD63E1952B37AD4F967317D76A6DEF039CE8446AA634086BFB7
7B0B34F595B61ACEB346F51ED10ADDB7B852B5B2BCFE416D0435A7CAA4C9D9A6
152D9AD938F39E9756AC752F1604D884992BAD768C720C45479F5AD8E53A4832
1B44D6109DE4460A662DA6081465E2BE02ACBEB52259E046767DA24E1416FF44
D5AA1D303CC4249510D703CC6CD0FD7DDB078A91089FD86ACE1721F875F019B9
82D7C5B2530567F2306F47DE90EADDCD12AA1C693B1982827DC36A74C86474B7
0A8A2E084CA403AF654E2F8488806B943E38ABF544ECD45FECDC441DD970B180
FF3FFF1A50D5E22216B240A527F95DA1E43770A3867F225DD2A8AF01A965E06E
A063997C4CDC0B16B52F9B9C8B0DBA94F88F26A7A01E596DCF8F33DA3DA5B02D
2ACF771F25A1372F521A80B93DB0337886FCAC0A2E8FAE0D7E1E0C31EB43AE3D
B4C2020F322A9857A9EADFA7782CA70DE7421B9A83DE1873EED8D096701370B7
7EC33B9C104E9CC16DF8C80ED24D1F91677E355DF037621ABBB75E09ACDBEB82
30F1AFB82FAEC4D9E2DA93303F72C1078679EDDA35ABF2AB38DFF091AEB273CC
5A7B29C0164977160CA75F62BC20474C7C1F127AE7E4DE865FBCEF852698AB80
B61340CAB6F86017FEF570104E46B6FB3320E78D387CC58DF1C4FAD8570C0126
B6F54AB5BCD47904A9255366AC9C88576456D3CF605822269CC65979EC3CC740
AE3D09257BA3AC7A364A7F5EECA3E658AA20B53423553C416D98FD8100D80A30
A1B19F029B7473070D7C60CDE51BBEEFD2B45B1C82F4FE32A5BB6BB5BC32BBB8
F600ABE893B83B806A5435AE2B40E5CEA9068C6ABBCE73C9B3533520439F28F5
E171DB1DD90B2EC04A1F36767B2B97D4EC0FBF217D4E80ADA5383BADCD7E066F
5F4B23738A14F19AC7D765119AAC9AB6CD0A8AD4EAF8955CB9F5BDB0156CACFF
236D24E8A12AEBA549FAA9D7053D10AB7094B5D9B86FC7375E245EA8D7FC64B9
859A1A37C006E0449AA8DB8B89730348C71C7E014A2EF8D871AAA856407C33C9
392720173DA60850938D0537564455C3957631AC8F8C0B3B29BF6163828796E6
0944C3000B990715188203B32BC4E3FCDF173A4A9C78753AB7D76BB9A4C2DA4E
3EC638753D6FF6356EBB07D0A9E8D3F50EA5451FB6C836B9E5EBB8F1331C8CA0
B0CD271AF316502CBE87F652B5ACCD43176AAA32C6530C69E77E3C85DA496F3C
06980ACA739DECB5D986622AD81F204579218660EA791774C2D11878DE23F858
BBC4ABC7EBA01B7FEBB32BC914FEA8E5720731FD43F8A5CC53954D13455827EE
9C7BADAE8322E77EE7413D6C86E6D378FF8044F50F529E765A1CAC29E8B1D91E
CD40F70F2D4890E0FD04502933212D5AB176DB143831958605C1667B8841E770
CB4D513DF0C3182C23CA653A7A714B2A8DE29D6B203F5A9481E0CF3FF073FC6F
476B0B205136DA43650A940035A970584DD7D06B7CDA8E960186158B75FE3917
9B1D0FFE45EE1606C875DF635B80F5A9E5B67A6ED748F52A53A710A45AC20BCF
FC96755E685A3B0712D5E09D860986C61C631A8D2A505C57D57C1D4AE78C552C
DC5C9EE15B82A4C3020331B78FDEFDE53974C391F375E8118EB7B2D23DFA3F15
389043EB6F33842C82B896073760197B13D3DAC172D77779DF517AE31BAC43BF
5BD6F75B59AAA59C7EB81B776FADB720282DC06BBC9C33AF5AC0BC59F6A0044E
3898A4B5868EF32BC4F980DD863E8EDF6DE3E753A7B3E39F8E8BCB3D3BF14EDE
3395E73BD07440FCE88FB28A96878E823C1E5519650F2054EC2CF733EB8AEB0D
510E5659A3179C3FA8E31EED621BE0EA648D76C370C3CBD8043BE206F28699D7
5871DA483AA5D3580CD55902C85DB9EF5CF5D3191738FE64DB42410F5AB8ACFC
CE07E524BECA5633B082F4793002A4A7215AD1BA31159A30D72AC60EDD0B2BAF
73C9934C85C5372B47BCD3ECEE463CADC05CE8352EC1399ABE2465AA53E5965E
79400336B1F5D1401EE2DA5807F9701D1086DE505F6AD4E64DD4F3E5E90CD64D
FDD25E6FA03B679597CFB8C5C1F03641CEB7B9B40787E70BC6B063621382E3D5
1287365426E44A2EA208C26155CDF782F404CA7B3C6D379103EF4A51CA3F1343
22B04A0B55CE5A7633175838B9E50480E9B80446CD3B541362E7A10BB3C58A42
88C0FF580B4A0296073F5B6505E4FCCA5D4BA2F7E8D59BB04EC9ED4E664BC2BB
8754777594DB26DA0985663D321CCD13FB261BE8A771470DDDA783493E452A87
D0AD01AFF8EDCB7BB159F1408FBCC52F126C46234CE6BEF241B49472102598D6
91FF2DCBA2CD0E6658A61DB3591EA02E4DF202954B655C5A3C34B14CB60CF9C9
2A6683AB282DFD79B33FF3A6AA524582F174F11A5568159083496B242ACD2770
0ACE8473D363AC11250E5DCDCD3CB2281B71FCEB8AAC1367D0714796AF3BF01E
80BD4B05A0A45E6CFA6C672850B9DF113F5EB15923ED885A0E4488D4914B62A2
FAFB6A63F8AF0CF0DA498E1BA68C4150B6E59CBA80BD17026FA09920006D2075
BC6F1010D0A10648A20D8ABF8137BFCD6A5DB3606F6B3CA51E8A4645D32E5966
6DFF7537F65DA4268A86BCA5791C21F5FA9F4C2F1F6C1AFC4D4BADFA63609C4F
5F5158608E6FFD9C5BF00646C3AAB983DDA5E37A9C2EA81796B161A06201FB6F
8EACE87008EE7A008BFBA69AAC04D73A8C0447FADA0249D8861ED405537E23E7
BE68C4349FD64A14E3A53D6C6484E704BE4AD5FA0269F56D3B752A070D9872FD
A5CEE543B413F13CC4CFABCE885BA4533EA0969FDADC14DE6846B330552CFD60
A75BC8C9DDA76102E48DB6B81975A1F3FBE182CEF410841CC6164AFA0CE51FD6
8E8E6F0971277052E21126909B5EE51508306B886E945C11DFFE1C91BD0D79E4
554CC7D6A774C9B98610A1E49C3326D62F157CA9D89B56699F32DBB9D49C716D
CBDEC052133F8E18E8F3D7A59008398AF3E4E1192CFFE4D0B7D2ECC8DE2ABC1D
4DF7F2EA5EC0DD756CB2FF9F95FF10E506463D3037BABD221C08506FA603DE1C
DC45A5998921C4023E501DBA494C1F41C0955A761AC3D5B13A88EC4F0BF40756
BAE8645EA76027B8AF74726521DC129B9AED4BAE67A511EA56EE9D0D8D30C7F6
FA8BB890375A263A0BC4E9CBBBB8F8F8613A43B10E964F8CBD6BAA2B0BAA70C4
4CFAF6EBF4882B610AE13689823D37B046FD26DA85BD96B896CBDAB6662573D0
2CB87D45A86A016146513441BF7A748F1E9C2AC7172460EA628BFB22F9797905
F6DF6749F13C7F234A2CE4829D41E0F53EF3C5F52165297AAC4B5AF4747A9F53
60370B4C0110DBB42C25308F489A856B6664371FC2126BAF4710790021255653
CACDE1B9ED6AF5C696C3D8BEA4698DD9045B3004A5C4C03EA994A5445C9D4EB9
865266850047E28F2D82A08617E9283FE637CFAE4F7F261CC2D616A8C746EF23
7360553A6B434201944C04B1522533C61F615A20BA3678AF8D4BAD1FB548D82C
72D41699FB96EF40ABBABDEE633F05B4445BFC4E6E661DCBC8EC473BD2BBAF7F
75F7FC86CC7B1F3A2343EDEDF6B5F7E98A0BC4443E21611F4D807FE7F597A37A
A4DAF8A8E6D04FEFB320E0E25C61E156A72A3E4A69EDA04B0E3B72B69FC19E63
AA33A682663A8F37F4FFC1533CCA2A80DAA675DD723A7E13D9DAE3BB0F5F3E07
99BAB9B9BCFB29B73FC76EFA02F4F632690651DAAEC2B3688B636F0FCB156047
F8EF7239716BE5D3DB2FD1DAEEC11DC2D65CFBEDC1C950CA737A04FCCCA509C4
7E47664E160322366F70CCC641B9B49192AB839E0AC609AB2FDD3783095293C3
11C56740FB50D23AE9FEAF66DB13F35367B562F15161AA270EE44713881B2387
7889FD10198AD4D750390811714DAE7A8DC6F5770224E93408F8CCD4F8712A9B
3C583C983D98CCA7FF9DDDEF8AFA292781B1D7089336CA631413EA0728353E8B
3650EDED7ABB6E5DB5B85014A3A9C4C76EBB664A5B3E0F3CB2ECFBB6294F5C4F
69EA3AC8C071B122B129A28E04FE989DA9670EB6246806A516517DDBC52DC001
4C027D51EF1F98506F21E63D57FEF267B913F1ED4770D892239222F3A9035C35
FFA38D1AF3ED9A8C02235D7422695D30A2F801389DADF34CDC489EEB38089B6B
026D884EE1C24FE5785C383B988FFFEB5459A1644CA44D353503AE117E87F956
393DEF6C47D4E1C5B1A33835C9B8E1B98809DFEE43C4D6DBEF1C2B1ADE4B8F13
3B5D224C25927433D5738B0FE019CB88B1F373E4AC2BDB5BD86887FCFC50FA1F
3E01CC550BE5FA0703E1B89486C67E8A16C560DBC051028078BEF85B349D3058
55D633040BF5853FE9E50A671CA0A088959B2AACA1B614DBDBD906FBCB6A6B13
7ED6C5BF448F92E9EB110ECAEADA36CADF4B6D79703CA2EA9BBCC810A6E3532F
63C155FB86CBF6A6049D730B4729C613BD759AF3742399C6B118C1D2B38FBC4A
22154122B3E325ACA78A9D418FB443FB334F67F8BD2D33A8491FB2E85BA2BB40
F538F5DCA031BB3A7E6FB3A4739D0FBF029D44CF15CF0F4E368461034E5810BC
32C823771C5024D82679CBC9CF43613C60573795AA9E3B46495E299C54B7B118
D301B85C4D2420F01F7FEF73DEB10EA3E72321EAD4E1CBE4DC791FDB0F5E9B1D
768F764C46E7D01EAD0555B0FF0911ABE3EE03FFF0FCBF9160B502AAF039644C
3A057C26B7356D770E5828BC44EB166C04F3D003C21576EA12B598C980AD08AE
B93D90462CD7BC92244F507253FB5D258F025440D4942D01B55FEA03C96A66D4
AE9E4BE532127A626F1BE915BB0A018100E93D2EF958DD468BDD35AAB82EBD47
79085775DC7B6B3020C58A64
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI9
%!PS-AdobeFont-1.0: CMMI9 003.002
%%Title: CMMI9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI9 known{/CMMI9 findfont dup/UniqueID known{dup
/UniqueID get 5087384 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI9 def
/FontBBox {-29 -250 1075 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI9.) readonly def
/FullName (CMMI9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 59 /comma put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBD07FC5A8862A8DB
7E2B90C16137614CDAFB584A32E50C0935109679E31306B8BDD29F1756946A67
7A7C2D9BA6FAB9B20A424AA0E6F4BA64C2801C2FB5A1156CBEED0ACB95F697B8
BC2A6E6AA7EB1F9FD8E3C9B1A16697EE1F0E7400421A7765AB218FC837A49365
82DC6B2C877A7DA84A81E6126EE96DB25C17A207D3020A045DCDAA064360DFFC
E3CD50E21ED239D2A6450D04F879A26443ADEB6A20ACC504989876476C7D1A74
91564FEA1F4CC2C8C8FDF666DB537F315AE1886C73CB5B00E67E7B398A6C018E
540EAEE98BB8136C4F044EDD63C33431D2CF9740F051DF365A4045D9D8782112
7BB5D494D9235BA98CF2F30CB119F5A904C32AD04C960C43FC1F5FD8DA7D90D8
93AFB59F3FF4F796481AE2A7548F948FECFC6C127C4D3F159B08F206AE8C296D
EE470DB2F879EA79475E029D22D7A8535C09A18689DB0609CC233E5199C02756
972CC9C94D9FCE264DEE5D75C8D651E4E2D1189AD9588CB815722BB5EE3C379A
6F31C2E6AE1AE4CCEB29766190AFA20EA937114978752189F1A9F42B39483149
796FCFA123BA9CCD1D9BE28289660BCAE16C40B5B504058D55CFCBFB4F4E3D94
DDBF39F157E63946534DA81C018B1C01B9F10DDB55E0A5C2B3985ED1977C039B
D6755EA42CD09E27751E159C30B93F376DBE61CD3AED34BA36A768F232EB3B80
E3E6B77C4A48D408217818E398B83D995AB6BC871F20991DF57313D6EB0C793D
0F28088EBDB7F38DAF7E01AAB3476EC24D7BB38A9889A7D3038D930FF4289B83
F54A7BE1E2D98A3822098D2E4D067A0D400C20C0B2B4BBD74C13ED1B827490F9
ECF48F8C3994C1C5AAC9CF783BFA4F307528F51EAB55F961808A42ED53F00C97
72A432EAEDCFCFB622389BDA707B6ACC9433B065CF29EBFE93AD14B8ECD5F47F
F073F11822C49B8BE924CDFA6348C3A75E9BB9BF3F31C41716B34794B28CDAC9
4DB8B087E180A9B3B17680F73D9C12C8D86A922C948093629F5D7F542ED882A1
692F4F6696865E53E3E2DD43B2D5E8C989CFAA5CA5C4C5999045E170BDE9921C
BACD6F2863F5553EAB2BA2D4A9034729EC0C4201DE90DA89B0A27C5A5C974109
4E37BFB3F46B3A506169FB0C68E1CAFC844419A8D261A1FD86A3BB78E33D5FB1
CFC687A5975987CE45155E5FDFAF0CC5FD5568CB1C26212F92E88255F0549F59
41B33125946DE43436BEC00804063FBF03EC796E3361B1C852EC3038D107F80A
9198968265D5488B26D7670B22C2D75EDFFD1B7B4AAFA36DFD94640C9D0E2D20
5BCA18683EFB91834A3939AB8EB60E2F09655BE003582634C52770DA9668C292
2E02929D812EE2B0CC65F020064AD5BDAC5F5693B30508F40ED8E20E87149BD5
8DD41AFF83FD1944804017DC5A04512E593549FFFAE501131CE2FDB65EFD0B8B
33809CBAEE411B3941C241550B9C30DD28088708F1C0CC3125CBEDCD985EAD28
03313741F67DB5744A87B381147D5BA70AE1145C27F794854628D87D6C1ECCA1
749E3465B950175D3C3F40E344297BD92D3190041A4392033A79BEAEAABB8DBE
CC14E39612F43721CFAE6F79074429221CA588AA2501DE520A464DE157A03AFE
3C082FAE7628FC0C57FFC61D0330AE6332D20FDBB09BF36848FE05E782D6379F
64F9C82C45402481B0A35989027F9756BF5A79DA2D96E10F39167ADB4305578F
90B509B6891338FA1D67DCFD61804AA6621526B2EE4769589A2646581712AC05
DA6E98D16494F07D612743058F54FEE516BD89A8EC3E03F9D7F905175D3412C8
F7329077FD6EB25213F3CAC94BA0C3363B759401B6EF7548C7D709F3241D030D
4EB46A1AE81863C412BDDAEA6084C37143A4C5E41BC646315B1CD09F934186CF
49D1D8239E363A435307030BD79536B50B723A39DD763DB539F24A10DDA12BD4
E467339D2D6DB177D6FC539FA77D2DE4118EBAC161E928749F7C753ADEF86117
58619F1155C563DF2E11ACA8347908B98113AED58FCD0394150EEC94B7F986EE
88BF7171D208D8F1774B1DD478F0C2958AE372D257E7EDF0F6B5D6059CC4D5D3
B00FCBD2E9CBE79235B9A5A3E943CC27AABB58728C95C7DBD4F4A1F8A4DA99AE
7377B0CC0BFBD454794398AE0D5F7281771FFE87B25A819F36E692286A42D776
01794A43CA9BB30FB8FFDAAF014F909A369E34C2F6C75B7D4EB9DB0580E33F46
19654443AFF8384B95600B86FF8E41FEFD032355626D60C7507C058EF832DF41
194B48A36F11082D1DCF4723E21401E0C7447AABFAB4639B26E3D2730E348F55
53EBFF39CDD03E06E2FA5FB379603C879EDB7E1A10F89695C9C47DEEE52BE0A3
F446F187AB9D7E93E6F9387F21129034F36DF40605D28FD526AF82CA9D232BE4
412567F06B38ECCD496EF40A7B243E46C9FEBA4F1BF4B1ECA029C5EC239353D6
C0B100BF7E7DB33BD1277DE104F15AA19F37340A777741AD1AD693BC76DA48CC
C6F83CD84591ECFEE375979972B0FAC4C10B625E4BFB261B9FFFA83C31DA0108
4FFB6377466E9739E0EB64424BD9FC7239C7DD834EC6788A0F97FE714AF92831
E1BA36A8A9E24739F1DC82DC26CC3CE28C210AA7C569B19E1784D663A0CA4E81
AFF43E86D6F5F63778847700072CEB77A4EB946DC1F23DBC00BCE773203F76DF
00F0B085F31420672974DDC642D885E95BA6BBE43E1CA8ABF464D9881CDECC7A
E98E31B9754C9B72A8BD5CF6D4D214DBC3BA7A0CDF6635953F5AC1E7639C4A91
C7AECE4C75CA3389C348F656FC2CC96C84C85A926237B6504DB51937C9CFCDAC
B75C31ED570D180757884E27757783DB2D5F35ECC48C496CDA342D49AA947BF8
2FDAD2F19DFE8CD1C76A8FA08F33681F3E12E229D7DAB45BE3A3F258B5ED4980
F15340CF20D965252843E026803E8AEE736EC41CCA82167401977AB719AA2F50
0B791EEAA82027B3C712D2EB9D14BF8F94FBDE2227609BCAC41EC08DE2BAC023
28352F913F7DF08D4E1C66E83F764578B22B4EB7191E852B91ADCCB1BCFDB1F4
E63DFD152E86FA9DE9BC8908130EFDE29CC4401339C05B5B9764CF8EFF14951A
C6C13AF979546996BF22F2B96D3D585B90CD27DADEC78914DA48432C6ACBDD42
20EF583FD41F2F6D6D10C3DF7DD077304B5940BB0462656E306CBD91EB9B756B
7014B1884A36201EC582FC9345C386043DD2818FC301EF78791C1D7854F8FACE
5DE9801DE9F59D5B4271E003AB897B2EF49501589D681D59CFFD9B03F722EEF4
74ABD29997515DA3591496B62666744EA76DCA45504F8075C0652D6779DBEAE4
90430C2945FBD60AD53B51DDBEFC7ED703C418B4B244C8FFA5A3C1B7600C5A55
3EBDB93C16AC191C3A28EB2279BD3F0D67C826BC6A73D3C0AD02262368AB4621
98A1605F2887BC5880E1AF2780330E0FD01D7CAACBB0F008A42C427F38236066
54799594E515B289044BAC4DADF8B3686B4372C5110201221FDA923F131E07E7
93C44BAD406838BA4D1C277EF74098B8C0EDC41EEDD58C195D7DFF5FEDBF96FC
19CEBC6C3006DD2CBF76916B4298BB915663C2F61AFD7747E03A03BD7280197A
9DA590E3D081C6F53DBF94E8D6FDDDD910A70AB18A0F6D48A590FFAB314D6CFD
E3FB20C1F3C91063F00726A2C13A3D48323F9854839405E5A29D66A43E6E2B84
A8B3765F1D817071D4D6FF42BC785C2D11AB2B9452F141696CE19C6AFB9777DB
107D6E22D8CC6C26440BC48248AD8805C4329D46BF433741CB519B21663392DA
5DC7FC9BF37E5BC396BFADD7263D09F6B4D69594AB386B7BDFCF3BACB97A0E08
22013E716E642592A20136CF9CFD61D4E515D80E06A4CB4FC9D9B916C93CEA95
B83B98C48CF36C1D02291D4F5C0419338D64E33C90C90EDD2BA3B96D70FAFE0D
403A060CFF448D3E28A9B1E3916018465E86095BAAB4706CF7ED350D7C554789
D7F4FE5F180767DE8739259E68CF142040BE1E2E8C6152DE3417C1FAEA7584B6
20781DC4A9796431EE713DAC4E713C839D7A4FDC8AB6BFEFFE767AFD8B67FDA6
943AD387E5D3BCB09039ADB64ECC2BE2620C6EC269E708DD06C311F450099E33
AF46AEC644222E7DC4DBB9371EE12CFBC4F9B27AB46AD1DA96CE006E1DF8291F
A550A93026CBFFC1087B134EC6EA76F5E109CDA58FF47338A0039A786A575F70
B8A03A4F9C8D07A4C856C77D9BCC8E3EAA740172D0C2D0A15BA35C9E5717D7FA
2691774DDE730BB9D7C70D7AE103DB8D35F3728470C76EBA0E670634E1A0BA84
2FA102BAD7271DF2680D86A4CA6FC353869987700E5E3FD778165456033D624F
E9B3E80EBF431ACC934AA0357E824B8AD73E222B510DE8445C55C07C8E5DE46D
E478F832BDDECAF2EBB11941DCF84CCD887043FAED9AA90D12BC8CA9A0C8D94F
8D3BF1F80B14B6CAE6BB1C6AA405AA64BB94D5A82CFEA548BA070796A02F9642
87326D066101435AB9EB40BA9EA9E61B363F5F5E3B924369796E8B78DE3414A4
2B79C6A13ECB2F34E6299658D07D2B3DEF3D4383CE009A927F0EF5C196652842
D96B857AB5E905201E7E8BA21A5EBED1FC6863BA9A1A6E5390407F75055E2EEC
512FBDB3E82CEA13663F1A1944DA072C765D8CED06AB461470C5723BDC1271D4
4D1D049D3EB131743F1EC9A6ADDAA038ACA2C41D139DC6A84EC3C61AC7F1E559
6155CC2F49171F6E07CF56D721D9728E87FC7DCBCAC46455A3694C765FE807E9
9CBC2D304AF37E0F28CCB22F239541B53A4D24D09C662559267467EA487BD33A
0BEFD4899B581D20582930703A868655C31BE935364CA6A95FBCB22CB714C040
9718824DFE97929D0482430726CCB5A5307957DD2432A9B6271E849148DEB76B
FAA290FF6D0B18DC5B76407852E81C105EC6CFAB0F620C6DC9DA555A33C167B1
430A8BC338BFC7D75B7099CC906AD923FA107C74D3FBB719D77A4E5A685FF9D8
56424EE4AA074434B809D894ED50F6A60A035C5223EA25DD8983B9B34210DABE
718D7B2BEB293FF1B63CFB1CBDAFC69552963D90F5E3FF533A3FDBB626E9FAA3
F3C119E5E01C7BFF832A033C3515BF049E29558B1DAD652F2888E339E67D15AE
95F9BD14E3253DFE9072B24C0E7E85025B71096AF51C86AECB2921126A43156B
EC812B32B1164BD9B2B947D503C015616DBF2024F5C8CB3236C1DCA653D661FE
6B1C19A22D272A176B7F1B7F9E67AF40DB0EFD4940E58B2A050249CA4E55CAF7
6ACFD84FB46FEF952D18552B3972D79D808B4C263B8C7E1BB647A2D03E102867
630D5C3F2C917F765A4F6FB8106BA6A9D0093E27A4CB6049C2371287D94B5111
6E7020776EBD744C6C920464BBBC0AC206033E8240017F8CCB112596ECD7CAFA
89950CF43FD87ACA750C03A778A37FBCE9C82C2F5ABB135BB02DA8E8C0D24475
3BEA9D79372D0022FF1ABD378C151417DBC69FE5C9CA38D23A3900E34BF924A2
90777ACDC37930B67DD44A2E76DDBD9B89598D5F626BFD325A978D277265DA47
38CFAF16E7FF1946E15F41CA73F7B4B02E5AE8FC4C37B115BC567E4EEEFEFC34
EC8974B1465AE57759EDDA28DD38A9210871D35D331AE1BE6097C3EC21C770C9
B25D040B2ECCC3AEB1EA1BF99E0C2C0F192C13BB9152CFCF75332E03F9CEC376
9B8C285A35F53655BE38713E09AE34BA2DA9C06FA42A6FD2D00CBF2AFD2BADB9
1571629C65DA38A431710CF5B01FCA68E8B8569922FBC3F9B64A5509B6F677AF
1B97E91FFFEB6308AB68AC58F9BA43DB5E764021E75B56170EB44C2C0A7DB86C
62B8982256D3621EBE3DB3994DBF5C5A14CF34B4AF3BD5697F8E3203085DE9D5
84B0598169760B925463E93DC87CE70AF4C2DF0F4287D2F2069847BCCF7A37A2
AD451D5ACE4DBCCB2E14D5DF38B226952E7446BF87BEC736EF3D5AE793304618
D66D3299AB9F9CA1D13F134FAEDF36750046E27706C7CBD8E0877BB6276E5196
BC2A355D109C0253644918E1CC11B717DE6FBDA201E769812752888CD66268F6
4ACF4A9449378F9F9923D584BA1B51F33663BE7A306887BC14A37E3C5A4654E6
531D6EB63DE3946BD8BA95CFB037991174F36D61D842071E6625605CAA350A24
FE551025D10871FE0E2599A63900C8520EF4911C53A03897C8BEE152451708E2
43FCF4E700C583A5E8DBCC03BF9CAB864DBD19E1760945DEA0EC0BA38BEA8256
D3A8D4F70F6685A99C6BD2BA8B412A26C002D76138CFCC7DF6802931E5D97BA6
0151F6A4C572235B4196B22B7B2D14B32886DF0D2CA8A277ABAAC53B63F64CE4
E4C088192AAB674497E8AF81961359C389B51F4A257373D907C615030BFBEF53
DBD99058FD06E352450B658478C10454AC8FC0232B70D5CB916981978053E358
99D322A07294748BA427FFD1E45C909171017B52B7C742FD77A8560852D819DD
8DD53211A14D7B2FD11E42941722FD3985D627FDAF87EB57326A0D290B5077D1
8A4230BEB40523A8565F95E0D44F036A571DB698EDD9D94FEC9512369E5E5E73
A3CA5C142617944F4F99C0697ED088ACAC007FCE06E5A6EDE7D0E03A3399DCE5
362271BC31533866BA79FD1FB3F608B22CCD4111FFB1BA35D920A23AD157C6B3
C3DAE11069D5E46DEDA7158C6478D8B8C0D9DC237CDF0CC6633911673C43FB79
E4F9B7F27495201E5ADE66255BC2CBE9D9F237DECB62A19D62CB41A1C92432D2
07F0629E913A71B3F1AAF8B8C5AC66D3C8605A48F8913E39C859E163DB1DBC8F
0ACFEE80A40B6172032E95A76B752B873FB4DF23CF3A655AF1A1B88C8DC156C6
190DE72973950565454C0A188A33395FD3D529A88F2B578356DE8EBBC12F04C4
5B899F667D9E6F3A4EC6DD8DE71FD4C2E2B6D56823EE4E0526679D71FF1B868D
F261489F06F97B010CCBE640E2F57BA3DC3332B329F7958394BA9777D833AB50
005E8E9232547104065ACE33396772B0E0BD66D2C6CC54DEDD071E444D8C95F8
6F88B31E20FDB80F77C83151B7E25BD3736B4F9BDC52EE78C41E9475E5A6D94C
D348AB42F5E36B4F167D29EBDFBD43B03F77EB296B06A36880FF17D412E77EA9
F2E7C25FD05E16BEC6732681EA21AC3FF6893B93FC09316A370CDDB86D9E6087
F6042C3F9ECD742778389170F5F041329782FB9F9702F7533E51F355F71825AE
2BF4F8FE50D413AC9A20C41B42537FDBE8DDC5A5C793D3760C1EE13716068752
F0AF10812250BEDFB4D7133FD58F4587BACD572505C84A7D3802D27443175FE0
0D89C3398B55176D8642AFBAB5CBCDFD6220C8488564B4306D74A58CD2921AAD
73CF803C754DAC2F30A5324886E273064FA51781D5BC596BFEDDCE3982EA1AA2
62CA7BAA1B16C6EBB99B2AAC4E6C9CEFB3D10F19987045C4918DB239E6E63D79
5F44B9D097118D081153AFF96E5EB39CBFBB99A3BE30909F614869031358EB98
F07A97EA78AE50375941B2474DB46AF3305F2B208D45921F93743A6CB8AC584F
6BEBE25ECAADD5A789EF60C9F54446687E7B030DA3E5243189F02BA46BFD28B7
DC14822E136AC7E40CE20458DDBF356488045C95907363864CD6943643BF0109
EE027A3091C11EA392EA91320EBFEA3B857370AD8EB86D73F035A476F7058222
E8CDE78CA1AA9EA69A8AA6EBFF3E67324C567B914134DE042D6F8F18A9373107
536E8D90189917D343F5299024239E2EC1D2D177D82DC8E344A7CF2AC71AEC18
36F139E7A4EB59A67192BCA9ED0EB25DE13032F6FEAFC3B1F4FC81BB0EDC41DF
B9EB92618667C59EA499B788CD26C2137D70F1B0AF793AF5AD0D0941F2E746E3
F5A7F0288BC1EE11E982EAAE763CA422D72FBBC0D754AD58FBF92629DC8866A0
431213513744DB48E52EFC89C83FEB082588E4F30D7DA77BB598E51CAE7E4900
5CD570C914EFBA426BAFF7A56FC775ECF5BE13F2C42E51EF96784E5201C0B64C
074AC229FF187C3A3B237EC2AAD7B24F09528EC964627B71910A1F2635E3FC2C
1D745C947B6DA3A5518789DFBA7135B0A16C456ADD667A32C57C08F239297E32
592C9F6A79CC8FAE5573ACBFBE53AD87A079F6788F1C2005E50CDAFDE7A27BF6
C33A30C1CC26555266FC7159A02538F30655CE545CB5581D0FAC598CC86522A5
FEBF9430DCAC6B55DEF410E18C5D850B48DFF45DA5B1E7EB0DBDC6451616639A
A03C95B38E3A90554F39932AB33CDC26BEA522F5F0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSS9
%!PS-AdobeFont-1.0: CMSS9 003.002
%%Title: CMSS9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSS9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSS9 known{/CMSS9 findfont dup/UniqueID known{dup
/UniqueID get 5000802 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSS9 def
/FontBBox {-63 -250 1027 760 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSS9.) readonly def
/FullName (CMSS9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 45 /hyphen put
dup 46 /period put
dup 61 /equal put
dup 66 /B put
dup 75 /K put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C295470093CA270C5165C6545D6DD11
633CB01CF6EE3B37AA823D92F442576C06EA48520F0F737DD7E36EFF1436913D
7B55347D27E02EC93D8F98260A4CA0D41D684DC6D2CCA5746F13A862CA42419F
FC585050BB153883D3924F26A261CB59E945236BF818D1067BEB62B89F25B57A
C81D10844C89A1A648EFABD92B5C8FC1671A9361602E52B9EAEEB8A603C8945A
F8295D0706DA6CF8964B671F90DBB3949ACDDD20530134FBEFE9D1F1C429097B
2A8AF2818951D34F2798A46FE02C69BCE1A2B4C11DF1D8FE0610BD9FD2016D3A
ABFB483773ED4255C1B00B9484918BB10893DB86FABB84B063B0F287AB61C16D
6751C62EF5CDC87DD0A92D85A316BE8C707249B5FDD5B61C1906445E2B04C689
6A8E764A825A75424F14E0CD2BA99AC4746E8E0DF4C4C682F7A0900A2218135D
E5E58CA35D1ACB83255F683AAAEF8092CB082A8CB0D779673F065D7408FDA080
4E12BA4729806B39E930A9FF2280D603F9F2EF1067461193BF703BB5383FFD53
6F67E20F0A88A204DC683CBE272E7E8489AC886630624DC40BE31A47B8AB6484
0014D5A9F629CABF60681786A720D84713972B0D590F2E22A666756EC35876A2
37E893690099F6F9F0449187021D72A7B13E04B6FA937F7C2E840FB766EEC767
5BB4F23E26CBBC216F73770B50F992386A289574CD6F8F4C9B7588BBF8482DC2
3B33E5257C797790810BE889DEFA050B290D6381943A222F1D2560CD26B72FED
A2013E359EBD486CA5034784707060F17E257BDCC5798315E7699EE7EB576FE5
8D35505C808ED586C153AF420529F113ED9A05EF1C7F1F606F62BD2FE1303F82
3F483CB2EFEEA499D3EE8684DF5EC36B4E9035E56D5180211A849FE222D99210
8A3CCB004CC1457C3647FC73F64CBD2B02D692E0E9B7EABCF1A29740EF0DC8A2
CBBEFA563DB9D3BF920E504EEFDD56036217B61D8E08103405A9781A9CA6B9CB
FAF508A835E2D49BC7CE894F9D0B7B8E759660BD7D53492AA89CD26D603458C0
776258F3A478BDC8E4D9C55C92F38C0A336C8FA39D52533A4439945B045CED20
A2D9C64EA02D34FB4CD7B377BE5B4C8C110924DC0F71DC4E0C5ADFBA8D9BADBD
4EE8588E139E55570360D11E05A4B233DD8749DDA75E8D53DB3FB331B156D437
5D2BD10C724ECD919780AF578C696A53765533FD4D2527DD2DAC8FB7A3CA703D
B34003DD72E3D20DA315CE4B62018C685D071E9E866A224B2E72C4C417E62FAB
A678429808F95F98207C4A48621F6431DDCBDA2D137C43D765D02EC4A724C0D6
4DF9E07A9666A85DC95DA2D39DB3F90F69BA2A717796D1C87F5D1A22B7537740
63846E8CCB48F3250885A8D3F83BD9DF1A8C14AAEAA670D438D47420F6DCD38C
8884C761985EF58B8BE65C9FD1703F24BDAA827F7FFA56E5828E1DED1CAA75F9
6E00B8AE3127204BF420593221D6E7C35EDBDF8C1135A326A43CA14CFA2EB30F
A3D2AD65DB0E6E8F1D242F69D4B5B4A1DCC937A129923070CF0BCD8C016BAE0D
9CD293BE8446BD1E4C3627506E78A346E2B20107DB58F0696193A02F4C54603E
CBE96510F306101B5C3F86EB222743244573B84919C8683831F3034112CACDE4
6B9FD23FA96BF3BEBD96198B2F19D0622FCBA58AFE129420C374BF6EBCDDB1A9
99829124589CA5564BD5622BE33A1E3BF0FC7D1E6FB699A3D553D86CF2C3B748
CEC5E58E948537DB684BD8C57B1C5B6BE0BF32C1F958147792DE58A9CBD010B0
6F4FC27A1AB18C78A83926A627A8191DB14152B424A87AB752F8979DBDF02537
B6AEFEE65D271F9E3BFCC90C0B082C3D1F77D2E1AF27C1091ACB90FDADD69B21
7F8925C8232136784E63A90A5226D9C46DEEA7A7AD477BD3CC6BCC772A6A7CE9
DDDE578B6B71C73E60E3B588A76C4276A3B68C9E4FB771530139344ECE15CB77
048108E56E60C55781FF4D9B63E43E606187C430FF2CA43B35373556D060E693
628C9C33327DABF70C169CADDD89392636D1F6636692D1DD600D7DE98F73975A
9C3CF72D5552794EFA5210F3941D39A567352B083533E9CB9FFCB07304F60F05
38BC6E9B96B1381E84C3EDDD5DCEEF9B328B5CAA147BD686063B686856E77A2B
C7E29ABE94452AEB3B68C28DF3417A411DBB6FC328F182C1573CDA9AE2B53A94
2F964CFF55479F3AC5472D794B2AFE97F34FD09E487AEB96A5E643C9AF82F6BF
1FBF5305A7334A8E90DB30C3275FD3058E30C6B8C7B0473CD97D91C8451947B3
763E2998318E0C180AF566A836DCC5E4C22F18BEAAC6CCB9AA98B156B59265DE
661A3049AD676BDACC9E431E0C4C0A3F1C794570436D827D8B4AEE442DF6D9A0
EA4B7BCC5F0CA377A914C1B49B66707F2D37D5AAD8357B831A052B65901CA3AC
2D476E711D708860666413CDF348E496DC8373ADC3BB8B4A15F157D1E3E50A48
9235EE6CF156185E5FB4A8893138E97B4468E54B8E5CBE6E1541DF97558D27DE
902516C70F1298F7C17E5FD19D34F3E38169E1D6DAD860109CB3A116B13EE719
D9A6F56F92DA250D5912EBDBC64AAD62B6727539487816DB2C2CB1502BF67C55
4A22868F50CBA1CB020C2BBA91C327106DCFEF15A41511777B30EF6D9E830D33
5551A85BC5F175E1F1E4E6E7477D347A066A881E1AF8073163CECDA77AF62BC8
FC634137FEF052367138D6893B03CFB5D8BE8DD201C94375A2E2CC9898AFD52F
A98A7B235F743A9E5D3D7DA8779B032D42D30C8B685CF74241935CA8CF4E32D0
0AE9E91C4935D4C8F1D4B04731C6D325BB778A9661A42738DE1E63D85CAAC9EE
4C8F26FBB61365A8D1B3E9E4A2020A7302594E7C992C56E5D21F421254857807
293F58F42B00098741959B71A1F1E7FC98EBF7EF23DFB49096DBA6FC5A4704A2
81F71E86FBF54B08436BA1F55B3B9671F0490350411678A09CEE903A37720311
D10E6823DE99D94ACC54D6FF08BB079C36E667DA778D09574B027BB6FEC2105E
FE6A3DE580C763EEC8FC59FB9D6AB81BD0C64CAD73D9857A10E505ABCD075260
6A9F554864259B158FF14B6D5EB894AF5CB2593A4D443C5E2C5C99834F29C96C
4167148BA7CCE6BFA0A131763994D268CD2BE565DF6DCA3BED6E821C39004EE1
9E40EA741038E7A49B01A302A09F3C3E046A91A782DDBD82DF0474246D41BE12
3F301640DA56FFEE5CF6A605767E3036AADBD0867D0C630432955618784AABE2
A1E731E8B7FE85517C1FE08AC5FBF317144C734A8E4CDF19383CE61C8537AD84
F1D43F1DDE40B704EF8EB3512F2D002AE1EE8474BD0A12107B41A96DA9996F6B
AD780CBAE845CC2F4233B23BDC2C959003F997072F7456BDC5D0546A3191C924
66452283578E5035448686E7DE488E5E217F59A8FA2324F3A35FEC7A8AD8A26D
98A16BDA35F72B91B0F6ABC2400D99A88384AF8B832F91AC003FBDD76005E349
188CB97BD3CF741C01CA3129F113E0F79CD219700C4A3F84CEEE93C0BABACE19
A3501BBF66A5C20E8D2FDBAF482B96CA9678C3C353F65400A21EBF181984A8D8
62C1E3466594C967C45026E1362AF24965A0DABDDC3952FEC1B5C93C733E1617
4692A56563706A8C4EC7510D06C0D4543F5AB4C61B3D976B93AAEBF4897F9070
FB433CC9A67D862616CBB4DBABAA7A8FF4958094A6122360884BE9B9C5E73B6E
9A35415DD62FB25B7F1C188FCF933B6EF4993A4EB946941594655D7309E1E50D
836ACB570698265A59152511AA53EDCFD29D72A8632EBDEFED79F2F8E1D2BBAB
8DBCA5BF77C99CC911398867A0984CC649BA5EBD5323110AC8AD48FD0CD45C89
C5AE9DA169F2BFA676E2A9BDB5BF8A95ED2851E215304B2E4473B68AA7F2A9C2
910D865CE15D189BCA09436BA7570E56E67BBC702344F52E046987068FB853D2
2E45A6F483E27416C97EB8D72491D01C0955E10CA5C70359B8F90CAF67768B5E
61AB2612A5EBAC73029597E0AB924AEEE0240ECCA73949AB3722E8BEB2A16361
8497722FF6382C6978891680B6861DBCEF320E8DE457F4704A62ED2943DE2382
7E2BA30649030D92B3CEF2DE55AF4770FE275E57034C9D9D7112A1A0F8F2DDC3
6F391D18A15F6E0693B9DC7CA095C3209CCE0D13697CC084CE310BF499701BEC
1E1C13010A34C6FBCD44AC3BAC9FE70A2C065A1B5243E26755033E2DB0255D68
2431942FB598A96611B77A877F230B06AB3E28DC01A585DB605AC6C3044EF2D9
DCA7CECA07CBB4FA4718E57F26B520291C46A9A8AA8D3BB7394111096D932741
495A858901BD8674A21208E163160F727F122D4BC5632D2B30C9EF10AB2F4A42
72E9E62AC44CD0CCB50B25E30EC2B90D9A46CB8CC749EDA7A5F5A1C1734AC556
3DB253D56657EAC24097E94045A4BC969BD5ADFB577F5A5005F742CD2615DA9F
6E5F65A02FA47A8A36CBBFAF2442C01B42EF9950D02E05EC3CA855569FB13389
90ECF476259754C8BDE5B1E7816C64288352EAEDD488ACB3D0219C14C457F665
C5947F08EC99F8DFD2DEBA6E6972D4125E2EBF88AEF6DF06C5996E48D52DCA99
365E2040D066081368AB6D0D2429C2FCBBCF6FE387A01B7BF00C66E6D21FF951
EDA6893B597C4B2278C8B4EFBA21B34DCF3D866A7536BD9874FBFE52E77339B5
28B291E1D519938578FFBF2B9FCF7948449BA8EC6E99714BA5CEF7E6BEABEF7D
B5D4475631CE1C48A51D7EAE0F048C6118882586B04DAEBF9C7D319ADF3CEC6D
FF712845E670BEC0DE8D506183CD8A9D26435247C1CDF5FC50A8C6EE8DD2ED26
27EA1B6EFDB91C272C5CB7444F11D655E6D745BF3A9DB8CA1B3441C142F1507C
0CA0CB1C2CE663FB337E7DDCED1F42C76119CA71E372B57818CEDE3D151C91BE
E09644B62EB1064630EBE55F55F99B68C746D3D053B6F4CD8D96E3D6C4092ED1
A9C1D3B79C611520BF8C1163528E3E446E72762A625C1C3FF4B7391D6031EBCE
FD5B5C4B08C0A3124FBC40DB6908828CCFDECF732182B953913EB2B12134F1BB
2843FB7FA3EB1945FEF24587799BDE5C6FF70FB819C49B42A3FC2B18AB885A91
2ADCD162D466095C7439BAC2733937729D26209ACC1264DE0F3EF0AFF7F5069E
74B80B63D79F6FBF2FE45DCD7C69B7EE9CCAB68F0BD33DA003F11EB930861A56
A5188E014E40B9F8D4026C7B1888A966D1B229C037C1DC3D5D575D62D4A885E1
9DA31DF09746BB0FDE16EFAC1A801B110852EF0EEFE8E5B592366A05544D46EA
8B0F2D661DDC5B400A37DFF7848E75E9EAB21BD4A65241B72EEB2E59B0A96924
D633132043F78A3B53E348E34681382BE6BA2F91615563FD3C01F33C37F75792
0BCE0D9AECDF7478E1920355F207F039B7CCB5B8300693E1433DE4511D10D8F1
CA0776F16F3DEAB2B501B702A52A7B428E584DF52222F0AAF87CD854422E2099
BAE68FEE0D7C5CF7E98748862699A80B721273F3C62BF79CCC1A162F056FFA4C
32E7E588AC0A41B5579E799FF6616583C368DC0088DEC148036B41B30AC6D7D2
F0F299DC247A23A22E0BAED4C0CDE249D3785A1FED11292D09DC9474E7461531
F015D902341361EFA48B3E3B467D06937BB604CBFC1EE38C9F6935026ECF3DA3
9F13CB250618CD5AC65CA27C30B7924DE91138AAC8BD82859696DC7F5A91BD5F
851D954C8FA91DD27611532070464DF076DED556A3546C08C5F8459407A667C6
499E8B616A72D295FB1C390DAC790EE4FEFDF9B896440B1E137CBB99967897E5
1C9D327E5E5497DB6ADD53A27C34CAAD56DBDAAA095A74467227777094D0341D
4DCED59A5B00BA39CA41EAD203FB02143EBD9D0DF7844F20C0D82477B39218F7
B04926DD29415B50892EB3A39F8C89D2CD0399DE3BB46D8386BC7D94FC0A8C3D
C26618B0FA59E3D37CB50A89C9D9BF211EAE4D2C10082D8AAA8FB3FF63D7B066
107BD3135521EE8A81DFB2C9DDB74772994414D00CC15D933E0B6BBCA75EE095
EC676ACC85BE5189EA312B5EBC6127BF225AA9CC77004DE668139276DEEC76D4
C2C0C036B504DD0F24D968FE18E2F6ACFF15D4966BFFF45D22DF3013A7B88382
1C627E439603EA4A13B176CAE39192489CBAF53A53E726A584D0A1C0864E32E2
8C0E6A93BBA2A17119301AA7F819AEB987821914ED04B7C18B6611D4B2255292
0C55279D75A15A6531F56D2DF3FA26CD795C9F39F000BE8BE5064F5F57F57167
50621D833DA20AC483DE71ED28B1D258A7F18381CFDBB3D2C3D6F8142CB50870
8BC52CACE65295C5CF87E242C83E3967DE730C1CFC11FDCAF71826620E4D8983
621FFE03D497B51EE2DB2CB803666619A32D417BCB8A95964E9BBD0C6D444BC8
C1FB896901ABF6E6EFF1C1F3573C36520EF22D159C66F150049B64F008B06150
75350FEF34634EF2FACEEBA06182D06CC5683874117179913942ABB12FF3F371
BF6FF699E5A1476752AFF326B068F8B6129CBB1571A0C8C3D5F95336D6DA1496
7D34B965420BAAEBAB6978043D37588E9183CB12DB4C45852F56B21C8BE60EEB
D3D9082BC2990BDDA7E64763F1763BD63EE91F59E81E22D1AD5D9914EB8C876D
B851CC304A5DD190A21220802F815EEE957803C06B822C9518649C5DB417B103
0CF11737BB3CB1E73E38D2626FDABE3246B40D1DF0EF74BE428CE04EDD6410CA
38D760A23FEF9B8018191F92562D5AF172B3D6945AACE4F7E54F588CEB27CF5C
7F934CB1FEA1FF69D758ABCC1B316D1C432858CD8A2111A96799DFDF62F63F87
0D259021FDA53AE71FCE676578F27D1F0D90C0C51CFAFDA3BC017F504CB17D9A
D52ED77876B204AC36B7EA59CDF9C5C401BDFF97FC2A3A942ADADE2C969341B9
2216FE4C4E501EEAB32131F64BA99002BE4869B50FCF99BDE45C1091DAABB160
3AE7F32CE9FE116A1DDBF7BFED23F8F6FA29F1411F1366D5A11EAB224EFE2425
8D3D30124A9150D9BCC9A8008ECBA81E69F230EBA9206584F5E02E245C65C9CE
88C0936B2FF8918C970CEEFAC6208B48ED3E85B7A70E9ED3043725A1D96A949D
50C6B68E16C3496D5D32A9B2249087AE16101825C43CD992108A3C833EC6498B
FBBFC294E223A312B81020125942528F13F3B8CA23455DCA7D15A7D69F72BD94
60AB07097FC343C97BCA64C0B51B7FCE961A249AA0E882CE620DA64BBAA3317B
36CD2D983D2D9B9B928CFAEE346D92E922FA44B8E430EDFED946E408994747CD
63A0BA185784741890CF07EF9DE2E7255EF360948D16590CC44144CD4B5C9C7F
621CF194373879A0991C84EC2E6FD6321A158104E3BC2DE6DFE1AEF1A96F3D32
12E74B14DB1A6A96F81C47A049FE9BB5E89631F30E848D1AFE47D1D887C09EC8
0D2C2139EDF5B678C9F63CD57D169A0DF52CBCB3117627A075A39FC431128570
2C987DDEAE3945E9958A2C2E933FEE805DA7E2CC4085CA382CB2C9AD1C06F639
E12BD609B9E3484ED50F708C8D7E94441BDD49137A001C18CB2F644E9E7AB94D
5C03C56EA770A9DCB8B8D958CCA0EFFDE199BD4AD7957B1029301D2273AA4BE8
F2804EA60A603EDA3C4FCC3BDE1BF95EDACAC458CCDCFD7AA052BF8DD79CFF86
E57B0B07912D33CD236087BACAA8202D431703C9B96FCBA8308E19E19C1A99C5
738E554DAB1CD1F342E1EB86825002D131730148E2EB5564FE42D2E1AB86E7AF
3A0B8D60EA289A878B9F22F2EAB7B9A5642D142A3C3CF0FCCE0E75753C1D8373
F824AE7A60BA3B1B9C0456C37678A7F2717433510270CEFA5736653939C360D1
87286D4769A093056C14329DC9FD70939B1813E4ECE6D689B0A3C1686132032C
4DA87E555F9DB931DE229C89D59664FF216D017A32008080C78C427E0E52F393
666BED95E5B204745C76C5763BB7D3096AB2F6E1A835006F1BAD394692F3DF8D
3C2EAD0BD5AD97E55CAC100AE563564FC1EDB0E9E4470A70F8491873BE43639C
DB2FF3B1DC5C878A85ADF68A6975BE0CBEFCB2C3C34A650FE1347C32DFA66A55
FFCCC8EBCEFB2D11237A4C3619C22C645809C6B3B4B5B279BC27CD4F9D6D6019
5E9CC8EEFBA5BB68875E08E0D1A2BFD79F8F354F67F5AF3420D94859E53ADFB6
9DC6C6818F03B5F4F59BE1AD9366701847CD48489794E223CE3A1F5A84930FAA
87A50C937D302D250FB7ABE7D0D8CE90B7E1BF4C2BD3DC8A87714217B56DF72A
4239D252DACA3195B1DB317AF64FFF98361E578037E09962E46CCFEBAB841E29
77977BD09E8C36CE391BF12B2EF5C248D81D3B166AE6DAD65C1891CECA4CF887
9A65088C7343AE4ADA0FC1C84B97F1BE5E8F71CA7D06651E9136BEFBB6F17E8D
E96E921502FB19F0C21F0A4E7F2D49E2FE553BAE20B09A6FAA0D60C7D2A1CC23
6884C6AD3939DCE148E0352F6945C091F8B76B566D0CC3007CD76E4C6CE488CE
CB52727BFC750AAE51A2EF231C2D1C14E35904E8D787B0B02B0D206B0B603771
22EC69473DF555198E20221CB2B4400CF2F9736254A0EC709B67C6EADAD9B0A4
C25A51B3C7737123D27F17AEDA1129825A989EB147BC2DE1A1B45584E7ECCE3D
71277055C7A7645173B7D06B09E5AB52A59504C65DFC5E4F1E08125791831EBD
06D01799C18632424AB9734F0D31C1A5F536C6DD08CA7DE39A92AC86EB9CCB47
B04C193101FFCD56A3F11B4EE272985B54F100C7B2208F67192798343272AA97
DE963B73DED51B68B923684E1F9F786635F2E88EBEE25C1AE9766DF2EC9BD4B5
015C32455D56B6F0EA299D0CFAA88739D5F3950850BAFD8D099A88DCA0547D50
9A72CFDEB967958623CF57869935BB3DEA4BFDE1D0D4795B763B2ED41CE74EBF
5E970743C28FC8AD29CAEF2EF76E0A4CB1CCEAAF8CDADA2F10655BBF75ABD800
373A9E2DA36D16CCF5536B50D67979D843E0A801C55382787EC7E3E5B21852E3
95652E70272E38976A67620F60503130C5AB350FF070ABAFDAA881BAF9AD3EB4
24EB58811906472BBE940D246A2DD7FDCAC7490AF71BB6460BAB1DED34ACD41E
31D2FD9C2EB3BD599CF50676ECB567384B0F8BC1C03BC2B2F7E5F1E0D9CB2E3F
46AE65355E66F2D9AF11890AE6E23BFA0F01AF2354CD5CE8843A583636095779
4012ED1A63584227E44FA727F19EC657CF696F073992968A96B43C4C69536CCB
AB2243A4D511D7520B914636AFB2F15ED477673AFD04C35B24E7AD86CBD76544
D41169136531E0E8205610A4591C9440B2F23D8847CC4EBA121DAC4C593781CF
0AB682AE1C33943FFB1509DA067BC76DAAD5A0AE231EE23EE5109C4256E14813
97F90E777A7E259495A593E405A6AD36DE5792F5270F613C73A2ADB1AA0FB7AE
E925BF2DF05204C3AD203539DBE4D3EF791B9240CB5872447F907263E9BFBB4B
F16E9E42F3AA1AD4797547C52FA5563165EFBCE47575239EB81BD7A6DF25E3FB
84A0D8193F43FF146ACC9B6049F59D44F7BA62F936646675E6E061D6B0B3E91D
8B2A8872B65F592BD45E2CDEDBCAF547A0D98CC0BE28F9FC36D12360EF839647
22AF21AA7EFD10662AB6E3F6ECFF476E74BD147AA7105F9246A492CA1226CD5F
5558303E63299B743543B3BFD0CF66A123D3F59FE73AF67B2C380287070C98C7
BC051E85E19392B15602C09D1C2A024251EB3A42D50FAF785F0441BEB77E21C0
E37D8271A53595F8C7354855C60B9607FA9566B9C095E243C83271C8033879A2
E1251D31A057F3FD96F7A9A59C8E6B30759E87519213B46D3CB38B19ADCFFF6E
13C310779F90FDDDC8CCD31BDEC5DCFC1BF30B97AD9A2E6574745463A252C3DA
BA985D9A8CFBABBACE22C3FDACA71113BFFF3EC8558EA089B0C3CD649B56ACED
E43ED0A7A90EBE569851044D8269DCA4BA4649EA9478B76D61A9B138BB544B87
B21626B1FEF144651474F80EAF1959EF6B475F09DE558704BCA77790EA1B598C
DC2B459A24A53C1A924910AD3C6704D6B6D29AC2BD3418B6133E151F655F508A
E3185320C0A5978255106599C8FBB641DC8A0237534B7A54EBBB0416611E320A
C5D326CEA89784D7538083CDD148B7BAE17D2B82CB82508E1DA30A998F55FAF4
3FF041F74E3AB938727E0BF278587488E7018204A466DFCD79BDE72E936518DF
57213653A8FD28662D02D2818FEFD1D224ADCECFBB611DBC9CD1ADD058B541B9
868ED1A26924E21DBAE970895B54794EA2F0AFE5423D1F8EDE867214A070D437
596B74CFD8D47298BEB581B2719C71DB7CF2DE1362C4E150F0A4B2E881ED2BB7
4775A09169CAC9268488798588C7333516118103EABF9187D7B62B3A4F3E330A
92FC2FA2821734958941DF37D333CC1D09D319FB2B3F60BDFB534906D154C9FF
DAA1838F59089B7134C32841D59F99FC3FA658A03ADC928BE43B50D44047DEF5
48336D926CE13EB0DF1D53CEC256B0D2DC95B5CD34FF746F7CD126EA9B072169
8F2088D0697DC6CC84D26E05E62ECC5F6E9473D1E2E6F05C2B07387BB7DD6EEB
19381EF5282B95E7D5D55C26726A95D8533251FDD0F13DD4B54BA6661580205F
82FFFDACDCB1EB9CEEBCF461F5E000B8C4D09F4E999523D6F71D56081F5F7B95
28F1FFC702CCF33E1B39FD3CE98BA78F28C8B5231A688BB842E1D02CB3BDF3BD
62DAF41275F7BA8C687203C6E59E37E98EF80A282E46D18A0C8F859B31228FF8
C62FFE5863029310526086033FAFD6CFBABD8FD8F0BFE0F2BCB54ED7D7BBE464
5C8A3C783284CEA4C51D530A599D63659837532E4EB6B7D7B2A078E2BC268778
9423550EC7FD7A7521A8F621015AC7D4CB5BA67DD8D5E85F8C737FF2198C0055
68E9DB523DCE389B9448B76DECEA5E32FBB3CDBEE57BC350243BE39BC2E88779
10F66E71B5BAA3AD115D3786292C915FA10A4CD232CD02242CA4B41CFAB8DA27
5D84CBC1DA4204F3A2E89B17BFE167D6BE6F362CA12B7679B11321F10327EA94
BDB637847459AD015855D79B41E389E5CAAF95CA8FB8D7D62FFDE220DADED071
BDEC8379BE87E628869FC44FA814B2ED31B11825D99507541A96C46D39901745
A730B4DE29159937321E03C585550FF45CDD759F3196AB7FD269ACD205C8E7FA
09D1ED57631ED274458686AEEF977559B54D38360C98BA6F4DBA861F40D12C1A
501D4D7874FAB6896AA7B4C1886A6E453E0B04CE7F0C9E8839CEAF04A62DF3D5
E5CFE5E93C7CC2592A15861DA023ACF6D6A9A100AC6E82F6749559AFE1EE01B6
DECC5B7E0D880D720C008F4FFA8D307544F35E6356DA0063B8F9B006FA4FE77E
41AA538AA0B0EC24C8598A964D60489A77350CCE5316BD4040A54900879D1E74
718FD67135F17DAFB0D00A3D2829DD5B35314AF29DDC5B840E1C26187F18FC48
836FDF4155F1FD887B0D5D3EDD876981D688ACAC259809EE9F92F766B51F4F9F
D78216A6B741647EB29EEA5678E011B0219A0B1AA0751746E80339966824BC7B
BFAF4BCD9CBDAD34C38FE33008E5C1FF5AAD6B348FE702D99EC976D26A4C769A
2882C72A826AD02F0C1AF964C9DE7CC307EA7B05F9E9DAF633379429C859BE78
2181FC189DB84170EED1CD33397B19882D5292331D1D5F3C3905D6B2C290A214
D226E619430AF2671C045DD0B533831A8BF86279F312A8A6FB42CDA1A3622C4E
019A4AB00806C1520AFD2CA993C2D6A7544F5F75F6A9395ED6E5C9F18C2F7885
7C87E574E39209F297F05F5E811D133A1D5B27501B23959B19B222E176575B10
B8D3C188977ECC6F5D567C4DF86A9B4C26F1CBDC4971641FBA194F1FE6418195
D1B7D50007C1B4F6117481E990EA9702653FD94F028AD24EFFC4114084618861
1E976846462BD170FA5F10A27BFEC262B30F8A73AACD4BA3067ABAF53C00B3A5
04E67DA2EABDD3C45962060688C3EE75CBD688C21F9160011D3F541D1D419882
0EF956F8399FC92C9FEE59CD29F4703CB5993D7F0CA2580B6D3E89E24A1540CE
C3FEC152651A05CB13CF8A67F05ED2CF3564261D4AE74FCCC2BDEECF55EEB622
820B9622E071411C3F8BA30A876EBF60B459DA5C6A3CCB36A1E4F7935312AA01
23B54CEDCE30E6E559C566332EE4FA8ABB0C9110BEF0DE1A9B1E6F4A2E5F821F
73710877FAAAAB7B6C98FA1C5497B88F4B70FDC92791065B9A9454573ADB9BA9
AFF91E0C02B9FB543E783AECC845
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMEX10
%!PS-AdobeFont-1.0: CMEX10 003.002
%%Title: CMEX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMEX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMEX10 known{/CMEX10 findfont dup/UniqueID known{dup
/UniqueID get 5092766 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMEX10 def
/FontBBox {-24 -2960 1454 772 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMEX10.) readonly def
/FullName (CMEX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 26 /braceleftbigg put
dup 40 /braceleftBigg put
dup 56 /bracelefttp put
dup 58 /braceleftbt put
dup 60 /braceleftmid put
dup 62 /braceex put
dup 80 /summationtext put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23E7BC2A6E71BCF95FF3DA948
1A27320759222BD7BC7C1A533E90058824F06942F0234C68671083E0E4708398
D246C94F9C16DAB6563651BA33D86273FD2DB3C50C106F3CA95B1C79778D0BEB
B99D9CFB38E41BDCB4261A86A23E2CDEE4837D9B6F0E85ACEAA984C344A63709
EA35B61F08821338D363D172BD185A3658F43052AE1E61D879C99DED7F6D726E
FAFEBD881BDDEA91FB09DB75675FC74AA2BEA8771027C7A51BF849F8E765B870
8F7CC0871F301ADEF9B71EC3C607B2F51325AA5B3DD74A2C5426E7B329FAE84E
94A159C8C9C35E27A0FC93FB98A4D616750DAD50068A5F0EB96B8228946E5CC6
B69E93D262C92E3BC7161313156E380A2ABE27BE400A23DF95E65A4F76B3FFE4
CF3CD141B006C487EBC73A5A101466D4388FB2CF1D9439D0714720BB58537B7D
B3EE1F04AE117222CA5F0E5942F7A875D55D91D63958B1A02405D9DE08109B8C
7104F2D109EF7074852DFD74CBE02E0F3704F2BACA14E05EB1D0D9021EFAC23F
76C2389F8EA237D2E2AB6AFA83A725E16AECCAF025E05F1B1B5699D761F62A46
EC6F31B0FE4769BD0D66821592ADBAEFA9EB454CF1402FE870F5F96D09980C1B
8B6D2FE88BE56032C1959E6C3DC319B6A7353F3AC629CE5BCB947B4B235426E9
4769302817AEC1ADF50E50265AB488017634AF824D44D3C8423FC7CAD97F6D6E
6B34313637687FBDE3BDF6FC951CB41277D8EF49D14767B59656D214C9724DC4
0523EF896F4E48434FCC5D8423F07194C54D48C62AC29001B10C9C8B514B24C5
CEB60FF68D36749711E108DBB52738760FCF6571D5B04E58F24CC0247834B412
D0F6F8D7F1573F23E3E399D5A3A3A37FCFFEAFA044A5694D2458EFF2BC1F7650
8FB0A27C505A20C16776EDF94BEF9DF702F3C64DBC1939BEC0399B6AB283F832
DD8FB358F701CC075C596FA7B0ED7A9304DC73274C8169337D55124CB748CE26
A635B2704D8F65E23CC0FDA3C57ED451F8FDE7B6FBFCE2746F5AEA11B065A6DC
C3D200D962A034DD6757991BA62D8DC0408F49083D48799B6097B61343365A5B
30FB02E9CDFB5104FB751BE8A268EE55C1208DD8B29D5635014EDE9D0D94BB64
ED5643B3049027925BF2FD7EFCB631E01269B731AE12AA6226B2656F035C7E92
959C4A21BE40D7C138C8FF28C9FD4B768CF25F08859AE84FEE6EA18C033B3659
D9EE250BA5FF2568E8BF7684A93BED7852251D1ADE5DB815AF3AAC36D1A500C9
41D1BF3A1926828CD1F9E501ABE441A07B1B96612CF0728AD5FECF7480421F46
0B18E06D2FF1A5B1183459C59517976474698BCE18A728515CD489A83C001AFA
47BDA929F60D0FABCD8786AE16EE18615C37D18703571936A365D334BACA9BA3
08E2523132887B5EE95ABCE8581C78C3E858DBF35ADD56A1F6C2489AFA73D1B2
379C5064DAFD30FDA84581FDE268B470636EE35F21648955513714F6EAA08AF0
249C937721DB0E93D95C4DDDFB0948051953F39C6D2D811D3FFDC25F786E072B
2A8A1F4830F9CFC34666A1D3F13268980E9A26682CAB64817318A1E266F3D2D2
DE4EBB3EDAF0E7B526C838CBD7F37E74A35B1C3EB96DA4099DE689A53970D4CB
9AB355E93EB294B07DD09356C338BB4A61C147BEDC152E58DC92FA69846E4829
551A5330006793CD88523F7B3AF7B4475C531C67A4B66A603597EE72C4ADA491
BF13706F341125CABF37FADA554FDA0BA5534C7AC35F1829E250C885D9A9983C
5D1FE8CE24458A8B13E5C7EA22BF1608AFA96B83C700889A2A6C9C4052DCB892
6CAEEAA9E7D7F3E215019719B36A5DAFCCF2396FA0C04AD99A7C23772A7BAA64
D1FABE8E476EAE9FC1A3E08CD6D1DDC6E087934E676BDFD1528652B6B9A50A35
2029466364300AF4CA3C5883F6293A7104617D0858B3E43D43752F814654A938
A44C33410BA0E5EA7BF55D4F1D57E27921DB05C059DE29BAC1BFC9B607D2C5CB
1DDC47793984FBB18BD99E1DF7776B563A55E15DF024D6D8E6ADF62F16F602A6
7DDE1C68637672AA9C7A1250161502ADDDC1B4F6011A9BD5605B73AEDC37CE4E
4467C838B7692C4D541EF87DB41123F9DCCFFA971553A5D9B0E7EC539A28750C
8554383585CD8B93DF731A301D85BA9ADC95B4A3A237794C30230A82300B6756
AE5A46A090958109C5565EF60B0B16D6C0A16A56644B05D3371DABBB67ED9BB8
9BD3983575D371419C7568B2556649402AFB9843106729E4EA87B3F9038218A1
F820B098A1271E330708432567297CCDA332B555A40C62BAEB16330175D28AA6
13AE6939CEFA2334E3E890B66A73277F0B63B1FA59F856ABECC5FC0A50571F5B
0747FA554F5FC72A51E215304B2E44701A13E41D91397B204C66AAB3D101004C
7FEF2D87DA558EA057BD492CD6EF93601CB63F78426B502CDC5C8E9EF4FF3692
376601B1FAADD801602668370B5ACEFFDBACA8F8B3F4E850D07A20F6F47440FC
FD39504F0FDFCA35AF2ED0DA8BAB63AD42EA8CDA912CE17F5E62192DDD912333
3E9FA0884117F07221642490044A72E359D5F25D9591A8FAD568A3DEE435C354
11995C0EFCFEA21735DF44A30F79F747510E28767A4266461D1394F81344F6DB
1FA8D0B0D9E5F52FBB663C8F1E91192E5608FFEAA178B93F8298F70510A65BEE
12ECB5D675311B5B3B19205476512D92B1D16262720484049370A76F78D9BDC3
02EB96AC1E5B3CB078D2F219988FD0F36B043ABBF347B22D36CF541A8F80F791
8E4F92D900B7E7B64DFD500882EFBBF23565FA470103B2E0D2D14E3E4D7827D1
BAA0F84713A8CDE5904FFF2794850871DEADDDC53B77A502F5CA98B0744BB656
2FC40ED2AEBCC5CACE2301E983E6C18CF16AFB9FD8CA49DE51B22F4259D43076
DDC1BD4974CDF2E733EAB6334B1D5614288CC81FDCC722CEE193635D1088FB29
F80AD5CB96394AE89D920DF8E1F271585AF019190F17DB51FEC9064B54C3A53E
3FD33C3B553FC79F743BEC9674743BF0A821051261DE4527A2BEF4A04E293E97
02B181EC5F5EED3E26060F2C9EF6852B7433CA1BC1690C30424B03C522A087EE
92016EBDAC4B787133B4A22BFEF0B6CA564C6EB910E1DBF983CB4CFC3A1F8A26
45329CED7F5A8704ACE9D4233583365A5A97342A053EF403F0567E9D0A62EBCD
84B5D7145BBB11D31046BC2CF5B450CC68B85DA0E78EF8902F8D37DAAA9D4242
455288C0D73748F9BFEB1B1769D6FB84B94993D5F7C2B9CBDF75AEF2C930F277
210B3CCB8A0299F50AFE2548A4B8DF5ABB52F098ECDD56FCB8D3A406EFD95088
92D7EC39FDC7EB1824ECA24D0CBC6EC6F4C6A7F9590D593B269D2CC0BFBD961C
AA8BB4296B4E4411B54367A341A5EDA97288DAC370A015FDE6D7FB0A4CECEFBD
1A67DF3A3703E922BEF2C414FDDA42482EB35D5DBB206B44C76C412A435A0842
6845EAD204BDF87065CE2C99B05D2D4080D5D11CFC3316967472C7DA44CC1F9D
51B83B4BE9B882D6E9ECB482F9855D024ABFBA502CCD624E0F88164A6F13CED4
85F20DC01BB15C7D78B1C79FD9FF71F4B043F59DB5C297768115542BC7C8A99E
ACE39A268D32122541FB441FF1364FCBA2B7627F12C49ED038BC044B6D9D533B
A72D35317A5AB8D91A9AC56CA90D1DAE9F967605C63BC9F406FB3D5BAEB4B38F
4934EE3D2F5FE434B45CF5C2D0E5E417EC279DCEC4F16504EE40E837B11620B7
7526AFF23381ED3E9A92DA4DBF4EA2BE4FE444B9A74AB60EFC818E20DD8B852B
DF8CB659C0A3956D0DA61F49A9DD467726E57E9B32EFF540D551A67213D40273
AEAA6E319D92B4B406377D36DAB85662C755D76ADF5795C52D54ECCF0DE81E30
B84F951233A0A400CB063911837F0AACF44AD2441A7CE08818D64705E1ACF7E0
F59AEFC5DD812981C5508385274817056B2CDCCA4C9F3103C92838917EBFEC94
21D5737AC634B23B6F7F63B166D60C6BAA8F33AF44379C5A7337E737190EB3EE
14272B905D08C01EA118964D3444A03676FF3B62E7626168FA1DC6220699780A
0BD5776DDFA26BF0BB335B3C978CDD5CF1A419D4B5C562B3974FECFCF0118199
E547EB287CD92E32E881F344420FA3CD97333BFEF5D7E1BA31FD20622E5B4F95
692DD0ACAF01D413B21C8608FA87B470191C3CC5AD333263C955B4ADF4370FCE
D6667FC93495003F4B6AEE4F83603D55F19EFBF56F955FC9CC01E494804952CD
D426FE706C13D41F87C5C668D8B6BE50AE0370E07F52AC0534ECAB1C19851099
FC0BB1EC2A649795A62299F73CA606EDFB1D28183DC63ADF67294553115E8C57
7CB603CC491A6065802B925E6DFBF42917EE6E44C714228AE452851D61BF70AC
844B5D800EF029357FD659B8A648445CED0ECAE1474E443124F4B3644F54C556
A330D92EABEC7F607C6B13FACF69CA928F835056BD1A8ADA20EFE6BD5CF4A1A0
8B9E415E4A5FC6F209EF05ABF2E0C55F6E3060D1C72967E1E68791499F303C8B
3960C5A1F2DF6306710DFA98C8D0815A06B5590374554DCCDBDC4C295B3BA6B8
8BE3200CD4421A521C06BE39D4CA495BC63F3F982CAE3C82AD38DCB537E617D3
34BD96EFDA7C6A0F6D97A6BC9F084645390E194E7A11399FCE4EEB9A965909BA
6EC69D34DBA081BB3F18BD1ADB1AE1B7FBF96E4C546498667690857EB6931841
46C427A5B7C7D99FF889582C4AD11A7D267B301C5A5AAD9DA99D5BFD438238DA
62DEB899FF0F7B7997F781315B2CC328BE3572A3903A33EC901AC6BCC7F152A9
8A6865C6CB17189A4EEB699006A5F9D4482D53A76E88438E444F9302C79F0DC4
B3033D29D303B38F5959F020337EE6619DC8A8C3912101B02CF8AD113BF4BC29
8C6B9D25AF6B6A787F222C05964475B49B6751E3A3A6EBBEA03677D5B136B9DC
6D9AC20193BFB0759E89831C9E2AF68BD45ECC81175DFE80DC0879069ADFA8E5
24CF3C84121CD9739A28BACB9891945FA4E72EC07136682E18FCA81938FA6A3B
8CEFBAED60121530E33C1C0E698B5923D6AFC4E907A99B1367C3D435CAEDEF5F
878237453B8DB2FE53073CF3319FD096343F42D68F097759D051AEE17E4FCFC9
86E17099799DE82A38F22D870BF7AB90890E3B5264976700BAE594C8563A218C
C985D9A5A7D7BD959F7E4E66286833C86E89203ECECD6FC4C6FE1F04010218FA
A5714881C4C846E85F13BD68AC250CD0E488DBF60BB10B2CD7AE2E30F9C21DFA
0E84F76B4E996AA1C5C056E64BAC85622C160B56DEFD4DEF86887C1201F7C20C
076D4A27BA69572BE9C89FF3A9D3BAA5CAE0A6F2187AD01ED497798A305E3BD8
422DBFBF45E3F4AD35240B07285128B59FA9E83D9F6A2E620CAF6DB05129D930
44CB241CFF84E776315114C3AB61FBC0A8368D9154CC5066E2B162E89DA51165
F9CC075F2524F9A8624D2B56ABE64AF93B9F0407CC770C1F2C76CCDC06345D03
7B173C2FAA201D8E1F6C0315987A7A13902F4AA5ADF081C2B0A01C77E4F7A3E7
6A4AAEDDC577E855D69D38AF6A1D271B02AB496D94D81996FB078FBED17F833D
C6C0BCE141BCDE277D530951DD6574B9CB3CF0370D74211E9AC00C7CD3A67842
0B4B72ED517E4906409DEA7993D0B8E92D418139960EBC86BE63A1B1D417C451
8BA13C230DAE1EC4E466F23351D410D9FC4A7BBD477D5FA07659B71CE9921B1B
6755C67AB3D4988064004CF75948879D16174E8097C91F7544352474C2D9A1F8
A1813BC6F4BA13E952678F5707F19B4799ADB3BD186DF650821DF58CF3C78D67
84E4E1DF8DACEC50D15647C3DBBC3C4355E602D3A03171FE1CB36FEB940211EE
0A5300841DD7B7CF91C02B3FC5D89C691156BFF8A38C6C72789DF260B868AAA1
895046E405661D97FA9A0048AF114A89E3ADAEBCE541753E4FFCD902391B5372
6A97E32F0257FA9FA1DC15BD3140EC7F0CA5A68AABCEDBE73C38B35FDF195F96
0F9DB0F592C188D72D73512F4DD92D2371D1A59254BC477CA084E68184AEAB6C
266BB21DC3AAF874DE999AD2A17C79621AE322612EE4B6D5BDAC511418EDE90A
AE75066AF19662C4AD855E4200A5D67BEE4ADA9A399192C74D35E59B15FB61E7
BB167282D32D538029ED22CC5C9860C1F6B7BA7F33D5CF108D4BEEFAE7B37E67
39391F9934DE17956303532ABB011540645DB8420749C9B9A019C3CE86ACD566
1EE8D8D5E0D8D0DEAB33B5413EF10D4EE650F82417002E436E0B3B628A657F84
074098C2E9F897D9AB692E0FB9F268E6728F94A79CF4D6B0A07C8DFDC1D67FD5
EDD5863EA8949D180B1596D0009D662FC429449D76BF13D83F0D0CF165982443
E9CC288CF7C5F2E17EB7F3736D1FB814196CCEAB8C833720E3733BF594E1B536
BC0063080BC751F9DA1741522B2967D07DDDA169E7D3417B4A39EFAC15EA5E8E
DE3473CC9DF991FAD2A971F44B09635085DB02D692F149F144F3DCDB69B72C53
A2AF34C65DF0D5F35E82102E67B733750646EC03A4FF47138F7998607BD93AB2
B63A0B82E8E225FFAD5DC468077FBE8C8C8E5B4BB10A8FE836B07367D742BD6B
D36DF5304B9DF363120504C279453452EB177FBCDAA6F6FB78A24848F4A1D94D
1E49F6C46CB36796F3F4C9739346381F28AF085C5EBDB2A02DC0570C7A21E097
77522D4947B51182431BCBF3E55CCDDE93A916AA40CEB577277FA512380816DF
9111C56F36341381D62368E70462577D0C135BB3CB4462B269AA8E0F03245BFA
D01DB8E23F2DFD5DAA88FCAFDD51D48E562EC649DB1FFDA0FD8CC8C48E6A9207
260ABE35733D75630053CC74A07E5AF6FE87BD5FEA69CB6AA20122276AD92853
6B225BC9E3350D1B1362E04C7795D473F1266852B02C83D02D938C55D8F0C671
7A9205F8CD058304DFA034D99A6BC16C582F02484A089602D42DF30D7A5716C1
D42A4CE56C19E40C01DC7DED931FA13679CFD2700B3826A1E6539AAC12293DA8
664DE251C5D1761BB45FE364CE3F7F7E9B67F86EB31D9626CCACE4DCE03EF3C1
0D2FD1B12B5774510D46C5C5CBF0A34847418B9A1DF0C67789422D0EC2D49576
9DDE72D63A4A98613461A6F730A05336C691583F96C3CAD2AF7C4BFD3AEB3814
D909858B6598FE19397006C8C4D549AA1635968F47144E7861A2BCE8AB4CA7F0
4D253949AA0127559FAE3161C810A8CE22A3079602E747C9398F9C8B2A868F23
D77D7AD6B980FEB038E0557E58E1D7AE471036CBB96B83595D9C96A4895971CD
C2A810651A045F876A1F5AE470BEF39F856808B1F8D736030A722E1576BDB3B4
4DF06F73D38D313C8A0D3504EFBC774750C9F6E687ABCB1927FA1BB3882AABC1
2306A030CEBB259AECAA646C6497712F6C1E9DB7E1365A60EEC5AEDD5147A77B
1E3A10D73C477876D54FEE853D953EE75F7EDFB287550B93CFA8250D1FE2FE7D
D34441F1224F3DB1D355188819EBB98A94DB193B9CA23803869DD10776647BF5
5BB42031AC44A7339DC036AD0292AB9B732E6FB79BEE852A103C3788BB0F4B72
EF37BB62356F9B2DF7F5899A26F1FE0A3D6469C1034B8AB14F52555EBF6DC592
3F24D6DB395A3A182ED4B8ECEE8254661C19CC942F236CA40BAABE818EC312D8
7F5762C210FCE8A3CB9A23A24D0A751A09F4FCFB72DD0FB3AAE0575CF97D126E
1669203BE1C8F8FF626F49E8AFA7B29EF26618C6D8336D4471314D5D009BEC8C
D914E74D0BE7D7C3A2511C0DDEB6FE04360D54FB3283AD67D9DCDE211FAFD19C
449E201F2913232DDAFB2043F674EA73C9F043EB73CC9A96289B3CF819DB3E56
5FE403D8C387C99979ED9F8EB2FF890CACDC0F57FE48BF6D0C0BC40300CDDEE4
55AEB233FEB30E35B679F5830E4BDCCF1DCAF19AD327AC3CF869531008DDEFE9
B5974266AB8FAF186F094440BD31A9BDA29B8DFFC7BC544C719CABB837C02206
D96C0608FDC8E931450C2297AD2C48A9B0E82F65BF29BC3DE75DC7A7ACD5C4EB
16CFC49E81BD1A1BC7CF4D1E7B2AA7E910C2722A0E72CFAF7F981978BA85C3C2
1977AE91593B717DC6122EA0382EC26851360E82D6BC33644A98D460A4130045
F5D2E412BA15C019EB48F1AFC0C8030ECE74DF0FF023BED622F6709EFDD9D127
51E883C42433925F801E035311D4D4CF1397D63F82A037B62EE0996BAC518BBE
4A105B21527C803EFE4F736EA28D2B9F50797E8CE185EE000965928781DD4BEE
EF8E3D158628B30181B3956BDBDE2B42413ACC9B964084A718B9BA00E11B0CA1
69A3713E19AED944038969D3AEB7D0B40D0330A73E17FFEB74F2FFFB4739B9C6
986F1D37915D38E95FA79C5C1E60A4B2A07CFE1DDFA5D66A62A52A99ABC8FE3D
BF9AC78DD6785D311A452680A41D4455445FFCD834D9EE08FC1B7BB410B801BB
362FA1782A857B20D4D2DB44A52801A4514A1E8B4001F5F888411F25E2BD0B53
FA29B7407737ECAEDD6BB0AFE4C46D919CDDC34E647618CBB2510E632C99F22E
43111C04C2F6ED2D19F389E3FC6825E5AB38AA832CF3631134FAEE53F527649D
6D589869B76E93483B35288221AB193E2A54209D4335ACC591A40A0494ED32D8
E4D56C605CE039757028F9637E9BE03650182923315D617EF623D8B4E2A6028B
C25C2BBC4B3D8777206DBE61051CF19AB102DD8AF410EB7707551D4EF2B0E4AF
918F466AFB645F7B364B681131808C68CF38D9BE08ED341627763835473B87D4
5D421CF154EE4AFE3D9A5791DB4D836F93DB23637CFF4ECB5517F0C29A75F8E7
BC9183090E4A6E2D19FAD852158B046E1A88E90A4F9BE89B00801317ADCBC5DF
BFCDD7F0D7AE855EC0D67ACB9148B22B5BC58C3C02B5065DDE064D644C20ADBC
2F7B1F6EDBDB680259FEBB199FB3323A2608E1675BD221F6BDAD3ECF878A18CF
1ABE2B7127DA813183A3B891259A834088D864896732677D05CA4E988C5E468D
0ABCDDAC5F840D1D3A83C26B49A5ABB566BC05412443EAADBB83591290CB015E
670C1890FD3947DE04DE07B9619B5542649DF6676B9D25A4D79F72322E6F09B6
B260B02C000A0F1BB457048ED473D687AE7DF9E7D8C9A23CA13FA5B7403B455D
B5B5183A8B60E30B675AC232DBF9876FBF06AE18F5063C95788129FDE53506D5
479DCAB1B1EA3C366C252681702B88663BEC386C51498A071D4F1397B463157C
B06C0332DDD207E6675FAC605489AF8D7A48DE83C43A7E4E4D460E3691F77840
F919D5CE860618E453DF281D67E44F83D260DD7A78BCDB5B5764F5192EDA58AA
DA53FA0154B67BBE8151EADF5D20B64CC1FD5EFE36E02B6127944E6851F4288F
CF6699B8F47CB3A5901A7F0298336826DE1EEA7E73E8E8AF690E18E570DBAAF6
95E8747E068EDE8E0D67605CB4EF2249868525A995B51145A298ABE8E4799B83
30C2264A3AB37D70D179FF5BC00E29584C017CE9521295A6BD853099B24F1E75
F1465F9B0AF3BD9119B95C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSS10
%!PS-AdobeFont-1.0: CMSS10 003.002
%%Title: CMSS10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSS10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSS10 known{/CMSS10 findfont dup/UniqueID known{dup
/UniqueID get 5000803 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSS10 def
/FontBBox {-61 -250 999 759 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSS10.) readonly def
/FullName (CMSS10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 14 /ffi put
dup 34 /quotedblright put
dup 37 /percent put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 61 /equal put
dup 63 /question put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 87 /W put
dup 89 /Y put
dup 92 /quotedblleft put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 124 /emdash put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C295470093CA270C4488BB4EB864B48
63941B9739638D2E6F3CC778582B46AEB4E466D89D1C211225274356A4BC90F3
274C6AA56E200249B7D0949A3FD4185DCB3E5286910EFD7CA72D5D8E8052C96F
388D12094B87D3705CE64459558CF024667C0FE96CBB32B0BC9E51037D7BD62B
E4B05FF99384E71D78441A79B0B1DBA1CAE02434A9FAE46596FB86B873B1670D
AE0BAF516445A0DDC127F8FF3ADA0B10EC30A9CC1F7E9248828B5E8AB46C3FE4
154B80A54128A08777F5F9B8C519C7E3B632B3476F007FA156E9F39FBE57638B
4214CD2BA79BA9DDA0F4C073AED814ABCCC2F7906C57A872C00E67FF03AC1200
29DAB92376422FA21C67CA98BCEB8C431CA2D3EDDC16972F84BF6DB2F705BAB5
CAB39C82D139FB1304B9E7BF1F6FF447596081D5690B1519E468D6BE49C329C5
C9C809023EDEB9DCE4A6D52A8049E0CC134E8B41BFC6558CFCAD3D9D2773EA16
131567AE6231B3235869767A1E7C1FA6C8D6FC1B276CBB1CAD14D376188C9682
302836A9290E587D4225EB8BB1DBA2C4580A81FACFDA197174FE948CE757C575
F23070FD84DE121955D7D9307BF986C5E739FFFB6CB76822C341FBD9FC2E3378
AC9332B40C07D5B8745D74E30F1D719EAFAEDBF5FBC40D0546F69A66072D8A49
28D2CC2E76B9B1EFD191E0BC7510C2C8761BD92EFCFDAC263342A01398A56D18
121A591FF5CD4AD8B25699A7897E60BA940336BC17B9EC9F97C2464D031F958A
A3548D0C97C50C580B6EEFD0FE8330EE2BB0D2E7FD1DAE33448953544A4B1C5D
8EB57798D0ED4B22909FEA78ECDBC4D8A124DA05B9999242D68681017285A0C7
69041C1F79442279FBE328733EA0A6694D68BA89739FDB9297BE0CF1808C07F7
BBF6F1538DFE084EC8C0EC24D883F6CC08A51DFEA23EE920F44BA55FFF58E960
C7BEE551FCD2D5814DE7E3F835608073C2CB80EC57100CFD484C837881674E92
B217F4D11165427DACCC29C129005874C05CDE5FBB2D912368EA2B98C45AEDD8
8A0D2493F60EF36809C8C6EBBC7856F6656E8D398BCB29DAACD4F7D4300A0B01
161CEF51195D2C58DDFBCAFC1C03F49304ADF02789889826F1E20BCC14827565
F2A45CA57DCC61B52E33638A0C6C5A59B145E82B82571DF1806EC40FC0E8634E
A34A791B1325571E19F3AC2EF6FE68A14B0ABEF7EBE0EDA3942E85E5AE967A14
0C5AEBFF2A36DCA8866700CB7082D2ABE470864C44AEE1F6D180D511304C8674
D02FAB12A7079ABF96E1CA3CDF9D75532123E87663B1D524265AEF63EB5C2169
B67A651A101E1C7EDB008D3DB06DB1FC1A81B41B291D6C4A58FB57989FFCA434
DA84B3914D1D80B17AA3A55A70BBC06C49DD5F7DDD03FEB0055088558FA192A5
261477899857CF598DB740E82D035E84CF17B33048CFED2DCBEBC2B75CCAEBEA
B6C5AA1C6978FBB36ED98D9047028360ED430A0AA69AC85A8F83825EA649E1B2
64B260197B06A24A1DD969CEEEE136FB046D713D0630B246BD41CA285F076038
F7F8431913BB9A3E70311844D4C22AA446E3CA217A9DFD75A898997130269B29
AD4AB7D9662856E677FB2DAED7078639CF31C6E6637C74DE2B5D0ACB88BD61F3
CE3C5D56D3D4B3EC1ACB33EACBE05E53A133EBFE93CE6A0CBC8F24BDC5B31BBF
5B3E55D6B40B1CED389076014667E28BBBD60145A06BDECEE8011A2C6F06D091
73767A8045CEF2A110B614149FEE783A2351FB2938A9F73CA406538EAD82ACC5
A3DFD3DE00221E1B4EA977AF8C89661357FF7D2F1FCEAD6CFC9D6AD81F95100D
EA1F328249AD84AE849220E6593D45015B4D7C9527F3063E9F6DB6E572092A1F
1F460696227D5F0FA5A5484B1F0D8B4A35066451663BE448D924DBBFD388B6D6
D7CFC87C9E75B7CF79A4C9207E29E0BAAAD7FDF529B860F7731EA978E335334C
13CB2F0A4250F5957B44CAA0674AE8356F586A24FD137103973B9A1FC31090C7
C84DC5D380404BCDF3FE20C6F74FFDD8BD1DE845E99DC6FE09931F003834ECC8
08C5D962070B6C44F901A787CCEF048A2C584A2285506B4D4E82B1BF130E2220
B6C8B3240A4CBBCE16AD3676B23A50B75F82CD88D1B8F21D30A12716426112B3
23DFDE5A348DC9DCCCE5BB5DB5433A5AC125DE1229FFAAE0D8319B2929986EEA
56A93BA1FBDBE617F30852A3DC8C712DF674169C6D656F75E252187A085B2788
2467CC4DB08D48EE6A98C61BC55E6EFB1938FAA718802B7587B94C8F1477E9BB
DCF6E02B5E67FE3AD9D87C321CD9BC0CCD36B9C4BC601E6BD552EAB8E1C940CE
3A22F3C2501C3C939CB4F17CE97566F0A04602D2A22A05CECDF4A49CAFD6332D
5870E1F31AAA5F86867F71610CDB83E473B9D20BA00D8986D7148E0EED03865D
9622864B52B09D12E0C5FCDD023D29D5AB1CACFA92B6FC14FC84E95F407861D5
2BEE3301AF399FD7ED04DFDE6679A345A282E7FC08D47E3FC8969D3B00ACD7B7
F8769647D6D4F4106340EF739583374D023C2702C48FAC1B643B5897D2D7DBCB
73257712A0FDEEEB98A021D218CDDEBBA34687E23C4828D7F96D1ADDFAED7EA5
B279322E6D55FB486AD8F3A8E7B2C67915564FE56F0C9277A06B29C47FB7D007
11AFDDB3FC1B173B4E449CC6B198041CCA0624D81B4840FE5B63BE72157AC6E7
03E5E95D2E2CE2E40BCE8044A8F2AA45F855484A891B9F0F8F70188AC66A8DEE
F4D656CBE216E6D9AC33BA8DD0685D480833E1226784469A221D9FA3CA600AC7
5574B5226649A9C48CCB43339942FC9010F86BAA2D181AEB487A92A96BF2EDF1
60F3B93FDFF4137A25A8AEC5ADF8613019CDB103DC4367EF3D8AEB4FED0E6BF7
622AE0CD3CAA0321D26CA4280CFB60D08D9560AB8AA5698231171B881BE9A27F
BDCF3162134126212C523738D221AA05E31CEE73D9D40F73C450B6AE2C1E70D5
C37162BDF55943069923A290A6C720042566E55A21CD81C460818883AB016C16
8FCCD1255A66977DC1C110261D7642199D466DD3D2493A2D47694F842241C474
1752B00DA03E69CD16A8A14BEB8A431A315D19A39BA978E46EB1189089FEF647
F9DBB58AAE6B3FBD475E4DCAD241A051DD100ABE81D40ADF18A4C50F53BF749F
D6F7C8E02A5665B4AD18DDAE79096DD447F8BD32C68F9F97F05E0071D9E9AFEE
257B96D48ABD9920418E17C8F027E9E975E4A08DFB1988E7104CBBC1CAF356EA
7750AA7110BE116AF1BA69A94776E4356573B38472A8A1292C63701543B0F315
611A0E0595B30424A1137478BA6F990AC7C3AB4DB69E75C222B617F373C521D4
246E954E9857AF59D1E6C36412B643733CF5E1C90389EF0E5E0DA55D3AD12E97
E7630C315F72A03CAF22E0ACE3AAAFC1D496CF4E5ABC49C2DD5E264BE7EB2698
AFF36089B5DD2C53DB1C1FCFBE1E89D41A95DDD278CEB29DC85FD1DB8B83CAB1
EB37C531E9BB8466ED6B8B60258D3C355626CDA43A32834DC89DFB11E5FC6D68
0F78CFA871113DB81A1690250A6F842ADA15734CB6DF7C6ACED6D8D586BC4E1A
94EF3052FB0F8B9454390B882CBB6E135AF1F9C777AC362C2A758C3A98117120
73C6E2FAFB580716D4B2889A4331CC658AAE996245685B973D9C184541385680
AEC2956107DAB00230FB39BE98D3CA898D917E5F2088F26CBA4F8B5B115B6443
8753331233B10852702FC26D9DD4C990C13CE4D0DCEA23D62A826A4B4FD16070
5F3638C0A50A3373A33FCAA6F3644975AFD0560EE5F2D1CDF08820373468E4FE
6679A229D6955CFDF7ACAA92A87E6D8571AD18CF59F84F88A674B2946FF20A28
B9798EAA22442415EB46B9498DDC0F4BA6ADD347AB43E9293CAABEAE80127378
129D5DC69F6DFFBDAFA5D65580239E8EDF6833D0DE6DF75F0FD090A83CE0974B
AC947BABBD1B1C7194DDAEA37B0CAB477ABF9433FCE0243C8D308409427D1DCB
8EE4FC36C7E5CEE104904B520B3F6E677A5B92F694BDBC2C799991667E0EC14C
B95EAE7DE1854BF4542F05B4AF401CF67FC3E46EA5A0DC362F3CF177B1796DA6
753AA803E724D1721DDD1BCB0C12CE0859E172D2A370C3697286F80D9E138AFD
A0EE016805F847BD30D11D8B891E54C77AB51A7CABF76BB14B06153C7F811FE4
93FC4B7CF161051A458EDF767DF94F487DB939A2740B4242BFEE234F75084DDE
207E84533004B933D43C712F0C71DA4A00FFD6D721EBC93AFDC4200E3B8DE433
3ED3E1DB799BAA27548ADC853AFF5D9D6BD92D644E3CF394789C99D9DC054A26
7770AF5DC5BD6563929AE11BE341F036584DD573D3F43D9D975201EF77BEEF80
D1EEDD1D4AD5D4D4DAF6D5B9D4C1736CB111D6FC74C236779C0ADA430323A825
09EA8D0CB1772220AF28B93098BDB36913159208D1B2D7ED45808BF7B686419C
5C0E3DAB5BC9830FDF3B494D624EE8068BF6F5212BD69EF466B9A213047BD105
B848F056DC544A8CE66C546B1A4DCB4BA29CF0EB4DCD9C2452F22172AFF33B29
E97E12D8F0D312B03BD9E5377BF0C81D884F1E79DB66E8144F106DFD2579AD26
C693C5B68F3AC46BF0D6281032D4D4BAEB2243151AB1AC0BDA2ACDDD4D590C90
F29B335DF8F57DC593DCC081FB56924028E3161AC4865B49D1B0F63F5EE866D9
7A71171C09B09A44B0E32F03494D9EA63F3C89F5E772BE25A6557F119299E989
99BA041694ED805AA4F3BBDF00D88171C9D43A9085A287A36A1F0F9386F2A98A
96815CA51F06E1CDF20B757983C5FDF4003F5438232159F325C6335B734FD982
1423BA77D0EFD044381AFBD0704E3DE95D23A70E2428E9AA355A9A8A25C6C74B
48488C14DEC93A766E112D74C83576ED355F17A809E8D3F9C65C4E3E14EF484F
4658DFB57597E2A4461D8044E95844391C1275D63F282B37888C842A5151937A
45007547263D70195ACC018A373D498B88C5A028BC66ED96A343EEE74D61EEB3
D9472B6A549CEB8699F4B35154A0E2ED22867E4F9E4A76311EB2C9F9078FBA81
838EA49C2966BA64C165434DA3093206B70186BE80600B891D9979F730FDC794
5DD6D8B2090CC67A634B719F441092A10C447A86ADB78DAE45823ECED5FCEADA
ECA52E363D913D9EFC0ED98A5A1F823DDA3350EE27F09C14E4C7298CC0FB6200
DEBC640C68C82D70AFB7A7BA668F1D7948686206884736CD03D9F6E6CF9702BF
E3C932CEF3CE07FBBFCEC0476EA6E8D5D4C5C6450C8FB236B89BB82D51886240
5BA7462F50A88F69228DCBDF26B7250E90B3DF8E94ACA1CADD9EFB5C73EF9DD5
46052314D445CC92512BA231F79A09A2F0D91976B160B8C9BA055DA4AAC1300D
491193EC66A6DE12BE01EEEDBC3A2291DA1F27AB76596A236B75E19FC5F1FB6A
DA1AD835CA08B6CD03B97B4CA1BFCBDD2500BB09F1A1B0438E4A759370EFA318
F062BA9F3D352572CE232E6FBADDAA5363807D0DC5320B807FE5485C8CB09B6B
0BED9F5B1300FF370252DEBAC9DB25CE2EC494E8EEA45FC6604B3C104E81B287
EDD49F3D7430EC9176A16B4FCEC5DF68DCC11ADF90BD5337E2E4B59BEFAC8298
E5ED2C7FC5928635420FB1955251932713236DCE28012C86F63D12AF1DB634D0
0B8CB8992B8723548177BD6822A808FF221A9E38B0DCCBC1F3430A9BAEDA89CD
ACEBBDD8CCA5E17F1CC37E35A01E058BAAAB6BE7124314DA19962BADB74EE73D
8FB13FF6AFB6FFF97926CA045B62B98BAA753AB0FC78B881D3FAFF9EE2FE918C
8EDBEF87637F1530E3E13AC090FF81F4136E08D5F3734327E643CDF621278741
A17AEBC56E21217888A6C8B5ED4269731910E7E25693CFBDD4EB4A32698F2447
4C45D73E810B627D8719E4E34D8FF378F9B68BFB149AC67B3B1E55F20D097FC1
AF74D46F5A3923C63DFEBFCA210F6B257F5FF3F2AC34CE41C15C9977634E473C
2235295C05C3DF6B3009C7854BF11CC87471CBE085793AF9C5D05C5479B9E780
14A5A6F3F6DDE5A18243DA15732CCF26ADE40C566DBC3C62B71D46DE87A12C6A
647CAC923254E2E74AF882DBD5C9E108A9160393C5CD12566AF7C824EFEAC56E
6F05B92C73A76824C5ED1735BCBAC61B98D509250C854CF1500C212F574D18D6
4426B8510FE9785B814A70E75C9234D42483E736D0689D3561E8EE5650F33A36
D50127589401D267BA6442E8616E2CDB1F6691D3FC4A2A377E5E154972E890DD
60CB463E9EA9A6EA61087DF452FA5646F69BE879337EAA0F5DA4438FF0365627
4E3B16851C2F08E976FDA27AF451CCEFED00376FC3D6E0C160F0BC19544DE289
BECEEF9A067FD71D54DA3A4F73F06E2F522BA07551296214DDA47B1BBB1212E0
1100ACB5F65FD30C655A3402C83058F8ECFE48FA60B6A3DC86C4996414130194
6676EC7F37454023AB53E9D9EE60249ABF6953E76DCE3123DD268BBD492412BE
65D7C3E5A5E483C381182A8F19B506F0AF6DCD55532B89852D1D96021B22E9DF
D9D072BD7DD4450577E658B433A84F92752B260AFA2EC4A118747CBFE36AB7D7
6D5DD96A119AA1BDD0FDCBC3AFDAE5FF72713EB46759A06CD09B5CFABCDAB0E9
85599506AC07AA525978AB157496163AAB387F079EC9FA1F9E91B9C2FBCDC9EC
7027D77016760539AC03F1C1DB242D28D6EE946C42DD2262D82ED48C3A839853
BA977046F0EF373AFF884AC3112D2FB319421C3165DFA5710BFB9AB9595A10F4
9D05704B9E22137CF27F4B2DA9CEF6D8801D5F792969B2E58FB539B8038DF440
6DE20C0313A7BCD16F279290AD6859B0E657CC3041C7928CAE35B9D3A681F2A3
2D40F8EDAF1127E754276556C95E1282514B6EB6E43FF4F0FAFF28C715E3F39A
374415B62C1F5F8E31E006D6ABC736057910A3729AC60360CEE1B2C8D9F77336
39CAC45329A372205FD551B9E9EA5082411207473D9D90E76136AA70180172E6
AF6EF3EF6B38B1906B904BE9BD5251EF067738840C28877659B649C6C4CA328F
1BEF8A9CEC2CB062702F58CC0B8D2D097FBC278F9FD894E10ACE1DEC4530CBF8
E4E467B6DB9C596DF0C3D43E6AD70F30B733EEE692C2EBD68756D0C16E1F00B6
AD011B5DA073A769B53C2DA2E7C9B7ADC6F551BF4DF4C39C66443692C3DC62CD
B1E094013F364D04BE2FBFCD1C7B2836180E9022E0434421FFA4317A50096684
CF0B8740EF680F27F4A84AAF2AA92C64883BAF57BDC60C6467A8D4E09E6316FF
9BE73053045E5F3586DA3BD1298DC15D751913FB1E72EF80047F6B33591B97D3
DFAD34EB224D64EF60F5B4ACC6EB42E1BE0CB2812FF2F3C264AD2E44F5EBA441
670CA0A60E73176ACDC4E42E74F8F489C73481EB5D46A61FDA1C0FF9F8844DBD
99CECAFE2A72833E4522981FA13713AAFAF8F121E60FAA6F379B2C8874CFF23B
8FECE70654E5855E525A403700A96CF7F8111BF2B58386E29640D82F1DD86900
E0E203F3ED554209CBDA2A61A5641D4B39D98C5C43D4575648D06BB82B6C4D4A
F043EC61B17C208CE8B4F43A7BCBBE588A3D13A183D79A47404223037FCFA4F1
DD237344E589F161BB9BBF3FAD2E28749350DB9A74C09E894BBCA85B82E704E2
99788B24642A7D0F0FD96601CF1AE4819EBECAB89824A0DC1C03BA4B546ED36E
DABC8D49CFAA53D2A9A5DD6B3431E364C99ED0323513476CDCEE49BC413E50BF
51EB93563DC03B62F84C5F96ED713F288D109C79179AEC41424822772032035A
40E84014F5BF40948F05E8562C99266B9E54AECEF94765BC79375C69A0385023
A014B8705931C9A419C8F2B72C3F7054CD6487E75ED2E852BC19302D02C671FE
3892C7AF2A90D6F29771AF31FA95258B6F3434228B377F5FB494E28B5F0393C8
9DEA5E5726B81B7983D241BF7F78928EF8D8528C8F6DB7B307D720243DF00E84
A37A7B2C720348F83ACEFFA78929F4CFB5CCCCB2A074C78B92C8573750B91386
CECD4A1243D1B002B45B933534C0B4C51DDC50BE37BB6E42B8FFD25C9B6A4A80
0FDD3858D50F2166A9067E52D8B453FAE2DED99D96EF9523BD348F2C93DB66CD
B17BE44AE1E2031C3CB01E713C3B3CD4361048D12E21C486C25269C5BAF6F1D4
88A0C86DD17FBE4BF01A7ACD72008DA3EEB0BBE3611F26BD3145C75C837157BB
4F71361A279F53E8F1650875D2C78BAFD6B2FE27B6D4E5AC2018D482EC1B6B5D
77B4E31498CAC80323F512CC04F1ED6421BDD6E2223145BB57CB87C6628CDE19
6F3847D0F9AA1E5A296C4BEEE168405C738BF978BAE8CDF24E2FE4D82C1615BF
9A238A0F85E4BB29A23CBA6A479E310F81E288BE6E3A094ABBF8A4F85BDEBB9F
E410497E81F35DF4EB0148F586843E6A0CFB91F3F48D60ECD3F1B70C244F4B73
39877DE9B4D3E5C7EF0663B9B4E40E5BCC6F9DC4C69D4CEE6150AB9A5EE625C2
7B75D04BB8B81BAF6C747AB5C00EBA99792F176659CED9DF2CAF0E03DF07E27D
1884FC4E1FF95EF3D9D6A610921626B6C348CCD21C693650BD529D762EDD8A41
EE4E5F27F6CD6FF9E6BC9C1858BA099DF2B9408541795A8C41BA88727A808696
26C6CB43EB7DE8CDEF76B79746B61858EB183C1BEA8C4C3759C7F2238B951425
F3CD383C5895071E5E4DC32F028980AA50C1B5FA8DDFA23823439A607428DD37
59C5626EA69E1A307AC763EAFA8E4C75EFB6ED5376D82F0C5903BE5066C550C9
B12A6094E92937EC739584B91CDBED2BED1F30440DBE02AEC0C26BDC1268C398
2BAF539930E11655C76CE5CAA364318894F522FA54428A53EA4A991769D293DE
3624FB0929FDED05E0EC927BC7B851EB7D5411ED4D44EDA6C462F10BF76CB8BE
D52E5BEA860566A0232B7E4CCD98500BD030B8E237C478A37F7C9B3A43101B8D
9818461DB508171D9E5C83C94E701922AA61C2195F496BB0AB48A6FBDFFEB103
C860F8617B3309DB14470DF5EF6CC331F651235714B4EECF323141624288EB68
D267AB95895B5B1642C7BD68A6BFFDD6C8308691A3A862B06EECDA829C5B558E
0CCD83653053209238CFE83663E4498F5C755A2AF36A357626980893FEB5496F
30D41D96801D06B50ED49D5D079453C327F2E7A360B48DA16357F454919D81D2
2FACC76F9ACCE9EDAF5997E6082F74BCE4270EA19FBA0D1D30E871EB87B5587A
CCCB2CE06041821B7D227ED4E53043231D5EAA831A5ACAD80CDE20AC119EAFBD
D33CDC0CF22C1D250A7982D09CD8E2F85178CF295BB10DAE3331C3E366A67304
019AC3CE80843672E5DC8A0EB9074867059BF8F4F66084B8D6964FC1D79F6EB9
E5BAB4232D8C96D7C3D0E6C859F8A7BB32F7D29BB55D88B287BB0582F83AF9CE
F3C7EC20FCDA2CE751EA32B52BD70159D2354A59A9E09C69E2587646B9795BAC
52DEB32E89E00042D6F1D15F8F8DC584FBA2173658C6A9E9E4CF5F2EF1198306
F06B8A2DBFB4D4C32B2D5E9A66E1D7B64D4FB7FAE9F4A8094356F1321F17CDE0
9BF673AED3BCCC9FF50C416EF2D0DC473C94E1F98C8C73A33DAA0A704AAA7D71
C2805BBB49FF290717DD6E7C263877EEA97B6792A5EEAC93D51DED7A2A0C9F4F
988A07A5578BA7BE6D9C8F1217147ECA68430A60BFE29993C89D78EDBFB24DE5
CB51D19937195C7B5B5FC3EDBC535E75F86AB676204761068A29F84A0C81CB88
4E2A259EEE6B59B3185F7FCB493005FE26A1205D0B780D641CC07C83E9A71088
001BDB68117C1CBD1A77C19C9BDB44263AB1040A96C1211423C90FC41A7F3964
E7F034686E52FEFF3A7337A8326FC504C9BF87900F3F7F89BDAA19D264956295
4C55E4BD5B4F0FEDFD0B79C00BBFD19CDCE1F0C5359700AEC67881F0ACC68F25
165DFFFC222DE1C9BF3436F798C11622B7D5E08CD0036BB07B963ED88EA63861
9E28AF73F9C4CFEADD70CC20CF0DC5F7CB617780BDDCA2A8831F1A97D6BF9413
54A285862F3AC9FC5691C1481F234534AB8CA7FD1EC401E4E3D41708C79018EA
C9E21A468D883DB928525C5D8DEF9556C31F35E13458A43BD42366D5AE0759A9
9E15D950D5EA8DCC571916AA9A42F686E6373AFA85B7D681ABB97101E415FDE1
17584140381DDE62DF035784ACAC35A5549D66AA7B699E2773D096FDC6183A99
5C47B3443B127CC58B520AD822DC0498CABB38B76D42B45CD85BC6906D2FE933
87C8C31CAE33D3D08C1C8994164BBD646BED8080D48AAB9498BADEC18F05C915
BE0C2AE92B5807DCA7348DAE5543A73E53B43766E7991A871C27FA3B5E1615BF
40962AD513E00BD6CAED8E0C1CF46A6D6CA608679DD9E01599446F0705DC3604
4761EC76F609DDBB9635FA05EFB393EE2A30FF97376045C6C54601BE5AC5BA77
97C1F1C9A472EDFF48A50DDDA3B5345B21973EDBA0398B2021B951377C346AB9
A4AF51AC15F23E453957BFC4D1CCB6A7F8B9D2FCC3D672356DE828D65EA4FBBE
CC7C6785E1745A8379AFDFBD419D9BBB2182EBF248172CD1CC8C2C9A6C9309AF
0CD404C13471E51FC2F3B66F72FB59DC4ADECB71B82964470468BBCA266CE585
8FD2584B9DCA5607F9E5696F13AF7ED6B88370BB0A45DE90FC6E5AFADB9A9A2C
03C665621B0D8DE43F6DCA76D715149BA2AB3DC67721F8157D9B9DE6F1C42853
CF7D185DC28ED7B3A489D28BECFB07705D3FDF0EF68AAEF2476515A4138774F7
47D553D3A6A1DE9B2C20AC1B5BC8163E3D445C93AFC6E5CF4DDC547105EA069B
D7C71CE4095E6F365753619F83B21536A93536C9A019705989DCB4B28AF28ABD
62FD94411B70335D0CC496DE37AB9E4DD8889A5665DAF8953E8E8A6F33971A86
CFB97D0CE81926767DA6595978048EB71FB304D10FA23414D96FE22018B762A8
0DD44E6C1F7AC9E3A1B84231AC5744A0DFA3F80BE0D08250FE36FA338E451567
74663214956C868BCAB6362F609EA619A9BE0467B4322A4A34B615E078281B59
F2C6352B23D2551A7CBBEBAF8CBD843A8B11E29BEEB81C639B09A4FB33AB9E41
3D3FF04A73853F73607D2AFC0A088ED2D06BFE38FF713C359494662FE03D4729
511A107A572A12898B5CEAD46B04C4E1ECAE32CAC4AD7F5C2C615ED43661E0B8
BBBEC221B2C725BCC34E35D4D8C51BAA52A1EA166A6768958E7ED5B452AD571E
64DE2C5125C7A45794A788361FCFC64B3CD2734EF23717F21047A506C1F6B657
5EB8D7EDBF8D085F08918D6F85DB2E999F358FFB011B1642AC1851B22D1D2BC1
73C22A17F092140061DFB363D07C1858E9653709456CB5A6470C4E3C38785236
30D4EAE57A633451294DCC98E4D684D7436CE7084540DB30505FE2E021B0B2AB
C62C687EEEECB1DD4BDE9A4345AE095AFDB9B95E7F1BD05374A03194D1DC1EEE
9EB6A1BC3077244A2DA64E52EDF7F62B48465D64B344967C58B19B0E133CFC3E
980168CAD170F0C81DB6FD14F2CBB58922F0508CD4752EFA6B1FA855EC6E8C96
BD8A8D9D72BB1501B868FE4EF6D5BC8CE83AE00920FF774884349117BBE54B45
03FE7A2B66DAAA1F9A5122E7528A190DBA635484EF65794581DB5E77A1D8FEA4
1E1070870F50E2DB8208B14D55084F4A975521114E6B6F54FA66D453B16D51A1
2E26587517C814A1CD4608A6EF212D54D32D14C9DBCDFF587AE753BC87FF343A
1805555D44D676B3E93D3CB93214F441BEA2A4A39AE1024B76C098BDDD6EFE90
E5562A50006AACC2B55C596E829C318C8B97FCE64513701C654AFB2C649E4442
2AD9929F92C3B7CC9166FBF17BDA203FA141FFD94C13493F0396CEF43BFA3C95
6B8B3330E8A66C30D707CCA6C1D88DC1FF06184750E6321623FF6DC481B55063
7B9134097D2543133D92DABA41407C91DE67838DA9C73FFD2E09B5CA35C354EA
15CFCFEB6861955AC965D5D8C899D935ACD2BA5EF1AC9EFB97368BAEF3947F79
8DB13377F13FBDC44A304C370151EF105FB78D9A827DEE081D8400B8AFD3EDAF
666A905E73B661AD683566E1927FB4A15A79CDD58D18345B09C59802BC63D512
DB34598B8CAE321EBDDA23B7CADFAB721A137F886E95AA4436B30D133069C4D7
92C76FCF162D671C2103FF07C29304FBE361ED9426317A9E0A3C4DFD6C280B7A
DB128F0E91B90BE0D5FD2F2A4C292106FD346F768CD61EC3624CAAA14B1EADCA
A90F43E2E6E5833B23D7BF28512CCA0FCAC14BF088B0B0496438FED1B333FC88
E7F096551A6251A4B401F5B02C3EB1935A7F46100D390C47CB9D4DA3535074DD
2B67FF5A27FE2ACF909789D317CD7526B790D9363E2DBFC89D84FF326BB010FB
EAB7C5CAB8E240520CEB12E6AE842D66781B0F7E093803FED3F73AD1A0C5FB48
20157814A2926FA8C2BA2079A5E5AC30A54CFBD09A8901F11CA90F31D3F854CE
E63532D9D3F450CA813D43C7D68FD1A8DE13C93C1ACFEB7BB0FD700533450BAA
BCE8883B356A7054648058652633F7CA412E6D09D48077BF7E7374CAFD999B50
5F482DFBC6C37F1A0A240B0D468E307E35B80B339D83E8C4E8F6F63D5EDF6194
A0A4AA2572692396E4CB4F14F89BC8274EF17A5E95B11E766A8F3DCAFA370A7A
91DCA006A7780C813AA1DDE13274A738C11851714F1C6F14207E4BE4791528B7
075C04AC5D736F325D05EF51FDD3AA6B0F6C1670D637D76C3E3EF6710EFDBE7A
D61EB4ED1B5BC0A39BBCB30A07599E48463135DAACA2EE2EF39928F3659B87A3
7FFC6E014FF32BFC450BE3022922C5A670F451CC4B364A19440EC466D8ED6385
269DBD2AFEACEBAF5023D5DECD7D2F4AD729684ED13DE541EEE7131FAD0561A7
50FB945D96F6BEF9ACEF273231E56D4E3A5D9B158C2896F73D9C9B099D6E4B6B
9BE83403FE9046E3B4BB7A7FADB7D58B3140A5C55C95E6EEA6129C55A1A98A7A
6B0B67EAA9E05880691D6FE30EEDFED18DACF6A59939B2253339B64C91163762
8F43CF14C4F8BA5ED0FCBC680918ED844896021F562297F5A454645FAF64A6CC
ADBBCF29120B4AD30FBF46999CEB23537C96A8004C43C01AFCBDB109FF62264C
766CE09015D7DD26169F63CDC337858078487F93FDDA2C8554C46172EBEDAF04
81C38E7D2D411587CF802D6B13FF32FAA41A8366EB9C6336F21D0B50A037B4D1
43CA57538DDFF3E3650D42F5F8B1F8E57751D7C22EFF942C2755117BAF2335D2
0531184A7E384541F7BB471C371C90B1FB7CD24B4FDA2889E7CAB0F2CAC43B98
128FCE221AB5AD6DB1A6FEAB0D23AB7EB81F4A04CB8AA03D676B14A1DC222C6B
B7507BBB58E20EA1DC43A8602F2F3B5F7401F08264A2E5F6ED0B81B015774001
BBA89814D48F502AF19C3C9DE496EE482F8388A72C9FC23CB3940D3E1D538662
BAA2BA68B75F4C7458E74458561CD017CB9E0E758BFE9C6C61EF18644E80E57D
2B8B2FB5A6FD2294955958BF562B3CC0E6ADBE5B8AF671C063A2423DE9F71E93
EF94188F6C79FC31F4D469940685E1A606031D6E3A9D0A22C239BB54C70AF46B
12EC710FA4B723142BB0743E128F5316B105CCF500DD3A798EE8F024248A6EE9
06E4A1FC28E80A1B82280E1B6AC2C7F4ECFA9007FD8BF46A2811E3533EAB74F2
2BC0E4C3092A5125F8E8C694DDBA3188D2D9EAB1B1450662457AC6C1A6947C1B
711B6997ECF33EB82E4E4ABD48EF032EBCA99980C9838518693F99210CD4D769
4F73108D6D0A428F1E8732FD13558F273D39B9B9E190816AF9EC6BC0DDE682DE
873CD840655B082737BBF980B525B1F818CF92EF4C176742032FE86CDC48749B
8F266D221A60AADB9C98EF17DA8993685EC3FF4E9A1FB21C9A1A33EE7AE16D9F
A572E0DB5370AB2AB8A4FA27BEF4BDBBD8841147C00566169B341AF4EE8C0F11
720A7787433A58917E56C133C43BF751A0E6F3E4B2941A65D67FF3BD8C168D9D
F2060BD648E6782E8E12E5E7713C642D00123950ECDAF201BBABA4D028B890BA
07F93EC354155A997775D0F360DBAA682E2622B9462E907D0F594D530B79A728
AA67507D5BC1EC9DD3DECAC608ECBB0F9AE013081407D90BE28F118F84736C51
A400DD311D6C547BC1CF00FCF17756073A09AB32CCF929CA30CE8944F57B16BB
6EABEF96F73FFE9C4ED8928FA39C3389D0B18709CAEAF36956C8F1E4047B4689
F454E58CAB3B42DA9F813349B84D5ACA6362EDA6D5212986D4F196AE36ED507C
A1A795F9E8CBDD8712322FE8A1448CDE943BDAFD17F1015A7A8AEE7F7DFF5DA3
17AC652F49975BAAEC4CFB0DD0C1D8CB9AD1E649B776073E840443B75910FE64
6643BD4F2CD1E8D8D5192A10C2B27DEB4DBD956C9E0250FDBEFBDF3C1173492B
FB30759EF118DC113FECB72B0DBA33595AF1EE1BCDB5B0EE8CEEF24AD7307EB4
4188897585385AFBAC5637028C914A7C585E8BC0D1DD69EB7B4C860BCD29A389
33E0147E3C003626B869F6677B6F2C9A5D022F237EEEA8C6CF82419BF47CBA9A
0EB06E61DE258D84D20B82CE9C86A284BBB5EB4A011A3498261413150AA6A223
F9D1D5A84073FA858BDC5CD7640E6F9E50FA9AC7ACF9C6AE7BFB6158D68497F2
4EB526C04B103CBC5A3890D34EFD85FBAEC865C0385F24FAF0E78B89B42B6F40
C0F9A0CCBDC5C9732183344B0F1E412FC393719E7CE5CC4F162C751678C58A89
03769E657D61C137CD3BAD4102FAAB9160379660FD8AC49B746E3589830BCDE3
4C8596E9F129DC858A6D237F40EFFF71C143903E585901AD3050BECE20EBDA05
7ED6AE577A3784FC94A71F52D3A28F90182695C8DBF38725819BFC393302E5A3
1D5F3D731C32387B79913116779C12E203DDAA49183433FD2895E305248CD079
C4C3B4E50DFE35E2BC84749E860F201E3B2C79E9208074CCFC5D22F446C2C82B
78464E37122C91642EAD484CE6D28034E4564A9D280D0096E6F041E41CAB1A05
B9C9C7CA32B32F60DE09CC5C6632A981A97CC0FF4BF244A1FF1267F28357445A
8AEF5AD0C9484A442D49FC472535ED4AA33061E2C8428B193915E6A891E84643
9769D928F8AA9FA3BA4EBE3806EE47397FB37233448DF2CF7FED61BC2FB8218A
609CB0D357FF46767C4936E615FE7891793E2592B9F60C545A16824533BCBBAD
36F034C40956FA861B5E9FE8ACA1EB483DD8A4390A1430D48251289FFF8CB28B
C146BA466C4C486DFD34D71F39AE910C03B31B1041C5C68C45B7E6392647282E
6B6BED8B64677B4631A0B2BC444E7594A294B00FB1DBD0C390EA1CFE28512CCA
0FCECAD8927B4ADEB638DB46DCCBB0332B580E55B01FDA81BA8D655FA7BF237E
4CA38D4E278DB2D6993D4774B14D75AA6D6E71F06AE49CB735921BC792A77BC4
8014DD382BF23596AD6AAC16361CF5F11EC987A9D93C1A47DB437EA24DBA8C0C
7E3800608904AFD9739AABBFB04F5F93BE735C3C2F919AF2AE423EFF1FD49C07
86BCBE098AD711EECD927880F8A51B77F4809D4116E4400EED3495CD02344CFC
7FFC9029536F24F206529CB2D53A75FD3DA62B5A1208305C5E555F18288BB503
93CEDC56254C0CB6DB827EAF628FCA74B540CA4A55E8C19720346933583A26CD
1A44678851A9EC28026DEA823665F5AF7E793DD9AC7CAB279C6CCE4ACC8208F2
2F3B9CA801C71695BBF3C02F11A5BDF30879EFB503AD48727ACB24A5A119A2C3
AC23BD9FD23A99753CB7166AFA1381BF8B6A25135A78B64A77B45CE160C84843
1CC22C0DA5E9BE80EB549B4AD735FA1EAD17801A3CD66B39990594D1CD925DDC
C248A7EF64FDD403ED2402EB3FF63A81669D8DEB9F7403B331528C5D4A28CC71
5AF36FE723E17A9DF58110B15E5C2F0CBB7AE283C384A3A0C95492C27F3E7010
123B8D6DCD337CE17693B57C447C4BF9C97A2026B6A778DE16EDB5580B9185DC
0EF059AF6AFD455D960D3AB26A266C57E9E6C8838605E18466636ECC6D592886
387E27098E423A82E788117E6DDCC119980B2C9C47D8C03854AA644DAA867E71
620A645F6AA9522E8B4C2FC41C666F45BCDD113C963FE57005011FAD84BD383F
7E856B3AFED53DBFD896E2D45671B36A89A867306B0482881643CF685C9F65A5
F5E83BCE1F52F99FF290E843868BE150F18C5B0AD7407206FEDE3FAC46D44D69
B8D6E09B4C35882F6A1F670312678B0466AB8B2568DA5051F011069AC651D3C6
E41B90B764F94F685BB25DFE3CC20D62A7AC37F5042FD7215A758C4EE4366979
32C0E91379D2211214AD09E4C290367126DD44C8AC8DFA360488B7048C64C9FA
1CD7C697E48289827D6B4E62390C9E8418BFFD59ADFE74B0F306D52A84C8A4C2
3087E48B92F8CE0C6FEFE74BD1F9CB50F8D2C9AB7611D131B64EEE33D3B1B031
3DA9BA0F251448B602045939DE0FD20687B673ED81961A56DFA52A55359B9D00
A02DE7B3269CBD3E10BBA2BDF7703D7324D88F817991D359CBC28CFBC9EFB44B
3942683209A4EC5C47C8648F2115B814B7DB80614C024324E70D984A621210AA
598B838C27F161B9752EF0B0CCF9934867225714B430260C972651AE03F84277
9FB04B636AB004723E48E06EED4A000937470384F5D0E9BD728B9B80A0F44E33
630695DAC34CF075F70A8BB95BF5E0AA4305FD1E34D2E2A7E4DED2181671B1C6
CAE25147B28227BAB81CC67F1CB6A71FBAFB2D4552A8D1BDED4F258F2DACDAC8
5FE33FB115D85466DDC85E3D7E82740925296684AB7DFB2510820A4C7317F308
888F61BC0CF908BDA81DC43A50299E70C745F02078A6383DE8FA0158FEBA5694
BCEC3451F9A698DC2A4EC5F788E46EFB2E6B8C265D4C4D1189F2129635F0BFE6
8DBFAF49B7CE8E8F5E7DB82491D20BB3C5C0070C890E833B2723C321AE6CFDEF
B54F08220A36B86E410CC2E751B6B05B4A5E2855A681E77C95E6EFE21E882C66
110710A99A7E8F90D1C9A15BBB8F3144BBB6E23B6A5CC40CA7CF5A6B4783F542
6713A216D0DD3F78D39280C95F1BA24A2966EA564A996E550415B88A39F27F71
EA198CC61C407E36FDAB5089269E0ECDE5E024E1B94D8C79995736E65D878F07
94F2A6BD9024B9C0E1B06A45F47291FE518ED287DCFBD4885607E1C8BEAC855F
2210C98FD99D9F04E4CB665E1A65FA4F596B104C580430032FBBF4A0A99CF766
3091B19D88EAE3AFA5485034523A5CFBD1CC83BFCCD65A34E8D5B496A2BACE6F
8403450A9599134302891FCEC24DE7D962B69B26A3F9941D0C8EF27DE8FDEA33
CCC630DA0C8D6E8F3D23F6137A66E6A3D41EAE0B8B1613D965C39BCDE1A3C48B
125A2474682D178BAB67EAC18B35104B690BE893A6339B7058DB0A6117797496
0AF676A3781F2CC4D6330DEE682C24380E1F91E19F0035F5B8456285C19C92E6
E52AABECFDBC6357E64ABF5421FDE54BC5A1EF7C8B4E4046FE75D8F4ED8871D0
37EC1CCC9DD88C1FB3DFFCAC1691E6531FBC52CC033F253395DC10F99575E435
57F46C08049CC002F858551403E6AEC7224A439EA7D76132BDDE919149B65DFA
01317AD0914B2CE5118A301647D597A783C6909642B30B510C5090F630756248
1F075C8EF6D756AA023DD0F9D0221008C24E057F56939D16A27DCD555270851F
FD50C0F930D9C5B08E06488531148FE1EAE2D06BD9B79C429D36CFCA872639BC
DDA83D24D2A320ED716BD21EA5EC1303704A3837525D29FA7B8AECC8E2A5C60F
3266D7AECEF18947E5B9584985252E9B298E4FFB6554E2C4290A7D6273436940
BF42B38D88466DEB3B487FD80AC6DB19340FE557FA75669EB5E5AE7E80B5CA93
898F4445B5DD9708F704577180AD4749A6C5C0F2A95E056808CAC16C2C40CBD0
9A2CF9C97BAD97BD398C1B5BE6AAC3D60244736F902C947ADB87A66622A8869C
740F0C5E7FF06670EA3D62E815CCB74C4DD34F58543C7DADA71564430019F13C
0B33DD14CB1C896B60002F02AA2FD626BA2DBBEB1BF84DE58B1CE6D5D6F74C21
4B589B304652C050C8E886E59A9C3D36774EF467CA75A17195D959CEF5440620
E9AF4EE88CE262D9FB7CE0C460F1B670D69E82823FA6496C3E54A6180653BA74
A6FF784AA664B3647498D79BFC467A22567CAAD16515DF5830BE1F1610809477
28FF60EEAC313A6DD817A2359EB01CE20808B2C6839F8D7FCB6BEDAC023F9B8D
3C9A53B4188866B1D85EAFE2AFBB3910D86886ABC13858904321E3899C3CFE51
5F7E555AC06B0522DE6DAB97A52DADD0A8D1BF2003BA647E122F9689E809E6AD
7883311022F681D30136924204B13895988AD2D1F44E90CB51CF73228169EB30
8A2757F5FE98528BDD8CC427553669106E070D099C752638EE155C68F4EB03D1
C35B349C210E1BC8BB1B6A86616884E6206EF0FDA4EE92AF49BB5801C9FCFBAB
5D6C4D99E3FD3AC7697187FCC97EF767526B55522518D2D784EA8294813A6688
4BF7B683158E2FB80662409D6021EC34F5593DF6FC41906F1D96D31F36DCF7B1
3BDE5B9A3217A496235800DEC416AFC2EE79C6034A029CA9B11DDC9BE77F45E0
1AD4388219592FA928CDEC7D89E81692A544E95C62FDC61B8F2106AC15FC84E9
23D372C6EC901232F4BB3AE1F6A2DD8A3EE4C019EB728E8BE627A91810E226FA
3108AA433C7FB46074F1B09035691B8E7F36847C3BB181934FE56B1871BC654A
72C2ACC236C1007455F7B0D865F8E6A373F4674AD17CABB0BCABD2D5DA2DCCE4
BA079A403FC162E45022E294569357B772D55B9E7DE6A2F5ED403DB6C26DBDCC
A7270C29157E5B25CC4F36E300D7910FCA81D5BA8452D8A69575F4CAC179D9C9
3958C41814C04A8A821A431038D8275C55AC95027E5027BEB3E7EF15157FB451
22B8C77F44621D19DEB6E9FFC0AAF0DEF62A0CB1A3B4054BEE1AF27DC08C7001
287383A1131807F9187FD0550C274EB9C62DB6997D0D5505D621625A3DE2A3BE
129071C692C4321223F0E237370304ADFDDA5711CF4DDDF7EAD130678EE89574
D4A5F581063AE837415E7A247ABEA472FC9EFB6A8FAE13921815E0BC4D423A72
252C8D59E32C521DD1DB965B090D2AB4D80F1FB95A0495649238EA4996009768
F2DA6DACE57649C17A7EBC09EDC828BE1E8FCA3D24145A9E9DF384E8C20DB171
7AF6CC7B11CEB22C66EAE812392C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSS12
%!PS-AdobeFont-1.0: CMSS12 003.002
%%Title: CMSS12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSS12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSS12 known{/CMSS12 findfont dup/UniqueID known{dup
/UniqueID get 5000804 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSS12 def
/FontBBox {-62 -251 978 758 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSS12.) readonly def
/FullName (CMSS12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 40 /parenleft put
dup 41 /parenright put
dup 45 /hyphen put
dup 47 /slash put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 72 /H put
dup 76 /L put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C295470093CA270C3B9175168F5F1A9
C0DF3159598E2D7266342CEF20B1D7A2FE16E14791B4E287FF321F9B1FFA3BC3
63E7D638862C1C1FB094496395B6EBB00CF22CFC36F7A6BB2F48002F91371910
3547AC863B33E91359F073CFC9B2D475549B52D89F5E3931E2D26A834FB89F85
35B24D1CE098ACA855B0AF248C1E878F3648CA2CFA03712F69DF578ED9C1C8EA
69D46462BCA02370D9A2FD09D7F14FD5FE961EA2094DD46CF91193B32ACF647D
B12977B832AAC3C53F013E784682EB12261ADFEC0872E9CD5923866508337457
7F0CE15A46C9A92F0DAE6EFE3B93DFCEDC0CA1ACE8FC02DC646CD01A01F7DA6D
608F5CE76754CA4A4AB5231D232D50DFE662E538640F30ADFC2BBB3588E8C300
142C0A0008B34677CE1F880293D9800792867FFE1B4FA14EF495824417015378
F78191FF7D7AA7994EF153BAD5F3A07D851131A6998B1895529999F8125CDD7D
86B59EB003502D90EC7BDCE68D373DE9612D22D3B03A8803283D487733F00E00
28C35981040157C74863047AB1775DCD295AC53B633FF93C7256F60DA7F5F567
7AF3482EEF84356410460D34C3CD5EC59C2D878C3A9E48F9FD786A5F9D047357
3E7B22C9647F670ACF812EE3EA6C7620B6D35219200B0CFB45E63B318CCB7FF2
BD2A6372C24011729B9C64DF6EC33A04A4F6F5F981F3847056146AD8560A7EA9
82475197C0B977EEDD88FD8921B65D2C8A23CFB6B36BAC2716CB80063296FD68
5BD495B4F63C787C3201C713016ADADA1E479693C2F427BF0F10BB6AB2F6E1BB
B758CDE41BEA76EBB0636C01692F6DDD77DA1C6F4362F139ADDFF0837C37B00F
FBFEDCDB767A8CABAA776469D9BD6E6D9762ECF34D1C3C275D1D148FEC3D88FE
36EB6C6A620B8E2BA67A0AE80B9715F544D14CF026EF95CB413C0B539C557C55
E7277455B7AC440ED2C77C1B42568D1C5B6D0D2F0B8404EC9AFBE717B4CEC6FE
079CE0BE7030CBFBF8D73E55C766FDBC69D3FE7F4FE9340263AD6F8FBA1147C4
0A97878FD14E3DFCACC3DB0681C548295037E1D768F7EFF9E6084DB71CD4720C
1D75C5B96C38532A3BC26D0928134D100453D84F6241290CBC6CB5075E5F66AA
F03ED8DE63A07BB97330A3B3CB8DAF1E9B32E924F639EBBBC592CA23D5351DA0
032D7BD972EEA75DF2D8E15430511DAA16A7654D9247093183A43E562B99A799
DDD5D1CB197FBF5DB330367A3C52530EA66791325668F653518443D2A9C78E8A
544FC9A34389DED4C616DAFF685A99D29934784297FD22290D57FEA0758C203A
B43CFECC5D2180452F21540BDAF90C304BF1DE08651933B7C10BCA90C8F829CB
8DF6FD10A29FE4EDE6D20852E7E43C0F5D5DDB7AEB1BF29D30CD07BA36A74931
469B2ECE710B676E99271435C01D0BC32B0A72BEC454982BBEC7BCA26396DC3B
2ACA96F836CB6E45AC527C48AF37E1EC4CEB184F7DC0670BE4BF97B56A99D239
5B20763658DB829C336E369A77617A0A34AFD550CE09C91B7CF82B3A5B652D64
C0961DB302FC8E79C00F02695379E94FAF494A8FCADCCF156BECEFB40D3D9415
540A53C6720A67B49BF087BE80C380B95D32277D8A775312160945A2119011DB
FAD703BC869E2861D622507A65719243E283B88D5CB5C3AAAF8FDF0C7C72367C
A325ADD8D891B7EB7FBE1E903C371BEF3836C7AA53E3C3802D9A9EA2797D8E05
2CD51A48E76330D188B409E0A2365916CF833CB86FC4DAEC9B51672DA0C3D789
07CCD0EC3BFF4DCE1A3769E69AD8D597D87917324FC4DA960801350C839C37F8
8D3C8CA488A7D0106E11078AC6D3B694E8A44E5F36E2D7C90685BF19447DC151
4E0252426DD02E7E08501C3EB0D9C864BF32BE2DFB7175D0210BECE87FD50B9D
F0819710B485A3674BE91FFA670166C6938D20E52C66E1190CFAEF126D225205
A728002F9DEDF1DFE02131F245BCD9C2AAA82381AE1577FF689D54388A98EED9
5897DCC7EF560F75C2845FBBF08996A6C4734138E2BB4C565554A02538F32CAC
A0E1BAA22DA9E9CF73EC32E76581309D4659BFDAE4DF5750459F7D9C28BACD23
326299A75134A4EC7FFBC92108DD63AAFBCEB31050DC5657B02A4A9DC8BCEB11
30A800757B3964FBB3B1B354F7AE8FD9F87EFFED5AAABAE605B0662DA3E34E6A
3FF1DFD75D62F061B0E436B14D85E26CE841B868AAE5197FD4BF93C134EE8FD6
6DFC807EB3C63E7E09B5E2AE41DCE803B518626015F56CC3B6BF31461B5CD0FB
5048765834CE4AC08BC587B078EAE39F280591AF10C91113F2F0595F08A7AF0A
6AFED5036805F8569070A02A4E88E810DCCBE7086AB9E774D7757B9140B6A487
05D2652D69F45809242A1841D7B8209B04EE3B98E53BBEC660927D79241B67A1
7561DE46262CD2EA631CC6D586C83C51EFB7AABAB87EFBB4C5DAB2DEAC9603D3
585C41B6EBEC35B1E04FF553CC386174A76FFD4392F500682A350D65766F2A6E
B22B54F7CEDA49B214675AE4661C80763B57BDDFA0DDE948A8907F930F7AF362
01E9C3E09E2AA1FDD6B938E71FCF8BC71F76021275F1E327752BB0792F3A3E82
7C89E1CABAEE06A91E649D6D4264DE433ADEF3A4FDAAF8467F429CC800B0FDCB
B33122260B211EEB89B4A9A0B41EFA9D0E9E3845186C09D81C379334E83F3E38
016EEEFF5AE32BE14C7FBFC371BE767E9F41A4B79532CB791324523B88F9C986
E68478711DC711ED277B25D231047ED775F7F2DF7A1720BE57BC79F4D4B53E25
ED3A78235CECA6593D63C067388DF67367D743C8BCC6BF28A6FFD04F75055CDD
9E643BDB7DB63C41035883C800FE4C90D1D6A5B7022E57D745820555DF933B8B
7352610F757EBDEFF020D89DA275040B9FADDE7544C1FC5A3BE04BFA9174A6B2
C2CE4C529E441CD1C89F3E35AE14599B277882F35DD5D4F734D23503DA669A97
57C456950EFA1EB1B8F0E11D47AB5E3AA5EEB3F4E2532C704A22660A4EF8A6E9
5EE48E35A7DD8E9D6EED1B650739ADDC22422DA7D5F095F4D2EC83307B18E93C
46FA4A7E38EEE0E410CAB30FBF589E9108A2C75ADD6B92634ADA85EB42910E54
556CD86413C0EEEAFAA23ED4313A92D89AA13ED415D3FD0A4C70B506D1EB3945
60DE98A614B9FD5B708F5998D9E9FAEAA2BFCDBC9379A7529393718912646230
1501C1BF3114ABB02AF2EB0F0BA1FFFF101B4F168E6126933CBA71F3A52841EC
19C6319F8ABEC016582DB65B189D69F8B18576DADE57D5007ACD9F48FC6C46B2
E7788082500CD75CCD0FF4F663025051AFFEE5A63BD8428922BA16D33D2DB733
4FC629A418D07EA5AB9E8F2928C2B3CE2E7728425829F059BF4E4D9E44019345
4F93C5C2847AF331E1589A9F6889425C7F81C07B953844C2DE59110D4EF8FB7D
37CAEE30ECEBB89A6D46423D324D261123D8D8E9EC9BB8C5A08E8348504B8553
71ED224595A61A30AE73973C3C0959708B0AA187548FF1DDE756D8CA8E35B409
B56FE1F4DB6497E5D2749177C766A2145A38F89DB483B6A744763D009FE79B7D
F873BE94A07584DADF0BA63361A01C9679110ABCEF756BF7650CDEE1AE068B9C
A35DB06F48A851DD67F8A2641B467D2A7DCE760D2A52A57BB022B6C686B5029D
EA65466EA3887B29E88B221748FDCE289A5D3D1F7D1648EE5275D9D3BEF0F841
815DB5820EDEAB2CF692BB12E0E06CF6E77850D82127BB182CB2B22A712B0A7B
2DADD3ACB6EFE7633BEDEF90DAFCF305E1A662BF4E797C1430173040B91EC63C
54DEA656B6E6C5513590AC60FA6DA144976890940A527A8CC210528E66431438
6D1DB2EB164DFADFDA0DF6792349726002A351CB2333FA0DD7CB17102451C739
9DC8D0F2719303BD23B57150E317E6907925C9052164C182BF22AF1DA3DB68AA
A60DFDA4B48819C41B8F1F63B59CA6A916131EAADDF1C8373AF61EBBF40AE1A3
561A46D7C7C188D792F8CA53A6731E31D6A437E8ED46916D32ADFEC279B3D6F2
C4098D3ADBB17993C5EC68B75686546BDF2197CBDF85F6D98895647EFA676EEE
B4F034F1A5B2E02FB6F500547FD3F619F04EA866305D2E9DB95116EFE6E99BCF
D090D3EB8405B60FA3CE7819BBEE0EC8FDEB0BA89ED4827F0B816850676B1AA6
518D89A2E240F89123B76A2FA4B0785611BCFB3B3D52A065F31486F8A8DFA02F
D4AE04EEDAA7DAD07EB25EC8F6165ADD9BE3C3EECF7A10735E4863BB85855A44
F356085F624F40553AC10E2CCA29EE9682192635061EB159AC4FDE005CA23170
2730408E744F13922FC8F6E50D3581E2128593031F532D4AF9B83949EA999CF8
DC4F827DA0400CC283BB42DD7B5C3FD1BC9B444EF218893BB35FAB0802ACF9F3
86F39BE308A1FE7E192640CDB41A7C2AD6DF62664E0B65D4D51BAF07EEC928F2
83F6AD45AF73FBD55CD6282ECF58BB428E70A614F7C0514D86A8DCD947E71283
D5E389FCB2F945E93F952A0BF65C6F8C4039D418CAB8AC54B1C4EDEECAF9BF88
67C1B8452629A46E151E04E7A2FA928E5639BBBD37697CF484E77FBDF82B435C
98BFAF001AAA118A7EBD5DC32F7B24B4AB1F7E51BFB64B526D9330007B782963
AB27FFEE5F70AAC1FA5442E2D8168C039E01748A039C3A689131FE94F880B68A
77069A844C61A6C98BB1B4F1590EA2716A1B5C396B50A683341F9E170E3094FE
802BB1182BB2F17BC6B948669D3B147FF32AE01CD8F69EEF73D1445381ED2309
A354EB2E29A9010C7B6397255579818A22523FD624EF673B3EEC48AAEF18D74D
DA99B90E05E5431B6B36F777C5D77BE64B1172B484595562D001A18AE3640DFA
405BC69A63460C0C837064459E1D4B7216CAE709E2B418647D60A2FFABAA8790
0FB7C9B846459C1C68F59203875FEF7BDDFC8204D18CD54C272145FE65C966EA
43B87FFF33225E445EDEAB34FE1869428714992B43E324DFACB816DE195E1773
06321365C446DA650A634DFBA56A7F360C6CF0D7AF37EF7FB16C21FD2819940C
461DE8284C44320C48E9837D1E9FF36098B5D244DF3B7CDA03E81647D62B9619
F20255A91926776DE45DFA051C811D22587AA88822BD9DD7518D2AF2B9BA64C4
DA24D03512408EF8550E28293FFCF9AF98F32E57B475724C9C7E723FFD364834
D5DD514065392F9B2AAE36B4BAF5D017F36EA730DA4FA02D2AAA3704C6715919
0BFF56A8F70F73F63AE796DB52FD7F861E9486ED170B5718A96AE2F50C168F81
277899992A9E8E8B2E30A42B4389CD8A5BE57F5C74CBB0963D99A23E8024D640
EE408A699E8E0C9BF7C5A2D72EB716C5EDFFD75798695F26704E9D5CB4F84FE7
D02407ABB81DB79A8DBF52839D28E4C18EA548C1163F8DEF04E5B400E7E4AD0C
B12195B21898D241A158560DB4DE0652FD1C0189220A15F2D3367EA1340CF29B
CF9B3E1191E4A6FEFB3965DFFA22A1278738B1F84CEDCBCB2BD50D2B2EBD78C0
BF95298BB3A67BAFFA78FE0C53D277665EAA3FF29C2DC7DEE1070C71B9D1F1A1
0D8F784CED8C64C9F7F1353625B8A20D9998967044C40ADDEEC59E604DF34B6E
541B242534176E092AFCCE4376235F5078CBFAE6E780242892FA7CD38F05110C
E18D82329631BDD915D67954C5EF38239289D05BCB5447466554809184CDAAF8
72FF8C9858B15EDDE82FBEEBFE4223EB96731EF7E7E03289A818DB17FF0F7055
0881E02DAAFC64C8C2D90A54238F00F4BBF4220435EB9619AA788CC0F45721A6
D659A1D2F0E4D6565DB68B522CB5DF1876D750F62E1724BE71175CD7E34489CE
26B2D193392BEB23D2F7CC570D53AF94E157A9B9980087A36D35F7B644A04E15
992803A2B7A629DBC863D890C85F4520FFCA5B253333E78DE36D8DC1C1559684
96F1B4ABA8729A7C2992B5FAF2DD6AC96B934A7E2933F902535F5EFF762518BE
68D73EC2C947D47C55CEBD77842D472703A519E08A0CDD731179AE74425AF46E
7B1924C3C418A01A584202D71B6971FA8115353B77FBF830EE8F526166204CFC
467B0678093F1C99361A95F76860E5FA170FFE674314C3EF05549E5B37EC7925
A770392344B531E799A4B3FF2F7CDEE784DD83EE019E72B93D1CFC8E0A22AD9C
EF7683BF07123573E2DD156E38DC7C9E7BD934043A78E6BF8B774F2A41734082
47A9C8CBC6B90CC3849160963575DA80ACE6FF24CE7030F2ABE7D154F0136D25
8A7063FEFCA0536DB608D0D60932BFD670CA642FA6FCDEDC699B264729DF1B09
205547869402464424FF3D9DBED6F0E4300E3E7238ACD91DF0E7D75BE26D9633
A318695FE6F38E564A5550B1D88109954AD4C18DFEF5F1247E51EE10CA1D515D
E7498B7813DE16A1F0C0B7EAC9B12867E736CAF5DD4B0F046C037967A52296B5
A617B3D3F9E2A8B4A3055A56A2822269CC563348D2E3917603E98EA9EADCA4CA
3B25AD1C1383ED759EAF4D36CD00A9FBF59CDA77057576C3B17FCA601CD9907B
6FAF24443FE8EB53B6A73FEA434AA8F6EFEAC96EAF36B67537E7C2BB67870C49
A3D4EFECA0491A8317DB36B809899C713F8D5AB2D4E7E1FC61EC80AB862627CB
783D35F2E9F125909D4C0E2E738DAB7740776FD0686F6EBEA3DF9A2B0C51D010
D1EBA517A0E69619BCDBEB06FBABE70082449BA53C10AA86EA4B7CD697309D9B
D10BA8E876680DA091DE9C9D6DCFFE367D80D14DADEFA67B59D7143888AA8C53
1FFCA518BC95086BCDF146209B4861ABB60465A6D6C78BBB404C3E7C1112DCA4
9305087190550CECE3EA832D0712C0CF0B61192675CD247A2B5701A16E75C857
A4C178A22A1D3DBED9B521B404FBAB9B419A719AE42BDC1379FB0CC4BFC871AD
A4F7E7C05DF29A1DCCE36AC9B4BC32B9920AB925EEC4D356F52090CC4A6936FF
4A3748F709B8F5C398ACAE3751FAD82FE555F958CF43B6F73B16AA7D68BA02FE
9DDB752B3ECE4052A653D84AD8BD66E09AC5FADBFA18CE0F2F1DD4189737FD42
1E32B534DC5E3C6862B1D72AA1318BAC7F9DB1895E6E381FBF2670356182800F
375922CB0B2A22617DAA12804F620541DD272F9A6C139843C84A33D9BF2A486B
013E52CB05D9017161827203DBB820DA90D9A8E6851E95719B2D4F1BA81CB12C
E46D15A6BF84F58C48CBEFC4D3E3C5532EE8CDFFF85AD6343D2ACF82C9087ED9
5461F063D846D9B7F9191441037652147A1FB0E5DE51F07980058DF9F5670809
01F3FD83C1A5D27D298B6E57AFBFDA9576EFDF1F95D82E70548C5FB10AF7EA24
863D19438876D55950F9516D7AA746CF61E60CE24E08E6DC996E9F3C45D51959
49F4510CD259F52BB087AE3539D66ADD238985FC4A770E9CE248BDA4FF5FAB5B
B4B336BA1879CAD2EE6D783F3ABE68AE466F1CEA1F103C20FB7C9CD0FBAB2B12
ABFDCA5081BDF6243568FD63D98230C21EA5D82652AA00322178C0B8F3808B87
D38C4E8EC303DD63864D17622873C25435E8396051D09F767EB0D83096C78D90
C44DACFC188EA312D672CB43CC538CB80F4E155643DA96831B0E420FF2F6227E
DB76DF562284CB2141970D34822E321C25140729BEC5D882E212CA38625B8EDD
68B9B6038BFBA2BCACD038FEDCAA58CC5E3B4A60D7970B7920A77815A98DA5BC
23DDB9FAE35B3F807F0E1E1136486D823D64BE32DE4B92F3E228C78B8866192D
F45563086FBBA428BCBB7CDCC3B0DCD52FB71984263646726EA5AB024774E44B
ADF912F9E30F49D3A8FBD63C501BDFA1D33B9063D2971744DA02F4377E10A2DB
1E51E1CEAEAB5EA739A4052DDAA5FF981CD31460E3FA77DE5FE2E1FE1AC7E214
FC46936FBFF87227B9DFF57D3211A340D76D54CD170476B17BCDA45CE4DE64BF
8D3AE8C464A89F33E4D5BEC5838B58331978769574D066CF54ED5E3235C7CF1E
E514D77041F132E00B13A76A105AB3EB6E4FDBD3E17315E1E0A224FADE625694
08F6ED842CA04EF55CDF2CACB2EEA5DABDCB79FF7D9B695DAE2B91950E3C01C8
FEFB74E98F59560B24C1A289E63F303B746FFC0D945FE34FC4F574036E13FC1C
A5D7A7A9D9668145B240A01E890DA50084793E3EF843F8A3D527418B5A66C766
6DED301E6CDAC85AD40E10979FD7473D4B836BE55BACB3C737A5C73C170B6563
DA6A0785D44F8CDA81F01E0CBB7EBEBF9876CFC52EE5362FAE1C93B4ED591198
8ACCD6357281BA2643028A304E0EED19371714455C1951CE56676BAE72E47726
5B81BE7E98AAB27E0C853EBD237F5FDBB582FBE603D54C4AA171C8D282ED14B0
E2890EEF490F65BBC2A08203D14D46B7BC590B9C68F20D5680825F9C769CD611
F343C793DEDEFB0A2B195538D06D43EC3F2CF6D0C964CB3FCDDDE264E04EC3B4
00B3CDE74F96CC6DEA0F7E3AF4FD90A973B6C9C867C4218BFC9BD070CD3E72B7
74457AD124948ACFC25EBFC852C06A0ABE1761AA751A7BDE7472BF69176BFCB3
887AD3D9C527EF1F8C8202CEB418F2C930241C04D30EE9704427D2FA90BAD0F1
085A0A18AE3BB56977F0E8D2BFF83ACBD1E0479C3494603E438EE6550D49D173
C6EF09989D77B1FF9D95EF25308E69171AFC714B3C9CAAB4E38C1117369F1EB4
4717A6BB92053C3A06455D2188B08564FD196B9F70A1DB7BD780B3429AEBF956
CF6D068B1A9EB4F72B61116CAE252D29877400720BE6A0E62608DA8F5C29F605
122E4F9ECC58ABE6583740AC4872EB03221E9C2DBB9B0716EAB24B69B0AF7C0E
43F648C6CD10EBA4070029BE1F413DE4BDE7053BA2625FF6019177EF86666AE1
08357356F0652387B87AEA61189EAC2D31A8D9CA23511CBB6DA9F4490F24184C
4925EB32779F9107C2B62EF62936990B606A136A16F9DDBB4793B5A4DFCAA012
5587E569A4208ACBC72F8B1D91119223B798AA9476FF76E34A2BB59C70D1137F
099BB1BDFB52F2AF2BCCFA79498BEE6A57A277597EED2780740E947D5DFB6028
D79F9BD8835F5B41E6A95C3A249024A58CB4D0E9FA93BF2C520C629F82AC54FD
D2DFB87F2291F062290BC64B54F78275603EDACCB59A1049B36BB29AD87135F4
B3133EF3D14FEAFF4C24BBD79D8870DF52B429CF768FD9568181C8C8D88BCDDF
B807A893FD7D9F79B38F789035C5DD200215DEA01BA7890B3ABC457CDA6ACE42
04BB2762D127AA3A633967842E197473D012FCC452075B33959A54D7B9B53CB3
903C9D317F09AAFEAE2F08B37DA3520D0027C74219814D4BFC0B431B2F7212B2
8EFEFCB829B40EB8F2C7F744D7DC90A6BCD68CB2104C298D481A7A31F9612EC1
A3571F3FF720B2F0A12D7713D4A5A0805314E6ABCBFEAEFED99F96FAF551DC19
27BF758FF4560A321CC209CCF632945F443EB6B7C03434DC3A1747C1B8C045BC
09D2A898F031C857D7441CFFE0CBD01A6A9F801DB5977ABEE045EED8DDB86B8F
6978F44E6B945F029AEC51EC292E8C1B40F25F2F5526B82276BDAE467AC194B9
3800C74BEC79584C15A3F4BBCF48A069B8C5A91D521FAE7069AD121C060C4804
4059620F6B9BA4067F772219C358B6D058D551FE8D3B6BF9E0A61623E04664FE
CCFB39FAF9EFA97C5FA817EFBC03E3C81B523AA5B5377074A6C9B871A31D4500
ABCE9FF3C99EBD8C0860B25BEC5855AECD77EC252B76D89377534C8B51BFD6B1
A37C0D83240E91BB76F9AB4AD40F14980850781BD360AB6DE62842DD7ACBDA10
BF5DD105C8A8E768D90E5A1CC4307897D11576355232F680CAA4A276FAB0ED42
7F405DDCE7B223B9C45312ADC319B74505856479813E445D6BABA82D97F2C74A
9A86564B5EF52559BC48DE37D00DD2C4BACAA5B28B4A4E30F29B2A45574E546C
1525E05A7CCA57278A6A1E740541575A822642F8ACB88505876654E24839F3E2
434A6059838499D820697B6CD1118E4903647D30183DFD17328F6279CCDE4731
E573557B6C4506C17F7F53615F79D667F89CD2F3BA2A88F3707068B5AC797821
95B358ED25F7F5AF5F2F5D30A7196146199F766893AD137A1104B3836A3DEEFF
12E585C15E07C1DDBF320FC3A781461D95BF93088E210C91279A43D2315444BB
63C759EBFE7ADCE8E56C76DB9AC9AAC2747BF1DF055E1FA615281CB60B9DBD6A
CFB2113622C06E89ED631194F7C92D83695EDE7FA9A19B068CB7B57A6259A388
FBFEDF7470706DB82DC8D3BA7C7E67BC9E24E38833AEA5B245D96291D4B2F1FD
244C49AD3428272AAB44A88C2E7783D53388F9B462E23BDC9EEDDAC7D20120BC
B63B9CB5A60AD7F520FBCEF6796A31151234F2FF06244509C9749913C4603D28
72D61D73663F18B1AFCD57E180F2DE1783AA5020323BC366345375703686C0CE
C13E598BD0DFB753BEC03F6B6FD0F7915C30DB8A7A042EE68CF7981FED342238
3AADEAF40C2A899C2BA9079F6628FB0723A5DCD36E1D4BBDAAEC2F098E84E191
D8D8ACA1B60FD4BE68DE0F5F8B117DBB017AEAE914C05ABC9409D3D9B2D30B37
AEB49AF3C54FF6BFFA40AFA108F5736A7CCD656FD7EA67D4BF9BA7E814F61EAD
44B7A79A432E21E480BE739D0B8B4E735C568162F1D3C71210FB858987D0BFE7
4EE09F44572E8B81DB801CD394E754172F0EFED74CC04D2194E7BCF2D1D17F45
FC393589DBFB82EA7DF55B484507503D8EF59F0297765D3EA0F3EC9DC03490A7
77B6F7B2DB8FDCD307F73D4508F0EE22CC8AD003F1FF16C13EC3D6107C72957C
38499A4A8F5A1D0D71E1EFF954348CA3320EE0EC277EAB5E1B6946EEC4F2E306
6C67CA3C9C2AE1A8C6253894863C275EED6B4F4CF8119242DB71C04EF40B1690
BA9097A64F932D18AA6F2ED2E57C9AACDA7C79086EA548C8D6037E3952432FC9
EE4263650A2D58A1C1A3F8381E2F94ED3DE4301FE000C3CC14C427177DB618F5
A97D1787D18E1F5FCBE7985D665B34096A60EB0C813B5337469AE0F5AFD69FD8
8EA21DABA470950CC5EDD7B70A175D47FDED89E5833D13A487847627AF4C4BB1
92554F50D9A5EC94F55A7FAF9D63051C963C72529D338E22402A956ED4AF51E2
15A55C14D2A7A2647E5FE864F4A338A15AAC34B9156FD3CB6D6C6E49449EF25C
FB312040380893E7C61A9FB005F0CCADB8E4E954C0E0229DEB31B51C7D53FA9F
874E31EC370C317A2171B737870EB2ABED4EBDC45B86CE1EE4AF7D450E8B833C
11CD02C97D5F10BD73E59527DEE923BA585F5B42E797A286D09FAC171501B73D
34C30542AAF3468FC585887C7585165500CE6AF60802BB288618C0EC140B9F67
93FEAFE78AFE0BDDA01B0D1F90D9A3D540E0659B0AB7D607A39312BF80398A45
E8621A90E3C35E4DEC459759D7D385246A5B54786BD5FC57DF0D79168E8F4553
DCE6D381135A05B144F886995BB0A249EFB410238743BFEEB2F9CCB52F8C0ED8
ED3DF60396703F3E1E1C53010649E40F4CD763B9761E3EB6D8689A2A8244BB08
7E7BAC66CF2D271381F4EE49AE0C486479A6A9F4376C43AD78EFA18DE84D8590
05B46DE88351F43B8E17DCAAA6907E88CE37B07ACA2BEBE2F11DF04A936724B5
8408978E7361B3AC9746C2F334BC283B6E9FE1038D46CD7ED655793E5664B763
F39FC423993336B1C6DABA1AF62FB9A0D118711321B7886B093F19425A3F2280
D52F6E1087A57378BCF904894803CB538F22E91522DA7B72A297EE27111E0907
DF09EB4FAE5617799DF95A8EB6008A1C7F97D3E75489ADC0AD80167F86978A6D
139CD18954985A2548191EF4430EF702CBDC84195151C7D06A4CEB29C488ECAB
2F2B9168F8F7B208338B1A232F58A8B4249CA4C5F9C32790AD1DC1EC486BFD3D
168C51890F99B251A678CA14FF29D521EB010156D38B782EE60755D55A72FB1A
93BFA70D7EE30E62770DD8E4710EAC967EBA028FAAF02DE8291AC52A150C5D64
0A6B5B811EB32CE94F0A0E5D07C938246B368A1A1121002644CD5A36E77FDE56
F899A1D538F2D88D40BC989FDB50DFB2C94FCE8730E450F3EF5B89E300B27A9D
F465CEB6E53DEF972B6C2EF15B1A612FCD0B3A80F2E6D9A4ED419E15F2201553
DD9A9511D8C32B53C30D032C43E77D72FA500DEA331525AA388FCE949238A38F
259496A1016D089DF0E9B06E2307395A5D78C698C79B1FE846D381CA1B25EC81
C0DF97A036036FCB4C8AF6F9F93AF3F01BC68987F1E3F9B8D8059F78CB86931A
BA8B55DBDFB006404A66795AD686F826B5BE1376495C3228BA4593EA4B4069D1
A67654668B0C75A5C744C6A0B39D8CBF2A57A86B0AF7181FC138F694788E4431
9F101FFA1E6D0BB1054131A8A2C7296DF37ED67CF45C20C0C6224B428959E399
E4FA09067BDB88DEDD89FD37F333AA25F977B629E30C89193E408093A706E58C
53E339F82E21438D1BCA02675D34E7A1B4F8DF96324863C0B5A19561DF989DCF
64A129D03693B23C6E02053493D4907DF78964D21E57F453ACBE8B78B6400973
0076E65F3BDAC77BA6A08B2CDFAA0064BC42D1B24BDBD777787B627FF2DC4F28
48F92D3404422FE0B61D0D5DAC74E392AA6D8F55C0BC9D61B93A6A77A4F63B03
E9CD4B0A4F5757EDEB32602DA2B5FA880C8B4BB05108B51C9F499C30ADDD550B
21942E1EA8553970E2609C5ACF03152933A0EA2A3530093CC1F2DB342690D877
8674635E6BBDAA71F72FD0545433217FF56B392BDDC5C56B125B8344737A8284
EA8625B315E9199569B7A3C22F0BF3FBF15E0BED128F00DBF53595C8C9038D27
F6448F5967CA0AA8170C2558FC521AC793BD28FC7733EEAE115E6D8618B1BEDD
15AE1CC9618F1D0BB37F4569BBA679C8329D3F382F1D5F38987EA22BDA025735
EAD2A92027CCAFF94D85CABB1696A52CCBA4895560F8B9A15A195A0ECDD893DB
E6917118ED3E2F1D5414A758879D62EF8EB7F22BB6BE904855AF6AF0CAA67AC1
C969BA6E8B418846434642C88AAB9BD0410E02458E4449DAE5E9120EE03487A5
25D8264E5ACA2033CE19A99E1961C32F74B0DDA16DE40FFA4C517FD6CF830B74
68E2D7035C032F2341C3CA9B3D36B0DD0B51D7F04170E2CAAC18453D7CBE0A6E
0D1B8A6878840B886A16ED864670A9DFE02F626498A0F0C3552A00BA1986D234
46DE3DA7C5CCBEC6C0D876F3A12E7948D1F0CAD456549FF8DDA6DA2664D12259
A31ED6A338EB87D43F11F55DE56DF24BC5538FF83E9E310C6CE8F3705F37DDAC
8980EB32D20D9A5B4779DF5851A8CDB2B50DB3963656E8BD1787153808402D7B
5850DDB3D6AA5AF6994FF0958D86B9ADB59009B33184D19E0AECA35651CAFFF1
6601C63464984E3DE46B22C496ABA5A0D8B38743E5DBCE191ABD9B18EEAF16BF
0E59CE2F4B9FB2C418ECD5652B7FA2CEFF6EBC893C6786C99968AF7B4272BBD2
A1B091EF9AE008C92F3CAFB1B7A16840F53316CE51F88B7646D4E2FF4E7CE549
5154D3DFA950086D48AC5A70F748A43B2B1E8AD8B7BC89AF289290E4C1FCBCD1
4FD7D154094E39D38097088E4FACBAF42666C6EAC3115EC32813AEF408222559
DABF07BD345A25C054B20D2A3770F09E320B5028D18685BC7243860AA90B3A48
744F246518E5103B5F55DB370C73789E1EF138A17927F4D8D18B882DE1E148C1
807E3003647CDD744DC6657B83906540EBB4BAC25F873870FE0DC8504C715A69
A42CD2E6A0B354BD47B48622562804F2F02F17C0B8C68811D84D8C0A1C79FE00
E0D5B79CFF931BB1139789D67BF99A8F5C26D565EDB06E5CA28CAC7EB82E1143
5A213C45C3AB995E4661CB1793D0B4103EBB92A3F801BA6837F9DA3971940E7B
3D744A3A558CE9F1E4CF015A2AEF2B60E828FB8A54F3F45F4EFB4231C0EB9A05
BC7EE643AF9687506BFD1AD8CD25563904A13AB116661BDDE67FD6EBFE940E07
15946FA310B839387AFCF776C66D37567E12E76EFB218F15BAD6FEBE0D912657
0349812477195222738129E44291F17DACAAA44E3757E3A9193A55D17766E680
64A4F203F2493F03FF5A32C2BF6A1007F77336668372CEE243C3EF4CD0C50B77
50906EEB00961D86A600F339F88A3607FBB3825C288574EFB2872B4A0F830474
DD43F130FF9A0482778FDA425DC915E4A0F35CF024B47288C1771381D3DA2623
0D1DD34FA2C98CEA3212CF7187E8EF5F0A52D38AE0F49B611AC3BFAA41981E37
BE8E24991636284E92CDFF031C4EE20A0F24E1B0AECB1E16D66207323C383501
1FDA4A855F0BA97B4A5BF316058A0D1C18966D30145238FE9558D76ECDB4141E
0332967541734948D58B4AD470A1728C38D6F43DECEE44F0D13A727D9A631C28
21C71B89150C29E5AF3D3D85900A3EA1DDE9C83DD4C8AC4C76D59B191AA82D76
74A710B523C411CA3E9B217DEBF9A452FEF33A4AFAAE0403F55F7C3A3AFD7B95
C9F94AF912E4AF6A44604A9786540F9A426AD621C5087E82518D461382DA1C0F
F65077629D9BEED18E2EE25BBED1CDBA5956C61D83AFEB68A11F2395DF3766C4
3708E9770C6D069EEEBAF19D360CA61CF3035A7A5F9588BB4AE0E8F80C9E6202
0807740831E99C1695B82E4BBC8BE2C51FD4BF79242D84E0F4A6C985ED6C6F40
8D11A97A8E6F598131778B0B17A821E1417933A06442DF7EC5323B2780B22246
BEFD47011655495CD00507E4680E0563EFA3D7E46B5C8E1ADB2D9D4AEF26137C
E933A92EC095F7DE589B783A594DCB5E4A3A003D7C00A86EA653659568FF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 23867906 17900936 1000 600 600 (algspec.dvi)
@start /Fa 255[48{}1 49.8132 /CMSY6 rf /Fb 193[71 62[{}1
90.9091 /MSAM10 rf /Fc 252[71 3[{}1 90.9091 /LASY10 rf
/Fd 252[65 3[{}1 83.022 /LASY10 rf /Fe 138[47 34 35 31
3[47 1[21 2[21 47 1[28 42 56[25 2[36 36 40[{}13 83.022
/CMSSBX10 rf /Ff 255[52{}1 58.1154 /CMSY7 rf /Fg 196[20
59[{}1 66.4176 /CMMI8 rf /Fh 155[27 48[26 26 26 49[{}4
49.8132 /CMSSI8 rf /Fi 192[52 63[{}1 66.4176 /MSBM10
rf /Fj 134[41 4[39 3[37 2[50 1[42 5[37 3[41 19[66 7[49
69[{}9 66.4176 /CMCSC10 rf /Fk 139[28 29 13[34 101[{}3
74.7198 /CMSSI9 rf /Fl 204[31 31 31 49[{}3 58.1154 /CMSS8
rf /Fm 140[32 13[37 101[{}2 83.022 /CMSSI10 rf /Fn 204[31
31 31 49[{}3 58.1154 /CMSSI8 rf /Fo 207[19 47[55{}2 66.4176
/CMSY8 rf /Fp 222[77 33[{}1 74.7198 /CMSY9 rf /Fq 196[21
59[{}1 74.7198 /CMMI9 rf /Fr 134[46 3[46 44 34 45 1[42
47 46 56 38 47 2[46 1[40 42 47 2[46 12[59 3[55 63 61
74 51 5[53 55 3[61 65[{}25 74.7198 /CMCSC10 rf /Fs 135[35
2[40 28 29 26 1[40 38 40 61 18 2[18 40 38 23 34 40 34
1[37 14[50 6[53 8[51 4[60 14[21 26 3[30 30 40[{}26 74.7198
/CMSS9 rf /Ft 143[36 1[36 110[{}2 66.4176 /CMSSI8 rf
/Fu 192[71 63[{}1 90.9091 /MSBM10 rf /Fv 134[42 42 4[35
2[47 1[47 7[28 40 1[40 47 44 8[61 2[63 18[61 61 65[{}14
90.9091 /CMSSI10 rf /Fw 135[38 3[30 32 28 43 2[43 4[20
2[25 37 43 87[45 12[{}11 83.022 /CMSSI10 rf /Fx 192[33
1[55 6[35 35 35 35 35 35 35 4[55 1[27 27 40[{}12 66.4176
/CMSS8 rf /Fy 196[23 23 58[{}2 83.022 /CMMI10 rf /Fz
175[96 17[81 1[81 1[81 1[81 15[73 13[68 26[{}7 90.9091
/CMEX10 rf /FA 193[71 2[25 25 58[{}3 90.9091 /CMMI10
rf /FB 145[36 9[36 49[35 35 49[{}4 66.4176 /CMSSI8 rf
/FC 134[42 42 62 42 47 33 35 31 47 47 45 47 72 22 44
24 22 47 45 28 40 47 40 47 44 23[25 7[61 18[25 33[49
12[{}29 90.9091 /CMSSI10 rf /FD 134[51 51 2[51 49 38
50 53 46 53 51 62 43 53 1[25 51 53 44 46 52 49 1[51 12[65
51 66 1[62 1[68 82 57 5[59 62 69 2[68 65[{}32 83.022
/CMCSC10 rf /FE 134[38 38 57 38 43 30 32 28 43 43 42
43 66 20 41 22 20 43 42 25 37 43 37 43 40 12[57 1[54
12[50 7[65 2[23 11[23 4[32 32 40[{}33 83.022 /CMSS10
rf /FF 199[46 22[83 83 16[42 42 11[65 2[{}6 83.022 /CMSY10
rf /FG 183[77 5[60 9[51 0 0 9[91 2[91 91 6[91 91 16[45
45 11[71 25 71{}15 90.9091 /CMSY10 rf /FH 134[56 56 2[56
54 42 55 58 51 58 56 68 47 58 1[27 56 58 49 51 57 54
1[56 12[71 56 73 77 67 77 74 90 62 5[65 67 75 1[70 74
19[34 45[{}36 90.9091 /CMCSC10 rf /FI 134[45 45 68 45
51 37 38 34 51 51 50 51 79 23 48 26 23 51 50 31 46 51
44 51 48 16[64 72 10[72 64 67 2[47 17[33 28 2[39 39 27[53
12[{}36 90.9091 /CMSSBX10 rf /FJ 198[26 26 26 26 26 26
26 26 26 26 26 47[{}11 49.8132 /CMSS8 rf /FK 131[91 1[40
42 42 62 42 47 33 35 31 47 47 45 47 72 22 44 24 22 47
45 28 40 47 40 47 44 4[45 2[61 1[86 2[62 51 59 1[58 67
64 80 49 63 1[25 64 61 52 54 1[58 61 61 1[43 1[71 1[25
25 45 45 45 45 1[45 45 45 45 45 45 25 30 25 71 1[35 35
25 1[76 2[45 19[74 1[49 53 11[{}73 90.9091 /CMSS10 rf
/FL 134[54 54 1[54 60 42 45 40 60 60 59 60 93 28 57 31
28 60 59 36 52 60 52 60 56 12[80 65 75 86 74 86 2[63
3[82 1[66 70 84 75 78 77 17[59 1[39 3[46 46 27[63 12[{}43
119.552 /CMSS12 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467 -608 a
SDict begin H.S end
 -467 -608
a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (Navigation1) cvn /DEST pdfmark
end
 -467 -608 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 1 TeXcolorgray -600 1668 3024 2268 v 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 2424 1668
a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0.68 0.68 0.88
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray Black 0 TeXcolorgray -458 -600 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -458
-600 a -458 -600 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -458 -600 a -458 -600 a
SDict begin H.S end
 -458 -600
a -458 -600 a
SDict begin 13.6 H.A end
 -458 -600 a -458 -600 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -458 -600 a -458
-600 a
SDict begin [/Producer (dvips + Distiller)/Title (Algebraic Specifications)/Subject
()/Creator (LaTeX with Beamer class)/Author (Christian Rinderknecht)/Keywords
() /DOCINFO pdfmark end
 -458 -600 a -458 -600 a
SDict begin [ {Catalog} <</PageLabels<</Nums[0<</P(1)>>1<</P(2)>>2<</P(3)>>3<</P(4)>>4<</P(5)>>5<</P(6)>>6<</P(7)>>7<</P(8)>>8<</P(9)>>9<</P(10)>>10<</P(11)>>11<</P(12)>>12<</P(13)>>13<</P(14)>>14<</P(15)>>15<</P(16)>>16<</P(17)>>17<</P(18)>>18<</P(19)>>19<</P(20)>>20<</P(21)>>21<</P(22)>>22<</P(23)>>23<</P(24)>>24<</P(25)>>25<</P(26)>>26<</P(27)>>27<</P(28)>>28<</P(29)>>29<</P(30)>>30<</P(31)>>31<</P(32)>>32<</P(33)>>33<</P(34)>>34<</P(35)>>35<</P(36)>>36<</P(37)>>37<</P(38)>>38<</P(39)>>39<</P(40)>>40<</P(41)>>41<</P(42)>>42<</P(43)>>43<</P(44)>>44<</P(45)>>45<</P(46)>>46<</P(47)>>47<</P(48)>>48<</P(49)>>49<</P(50)>>50<</P(51)>>51<</P(52)>>52<</P(53)>>53<</P(54)>>54<</P(55)>>55<</P(56)>>56<</P(57)>>57<</P(58)>>58<</P(59)>>59<</P(60)>>60<</P(61)>>61<</P(62)>>62<</P(63)>>63<</P(64)>>64<</P(65)>>65<</P(66)>>66<</P(67)>>67<</P(68)>>68<</P(69)>>69<</P(70)>>70<</P(71)>>71<</P(72)>>72<</P(73)>>73<</P(74)>>74<</P(75)>>75<</P(76)>>76<</P(77)>>77<</P(78)>>78<</P(79)>>79<</P(80)>>80<</P(81)>>81<</P(82)>>82<</P(83)>>83<</P(84)>>84<</P(85)>>85<</P(86)>>86<</P(87)>>87<</P(88)>>88<</P(89)>>89<</P(90)>>90<</P(91)>>91<</P(92)>>92<</P(93)>>93<</P(94)>>94<</P(95)>>]>>>>
/PUT pdfmark end
 -458 -600 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 337 76 a FL(Algeb)m(raic)37 b(Sp)s
(eci\014cations)p 0 TeXcolorgray 0 TeXcolorgray 479 394
a FK(Christian)29 b(Rinderknecht)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 592 740 a(19)i(Octob)s(er)g(2008)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525
TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb 2247 1639 a FJ(1)9
b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation2) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bo)s(oleans/Signature)p 0.2 0.2 0.7 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray -458 -250 a FK(Let)31 b(us)f(sta)m(rt)g
(this)f(section)i(ab)s(out)f(sea)m(rch)h(algo)m(rithms)g(b)m(y)g(p)m
(resenting)g(ho)m(w)g(to)-458 -137 y(sp)s(ecify)f(data)f(structures)i
(without)f(relying)g(on)h(a)f(sp)s(eci\014c)g(p)m(rogramming)-458
-24 y(language.)41 b(The)30 b(metho)s(d)h(w)m(e)g(intro)s(duce)g(here)g
(is)f(usually)f(called)h FI(algeb)m(raic)-458 89 y(sp)s(eci\014cation)p
FK(.)-458 301 y(Consider)h(one)g(of)f(the)h(simplest)f(data)f
(structure)i(y)m(ou)g(can)f(imagine:)41 b(the)-458 414
y(b)s(o)s(oleans.)f(Let)31 b(us)f(call)g(the)g(follo)m(wing)h(sp)s
(eci\014cation)f FH(Bool)p FK(.)40 b(Here)32 b(is)e(its)-458
527 y FI(signature)p FK(:)p 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb -367 680 a FG(\017)p 0 TeXcolorgray
0 TeXcolorgray -276 690 a FI(De\014ned)k(t)m(yp)s(es)p
0 TeXcolorgray 0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb
-182 819 a FF(\017)p 0 TeXcolorgray 0 TeXcolorgray -95
831 a FE(The)27 b(t)n(yp)r(e)h(of)g(the)f(b)r(o)r(oleans)g(is)g(t.)p
0 TeXcolorgray 0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb
-367 975 a FG(\017)p 0 TeXcolorgray 0 TeXcolorgray -276
985 a FI(Constructo)m(rs)p 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb -182 1115 a FF(\017)p 0 TeXcolorgray
0 TeXcolorgray -95 1127 a FD(Tr)n(ue)d FE(:)f(t)p 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb -182 1214 a FF(\017)p 0 TeXcolorgray
0 TeXcolorgray -95 1226 a FD(F)-10 b(alse)24 b FE(:)f(t)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525
TeXcolorrgb 2247 1639 a FJ(2)9 b(/)h(95)p 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation3) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bo)s(oleans/Signature)36 b(\(continued\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FH(Tr)n(ue)30 b FK(and)g FH(F)-11 b(alse)29
b FK(a)m(re)i(called)f(constructo)m(rs)i(b)s(ecause)e(they)h(allo)m(w)f
(the)-458 -137 y(construction)h(of)37 b FI(values)31
b FK(of)g(t)m(yp)s(e)f(t,)h(i.e.)41 b(b)s(o)s(oleans.)f(This)30
b(is)f(why)i(w)m(e)g(write)g(\\:)-458 -24 y(t")f(after)g(these)h
(constructo)m(rs.)-458 188 y(F)m(o)m(r)f(mo)m(re)i(excitement,)f(let)e
(us)g(add)h(some)g(usual)f FI(functions)h FK(whose)g(a)m(rguments)-458
301 y(a)m(re)h(b)s(o)s(oleans:)p 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb -367 429 a FG(\017)p 0 TeXcolorgray
0 TeXcolorgray -276 439 a FH(Not)24 b FK(:)i(t)f FG(!)g
FK(t)-276 552 y(Exp)m(ression)31 b FH(Not)o FK(\()370
561 y FC(b)420 552 y FK(\))g(is)f(the)g(negation)h(of)1181
561 y FC(b)1231 552 y FK(;)p 0 TeXcolorgray 0.2 0.2 0.7
TeXcolorrgb -367 680 a FG(\017)p 0 TeXcolorgray 0 TeXcolorgray
-276 690 a FH(And)24 b FK(:)i(t)20 b FG(\002)g FK(t)25
b FG(!)g FK(t)-276 803 y(Exp)m(ression)31 b FH(And)o
FK(\()p FC(b)418 817 y FB(1)465 803 y FA(;)15 b FC(b)552
817 y FB(2)600 803 y FK(\))30 b(is)g(the)h(conjunction)g(of)g
FC(b)1522 817 y FB(1)1599 803 y FK(and)f FC(b)1814 817
y FB(2)1860 803 y FK(;)p 0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb
-367 931 a FG(\017)p 0 TeXcolorgray 0 TeXcolorgray -276
941 a FH(Or)24 b FK(:)i(t)20 b FG(\002)g FK(t)25 b FG(!)g
FK(t)-276 1053 y(Exp)m(ression)31 b FH(Or)o FK(\()p FC(b)363
1067 y FB(1)410 1053 y FA(;)15 b FC(b)497 1067 y FB(2)545
1053 y FK(\))30 b(is)g(the)h(disjunction)f(of)g FC(b)1437
1067 y FB(1)1514 1053 y FK(and)g FC(b)1729 1067 y FB(2)1776
1053 y FK(.)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525
TeXcolorrgb 2247 1639 a FJ(3)9 b(/)h(95)p 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation4) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bo)s(oleans/Equations)p 0.2 0.2 0.7 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray -458 -250 a FK(W)m(e)31
b(can)f(give)h(mo)s(de)g(info)m(rmation)f(ab)s(out)g(the)h(p)m(revious)
g(functions)f(b)m(y)h(means)-458 -137 y(of)37 b FI(equations)30
b FK(\(o)m(r)j FI(axioms)p FK(\).)42 b(A)30 b(p)s(ossible)g(set)g(of)g
(equations)h(matching)f(the)-458 -24 y(signature)g(is)152
180 y FH(Not)p FK(\()p FH(Tr)n(ue)p FK(\))25 b(=)g FH(F)-11
b(alse)134 318 y(Not)p FK(\()p FH(F)g(alse)o FK(\))25
b(=)g FH(Tr)n(ue)-120 456 y(And)p FK(\()p FH(Tr)n(ue)p
FA(;)15 b FH(Tr)n(ue)p FK(\))25 b(=)g FH(Tr)n(ue)-138
594 y(And)o FK(\()p FH(Tr)n(ue)p FA(;)15 b FH(F)-11 b(alse)p
FK(\))25 b(=)g FH(F)-11 b(alse)-138 731 y(And)o FK(\()p
FH(F)g(alse)p FA(;)15 b FH(Tr)n(ue)p FK(\))25 b(=)g FH(F)-11
b(alse)-156 869 y(And)o FK(\()p FH(F)g(alse)o FA(;)15
b FH(F)-11 b(alse)p FK(\))25 b(=)g FH(F)-11 b(alse)-190
1007 y FG(8)15 b FC(b)-77 1021 y FB(1)-31 1007 y FA(;)g
FC(b)56 1021 y FB(2)209 1007 y FH(Or)p FK(\()p FC(b)423
1021 y FB(1)470 1007 y FA(;)g FC(b)557 1021 y FB(2)604
1007 y FK(\))25 b(=)g FH(Not)p FK(\()p FH(And)p FK(\()p
FH(Not)p FK(\()p FC(b)1471 1021 y FB(1)1518 1007 y FK(\))p
FA(;)15 b FH(Not)p FK(\()p FC(b)1861 1021 y FB(2)1908
1007 y FK(\)\)\))-458 1211 y(The)30 b(signature)h(and)e(the)i
(equations)f(mak)m(e)i(a)e FI(sp)s(eci\014cation)p FK(.)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525
TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb 2247 1639 a FJ(4)9
b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation5) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.5) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bo)s(oleans/Equations)36 b(\(cont\))p 0.2 0.2 0.7
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray -458 -250 a
FK(W)m(e)31 b(note)g(something)g(interesting)f(in)g(the)h(last)e
(equation:)41 b(it)30 b(contains)-458 -137 y FI(va)m(riables)p
FK(,)i(here)f FC(b)188 -123 y FB(1)265 -137 y FK(and)f
FC(b)480 -123 y FB(2)526 -137 y FK(.)41 b(These)31 b(va)m(riables)f
(must)g(b)s(e)g(of)g(t)m(yp)s(e)h(t)f(b)s(ecause)-458
-24 y(they)g(a)m(re)h(a)m(rguments)g(of)g(function)f
FH(Or)p FK(,)g(whose)h(t)m(yp)s(e,)g(as)f(given)h(b)m(y)f(the)-458
89 y(signature,)g(is)g(t)20 b FG(\002)g FK(t)25 b FG(!)g
FK(t.)-458 301 y(It)30 b(is)g(very)h(imp)s(o)m(rtant)f(to)g(notice)h
(also)f(that)g(these)h(va)m(riables)e(a)m(re)i(b)s(ound)g(to)f(a)-458
414 y FI(universal)k(quanti\014er)p FK(,)d FG(8)p FK(,)f(at)g(the)h(b)s
(eginning)f(of)h(the)f(equation.)41 b(This)29 b(means,)-458
527 y(in)h(pa)m(rticula)m(r,)g(that)g(w)m(e)h(can)g(rename)g(these)f
(va)m(riables)g(b)s(ecause)h(they)f(a)m(re)h(just)-458
640 y(names)f(which)h(a)m(re)g(lo)s(cal)e(to)i(the)f(equation.)41
b(F)m(o)m(r)32 b(instance)-63 844 y FG(8)3 841 y FC(u)53
844 y FA(;)93 841 y FC(v)252 844 y FH(Or)o FK(\()418
841 y FC(u)469 844 y FA(;)509 841 y FC(v)561 844 y FK(\))26
b(=)f FH(Not)o FK(\()p FH(And)p FK(\()p FH(Not)p FK(\()1381
841 y FC(u)1432 844 y FK(\))p FA(;)15 b FH(Not)q FK(\()1729
841 y FC(v)1781 844 y FK(\)\)\))-458 1049 y(w)m(ould)31
b(b)s(e)f(equivalent.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525
TeXcolorrgb 2247 1639 a FJ(5)9 b(/)h(95)p 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation6) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.6) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bo)s(oleans/Simplifying)34 b(the)39 b(equations)p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(W)m(e)31 b(can)f(simplify)f(these)i(equations)f(b)s(efo)
m(re)i(going)f(on.)-458 -37 y(First)e(w)m(e)j(can)e(omit)g(the)h
(quanti\014ers)e(\(but)i(rememb)s(er)g(they)g(a)m(re)g(implicitly)-458
76 y(p)m(resent\).)-458 288 y(Second)g(w)m(e)g(rema)m(rk)h(that)d(it)h
(su\016ces)h(that)f(one)h(a)m(rgument)g(of)37 b FH(And)30
b FK(is)g FH(F)-11 b(alse)-458 401 y FK(to)30 b(mak)m(e)i(the)e(call)g
(equal)g(to)h FH(F)-11 b(alse)p FK(.)39 b(In)31 b(other)g(w)m(o)m(rds)
117 605 y FH(Not)o FK(\()p FH(Tr)n(ue)p FK(\))26 b(=)f
FH(F)-11 b(alse)99 743 y(Not)o FK(\()p FH(F)g(alse)o
FK(\))26 b(=)f FH(Tr)n(ue)-155 881 y(And)o FK(\()p FH(Tr)n(ue)p
FA(;)15 b FH(Tr)n(ue)p FK(\))26 b(=)f FH(Tr)n(ue)7 1019
y(And)p FK(\()229 1016 y FC(x)279 1019 y FA(;)15 b FH(F)-11
b(alse)o FK(\))26 b(=)f FH(F)-11 b(alse)7 1156 y(And)p
FK(\()p FH(F)g(alse)o FA(;)518 1153 y FC(x)568 1156 y
FK(\))26 b(=)f FH(F)-11 b(alse)174 1294 y(Or)o FK(\()p
FC(b)387 1308 y FB(1)434 1294 y FA(;)15 b FC(b)521 1308
y FB(2)568 1294 y FK(\))26 b(=)f FH(Not)p FK(\()p FH(And)o
FK(\()p FH(Not)p FK(\()p FC(b)1435 1308 y FB(1)1482 1294
y FK(\))p FA(;)15 b FH(Not)q FK(\()p FC(b)1826 1308 y
FB(2)1873 1294 y FK(\)\)\))p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525
TeXcolorrgb 2247 1639 a FJ(6)9 b(/)h(95)p 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation7) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.7) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bo)s(oleans/Simplifying)34 b(the)39 b(equations)f(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(In)30 b(o)m(rder)i(to)f(b)s(e)f(100\045)h(con\014dent,)g
(w)m(e)h(must)e(check)i(whether)f(the)f(set)h(of)f(new)-458
-137 y(equations)g(is)g FI(equivalent)h FK(to)g(the)f(\014rst)g(set.)
-356 -17 y Fz(8)-356 64 y(<)-356 228 y(:)-259 42 y FD(And)o
FE(\()p FD(Tr)n(ue)q Fy(;)14 b FD(F)-10 b(alse)q FE(\))23
b(=)g FD(F)-10 b(alse)-259 166 y(And)o FE(\()p FD(F)g(alse)q
Fy(;)14 b FD(Tr)n(ue)q FE(\))23 b(=)g FD(F)-10 b(alse)-276
291 y(And)p FE(\()p FD(F)g(alse)p Fy(;)14 b FD(F)-10
b(alse)q FE(\))23 b(=)g FD(F)-10 b(alse)891 118 y Fx(?)824
169 y FG(\()-15 b(\))1016 41 y Fz(\032)1084 104 y FF(8)1144
102 y Fw(x)1287 104 y FD(And)o FE(\()1489 102 y Fw(x)1535
104 y Fy(;)14 b FD(F)-10 b(alse)q FE(\))23 b(=)g FD(F)-10
b(alse)1084 229 y FF(8)1144 227 y Fw(x)1287 229 y FD(And)o
FE(\()p FD(F)g(alse)q Fy(;)1754 227 y Fw(x)1800 229 y
FE(\))23 b(=)g FD(F)-10 b(alse)-458 671 y FK(The)30 b(new)h(system)f
(is)g(equivalent)g(to)798 430 y Fz(8)798 512 y(>)798
540 y(>)798 567 y(<)798 730 y(>)798 758 y(>)798 785 y(:)895
482 y FD(And)p FE(\()p FD(Tr)n(ue)q Fy(;)14 b FD(F)-10
b(alse)p FE(\))23 b(=)g FD(F)-10 b(alse)879 606 y(And)o
FE(\()p FD(F)g(alse)q Fy(;)14 b FD(F)-10 b(alse)p FE(\))23
b(=)g FD(F)-10 b(alse)895 731 y(And)p FE(\()p FD(F)g(alse)p
Fy(;)14 b FD(Tr)n(ue)q FE(\))23 b(=)g FD(F)-10 b(alse)879
855 y(And)o FE(\()p FD(F)g(alse)q Fy(;)14 b FD(F)-10
b(alse)p FE(\))23 b(=)g FD(F)-10 b(alse)-458 957 y FK(So)30
b(the)h(answ)m(er)f(is)g(y)m(es.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525
TeXcolorrgb 2247 1639 a FJ(7)9 b(/)h(95)p 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 8 8
TeXDict begin 8 7 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation8) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.8) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(F)m(rom)38 b(sp)s(eci\014cations)g(to)g(algo)m(rithms)p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(No)m(w,)32 b(ho)m(w)f(do)g(w)m(e)g(go)g(from)g(a)f(sp)s
(eci\014cation)g(to)h(an)f FI(algo)m(rithm)p FK(?)-458
-37 y(By)e(algo)m(rithm,)i(w)m(e)f(mean)g(an)g FI(op)s(erational)i
(description)f FK(of)f(the)g(sp)s(eci\014cation,)-458
76 y(i.e.,)i(a)f(series)g(of)h(explicit)f(computations)h(that)e(resp)s
(ect)i(the)g(equations)f(and)-458 188 y(yield)g(the)g(exp)s(ected)h
(result.)-458 401 y(A)f(sp)s(eci\014cation)g(describ)s(es)g(abstract)g
(p)m(rop)s(erties)h(\(using)f(notations)g(lik)m(e)h FG(8)p
FK(,)-458 514 y(\()p Fv(x)8 b FA(;)15 b Fv(y)10 b FK(\),)31
b Fu(?)p FK(,)-63 446 y Fz(P)63 514 y FK(etc.)41 b(and)30
b(leaving)g(out)h(explicit)f(data)f(structure)i(de\014nitions\))-458
627 y(and)f(the)g(algo)m(rithm)h(is)f(a)g(calculus)g(schema)h(\(this)f
(intro)s(duces)g(an)g(abstract)-458 740 y(computer)h(mo)s(del,)g
(including)f(time\).)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525
TeXcolorrgb 2247 1639 a FJ(8)9 b(/)h(95)p 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 9 9
TeXDict begin 9 8 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation9) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.9) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(F)m(rom)38 b(sp)s(eci\014cations)g(to)g(algo)m(rithms)f
(\(cont\))p 0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0
TeXcolorgray -458 -250 a FK(One)30 b(sa)m(ys)g(that)g(an)g(algo)m
(rithm)h(is)f FI(co)m(rrect)k(with)f(resp)s(ect)h(to)g(its)-458
-137 y(sp)s(eci\014cation)e FK(when)f(all)e(the)h(results)g(of)h(the)f
(algo)m(rithm)h(satisfy)e(the)-458 -24 y(sp)s(eci\014cation,)h(i.e.,)h
(there)g(is)f(no)h(contradiction)f(when)h(the)g(results)f(a)m(re)-458
89 y(substituted)f(into)h(the)h(equations)f(of)h(the)f(sp)s
(eci\014cation.)-458 301 y(Co)m(rrectness)i(is)e(alw)m(a)m(ys)g(a)g
(relative)g(concept)i(\(a)e(p)m(rop)s(ert)m(y)i(of)e(the)h(algo)m
(rithm)f(in)-458 414 y(rega)m(rd)h(to)g(its)e(sp)s(eci\014cation\).)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525
TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb 2247 1639 a FJ(9)9
b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 10 10
TeXDict begin 10 9 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation10) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.10) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(F)m(rom)38 b(sp)s(eci\014cations)g(to)g(algo)m(rithms)f
(\(cont\))p 0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0
TeXcolorgray -458 -250 a FK(So,)30 b(an)g(algo)m(rithm)h(is)f(mo)m(re)i
(detailed)e(than)g(a)g(sp)s(eci\014cation.)40 b(But)30
b(ho)m(w)h(much)-458 -137 y(mo)m(re?)-458 76 y(Contra)m(ry)g(to)f(algo)
m(rithms,)h FI(p)m(rograms)f FK(dep)s(end)h(on)f(p)m(rogramming)j
(languages,)-458 188 y(as)d(w)m(e)h(mentioned)g(b)s(efo)m(re.)42
b(Thus)30 b(algo)m(rithms)h(can)f(b)s(e)g(considered)i(as)d(a)h(useful)
-458 301 y(step)g(from)h(sp)s(eci\014cation)f(to)g(p)m(rograms,)i(as)e
(a)g(re\014nement)h(step.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525
TeXcolorrgb 2221 1639 a FJ(10)9 b(/)h(95)p 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 11 11
TeXDict begin 11 10 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation11) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.11) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(F)m(rom)38 b(sp)s(eci\014cations)g(to)g(algo)m(rithms)f
(\(cont\))p 0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0
TeXcolorgray -458 -250 a FK(Algo)m(rithms)30 b(can)h(b)s(e)f
(implemented)h(using)f(di\013erent)h(p)m(rogramming)h(languages)-458
-137 y(\(featuring)e(objects,)i(o)m(r)f(p)s(ointers,)g(o)m(r)g
(exceptions)g(etc.\).)42 b(The)31 b(mo)m(re)g(w)m(e)h(w)m(ant)-458
-24 y(to)e(b)s(e)h(free)f(of)h(using)f(our)h(favo)m(rite)g(p)m
(rogramming)h(language,)f(the)f(mo)m(re)i(the)-458 89
y(language)e(fo)m(r)h(exp)m(ressing)h(algo)m(rithms)f(should)f(b)s(e)g
(abstract.)-458 301 y(Ho)m(w)m(ever,)j(this)d(language)g(ma)m(y)h
(assume)f(an)g(abstract)g(mo)s(del)g(of)h(the)f(computer)-458
414 y(which)g(can)h(b)s(e)f(quite)g(di\013erent)h(from)f(the)h(one)g
(assumed)f(b)m(y)h(the)g(chosen)-458 527 y(p)m(rogramming)h(language.)
41 b(On)30 b(the)g(contra)m(ry)-8 b(,)32 b(sometimes)g(they)e(a)m(re)h
(the)f(same)-458 640 y(\(this)g(is)g(the)g(case)h(of)37
b(Prolog)q(\).)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb
2221 1639 a FJ(11)9 b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 12 12
TeXDict begin 12 11 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation12) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.12) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(F)m(rom)38 b(sp)s(eci\014cations)g(to)g(algo)m(rithms)f
(\(cont\))p 0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0
TeXcolorgray -458 -250 a FK(Coming)31 b(back)g(to)f(our)h(question:)41
b(ho)m(w)31 b(do)g(w)m(e)g(go)h(from)e(an)g(algeb)m(raic)-458
-137 y(sp)s(eci\014cation)g(\(which,)h(b)m(y)f(de\014nition,)h(describ)
s(es)f(fo)m(rmally)h(a)f(concept\))i(to)e(an)-458 -24
y(algo)m(rithm)h(\(which)f(describ)s(es)h(fo)m(rmally)f(a)g
(computation\)?)-458 188 y(One)g(w)m(a)m(y)h(is)f(to)h(rely)f(on)h(the)
f(t)m(w)m(o)i(kinds)e(of)h(equations)f(w)m(e)h(have,)g(recursive)g(and)
-458 301 y(non-recursive.)42 b(In)30 b(mathematics,)h(the)f(integer)h
(sequence)h(w)m(e)f(give)g(page)g(28)-458 414 y(can)d(b)s(e)h(transfo)m
(rmed)h(into)e(a)h(functional)f(de\014nition,)h(i.e.,)h
Fv(U)1587 428 y Ft(n)1657 414 y FK(is)e(exp)m(ressed)i(only)-458
527 y(in)g(terms)g(of)h Fv(n)r FK(,)f Fv(a)h FK(and)f
Fv(b)s FK(,)g(b)m(y)h(fo)m(rming)g Fv(U)936 541 y Ft(n)q
Fx(+1)1088 527 y FG(\000)20 b Fv(U)1242 541 y Ft(n)1308
527 y FK(=)25 b Fv(b)33 b FK(and)d(summing)h(b)s(oth)-458
640 y(sides:)-214 572 y Fz(P)-118 596 y Ft(p)-118 667
y(n)q Fx(=0)29 640 y FK(\()p Fv(U)127 654 y Ft(n)q Fx(+1)279
640 y FG(\000)20 b Fv(U)433 654 y Ft(n)474 640 y FK(\))26
b(=)631 572 y Fz(P)727 596 y Ft(p)727 667 y(n)q Fx(=0)874
640 y Fv(b)i FG(,)d Fv(U)1128 654 y Ft(p)s Fx(+1)1281
640 y FG(\000)20 b Fv(U)1435 654 y Fx(0)1499 640 y FK(=)25
b(\()p Fv(p)f FK(+)c(1\))p Fv(b)-458 753 y FG(,)25 b
Fv(U)-279 767 y Ft(p)s Fx(+1)-126 753 y FG(\000)20 b
Fv(a)26 b FK(=)f(\()p Fv(p)f FK(+)c(1\))p Fv(b)29 b FG(,)c
Fv(U)663 767 y Ft(p)731 753 y FK(=)g Fv(a)20 b FK(+)g
Fv(pb)28 b FG(,)d Fv(U)1283 767 y Ft(n)1350 753 y FK(=)g
Fv(a)c FK(+)f Fv(nb)s FK(.)-458 965 y(But)29 b(this)h(is)g(an)g
FC(ad)g(ho)s(c)h FK(technique)f(\(e.g.,)j(w)m(e)e(rely)f(on)h(p)m(rop)s
(erties)g(of)g(the)-458 1078 y(integer)g(numb)s(ers,)f(as)g
(addition\),)g(which)h(cannot)g(b)s(e)f(applied)g(to)g(our)h(algeb)m
(raic)-458 1191 y(sp)s(eci\014cations.)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(12)9 b(/)h(95)p
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 13 13
TeXDict begin 13 12 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation13) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.13) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(F)m(rom)38 b(sp)s(eci\014cations)g(to)g(algo)m(rithms)f
(\(cont\))p 0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0
TeXcolorgray -458 -250 a FK(The)30 b(general)h(app)m(roach)g(consists)f
(in)g(\014nding)h(a)f FI(computation)j(scheme)-458 -137
y FK(instead)c(of)i(relying)g(on)f(a)g FI(reasoning)p
FK(,)h(as)f(w)m(e)i(did)e(fo)m(r)h(the)f(sequence.)-458
76 y(This)f(is)h(achieved)h(b)m(y)g(lo)s(oking)g(at)f(the)g(equations)g
(in)g(the)h(sp)s(eci\014cation)f(and)-458 188 y FI(o)m(rienting)k(them)
p FK(.)-458 401 y(This)29 b(means)i(that)e(an)h(equation)h(is)f(then)g
(considered)i(as)d(a)h FI(rewriting)k(step)p FK(,)-458
514 y(from)d(the)f(left)g(side)g(to)h(the)f(right)h(side,)f(o)m(r)i
(the)e(reverse)h(w)m(a)m(y)-8 b(.)p 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(13)9 b(/)h(95)p
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 14 14
TeXDict begin 14 13 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation14) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.14) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(F)m(rom)38 b(sp)s(eci\014cations)g(to)g(algo)m(rithms)f
(\(cont\))p 0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0
TeXcolorgray -458 -250 a FK(Assume)30 b(w)m(e)h(have)g(an)e(equation)i
Fv(A)25 b FK(=)g Fv(B)8 b FK(,)29 b(where)j Fv(A)d FK(and)h
Fv(B)38 b FK(a)m(re)31 b(exp)m(ressions.)-458 -37 y(The)f(w)m(a)m(y)h
(to)g(pass)f(from)g(this)g(equalit)m(y)g(to)h(a)f(computation)g(is)g
(to)h(o)m(rient)g(the)-458 76 y(sides)f(as)g(a)g(rewriting)g(step,)h
(i.e.,)g(wherever)h(w)m(e)f(\014nd)f(an)g(o)s(ccurrence)i(of)f(the)f
(left)-458 188 y(side,)g(w)m(e)i(replace)e(it)g(b)m(y)h(the)g(right)f
(side.)-458 401 y(F)m(o)m(r)g(instance,)g(if)e(w)m(e)i(set)f
Fv(A)c FG(!)g Fv(B)8 b FK(,)29 b(then)h(it)e(means)h(that)g(wherever)h
(w)m(e)g(\014nd)f(a)g Fv(A)p FK(,)-458 514 y(w)m(e)i(can)f(write)h
(instead)f(a)g Fv(B)8 b FK(.)-458 726 y(But,)30 b(in)g(theo)m(ry)-8
b(,)32 b Fv(A)25 b FK(=)g Fv(B)37 b FK(is)30 b(equivalent)g(to)g
Fv(A)25 b FG(!)g Fv(B)38 b FK(and)30 b Fv(B)i FG(!)25
b Fv(A)p FK(.)41 b(But)29 b(if)h(w)m(e)-458 839 y(k)m(eep)i(b)s(oth)e
(\(symmetric\))h(rewriting)g(steps,)g(w)m(e)g(get)g(a)f
FI(non-terminating)-458 952 y(rewriting)j(system)p FK(,)f(as)e
(demonstrated)h(b)m(y)f(the)h(follo)m(wing)g(in\014nite)f(chain:)-458
1065 y Fv(A)25 b FG(!)g Fv(B)32 b FG(!)25 b Fv(A)g FG(!)g
Fv(B)33 b FG(!)25 b FA(:)15 b(:)g(:)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(14)9 b(/)h(95)p
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 15 15
TeXDict begin 15 14 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation15) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.15) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(F)m(rom)38 b(sp)s(eci\014cations)g(to)g(algo)m(rithms)f
(\(cont\))p 0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0
TeXcolorgray -458 -250 a FC(A)30 b(rewriting)g(system)h(terminates)f
(if)g(it)g(stops)g(on)h(a)f(value.)-458 -37 y FK(If)g(w)m(e)h(have)g(a)
f(chain)g Fv(X)324 -23 y Fx(1)388 -37 y FG(!)25 b Fv(X)565
-23 y Fx(2)629 -37 y FG(!)h(\001)15 b(\001)g(\001)26
b(!)f Fv(X)1054 -23 y Ft(n)1126 -37 y FK(and)30 b(there)h(is)e(no)i(w)m
(a)m(y)g(to)g(rewrite)-458 76 y Fv(X)-397 90 y Ft(n)-356
76 y FK(,)f(i.e.,)g Fv(X)-73 90 y Ft(n)-2 76 y FK(do)s(es)g(not)f(app)s
(ea)m(r)h(in)f(any)g(pa)m(rt)g(of)h(a)f(left-hand)g(side,)h(then)g(if)f
Fv(X)2155 90 y Ft(n)2225 76 y FK(is)-458 188 y(a)h(value,)g(the)g
(chain)h(is)e(terminating.)-458 401 y(W)m(e)i(w)m(ant)f(a)g(rewriting)h
(system)f(that)g(terminates)g(on)h(a)f FI(value)p FK(.)-458
613 y(A)g(value)g(is)g(made)g(of)h(constructo)m(rs)h(only)-8
b(,)31 b(whilst)e(an)h FI(exp)m(ression)j FK(is)d(made)g(of)-458
726 y(constructo)m(rs)i(and)e(other)h(functions.)40 b(F)m(o)m(r)32
b(example,)p 0 TeXcolorgray 0 TeXcolorgray 0.2 0.2 0.7
TeXcolorrgb -367 879 a FG(\017)p 0 TeXcolorgray 0 TeXcolorgray
-276 889 a FH(Tr)n(ue)e FK(is)f(a)h(value;)p 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb -367 1017 a FG(\017)p 0 TeXcolorgray
0 TeXcolorgray -276 1027 a FH(Or)o FK(\()p FH(Tr)n(ue)p
FA(;)15 b FH(Not)p FK(\()p FH(F)-11 b(alse)o FK(\)\))31
b(is)f(an)g(exp)m(ression.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(15)9 b(/)h(95)p
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 16 16
TeXDict begin 16 15 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation16) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.16) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(F)m(rom)38 b(sp)s(eci\014cations)g(to)g(algo)m(rithms)f
(\(cont\))p 0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0
TeXcolorgray -458 -250 a FK(No)m(w,)32 b(ho)m(w)f(can)f(w)m(e)h(b)s(e)f
(sure)g(w)m(e)h(do)f(not)h(lose)f(some)h(p)m(rop)s(ert)m(y)g(b)m(y)g
(just)f(allo)m(wing)-458 -137 y(one)h(o)m(rientation)g(fo)m(r)g(each)g
(equalit)m(y)-8 b(,)30 b(as)g(just)g(k)m(eeping)i Fv(A)25
b FG( )g Fv(B)38 b FK(when)31 b Fv(A)25 b FK(=)f Fv(B)8
b FK(?)-458 76 y(This)29 b(p)m(roblem)j(is)e(a)g FI(completeness)35
b(p)m(roblem)c FK(and)f(is)g(very)h(di\016cult)f(to)-458
188 y(tackle,)p 0 TeXcolorgray -33 x Fx(1)p 0 TeXcolorgray
-140 188 a FK(therefo)m(re)i(w)m(e)g(will)d(not)i(discuss)f(it)g(here.)
-458 401 y(So,)g(ho)m(w)i(should)e(w)m(e)h(o)m(rient)g(our)g
(equations?)p 0 TeXcolorgray 0 TeXcolorgray -458 1482
1200 4 v -458 1504 a


 gsave nulldevice


 -458 1504 a


 grestore


 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -351 1536 a FJ(1)p 0 TeXcolorgray -320
1568 a Fs(Refer)26 b(to)g(the)f(Knuth-Bendix)g(completion)h(semi-algo)n
(rithm.)p 0 TeXcolorgray 0 TeXcolorgray -458 1595 a


 gsave nulldevice


 -458
1595 a


 grestore


 -458 1595 a


 gsave nulldevice


 -458 1595 a


 grestore


 -458 1595 a


 gsave nulldevice


 -458 1595
a


 grestore


 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525
TeXcolorrgb 2221 1639 a FJ(16)9 b(/)h(95)p 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 17 17
TeXDict begin 17 16 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation17) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.17) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bo)s(oleans/Orienting)36 b(the)j(equations)p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(Since)30 b(w)m(e)h(w)m(ant)g(to)f(use)h(an)f(equation)g
(to)h(compute)g(the)g(function)f(it)-458 -137 y(cha)m(racterises,)h(if)
f(one)h(side)f(of)h(an)f(equation)g(contains)g(an)g(o)s(ccurrence)j(of)
d(the)-458 -24 y(function)g(call)g(and)g(the)g(other)h(not,)g(w)m(e)h
(o)m(rient)f(from)g(the)f(fo)m(rmer)i(side)e(to)h(the)-458
89 y(latter:)87 293 y FH(Not)p FK(\()p FH(Tr)n(ue)p FK(\))25
b FG(!)690 307 y Fx(1)755 293 y FH(F)-11 b(alse)69 431
y(Not)o FK(\()p FH(F)g(alse)p FK(\))25 b FG(!)690 445
y Fx(2)755 431 y FH(Tr)n(ue)-185 569 y(And)p FK(\()p
FH(Tr)n(ue)p FA(;)15 b FH(Tr)n(ue)p FK(\))25 b FG(!)690
583 y Fx(3)755 569 y FH(Tr)n(ue)-23 706 y(And)p FK(\()199
703 y FC(x)249 706 y FA(;)15 b FH(F)-11 b(alse)p FK(\))25
b FG(!)690 720 y Fx(4)755 706 y FH(F)-11 b(alse)-23 844
y(And)p FK(\()p FH(F)g(alse)o FA(;)488 841 y FC(x)539
844 y FK(\))25 b FG(!)690 858 y Fx(5)755 844 y FH(F)-11
b(alse)144 982 y(Or)o FK(\()p FC(b)357 996 y FB(1)405
982 y FA(;)15 b FC(b)492 996 y FB(2)539 982 y FK(\))25
b FG(!)690 996 y Fx(6)755 982 y FH(Not)o FK(\()p FH(And)p
FK(\()p FH(Not)p FK(\()p FC(b)1465 996 y FB(1)1512 982
y FK(\))p FA(;)15 b FH(Not)p FK(\()p FC(b)1855 996 y
FB(2)1902 982 y FK(\)\)\))p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525
TeXcolorrgb 2221 1639 a FJ(17)9 b(/)h(95)p 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 18 18
TeXDict begin 18 17 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation18) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.18) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bo)s(oleans/Orienting)36 b(the)j(equations)g(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -272 a FK(F)m(o)m(r)31 b(example,)g(here)g(is)f(a)g(terminating)g
(chain)g(fo)m(r)h(the)g(exp)m(ression)-458 -180 y FH(Or)o
FK(\()p FH(Tr)n(ue)p FA(;)15 b FH(Tr)n(ue)p FK(\):)-196
-22 y Fr(Or)p Fs(\()p Fr(Tr)n(ue)o Fq(;)f Fr(And)o Fs(\()p
Fr(Tr)n(ue)o Fq(;)f Fr(F)-9 b(alse)q Fs(\))p 166 9 642
4 v(\))21 b Fp(!)935 -14 y FJ(4)987 -22 y Fr(Or)p Fs(\()p
Fr(Tr)n(ue)o Fq(;)14 b Fr(F)-9 b(alse)p 1349 -9 205 4
v Fs(\))241 109 y Fr(Or)p Fs(\()p Fr(Tr)n(ue)o Fq(;)13
b Fr(F)-9 b(alse)q Fs(\))p 241 140 597 4 v 21 w Fp(!)935
117 y FJ(6)987 109 y Fr(Not)p Fs(\()p Fr(And)o Fs(\()p
Fr(Not)q Fs(\()p Fr(Tr)n(ue)o Fs(\))p Fq(;)13 b Fr(Not)q
Fs(\()p Fr(F)-9 b(alse)p Fs(\)\)\))p 987 140 1278 4 v
-441 241 a Fr(Not)p Fs(\()p Fr(And)o Fs(\()p Fr(Not)q
Fs(\()p Fr(Tr)n(ue)o Fs(\))p -76 272 402 4 v Fq(;)13
b Fr(Not)q Fs(\()p Fr(F)-9 b(alse)p Fs(\)\)\))21 b Fp(!)935
249 y FJ(1)987 241 y Fr(Not)p Fs(\()p Fr(And)o Fs(\()p
Fr(F)-9 b(alse)p 1352 254 205 4 v 1 w Fq(;)13 b Fr(Not)q
Fs(\()p Fr(F)-9 b(alse)p Fs(\)\)\))-244 372 y Fr(Not)q
Fs(\()p Fr(And)o Fs(\()p Fr(F)g(alse)p Fq(;)13 b Fr(Not)q
Fs(\()p Fr(F)-9 b(alse)p Fs(\))p 360 404 417 4 v(\)\))21
b Fp(!)935 380 y FJ(2)987 372 y Fr(Not)p Fs(\()p Fr(And)o
Fs(\()p Fr(F)-9 b(alse)q Fq(;)13 b Fr(Tr)n(ue)p 1591
385 190 4 v Fs(\)\))-17 504 y Fr(Not)q Fs(\()p Fr(And)o
Fs(\()p Fr(F)-9 b(alse)p Fq(;)13 b Fr(Tr)n(ue)p Fs(\))p
166 535 642 4 v(\))21 b Fp(!)935 512 y FJ(5)987 504 y
Fr(Not)p Fs(\()p Fr(F)-9 b(alse)p 1169 517 205 4 v 1
w Fs(\))420 635 y Fr(Not)p Fs(\()p Fr(F)g(alse)q Fs(\))p
420 667 417 4 v 21 w Fp(!)935 643 y FJ(2)987 635 y Fr(Tr)n(ue)p
987 648 190 4 v -428 815 a FK(An)30 b(imp)s(o)m(rtant)g(p)m(rop)s(ert)m
(y)h(of)g(our)g(system)f(is)g(that)g(it)f(allo)m(ws)i(di\013erent)f
(chains)-458 928 y(sta)m(rting)g(from)h(the)f(same)h(exp)m(ression)g
(but)f(they)h(all)e(end)i(on)f(the)h(same)f(value,)-458
1041 y(e.g.,)i(w)m(e)f(could)g(have)f(applied)g FG(!)689
1055 y Fx(2)758 1041 y FK(b)s(efo)m(re)i FG(!)1112 1055
y Fx(1)1151 1041 y FK(.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525
TeXcolorrgb 2221 1639 a FJ(18)9 b(/)h(95)p 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 19 19
TeXDict begin 19 18 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation19) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.19) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bo)s(oleans/Orienting)36 b(the)j(equations)g(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(Here,)32 b(w)m(e)f(will)e(alw)m(a)m(ys)i(use)f(a)g
FI(strategy)i FK(which)f(rewrites)f(the)h(a)m(rguments)-458
-137 y(b)s(efo)m(re)g(the)g(function)f(calls.)-458 76
y(F)m(o)m(r)h(instance,)g(given)287 280 y FH(Or)o FK(\()p
FH(And)p FK(\()p FH(Tr)n(ue)p FA(;)15 b FH(Tr)n(ue)p
FK(\))p FA(;)g FH(F)-11 b(alse)p FK(\))-458 484 y(w)m(e)31
b(will)f(rewrite)h(\014rst)327 688 y FH(And)o FK(\()p
FH(Tr)n(ue)p FA(;)15 b FH(Tr)n(ue)p FK(\))26 b FG(!)1202
702 y Fx(3)1266 688 y FH(Tr)n(ue)-458 892 y FK(and)k(then)345
1005 y FH(Or)o FK(\()p FH(Tr)n(ue)p FA(;)15 b FH(F)-11
b(alse)p FK(\))25 b FG(!)1183 1019 y Fx(6)1248 1005 y
FH(Tr)n(ue)-458 1172 y FK(This)k(strategy)i(is)f(named)g
FI(call-b)m(y-value)j FK(b)s(ecause)e(w)m(e)g(rewrite)g(the)g(a)m
(rguments)-458 1285 y(into)f(their)g(values)g(\014rst)g(b)s(efo)m(re)h
(rewriting)g(the)f(function)h(call.)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(19)9 b(/)h(95)p
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 20 20
TeXDict begin 20 19 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation20) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.20) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Stacks)p 0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray
0 TeXcolorgray -458 -250 a FK(Let)31 b(us)f(sp)s(ecify)g(no)m(w)h(a)f
(linea)m(r)g(data)g(structure,)h(called)f FI(stack)p
FK(.)-458 -37 y(A)e(stack)h(is)f(simila)m(r)g(to)h(a)g(pile)f(of)h(pap)
s(er)g(sheets)g(on)g(a)f(table:)40 b(w)m(e)29 b(can)g(only)g(add)f(a)
-458 76 y(new)j(sheet)f(on)h(its)f(top)g(\(this)g(is)g(called)g
FI(to)j(push)p FK(\))e(and)f(remove)i(one)f(on)g(its)f(top)-458
188 y(\(this)g(is)g(called)g FI(to)j(p)s(op)p FK(\).)-458
401 y(F)m(rom)e(this)f(info)m(rmal)g(description,)h(w)m(e)g(understand)
f(that)g(w)m(e)h(shall)e(need)i(a)-458 514 y(constructo)m(r)h(fo)m(r)f
(the)f(stack)h(that)f(tak)m(es)g(an)g(a)m(rgument)i(\(lik)m(e)f(a)f
(sheet\):)42 b(it)30 b(is)f(a)-458 627 y(function.)40
b(This)30 b(is)g(di\013erent)h(from)g(the)f(b)s(o)s(olean)g(constructo)
m(rs)i(which)e(a)m(re)-458 740 y(constants)g(\()p FH(Tr)n(ue)g
FK(and)g FH(F)-11 b(alse)p FK(\).)p 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(20)9 b(/)h(95)p
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 21 21
TeXDict begin 21 20 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation21) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.21) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Stacks)39 b(\(cont\))p 0.2 0.2 0.7 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray -458 -250 a FK(Ho)m(w)31
b(do)g(w)m(e)h(mo)s(del)e(the)h(fact)f(that)f(the)i(stack)f(has)g
(changed)h(after)f(a)g(p)s(op)g(o)m(r)i(a)-458 -137 y(push?)40
b(The)30 b(simplest)g(is)g(to)h(imagine)f(that)g(w)m(e)h(give)g(the)f
(o)m(riginal)h(stack)f(as)g(an)-458 -24 y(a)m(rgument)h(and)f(the)h
(function)f(calls)g(\(p)s(op/push\))h(rep)m(resent)g(the)g(mo)s
(di\014ed)-458 89 y(stack.)-458 301 y(Also,)f(w)m(e)h(do)g(not)g(w)m
(ant)f(to)g(sp)s(ecify)g(actually)g(the)g(nature)g(of)h(the)f(elements)
h(in)-458 414 y(the)f(stack,)h(in)f(o)m(rder)i(to)e(b)s(e)h(general:)41
b(w)m(e)31 b(need)g(a)f(pa)m(rameter)h(t)m(yp)s(e)g(fo)m(r)g(the)-458
527 y(elements.)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb
2221 1639 a FJ(21)9 b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 22 22
TeXDict begin 22 21 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation22) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.22) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Stacks/Signature)p 0.2 0.2 0.7 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray -458 -250 a FK(Let)28 b(us)f(call)g
FH(St)-6 b(a)n(ck)n FK(\(item)q(\))28 b(the)f(sp)s(eci\014cation)g(of)h
(a)f(stack)h(over)g(the)f(item)h(t)m(yp)s(e.)p 0 TeXcolorgray
0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb -367 -122 a FG(\017)p
0 TeXcolorgray 0 TeXcolorgray -276 -112 a FI(P)m(a)m(rameter)33
b(t)m(yp)s(es)p 0 TeXcolorgray 0 TeXcolorgray 0.2 0.2 0.7
TeXcolorrgb -182 17 a FF(\017)p 0 TeXcolorgray 0 TeXcolorgray
-95 29 a FE(The)27 b(t)n(yp)r(e)h(item)f(of)h(the)f(elements)g(in)h
(the)f(stack.)p 0 TeXcolorgray 0 TeXcolorgray 0.2 0.2 0.7
TeXcolorrgb -367 173 a FG(\017)p 0 TeXcolorgray 0 TeXcolorgray
-276 183 a FI(De\014ned)34 b(t)m(yp)s(es)p 0 TeXcolorgray
0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb -182 313 a FF(\017)p
0 TeXcolorgray 0 TeXcolorgray -95 325 a FE(The)27 b(t)n(yp)r(e)h(of)g
(the)f(stacks)g(is)g(t.)p 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb -367 469 a FG(\017)p 0 TeXcolorgray
0 TeXcolorgray -276 479 a FI(Constructo)m(rs)p 0 TeXcolorgray
0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb -182 608 a FF(\017)p
0 TeXcolorgray 0 TeXcolorgray -95 620 a FD(Empty)c FE(:)g(t)-95
720 y(Exp)n(ression)k FD(Empty)i FE(rep)n(resents)e(the)h(empt)n(y)f
(stack.)p 0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb -182
807 a FF(\017)p 0 TeXcolorgray 0 TeXcolorgray -95 819
a FD(Push)c FE(:)g(item)18 b FF(\002)g FE(t)23 b FF(!)g
FE(t)-95 919 y(Exp)n(ression)k FD(Push)o FE(\()528 917
y Fw(e)571 919 y Fy(;)608 917 y Fw(s)646 919 y FE(\))h(denotes)f(the)g
(stack)1341 917 y Fw(s)1407 919 y FE(with)g(element)1881
917 y Fw(e)1951 919 y FE(pushed)-95 1019 y(on)g(top.)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525
TeXcolorrgb 2221 1639 a FJ(22)9 b(/)h(95)p 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 23 23
TeXDict begin 23 22 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation23) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.23) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Stacks/Constructo)m(rs)p 0.2 0.2 0.7 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray -458 -250 a FK(W)m(e)31
b(need)g(a)f FI(constant)j(constructo)m(r)f FK(to)f(stand)f(fo)m(r)h
(the)f(empt)m(y)h(stack,)-458 -137 y(otherwise)g(w)m(e)g(w)m(ould)g
(not)g(kno)m(w)g(what)f(stack)h(remains)f(after)g(p)s(opping)h(a)f
(stack)-458 -24 y(containing)g(only)h(one)g(element.)-458
188 y(The)f(t)m(yp)s(e)h(of)37 b FH(Push)29 b FK(is)h(item)21
b FG(\002)f FK(t)25 b FG(!)g FK(t,)30 b(which)h(means)f(it)g(is)g(a)g
FI(non-constant)-458 301 y(constructo)m(r)i FK(\(it)e(is)g(a)g(sp)s
(ecial)g(case)g(of)h(function,)g(basically\))e(which)h(tak)m(es)h(a)
-458 414 y(pair)e(made)i(of)g(an)f(element)h(and)f(a)g(stack)g(and)g
(returns)h(a)f(new)g(stack)h(\(with)f(the)-458 527 y(element)h(on)g
(top\).)-458 740 y(Here)g(a)m(re)g(some)g(stacks:)p 0
TeXcolorgray 0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb -367
867 a FG(\017)p 0 TeXcolorgray 0 TeXcolorgray -276 877
a FH(Empty)p 0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb -367
1005 a FG(\017)p 0 TeXcolorgray 0 TeXcolorgray -276 1015
a FH(Push)o FK(\()p FC(e)19 1029 y FB(1)67 1015 y FA(;)15
b FH(Push)p FK(\()p FC(e)403 1029 y FB(2)450 1015 y FA(;)g
FH(Empty)p FK(\)\))p 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(23)9 b(/)h(95)p
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 24 24
TeXDict begin 24 23 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation24) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.24) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Stacks/Projections)p 0.2 0.2 0.7 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray -458 -250 a FK(W)m(e)31
b(can)f(complement)i(this)e(de\014nition)g(with)g(other)h(functions)f
(which)g(allo)m(ws)h(us)-458 -137 y(to)f(extract)h(info)m(rmation)f
(from)h(a)f(given)h(stack.)41 b(In)30 b(pa)m(rticula)m(r,)h(a)f
(function)-458 -24 y(which)g(gives)h(us)f(back)h(the)f(info)m(rmation)h
(which)f(w)m(as)h(given)g(to)f(some)-458 89 y(constructo)m(r)i(is)e
(called)g(a)g FI(p)m(rojection)p FK(.)41 b FC(A)30 b(p)m(rojection)j
(is)d(the)g(inverse)h(function)-458 202 y(of)f(a)g(constructo)m(r.)-458
414 y FK(The)g(constant)h(constructo)m(r)i FH(Empty)f
FK(has)d(no)i(inverse)g(function,)f(b)s(ecause)h(it)-458
527 y(can)f(b)s(e)g(considered)i(as)e(equivalent)g(to)g(a)g(function)h
Fv(f)49 b FK(de\014ned)31 b(as)-458 640 y FG(8)-392 637
y FC(x)-327 640 y FA(:)p Fv(f)20 b FK(\()-219 637 y FC(x)-169
640 y FK(\))26 b(=)f FH(Empty)o FK(,)31 b(whose)g(inverse)g
Fv(f)934 607 y Fo(\000)p Fx(1)1059 640 y FK(is)f(not)g(a)g(function)g
(b)s(ecause)h(it)-458 753 y(maps)f FH(Empty)h FK(to)g(any)369
750 y FC(x)419 753 y FK(.)-458 965 y(Thus)f(w)m(e)h(only)f(ca)m(re)i
(of)37 b FI(non-constant)c(constructo)m(rs)p FK(,)f(i.e.,)f(the)f(ones)
h(which)-458 1078 y(tak)m(e)g(a)m(rguments.)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(24)9 b(/)h(95)p
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 25 25
TeXDict begin 25 24 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation25) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.25) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Stacks/Projections)37 b(and)i(other)g(functions)p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(Since)30 b(the)h(sp)s(eci\014cation)f
FH(St)-6 b(a)n(ck)n FK(\(item)q(\))30 b(has)g(only)g(one)h
(non-constant)-458 -137 y(constructo)m(r,)h(w)m(e)f(have)g(only)f(one)h
(p)m(rojection.)43 b(W)m(e)31 b(can)f(also)g(add)g(a)g(function)-458
-24 y FH(Append)p FK(.)-458 188 y(Here)h(is)f(ho)m(w)h(the)g(signature)
f(continues:)p 0 TeXcolorgray 0 TeXcolorgray 0.2 0.2 0.7
TeXcolorrgb -367 316 a FG(\017)p 0 TeXcolorgray 0 TeXcolorgray
-276 326 a FI(Projections)p 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb -182 455 a FF(\017)p 0 TeXcolorgray
0 TeXcolorgray -95 467 a FD(Pop)23 b FE(:)g(t)g FF(!)g
FE(item)18 b FF(\002)g FE(t)-95 567 y(This)27 b(p)n(rojection)f(is)i
(the)f(inverse)h(of)f(constructo)n(r)h FD(Push)p FE(.)p
0 TeXcolorgray 0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb
-367 711 a FG(\017)p 0 TeXcolorgray 0 TeXcolorgray -276
721 a FI(Other)33 b(functions)p 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb -182 851 a FF(\017)p 0 TeXcolorgray
0 TeXcolorgray -95 863 a FD(Append)24 b FE(:)f(t)18 b
FF(\002)g FE(t)23 b FF(!)g FE(t)-95 962 y(Exp)n(ression)k
FD(Append)p FE(\()p Fw(s)668 974 y Fn(1)709 962 y Fy(;)14
b Fw(s)778 974 y Fn(2)820 962 y FE(\))28 b(rep)n(resents)f(a)g(stack)g
(made)h(of)f(stack)g Fw(s)2073 974 y Fn(1)2142 962 y
FE(on)-95 1062 y(top)g(of)h(stack)f Fw(s)381 1074 y Fn(2)422
1062 y FE(.)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(25)9 b(/)h(95)p
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 26 26
TeXDict begin 26 25 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation26) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.26) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Stacks/Equations)p 0.2 0.2 0.7 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray -458 -263 a FK(No)m(w)31
b(the)g(de\014ning)g(equations)f(of)g(the)h(stack:)416
-81 y FD(Pop)18 b FF(\016)g FD(Push)23 b FE(=)f Fw(id)-94
44 y FD(Append)p FE(\()p FD(Empty)p Fy(;)14 b FD(Empty)p
FE(\))24 b(=)e FD(Empty)-208 168 y(Append)p FE(\()p FD(Empty)q
Fy(;)14 b FD(Push)o FE(\()p Fm(e)6 b Fy(;)14 b Fm(s)6
b FE(\)\))24 b(=)e FD(Push)p FE(\()p Fm(e)6 b Fy(;)14
b Fm(s)6 b FE(\))-208 293 y FD(Append)p FE(\()p FD(Push)p
FE(\()p Fm(e)g Fy(;)14 b Fm(s)6 b FE(\))p Fy(;)14 b FD(Empty)p
FE(\))24 b(=)e FD(Push)p FE(\()p Fm(e)6 b Fy(;)14 b Fm(s)6
b FE(\))-438 418 y FD(Append)q FE(\()p FD(Push)o FE(\()p
Fm(e)174 430 y Fl(1)210 418 y Fy(;)14 b Fm(s)279 430
y Fl(1)313 418 y FE(\))p Fy(;)g FD(Push)p FE(\()p Fm(e)653
430 y Fl(2)688 418 y Fy(;)g Fm(s)757 430 y Fl(2)792 418
y FE(\)\))24 b(=)e FD(Push)p FE(\()p Fm(e)1238 430 y
Fl(1)1273 418 y Fy(;)14 b FD(Append)p FE(\()p Fm(s)1683
430 y Fl(1)1718 418 y Fy(;)g FD(Push)o FE(\()p Fm(e)2025
430 y Fl(2)2061 418 y Fy(;)g Fm(s)2130 430 y Fl(2)2164
418 y FE(\)\)\))-428 613 y FK(where)p -177 562 47 4 v
31 w Fv(e)32 b FK(=)25 b(\()p Fv(e)66 627 y Fx(1)106
613 y FA(;)15 b Fv(e)186 627 y Fx(2)227 613 y FK(\),)p
317 562 42 4 v 30 w Fv(s)33 b FK(=)25 b(\()p Fv(s)551
627 y Fx(1)590 613 y FA(;)15 b Fv(s)665 627 y Fx(2)705
613 y FK(\))31 b(and)e FC(id)39 b FK(is)30 b(the)g(identit)m(y)h
(function)-458 726 y FG(8)p Fv(x)8 b FA(:)p Fv(x)33 b
FG(7!)25 b Fv(x)8 b FK(.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525
TeXcolorrgb 2221 1639 a FJ(26)h(/)h(95)p 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 27 27
TeXDict begin 27 26 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation27) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.27) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Stacks/Pre\014xing)p 0.2 0.2 0.7 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray -458 -250 a FK(If)30 b(w)m(e)h(refer)g
(to)g(the)f(t)m(yp)s(e)h(of)f(stacks)h(over)g(elements)g(of)g(t)m(yp)s
(e)f(item)g FC(outside)h(its)-458 -137 y(de\014nition)p
FK(,)f(w)m(e)h(have)g(to)f(write:)630 67 y FH(St)-6 b(a)n(ck)n
FK(\(item)q(\))p FA(:)p FK(t)-458 371 y(So)30 b(the)h(empt)m(y)g(stack)
f(is)g(noted)h FH(St)-6 b(a)n(ck)n FK(\(item)q(\))p FA(:)p
FH(Empty)30 b FK(outside)h(the)f FH(St)-6 b(a)n(ck)-458
484 y FK(sp)s(eci\014cation,)30 b(in)g(o)m(rder)i(to)e(avoid)g
(confusion)h(with)-458 597 y FH(Bin-tree)p FK(.\(no)s(de\).)p
FH(Empty)p FK(,)g(fo)m(r)g(instance.)-458 809 y(If)d(the)h(context)h
(is)e(not)h(ambiguous,)g(e.g.,)i(w)m(e)e(kno)m(w)h(that)e(w)m(e)i(a)m
(re)f(talking)f(ab)s(out)-458 922 y(stacks,)i(w)m(e)i(can)e(omit)h(the)
f(p)m(re\014x)h(\\)p FH(St)-6 b(a)n(ck)p FK(.")40 b(and)30
b(simply)g(write)g FH(Empty)p FK(,)g(fo)m(r)-458 1035
y(instance.)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb
2221 1639 a FJ(27)9 b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 28 28
TeXDict begin 28 27 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation28) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.28) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Stacks/Recursive)38 b(equations)p 0.2 0.2 0.7
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray -458 -363 a
SDict begin H.S end

-458 -363 a -458 -363 a
SDict begin H.R end
 -458 -363 a -458 -363 a
SDict begin [/View [/XYZ H.V]/Dest (sequence) cvn /DEST pdfmark end
 -458
-363 a 113 x FK(An)30 b(interesting)g(p)s(oint)g(in)g(the)g(p)m
(revious)i(equations)e(is)g(that)f(the)i(function)-458
-137 y FH(Append)e FK(is)h(de\014ned)g(on)h(terms)g(of)f(itself.)40
b(This)30 b(kind)g(of)h(equation)f(is)g(called)-458 -24
y FI(recursive)p FK(.)-458 188 y(This)f(is)h(not)h(new)g(fo)m(r)g(y)m
(ou.)41 b(In)31 b(high)f(scho)s(ol)h(y)m(ou)g(b)s(ecame)g(familia)m(r)e
(with)-458 301 y FI(integer)34 b(sequences)f FK(de\014ned)d(b)m(y)h
(equations)f(lik)m(e)621 498 y Fv(U)684 512 y Ft(n)q
Fx(+1)841 498 y FK(=)25 b Fv(b)e FK(+)d Fv(U)1161 512
y Ft(n)714 635 y Fv(U)777 649 y Fx(0)841 635 y FK(=)25
b Fv(a)-458 832 y FK(This)k(is)h(exactly)g(equivalent)g(to)503
1028 y Fv(U)7 b FK(\()p Fv(n)22 b FK(+)e(1\))26 b(=)f
Fv(b)e FK(+)d Fv(U)7 b FK(\()p Fv(n)r FK(\))663 1166
y Fv(U)g FK(\(0\))26 b(=)f Fv(a)-458 1363 y FK(Only)30
b(the)g(notation)g(di\013ers.)41 b(The)31 b(meaning)f(is)g(the)h(same.)
p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525
TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(28)9
b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 29 29
TeXDict begin 29 28 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation29) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.29) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Stacks/Simplifying)35 b(the)40 b(equations)p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(W)m(e)31 b(can)f(ease)h(the)f(notation)h(b)m(y)f
(omitting)h(the)f(quanti\014ers)g FG(8)f FK(in)h(equations.)-458
-137 y(Also,)g(w)m(e)h(can)g(simplify)e(a)h(little)f(the)i(equations)f
(fo)m(r)i FH(Append)d FK(b)m(y)i(noting)g(that)-458 -24
y(if)f(one)h(of)f(the)h(stack)f(is)g(empt)m(y)-8 b(,)32
b(then)e(the)h(result)f(is)g(alw)m(a)m(ys)g(the)h(other)g(stack:)-122
97 y Fz(8)-122 178 y(>)-122 206 y(<)-122 369 y(>)-122
397 y(:)354 172 y FH(Append)n FK(\()p FH(Empty)p FA(;)15
b FH(Empty)p FK(\))26 b(=)f FH(Empty)-41 310 y FG(8)p
Fv(e)6 b FA(;)15 b Fv(s)98 b FH(Append)o FK(\()p FH(Empty)o
FA(;)15 b FH(Push)p FK(\()p Fv(e)6 b FA(;)15 b Fv(s)7
b FK(\)\))28 b(=)d FH(Push)o FK(\()p Fv(e)6 b FA(;)15
b Fv(s)7 b FK(\))-41 448 y FG(8)p Fv(e)f FA(;)15 b Fv(s)98
b FH(Append)o FK(\()p FH(Push)p FK(\()p Fv(e)6 b FA(;)15
b Fv(s)7 b FK(\))p FA(;)15 b FH(Empty)q FK(\))26 b(=)f
FH(Push)o FK(\()p Fv(e)6 b FA(;)15 b Fv(s)7 b FK(\))366
689 y Fx(?)299 740 y FG(\()-15 b(\))491 585 y Fz(\()564
671 y FH(Append)o FK(\()p FH(Empty)p FA(;)15 b Fv(s)7
b FK(\))26 b(=)f Fv(s)564 809 y FH(Append)o FK(\()p Fv(s)7
b FA(;)15 b FH(Empty)p FK(\))26 b(=)f Fv(s)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(29)9 b(/)h(95)p
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 30 30
TeXDict begin 30 29 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation30) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.30) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Stacks/Simplifying)35 b(the)40 b(equations)e(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(The)30 b(w)m(a)m(y)g(to)g(check)h(this)e(is)g(to)h(note)
g(that)f(there)h(a)m(re)h(only)e(t)m(w)m(o)i(kinds)f(of)g(stacks,)-458
-137 y(empt)m(y)h(and)f(no-empt)m(y)-8 b(,)32 b(so)f(w)m(e)g(can)g
(replace)1072 -140 y FC(s)1144 -137 y FK(resp)s(ectively)f(b)m(y)i
FH(Empty)g FK(and)-458 -24 y FH(Push)o FK(\()-203 -27
y FC(e)-156 -24 y FA(;)-116 -27 y FC(s)-73 -24 y FK(\))e(in)g(the)h
(new)f(system:)-346 188 y Fz(\032)-278 253 y Fr(Append)o
Fs(\()p Fr(Empty)p Fq(;)308 251 y Fk(s)343 253 y Fs(\))21
b(=)475 251 y Fk(s)-278 370 y Fr(Append)o Fs(\()31 368
y Fk(s)66 370 y Fq(;)13 b Fr(Empty)p Fs(\))21 b(=)475
368 y Fk(s)546 316 y FG(,)662 75 y Fz(8)662 157 y(>)662
184 y(>)662 212 y(<)662 375 y(>)662 402 y(>)662 430 y(:)849
137 y Fr(Append)o Fs(\()p Fr(Empty)o Fq(;)14 b Fr(Empty)o
Fs(\))22 b(=)f Fr(Empty)743 253 y(Append)n Fs(\()p Fr(Empty)p
Fq(;)13 b Fr(Push)p Fs(\()1539 251 y Fk(e)1578 253 y
Fq(;)1612 251 y Fk(s)1648 253 y Fs(\)\))21 b(=)g Fr(Push)p
Fs(\()2021 251 y Fk(e)2060 253 y Fq(;)2094 251 y Fk(s)2129
253 y Fs(\))849 370 y Fr(Append)o Fs(\()p Fr(Empty)o
Fq(;)14 b Fr(Empty)o Fs(\))22 b(=)f Fr(Empty)743 486
y(Append)n Fs(\()p Fr(Push)p Fs(\()1262 484 y Fk(e)1301
486 y Fq(;)1335 484 y Fk(s)1371 486 y Fs(\))p Fq(;)13
b Fr(Empty)o Fs(\))22 b(=)f Fr(Push)p Fs(\()2021 484
y Fk(e)2060 486 y Fq(;)2094 484 y Fk(s)2129 486 y Fs(\))-458
651 y FK(The)30 b(\014rst)g(and)g(third)g(equations)g(a)m(re)h(the)f
(same.)41 b(The)31 b(system)f(is)g(the)h(same)f(as)-458
764 y(the)g(o)m(riginal)h(one.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525
TeXcolorrgb 2221 1639 a FJ(30)9 b(/)h(95)p 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 31 31
TeXDict begin 31 30 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation31) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.31) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Stacks/Orienting)38 b(the)h(equations)p 0.2 0.2 0.7
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray -458 -250 a
FK(Let)31 b(us)f(call)f FI(term)i FK(the)f(objects)i(constructed)f
(using)f(the)h(functions)f(of)h(the)-458 -137 y(sp)s(eci\014cation,)f
(e.g.,)i FH(Empty)f FK(and)f FH(Push)p FK(\()1007 -140
y FC(e)1054 -137 y FA(;)15 b FH(Empty)p FK(\))30 b(a)m(re)h(terms.)41
b(The)31 b Fv(e)37 b FK(in)-458 -24 y(the)30 b(latter)g(term)h(is)f
(called)g(a)g FI(va)m(riable)h FK(\(and)f(is)g(a)g(sp)s(ecial)g(case)h
(of)f(term\).)-458 188 y(W)m(e)h(call)f FI(subterm)g
FK(a)g(term)h(emb)s(edded)g(in)f(a)g(term.)41 b(F)m(o)m(r)32
b(instance)p 0 TeXcolorgray 0 TeXcolorgray 0.2 0.2 0.7
TeXcolorrgb -367 316 a FG(\017)p 0 TeXcolorgray 0 TeXcolorgray
-276 326 a FH(Empty)f FK(is)f(a)g(subterm)h(of)f FH(Push)p
FK(\()907 323 y FC(e)954 326 y FA(;)15 b FH(Empty)p FK(\);)p
0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb -367 454 a FG(\017)p
0 TeXcolorgray 0 TeXcolorgray -276 464 a FH(Push)o FK(\()p
FC(e)19 478 y FB(1)67 464 y FA(;)g FH(Empty)p FK(\))30
b(is)g(a)g(subterm)h(of)f FH(Push)p FK(\()p FC(e)1364
478 y FB(2)1411 464 y FA(;)15 b FH(Push)p FK(\()p FC(e)1747
478 y FB(1)1795 464 y FA(;)g FH(Empty)p FK(\)\);)p 0
TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb -367 592 a FG(\017)p
0 TeXcolorgray 0 TeXcolorgray -276 599 a FC(e)-200 602
y FK(is)30 b(a)g(subterm)h(of)f FH(Push)p FK(\()656 599
y FC(e)703 602 y FA(;)15 b FH(Empty)p FK(\);)p 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb -367 730 a FG(\017)p 0 TeXcolorgray
0 TeXcolorgray -276 737 a FC(e)-200 740 y FK(is)30 b(a)g(subterm)h(of)
400 737 y FC(e)477 740 y FK(\(it)f(is)g(not)h(a)f FC(p)m(rop)s(er)h
FK(subterm,)g(though\).)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(31)9 b(/)h(95)p
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 32 32
TeXDict begin 32 31 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation32) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.32) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Stacks/Orienting)38 b(the)h(equations)f(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(Ho)m(w)31 b(do)g(w)m(e)h(o)m(rient)263
-46 y FH(Pop)p FK(\()p FH(Push)p FK(\()730 -49 y FC(x)780
-46 y FK(\)\))26 b(=)972 -49 y FC(x)64 92 y FH(Append)o
FK(\()p FH(Empty)p FA(;)774 89 y FC(s)816 92 y FK(\))f(=)972
89 y FC(s)64 230 y FH(Append)o FK(\()438 227 y FC(s)480
230 y FA(;)15 b FH(Empty)p FK(\))25 b(=)972 227 y FC(s)-140
368 y FH(Append)o FK(\()p FH(Push)p FK(\()490 365 y FC(e)537
368 y FA(;)15 b FC(s)612 382 y FB(1)659 368 y FK(\))p
FA(;)g FC(s)769 382 y FB(2)816 368 y FK(\))25 b(=)g FH(Push)p
FK(\()1228 365 y FC(e)1275 368 y FA(;)15 b FH(Append)o
FK(\()p FC(s)1724 382 y FB(1)1771 368 y FA(;)g FC(s)1846
382 y FB(2)1893 368 y FK(\)\))p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525
TeXcolorrgb 2221 1639 a FJ(32)9 b(/)h(95)p 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 33 33
TeXDict begin 33 32 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation33) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.33) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Stacks/Orienting)38 b(the)h(equations)f(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(The)30 b(\014rst)g(three)h(ones)g(a)m(re)g(easy)f(to)h
(o)m(rient)g(since)g(no)f(function)h(call)e(of)i(the)-458
-137 y(de\014ned)f(function)h(app)s(ea)m(r)f(on)h(b)s(oth)f(sides:)263
67 y FH(Pop)p FK(\()p FH(Push)p FK(\()730 64 y FC(x)780
67 y FK(\)\))c FG(!)993 64 y FC(x)64 205 y FH(Append)o
FK(\()p FH(Empty)p FA(;)774 202 y FC(s)816 205 y FK(\))f
FG(!)967 219 y Fx(1)1032 202 y FC(s)64 343 y FH(Append)o
FK(\()438 340 y FC(s)480 343 y FA(;)15 b FH(Empty)p FK(\))25
b FG(!)967 357 y Fx(2)1032 340 y FC(s)-140 481 y FH(Append)o
FK(\()p FH(Push)p FK(\()490 478 y FC(e)537 481 y FA(;)15
b FC(s)612 495 y FB(1)659 481 y FK(\))p FA(;)g FC(s)769
495 y FB(2)816 481 y FK(\))25 b(=)g FH(Push)p FK(\()1228
478 y FC(e)1275 481 y FA(;)15 b FH(Append)o FK(\()p FC(s)1724
495 y FB(1)1771 481 y FA(;)g FC(s)1846 495 y FB(2)1893
481 y FK(\)\))-458 685 y(The)30 b(last)g(equation)g(is)g(a)g(recursive)
h(equation,)f(i.e.,)i(there)f(is)e(a)h(function)h(call)f(of)-458
798 y(the)g(de\014ned)h(function)f(on)h(b)s(oth)f(side)g(of)h(the)f
(equalit)m(y)-8 b(.)41 b(Ho)m(w)32 b(should)e(w)m(e)i(o)m(rient)-458
911 y(it?)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb
2221 1639 a FJ(33)9 b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 34 34
TeXDict begin 34 33 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation34) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.34) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Stacks/Orienting)38 b(the)h(equations)f(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(Let)31 b(us)f(colour)h(b)s(oth)f(calls)g(to)g
FH(Append)p FK(:)-232 -46 y FH(Append)i FI(\()p FH(Push)h
FI(\()472 -49 y FC(e)519 -46 y FI(,)g FC(s)615 -32 y
FB(1)661 -46 y FI(\),)g FC(s)796 -32 y FB(2)843 -46 y
FI(\))25 b FK(=)g FH(Push)p FK(\()1259 -49 y FC(e)1305
-46 y FA(;)15 b FH(Append)33 b FI(\()p FC(s)1792 -32
y FB(1)1838 -46 y FI(,)g FC(s)1934 -32 y FB(2)1981 -46
y FI(\))p FK(\))-458 159 y(Let)e(us)f(colour)h(only)f(the)h
(di\013erences)g(b)s(et)m(w)m(een)h(the)f(t)m(w)m(o:)-171
363 y FH(Append)o FK(\()p FH(Push)i FI(\()496 360 y FC(e)543
363 y FI(,)g FC(s)639 377 y FB(1)686 363 y FI(\))o FA(;)15
b FC(s)799 377 y FB(2)846 363 y FK(\))26 b(=)f FH(Push)p
FK(\()1259 360 y FC(e)1305 363 y FA(;)15 b FH(Append)o
FK(\()p FC(s)1754 377 y FB(1)1801 363 y FA(;)g FC(s)1876
377 y FB(2)1923 363 y FK(\)\))-458 567 y(Obviously)-8
b(,)30 b FC(s)-7 581 y FB(1)70 567 y FK(is)g(a)g FC(p)m(rop)s(er)h
FK(subterm)g(of)f FH(Push)p FK(\()1198 564 y FC(e)1245
567 y FA(;)15 b FC(s)1320 581 y FB(1)1367 567 y FK(\),)31
b(so)f(the)h(value)f(of)g Fv(s)2082 581 y Fx(1)2152 567
y FK(is)-458 680 y(included)g(in)g(the)h(value)f(of)g
FH(Push)p FK(\()718 677 y FC(e)765 680 y FA(;)15 b FC(s)840
694 y FB(1)887 680 y FK(\).)41 b(The)30 b(call-b)m(y-value)h(strategy)f
(implies)-458 793 y(that)f(the)i(value)f(of)g FH(Append)o
FK(\()p FC(s)616 807 y FB(1)663 793 y FA(;)15 b FC(s)738
807 y FB(2)785 793 y FK(\))31 b(is)e(included)i(in)f(the)g(value)g(of)
-458 906 y FH(Append)n FK(\()p FH(Push)p FK(\()171 903
y FC(e)218 906 y FA(;)15 b FC(s)293 920 y FB(1)340 906
y FK(\))p FA(;)g FC(s)450 920 y FB(2)498 906 y FK(\).)41
b(Therefo)m(re)32 b(w)m(e)f(must)f(o)m(rient)h(the)g(equation)f(from)
-458 1019 y(left)g(to)g(right.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525
TeXcolorrgb 2221 1639 a FJ(34)9 b(/)h(95)p 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 35 35
TeXDict begin 35 34 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation35) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.35) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Stacks/Orienting)38 b(the)h(equations)f(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(What)29 b(is)h(the)h(use)f(of)h FH(Append)n
FK(\()648 -253 y FC(s)691 -250 y FA(;)15 b FH(Empty)p
FK(\))25 b FG(!)1178 -236 y Fx(2)1243 -253 y FC(s)1285
-250 y FK(?)-458 -37 y(It)30 b(is)g(actually)f(useless)i(b)s(ecause)f
(the)h(\014rst)e(a)m(rgument)j(of)37 b FH(Append)29 b
FK(will)g(alw)m(a)m(ys)-458 76 y(b)s(ecome)i FH(Empty)p
FK(,)f(since)h(w)m(e)g(replace)g(it)f(b)m(y)h(a)f(p)m(rop)s(er)h
(subterm)g(at)f(each)-458 188 y(rewriting,)h(the)f(second)h(rewriting)g
(rule)g FH(Append)n FK(\()p FH(Empty)p FA(;)1610 185
y FC(s)1652 188 y FK(\))26 b FG(!)1804 202 y Fx(1)1869
185 y FC(s)1941 188 y FK(alw)m(a)m(ys)-458 301 y(applies)j(at)h(the)h
(end.)41 b(So)30 b(w)m(e)h(only)g(need:)54 506 y FH(Append)o
FK(\()p FH(Empty)o FA(;)763 503 y FC(s)806 506 y FK(\))25
b FG(!)983 503 y FC(s)-150 643 y FH(Append)o FK(\()p
FH(Push)o FK(\()479 640 y FC(e)526 643 y FA(;)15 b FC(s)601
657 y FB(1)648 643 y FK(\))p FA(;)g FC(s)758 657 y FB(2)806
643 y FK(\))25 b FG(!)h FH(Push)o FK(\()1238 640 y FC(e)1285
643 y FA(;)15 b FH(Append)o FK(\()p FC(s)1734 657 y FB(1)1781
643 y FA(;)g FC(s)1856 657 y FB(2)1903 643 y FK(\)\))-458
848 y(The)30 b(only)h(di\013erence)g(is)f(the)h FI(complexit)m(y)p
FK(,)h(that)e(is,)g(in)g(this)g(framew)m(o)m(rk)i(of)-458
961 y(rewriting)e(systems,)f(the)h(numb)s(er)g(of)g(steps)f(needed)i
(to)e(reach)i(the)e(result.)41 b(With)-458 1073 y(rule)30
b FG(!)-197 1087 y Fx(2)-157 1073 y FK(,)g(if)g(the)g(second)i(stack)e
(is)g(empt)m(y)-8 b(,)32 b(w)m(e)f(can)g(conclude)g(in)f(one)h(step.)
-458 1186 y(Without)f(it,)g(w)m(e)h(have)f(to)h(traverse)f(all)g(the)g
(elements)h(of)g(the)g(\014rst)e(stack)i(b)s(efo)m(re)-458
1299 y(terminating.)p 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525
TeXcolorrgb 2221 1639 a FJ(35)9 b(/)h(95)p 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 36 36
TeXDict begin 36 35 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation36) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.36) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Stacks/T)-10 b(erms)38 b(as)h(trees)p 0.2 0.2 0.7
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray -458 -250 a
FK(Let)31 b(us)f(\014nd)g(a)g(mo)s(del)g(which)h(cla)m(ri\014es)f
(these)h(ideas:)40 b(the)31 b(concept)g(of)37 b FI(tree)p
FK(.)-458 -37 y(A)30 b(tree)h(is)f(either)p 0 TeXcolorgray
0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb -367 90 a FG(\017)p
0 TeXcolorgray 0 TeXcolorgray -276 100 a FK(the)g(empt)m(y)h(set)p
0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb -367 228 a FG(\017)p
0 TeXcolorgray 0 TeXcolorgray -276 238 a FK(o)m(r)g(a)f(tuple)g(made)h
(of)f(a)g FI(ro)s(ot)g FK(and)g(other)h(trees,)g(called)f
FI(subtrees)p FK(.)p 0 TeXcolorgray -458 376 a(This)f(is)h(a)g
FI(recursive)36 b(de\014nition)31 b FK(b)s(ecause)g(the)f(object)i
(\(here,)f(the)g(tree\))g(is)-458 489 y(de\014ned)f(b)m(y)h(case)g(and)
f(b)m(y)g(grouping)i(objects)f(of)g(the)f(same)h(kind)f(\(here,)i(the)
-458 602 y(subtrees\).)-458 814 y(A)e(ro)s(ot)g(could)h(b)s(e)f
(further)h(re\014ned)g(as)e(containing)i(some)g(sp)s(eci\014c)f(info)m
(rmation.)-458 1027 y(It)g(is)g(usual)f(to)i(call)f FI(no)s(des)h
FK(the)f(ro)s(ot)h(of)f(a)g(given)h(tree)g(and)f(the)h(ro)s(ots)f(of)h
(all)e(its)-458 1140 y(subtrees,)i FC(transitively)p
FK(.)-458 1352 y(A)f(no)s(de)g(without)g(non-empt)m(y)i(subtrees)f(is)f
(called)g(a)g FI(leaf)p FK(.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525
TeXcolorrgb 2221 1639 a FJ(36)9 b(/)h(95)p 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 37 37
TeXDict begin 37 36 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation37) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.37) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Stacks/T)-10 b(erms)38 b(as)h(trees)g(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(If)30 b(w)m(e)h(consider)h(trees)e(as)g(relationships)g
(b)s(et)m(w)m(een)i(no)s(des,)e(it)g(is)g(usual)g(to)g(call)g(a)-458
-137 y(ro)s(ot)g(the)h FI(pa)m(rent)f FK(of)h(the)f(ro)s(ots)h(of)f
(its)g(direct)h(subtrees)f(\(i.e.,)i(the)e(ones)-458
-24 y(immediately)g(in)g(the)g(tuple\).)41 b(Conversely)-8
b(,)32 b(these)f(ro)s(ots)f(a)m(re)h FI(sons)g FK(of)g(their)-458
89 y(pa)m(rent)f(\(they)h(a)m(re)g(o)m(rdered\).)-458
202 y(It)e(is)g(also)f(common)j(to)e(call)g(subtree)h(any)e(tree)i
(included)f(in)g(it)g(acco)m(rding)h(to)g(the)-458 315
y(subset)g(relationship)g(\(otherwise)h(w)m(e)g(sp)s(eak)g(of)f
FC(direct)h FK(subtrees\).)-458 428 y(T)-8 b(rees)29
b(a)m(re)h(often)f(rep)m(resented)h(in)e(a)h(top-do)m(wn)h(w)m(a)m(y)-8
b(,)30 b(the)f(ro)s(ot)g(b)s(eing)g(at)f(the)h(top)-458
540 y(of)h(the)h(page,)g(no)s(des)f(as)g(circles)h(and)f(the)g
(relationship)g(b)s(et)m(w)m(een)i(no)s(des)e(as)-458
653 y FI(edges)p FK(.)42 b(F)m(o)m(r)31 b(instance:)p
0 TeXcolorgray 0 TeXcolorgray 478 1387 a @beginspecial
71 @llx 648 @lly 175 @urx 721 @ury 1040 @rwi @setspecial
%%BeginDocument: tree_example.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: tree_example.dvi
%%CreationDate: Mon Aug  6 13:13:50 2018
%%BoundingBox: 71 648 186 721
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o tree_example.ps tree_example.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2018.08.06:1513
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 698 2017-12-30 19:08:50Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.28, 2017/12/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin 40258437 52099154 1000 600 600 (tree_example.dvi)
@start end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray 0 59 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 0 59 a 0
59 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 59 a 0 59 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 0 59 a 0 59 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 59 a 0 59 a
tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 59 a
0 591 944 591 v 944 59 a
currentpoint grestore moveto
 944 59 a -442 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 502 59 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } false /N@T-0 11
{InitCnode } /NodeScale {} def NewNode end  end
 502 59 a 207 295 a
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 207 295 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } false /N@T-0-0
11 {InitCnode } /NodeScale {} def NewNode end  end
 207
295 a 207 295 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0 /N@T-0-0 InitNC
{ NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 207 295 a 59 531 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 59 531 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } false /N@T-0-0-0
11 {InitCnode } /NodeScale {} def NewNode end  end
 59 531 a 59 531 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-0 /N@T-0-0-0
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 59 531 a 295
w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 354 531 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } false /N@T-0-0-1
11 {InitCnode } /NodeScale {} def NewNode end  end
 354
531 a 354 531 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-0 /N@T-0-0-1
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 354 531 a 502 295 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 502 295 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } false /N@T-0-1
11 {InitCnode } /NodeScale {} def NewNode end  end
 502 295 a 502 295 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0 /N@T-0-1 InitNC
{ NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 502 295 a
295 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 797 295
a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } false /N@T-0-2
11 {InitCnode } /NodeScale {} def NewNode end  end
 797 295 a 797 295 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0 /N@T-0-2 InitNC
{ NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 797 295 a 679 531 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 679 531 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } false /N@T-0-2-0
11 {InitCnode } /NodeScale {} def NewNode end  end
 679 531 a 679 531
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-2 /N@T-0-2-0
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 679 531 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb
2221 1639 a FJ(37)9 b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 38 38
TeXDict begin 38 37 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation38) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.38) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Stacks/T)-10 b(erms)38 b(as)h(trees)g(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(The)30 b FI(depth)h FK(of)f(a)g(no)s(de)h(is)f(the)g
(length)h(of)g(the)f(path)g(from)h(the)f(ro)s(ot)h(to)f(it)g(\(note)
-458 -137 y(this)f(path)h(is)g(unique\).)41 b(Thus)30
b(the)h(depth)f(of)g(the)h(ro)s(ot)g(is)e(0)i(and)f(the)h(depth)f(of)
-458 -24 y(the)g(empt)m(y)h(tree)g(is)f(unde\014ned.)-458
188 y(The)g FI(height)h FK(of)g(a)f(tree)h(is)e(the)i(maximal)e(depth)i
(of)f(its)g(no)s(des.)41 b(F)m(o)m(r)31 b(example,)-458
301 y(the)f(height)h(of)f(the)h(tree)g(in)f(the)g(p)m(revious)i(page)e
(is)g(2.)-458 514 y(A)g FI(level)i FK(in)e(a)g(tree)h(is)f(the)g(set)h
(of)f(all)f(no)s(des)i(with)f(a)g(given)h(depth.)40 b(Hence)32
b(it)e(is)-458 627 y(p)s(ossible)f(to)i(de\014ne)g(level)f(0,)h(level)g
(1)g(etc.)41 b(\(ma)m(y)31 b(b)s(e)f(empt)m(y\).)p 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525
TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(38)9
b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 39 39
TeXDict begin 39 38 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation39) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.39) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Stacks/Height)38 b(of)g(terms)p 0.2 0.2 0.7
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray -458 -250 a
FK(This)29 b(leads)h(us)g(to)h(consider)g FC(values)f
FK(as)g FC(trees)h FK(themselves.)41 b(Each)31 b(constructo)m(r)-458
-137 y(co)m(rresp)s(onds)f(to)g(a)f(no)s(de,)h(and)f(each)g(a)m
(rgument)i(co)m(rresp)s(onds)f(to)g(a)f(subtree.)40 b(By)-458
-24 y(de\014nition:)66 155 y(T)-8 b(erm)p 414 188 4 113
v 353 w(T)g(ree)p 981 188 V 540 w(Height)p -87 192 1998
4 v -87 208 V 17 287 a FH(Empty)p 414 321 4 113 v 239
w(Empty)p 981 321 V 576 w FK(0)p -87 325 1998 4 v -46
566 a FH(Push)p FK(\()210 563 y FC(e)257 566 y FA(;)297
563 y FC(s)339 566 y FK(\))p 414 600 4 276 v 84 w @beginspecial
71 @llx 692 @lly 129 @urx 721 @ury 580 @rwi @setspecial
%%BeginDocument: push_tree.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: push_tree.dvi
%%CreationDate: Mon Aug  6 13:13:50 2018
%%BoundingBox: 71 692 129 721
%%DocumentFonts: CMCSC10 CMMI10 CMR10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o push_tree.ps push_tree.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2018.08.06:1513
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 698 2017-12-30 19:08:50Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.28, 2017/12/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 84 /T put
dup 101 /e put
dup 102 /f put
dup 111 /o put
dup 114 /r put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
EC7762B3A0C6518E8855CEBB9937C972EA909F25CA31C33A6AC307FF01317AD7
58BD08D95697E699B40A3CA81F8A9ADBC5AC368A2D56BD00684494819CF72865
86D1DE7A349F3C98F89FF38B30D840294DD3E51258FB4208CCAA455C3A13C6F8
9B4DBC3027B3CAF2C6EF0A5000F53914FC469769D1D2D72D9F57A11C5BB44D8A
1857472CC47B532E2A0CD7BD2F7F99930FE769403B46E25CFC2041759BBC27CB
A60525182B0BAC8AB381658DF10814D8C2A0F73A0415B8AD23DF0A82CC481EAD
70AADE0E2676CAC46D5C39B92C18AAD0147814BF27C8FA6DCA0BBA0FF0775836
2210962B3400AE0CDF57242EA8A7DA911652D5DF61139650117E65779D80FA5D
F0DE22F7D2CCD0185380E1D346582C2E719ACB75A70367913F69BADAA2F9B4BE
5A76DAF30053CE655A7C984B6BB390F7DE687B10EEA2F1D2F4353AD17B032900
6E4AF46A848A94E69B6B7F3EC896D42594593A016CB5FD306F41F1E396EA1B59
8CDC2B459A81B19A090AA25E8D003483A64C21070738838BE7E8F0DA026A315C
DAD06E46B3BFDF5D0A48DEAAA63DC107C8352E4BD2361E66C1CCFE8E3C283C02
A4655C579BF21B53D1FD37996C682D1B232ED1F6A1B37ED3F17DE0D82EF0E15D
FECF39F8EA9A1804A05B350671BA8D9838EC6FD9269FC73192DDFBD4CEDD9954
5675E7431A7793960485EAB5778EA899E98988CAFF8DCCEBF494D5676912D5E8
68E4B6E8380F66A410FF23883099831871EC2B5353AB2F0E8D941BCB25FBF929
F49068E8F65763CF259036DFEA1AAB44ED4B4F457EFD4B9B0BBED34041206F8F
2CF988CFDEFF949914C4B69F50F6628F9EEC6842B79E4DEF88F1FEE5AC7014E8
652E21891F7FBB5D720CDA676189F016B1FEABC10785FEEF0F4B11C7658A59CA
73528778D2213CA6DC3A62BE2D64A05860D0930D7EA56788DD87665BF143F034
85E11FFE1F67FB6D16AD327872C04F8876134E5B5D5D1D811F297520B630C1FC
45D9A4531606AE86CEF0D876894372B84D03D1BAB918DA530B3F2D2A59FED439
D11DED107279134ECD4728803979CDBBCDC96B5F791E79254ECD13F2577B13AD
665ADBE9C5032A6D6EBB105FA5656E64E8E61C718E533A2C71F469930F296766
4F0D17A94A65D60F87DE73CD3E463B692A4B59BA7A760DD7A81CDDA23CD0698F
4C6FA5667BE5D25FFF2E69922C496CB4EFE5117A04277C8B701D81BF0951FDC6
C238657A7D1B2E5FC7E8261F0CAF9CA00E0A0219C771FF38A45647D2F019FEC8
39F4D48736977F5B21F6961C8A9ACF420971A8B4B3EB237EB85B600FD483DA2A
8717A30EB97DF714C48065871D95F479057A8A29DC524D9781A602791A5E6D1F
F41C00075B1FED387D98CF7EB11374C849D87018D4F17E60D3CEE00CC979AD41
0F813119C60C8E89BD209DB0CCDDC342CC3D438356296934D03AFCC9B2A2F85E
CF808E3F4F73415A620F8F1D9563FDE6DFF71385693E6B75BFC0436205231264
EAB0C8398DD7DD9C0DDFF09EAFAA8D67F25F80B39F4A584B94E08408C02326B4
0E27E034DC75E7E797B53DEB549AF0590C15DB00EFEDAA1F5EFA3F7A08023326
6EB529F0B4B8DD91CB69558534CCE31AE7E157D0B060877EE4F153EEC4FDC93D
0FEEC724C9AFC18168AE7D0CA13F0B4F66C9F9C1A3BAC53475B5A70CA1B83D37
D276F00DA0A9318C09C86A3CB60F8FF548AF36F41E219F071A8638431CE2A931
13031EB40F0EACF90949369A67E8793F1C76C3A2577467242CC0BA47B411DF2A
9D9FA70D335D41F59317F44A60ED73DAB72A2F1AC1D8400532420A41CF958B1D
DE1BEAF9868F31824A89D2A2F70B7ADBB35E0F1641F668817E64481B4479C73D
6500FC8819217B195EC6E4FAD1F39E803B20AD604D7C7BCADC8A32BCFEBFDB16
A0642E5CC69E5A25A6601962FF36B049CC836C975870BFD49306F07C03FFC8DC
BB7B63CB86D6663189688C6E5B123733610842E344BFA49E73E527E9A6488AB0
74BA7E1908A83110272DAB459AAFFBA750A16A4999D5A59AEB5FAE6FA51B1298
52BDB17946419D977FC3D2C6B7B467A86C6F6E44345AB3426B905248FEADB3B6
1A8F612DD74499F4CBEA5B28D8121A2675BF3A5164C9550D69C1101100B53C40
88DC0798AD69FE1F6174267389135B18B92C2A5B63978E50C74C43E30C3627AB
E7BBB02CA4268B56124C0C42CCFD882CF1827DD0B979E7FEB26A831D89D24161
3946E097CE77A82F68C92DA11B1A3381665948141CA2FF95EC304694FEAA8215
C8AD593A4E975A340EFDA6FF45D81E5DCCB9C26B9FF9D0DA32B806286039E750
42D590F24D8FE9F50D35EC6BB81ED58C422A119E8C6BB471DF05580FB2BC843D
9692083C2A380E5EF5098DF574EDDCC3F0F4130A40AA9A1D1B86B55D62ACB72C
877AA2E3437B035F7E7ED2FF4E2BB54EDCE5D6E365450F5CD528BDCB140E3F68
E95BF9C6B42EA671743480E6A45FEA045629580330502775ED9ACBD9A9F11070
BE452B7541ABA3802CA11576F3D23805CB9620828E3A3B42E9FC445974401A34
93E71DB3D4B0D22DFA53E1F5C1162900B5F1EF53ACB02CF2A295910569FE6DD5
19A527C317AC9EBAA318B471F8EC9C91FB81688BA09F511A54DBEEE97429E440
123D52737DA5B8EBDA60EB601F289B0F968C0D82954502A2412B9F3C7430CD08
228503C2DFA412CEC0EA9897C49C6343F2CA253F989A429A0F9D9B7EB5633D99
80AF52E66A7F306A986183FBAACF3E7748435CDA3D263588BD557C29CE2CE44A
531B8D17AC88386A7917FBC8797E175A841666F1509BAA0173BEA10DD42C4791
0ACB93E404C0892C842AD5B50A853BCF478E68946B7FF1F5FF69C5211740E6F5
B00C6BC64E29AEFAD47EED59BBB7B4E310647246A61216759BE3C32A1523F78C
BD69317862C686A1A8804ECAC5D90B1536FFDBB65DD130210896BF0D752EBD02
B5371B38700D385169D371A00F6B904DC3F7A3C9523DBD8E01F1B27F3B186461
6EFCB36F3F49275A6DBECB40401B121D96DF0196EA4BCB09F0B52CE13D14737C
D7996504936ADBC4BC65B2DE576571494E14D5460B8FB51FBB05B53B32A83EA6
612FB4E527D890B4715449BF163E3189EC030DC5F21D805CEF21E1394518C7BD
B88F965576191277E578AE7C4460F83577EC2D7FA2803448E61C17A9402CA718
025C3FAF5CE585A18118B4E095F2C33829E707682E42EEDAD8D0395D9678B412
6653889DFC577C5F207A70F573CE0D90E1BCD7857CA1EBCF63EE0BAAFC7231E6
FF5FC0C08C6266476297A39C5EB537AC6F66CC88BCA8E45096FD9D1C8F9D304D
CBFB91CDFBD1FEBB46655A0C8988348DE1938B0D2B69D2E3DB1E18F2BEBD56F7
41C80DCBCA616FCDC825D40DB81D80B08D5F7739A3411272AEB8DBF5AD96E895
5E3EDD383E272249FACDB92019C065EE4DFF40DBFF027B601A6BF46D57B5760F
E510F94C089DADF413DA75E128A3A3F5AACA27C5D99D47776C5AE4858D730EB1
1808F97329FB67523586A04EDEC4C2CF515C159A4AA2629BCF645B8EA1DD71AA
245533DE52299474880D3F1D910FA9246C194AB02983061545F521D7BCB54700
A11E784C2C879FA9996C7D1FCD683B846F8AFD30BB923B815E1054CE91F39076
EE06BFD36C627658C6848C6E2D98ABE7B1836417F9D25B1538ED6F1B41F2B09F
27B63CBEC556D090B7DDC05401864CA425CB19BD9905EA7BE2480BE7A056A11A
4040E666B021CF728ED11D0F516D852F58CAB4FDA6815617A3808CCED7AC4C0C
206DE52F1E7A04F57A2DCB001A8AF84F9039EAB98893CFBD5015007DA0B16DA1
6DB4D27997D872537EFAD96494E1C78B6BA2799B95E5BCE55C7A2EF13969C714
397CF1D1E4B62F26B8C19A4EA6A2C65E3AA3EF85F9BE6D6E7BC7E6E9BBE10A86
ADDCBE7BE2035216A20A20123C873075AC732DD8A410F016A52297F40A4437DE
E01C9CF2E6134750B761A6080BFD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 101 /e put
dup 115 /s put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D9173633D9B50449E0
F9026E7A4CC1A3694D6C030E5AE53C0DAAF90B0046E22E14FF2787AC8194C42A
4B8846856AF7A4BCEE2DEA2757F34ABA4E91DA54F06AB5FF4A338B376A48F5E3
8D3D027460D20D45ED02165514A3D012A4A35E52E05A498F43F9CA87370B9C2D
E74B001F9A980CF2B43771EAA43C3D99916AF0727788818C2378B4BA3FF67E09
0B6623AD1CD0443503628ABD5B2322D54258D97124F45283826EC881E2DB5B58
80699CCAF5AA388CFC80D8223ED2ACCF31921D0CCECF8C9BB1216EDA7BC3BDC5
48D2AAA8D563778922BF07B8B190FAFE9007B2498C1545D3D3D7BDCA42E0F257
4E72E8FA2DE061542A003423C17BDA5032F04FF0705C4EE30E6E90F8D066D1F6
4011797DD6F943DFCAFF6260ACD55688B8B9C8B5B901DFE8BF45637F144266EC
0537B9420F9A775E36C6FBD4F12864163D056DE2C01E3E998F83BCEF946BD4DC
3EA05E65CBFE392FE57EBD70E0637F22BBB3C3AE44AEC0E36FF3DD4743F6F0E2
8749846AE815D134D9777831556FBA9ADB992C58F738F9E308E709465E54B202
1592130B53237A1F52BE4DFBBAE8DE9BF2A8FE7E25C96432AC63A7C322A19D1B
0DBCBEC3C198E4AE45A41A860C3C6677
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMCSC10
%!PS-AdobeFont-1.0: CMCSC10 003.002
%%Title: CMCSC10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMCSC10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMCSC10 known{/CMCSC10 findfont dup/UniqueID known{dup
/UniqueID get 5087402 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMCSC10 def
/FontBBox {14 -250 1077 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMCSC10.) readonly def
/FullName (CMCSC10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 80 /P put
dup 104 /h put
dup 115 /s put
dup 117 /u put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BB89566A9BDEC70EB4F2
048A6EB631F05C014D372103E37FC3FA317EBC9973565A638403DA02E48B7D31
CFF6C241DC5CDB470561002FF46437C06EF93BC99352DF04393C661FFFBF4BA2
0723ABD9B3E9CA9E63BA57EFDBAE684655CBBDBA15ADAE43E1A2C98A3CF060A3
D16AF8FE3A49B50A24C20EEED716E49AF6013D4D38CD9CC41A91C17E4D04D79D
567E1EF49110AA9C34464E95D81A730ECEB2C9AF38FBA6B45E253288438B4CB3
DC75B3A906D4357293BA41E59C35223A6C9CBD6FF5FC90C2D07CBB376C7320FF
435A6251822BFCBB612CE630EDF826C37E95F541C21B93FCE127591D5E38165E
2B58A34AAE37712BC58B63FFD70AB80F4F24612CFD2F1466BAAF3CA2BCB45148
D0DEA0E9B8FBA4C4FF5B8B3CB02E461355051842BD1C94F41066B9B909DB83B1
DCDCBEF7CD00A43E4C0B8191A29600CA197F0BA227FB8309BB539D2A620BAC70
8A1AB2DFA51ADC9873B8E5582DCD3ED154E5D727D1665F99BD89883D69E6CC2F
DB3A57AEB612171A88E22F038461DE03FC357F771675E34E90D4D19B4B36891C
9D2333960400E97494F4FC4DBCE6A73C34A0409E433BBDC0AAAEBA7D3555066E
1CFBB4515C8B573C9B9DD12ED5B6ECEBE35AD0DDEA9DB004FC6CB540B5117B49
59CABE5FD74C6F5B6482B42C20B5FF0467D1DBD7CED2CC651CA57852B6FBB402
A6764DB342889132C911CAA713A7F2FDD8A5E849345D6C81025E02F5B8B682BA
90CC9B467FBC37362436EA6BF8EB62D784B01D5430147945BC09D1F49EE89F2E
3E2B8E6D439248A56F82F2E03EA5C7A922F2813BE6538A3A423BEBC55B345AFB
3B3C125306749E137C647D78028AE1FBF3E1A82C260132832A9668F454D39C41
736717DED0A99F6B11F005F0E1D07FE84713AAB4C042FDC166AA146D7B5E9198
E4F485BE5B135EA281FF1C1E616B5AAF02771F58C5840CB5A427FF9794F93E94
17FD799C78AED1DC4810BCEF4C6C51D3C1504EA2C6F2B29805B7ECF97B5F637D
FE92E168CB9029E90404CB54FB312FC7AA8A9F2F524C03E61F03B1E31D4F061E
1677B39D5D30C9FD4673E1723F4AE3CCF38593AD6D7F61E9DF3C010E51F25085
35D51105E1464BA146A78D7297D4D310AD91342A0BB942034A3EC0696B467367
3E39D202D637E6B14D0EBCA6AD3CF22B07D4CA69C0FCBB6C93782B2F0DFC5AC1
5D8A16CB5EDB671A0C1BA9D10F63CEAFCD0E06E42C730C8EF769CCFD57937245
658F486036D37E8BDDE5670A212FB488A8753322A5B170C9662750AA958C0BBD
8E97D8239D2A08B30416504DEEC4E506013E037C91785C674F8A6A44E23FEE6F
CCC00CC5E4D355B0871FDB8ECD64F70EE32449BB5D6F84F8C8AA2D5B1A489BA9
D7FF2DBAA8D0B84054E93D64D3E77850A3724824914A0F821EEC3D605DD851A7
606936B8B9E24D6E932E16C448140FE94DD96C75AECB73850035ED9C04A1D93C
64B21E7D4657E030483EC5C3554AEF8BE4D0FE5B9743B875340B09E01273DAE8
F256C50A1A8F2E0417440A8BB0173F59E11523E1CEF2593A4AC5AF2167627B00
C5EA97D125EB8A4BD4C372877ABF10F5B7B149D73787E0834BFB3084E9508DF7
072DD71637019599252059738D4D6BC57A9358E4B14F6AF9C4B31DB8E25C29B3
7A15F9953BD73ACDE5F0445A5DC406BB4635FAE51C1D8202AE31730E6F355317
1DC197DB0B6177307C60E5D38F4487363EE051B2E609A52BC4D45B14B6558B6B
5E1618748794B8340752CDBE7756C068975B559615D4CD5A97CE30BAA7B2B1A3
2FEF2E055232B24FD8A21BECDE1B6A479A28EC80AE2CD16DB50B30B4A6CFCF06
491C7CD5AC29FB964D4846415233947522676DEABDA0D9535F8507D33693930C
B4E4240A02B0CE7EA288516B8A6EF908D7F8BAF9012D052C6AC96D9F8F6ADB07
8984F3559C5E7E3022A957982155FC9CD599C74E18328D3AB46F9DD15D1C4C3F
9B93ADB4489BA02CFCF57DE6270F3AD2F8597BE71786510EF08142F430EE5568
4F9DDB792B7C46B6135E341DBBF062FBC50FABA80CD4A384157BAE57CBEA9781
AA4416323265168AC097DE7E30A0D4750143A4FCE70A863A31876A8FA5327C3E
36E89589E363AA2B1A6E8B09F5AEB8FFFD0396067173465B6503383DE517A6EA
88C0FC08578398C2A721E5AEB29F4AC9BC990A50CD87BD35A11F9E81F68E7B85
5E5B95A4F9A5D30379EF90D78E1E466DEF867BAEFC4F5ED2C762BFF099C1C2B3
5E0DA1C2FB33BE1379413CDDB1EE6BB3A495331F72F2FAEB8152E8AD5FD334A8
AAB0082A71D5574B618EA8D487B8FAF1B445F3395B1E21224F5492A0E06F5152
7726835C900E2E52BE3B7B654183AEDEC68053DD0AF19EF6DBC10B6FC08EC7D0
CC0E2C8FAF8C9A4C21FB7C34E074BBA4EE64226BEC8C928A784C1BEE35B72EC8
E9295240B29DDC2539CD118BAC38DB3917D14CD33AB45FE47E827F2A2B193AFF
53C5396C52CEA4F43F06AC2D08C74CC85D608CBA267175EC31311EE25AB48DD9
FE811B411AE426C9FC0B6044D1EBF130231623F1566CEA4D1C06D8032FD9808A
94479C842BC41B675CF6B90113BD681F8D43F51D5016D80EDC11D7640FB950D4
E709A46184406ED90D0892A4CD9062938A8205697A200DBE1F38EB166EFEA0EC
4FCB45CDAF82EA103DD6FDD03D146F3E42EDA6496064DB3F4FC1C5280C9E604B
D5EBCA08BF2AAC90156C11EF68137DC76502EBF216F3AF3EE30DD2676D218428
F41C655093F8B530FCA378B5769F262A6FDB4B66B83F18F050E77227E28D71F4
5F4425CB8D51B3DAE872CD86D7804F870BC564A6DA1CA13EDB00D131CE4F6460
7021661B99612629DCC20C85CF155EDC5111E015A77B0B82A8FC1EBB374B7EF2
361419BA93B857D5C9944BB5B4AEDD86ABCC261542077FE09701C96370168579
5F89D5AAA08D700E2643E88C2FB8D1D56D37AAA9744872E7C050B4CE046B47A7
83F224FA9FD311C955EFBF173042C8FC66524135F579B1397828870D5C9DC71F
8615FADE2A1CFAEA90F732B6C266E2F3048FC43EDA7A6B6D98E9DB793CF457B3
F5877E7A055C92B0246FEA8C72B3B3456F93BF36E2651D32CD614C3AECC0B4BC
F824C8363E593A6458D37408FC5B09883B280005DD24123E2D4B1B85F4113327
EEDD9186A4AF2CD6439B46C5C168C125CA80F9EE9E68906620EE126CFBF26E15
B269838A54224EDCFE2A373EB750D4829BFA410DE5F1541E428BB1E024AF496D
F5F1C151F5A645C8622F2EF9088D57A2811868A8A8BFCDBFCE3ACB8463AC35B4
8B6F44E1C1232805842F56FA468F81FF37D5D55B81CA56058558544C142EB3BE
07CFB1F75DECB1E48C14D6AFDD455989AA6FFE8B8DC54F462B3C20E31D270BCE
8E68E2B43A6625AC7E9792704FAAD6CE8BBE0B341DA7189EBB3E9D5375B27FD4
12506D5BCA50AEDC6955E6C3C7BAA84BACAF7ABDF3A270C7734EC3C6EC22793B
E67B0E288F99699D38DA8B79F2D21DD97945FBDDD132A8F0BF947950D3C0B4AA
EB7B2C435AFE54489E1930610311D718AC610C21A644F34CB2D1959B3066F39B
EADEAB5CFC6AF4D191D86B02402B00D1C5262707861C5308730579795EB53207
A291A27A8B5C4DAE0A87A0C6A260026CA3CB620E1002E066A515D7990F3DEA29
0FAC962E0B82B7A6C86B1EDC54007822BAECED673FAAEF88C8109777EB79A53F
AF3C58546974F2F56E70E9B5CB59ACB5C27CB01895557B2D82134D7F02029B24
3331621F38E68717F5CB68A8892D0B9C0A8ED4F8BB56E80505170D44C6856128
2DED0254ADA4875CF56B4D97372AAE730D4C77A2940DC8C178274DF88A9EE037
215C6FE7B9D481EE4DE809B124C0270782411ACCCF89906A8B143D0BA8B2CEDE
E9B90465C3E57A4FD9AD2702323450256ABD09A1F8C26F08480317C08B75B720
70A161C99715A35A94DD5C9647ED0F8A5337B774C8E54F9653AC859485A1FED5
37B725A7E4BA58711CBCDA6054E34CBD8E9F9460179DA7DBD243D81A1531FDDE
BF2BD425BD9DBE75EAA333B1F5793669A215549A774597E6ADA16D323FE5601A
EDA41092730009A99BF5B5AAE281844A6BF3292D4D4EDE36B4FD8BCAEB6EB72F
AC5D3CD53D0D621CA9EA8D254FDCB2B5161EE9E80B266563F669805A3A15271A
0753983004A1ECC7FBADF62AFEA4DAB49A178C231759857DB910668BDB07CB3F
7E8EC24901863088B3231EE3FA563924032C91CA9D68DB398F9BD9AC0C651EC8
9051C9F709CD784F3FF5951DECD7E869ACC34B83AECDB011E6594347855EE7F5
28811F744A4BD70D4E9077EA7EC19FFCF612689F12B34332857AE41F13E6D16A
962DB9B6AAAC167B9FBDF0068EA13412F318384134B29F3F0C399F1973A3564E
F9C3C39B5BDD4C98D81A6CB476E565860B50704BD65ABD630A5F1372F2D826F3
3AD47C08B8AD3176A170C369EF3CEEB190134006D6135C5B8CCDBE1C11FFF1EC
3F6D8C46E15C4F5EB9ED9F31A129594D542D40DC3815CD075A0DBB648D868AF5
15A05C4BDB28BF23653A3AD96CF6AFC065DCCCB23D5D9A945F8CBB539DD3BFA8
DB8F1FBF9B6F25B41EB4309995CA3D5D6ABD70CBB4A2F0C6364E5439AD1045FF
72F6B45A30BD3A548CFAADDCC6C15D46F6D783D3E520215751DC98335A4ED512
D7D19235CDF911CC69F3CF4365B678EBF3E87C456A4E77339C74930083445588
462529C22A96A28C5CE87AFA0C981F26CAED5A1C8DBCDDA612624DBE0373F026
465185A4D8C73CCD8D71EE97116F8F7D341B87FD78F9CCB9FBDA2A7799711607
6BBA855AE9D5C505870DC85FDFAAA130A351D56AADBFBD6A7D52055E3200F8B7
8AE9A00092B55DEA8BDE224B4BA7FD4A191CB1FFC4CB995FEE1AC2883AB69E1A
AFFC09AB5B9AE311A030A5BA05E2213F9BBF016C8FA80689C069314D91274B20
53FCC65C7D7B3A7504887525BFFA060304931672A078BCD7F269595686310E34
E1ECA868899BC402D17EC36CE40D5041D7CEDA77F7764C9D98793F5334F574DF
E93CB10A5E8ADAE95CE63D2339557091B4B4911A4987CF21B7F1DBADBC2DD605
8EB72473C1F2EABCC44E0D0339EECB55DA74085606C3F89D57ACFBF5755A5395
CA8D4BD47E4EE8D8B882D3AB31A1F0C62E74654C7E041E4FF2693A38A9796064
46526B0A37E6B5BF8E48E80EDEF81E34DA8F6CC9025936A4D0E6D709D61B7B5C
AB550397117F3F9D2F5A542A64DEA8E1178F7337124D6B56BA92F659AAD694D7
391028731E01284BFEA635314A8DA8DF7A34EA3B6B2F8803BE6DCB423A9E8015
55EBD90EBAE8A00298B3B6B1C02BA516AF528122C1F2B07EF69F5466C2C36643
0D665D6561705509B7582D8301AF3C32E2F3B9433E3E04D62117C7E8A368BDE1
0D4DAA1C415B2A6573116D2A169AFEF700A83F55D88813585E89C94C07802BA8
3AE8F9BC3CDBFD9C2E35D062B1FD6E79E1EF104FC70B0AB09D12CA027F33F85A
22F0ECBB4AD55FE8C616B82C46CE69A600E4F767BD7A9C5F9B37A3196B038384
5DEF76A8884425FE598A63AEB19FA698C2AF7CAA4983CEC789268E22BA051EE0
20A40633D22D8F707626ED30E8273EAAD1C065F0B2E1718B5AC853ABE09330C3
B0082A71D557169BC1559B6D285A3499D41C4CCF1F74884EC3917EB9C574371E
AFE8578DDCA459B8D22C0188A8D150437B05FB92022C95EB6FBCC954216B5FED
CBC7C90B9A1F061376A9840FB64390A6BA99CFC8279A86A730C6DBFD14C53C4B
7277D676BD42203677E9ABEEC8C97E13DAA626474513B06F8734DD784F2FBBB9
B3B448B8E8221E380AB4A86D3A683B86A54129519D50DD4FE63B30954D805CED
A9A5D9A39C58B65B08E1C19555E927C6DBF7FD07252B2B57F62B905D6B488201
213D106A41033B26FFBAC2E616DA6ADA6D560BADF10E68872806CFD6F6E19D7B
57CF1F7A030A7BAD374F16A977E0ECB8742D034ADAF9C247DA19C8AEA74EF6CE
DAFD6B1DC562FD3B77E4D008BDE4D8C7FCA9895DA1AC9EAA01C32A0DA712B082
9438E77230D38FC4153E1711417B918BA6CC03203A5FF082AF880F48518D8271
C1121E4F1386B30A7F1BC6F10EA98443F8A65C867A109336B808BC9A8E2A75AC
F950835AA84B56F59DA4C8A18859C3B68F6B6DE09A6675F639EA9107BDB67B0F
54EBC564BC2D781B61C14363A54956BA78A2BB89C9F966C94EEFC29EE9F4E23E
C0BF750144DC289F0DEE1F8A25BB52E54F656FAFEE4BD2DA57E1306BBE648051
1D0CFD6A23A3DF082E3CF13197BF1B7FB22B2CD427BB78F455C9634DF989DC90
7BB2AE247B1C99AB2062855B2948341B0F857ACD750B59E370A6698C6A1F5287
72A4A9628A592E313956C242DF8277EDD2F1FDFB07CDC104275FFBF796D7518A
DF49FF3CDEC3BDFF1D290C382F244DF18005ECDABF0C5C2C64EEC4383E2E07DC
5C82587C071E59B46B7BEF31D268F39D9B12D534344FBA515E9DE8F166FAD1E2
7D1558967AAAD3829D3F7EC6938D20E5379F414532976ABA844D97A5E9078901
EAE4D0ED1F4C7EE7A2D80D891A5013D6409A38ACFA497F5A169EB7F9F4890DC4
62FA6A89EA48267331F086992B9CA9305E16611E6AEE67DCDD588A25D37F45B1
0DE75C802EE021E574B64B3969DE2E5061ED9364B646C38D4BBA86802CA6338A
94E135D2256920EBFB1AA22D9E90C7D16853F0DF9F2D942748EE540E4FCE63C6
5380D7AB4ADD6CB00FE8F7867E4862D8DB432F28331428CC350CDF7F447A65ED
D7683ECA35A22ADD06E9FE6BAF060913AEEE7B2B8EE4798E437698CC9EB2428E
74CE73F84D0D2292DE709D71FFF8901C3505370E6F1D4E28E6B7372492C65A88
159371B1D60D77CEC93B272B6C5394EE1D2EF9969DB2838B8E128553879A1BA5
2884B0A596E8FC3D1E648B7E26A4AC57DF09B9CE09B2F91D8CA618CA52AB3DBD
D005A56A420366069B73146A6F58E88BA49671A1AB7C2070C3D42AA770285143
40AE7D7868C0E1993506B07C086AD7D4F28CE2D15853FC5FBCBF9425D8012B9E
DB6E1E5002517659C8DA69DCEACA94F368537668843D281FC11782F1C5F71977
CA215349EE6F20565DE3D8D8212A40E1227A4B22965FA64A0B02C62BFDE97E6F
C3C54FED4057EF9D258C42D7440C78C5E0CC58A40DD74ECED4152F70A93CE71A
1B3A57C46F74A6D27BF98C97CCD31A8EA487260F224A3E40F52C65490AB4098A
7B9EEB54A5A415C8C88568F7D9EFE74BBB785FA18AA27D9201F28BBC477A20A5
D1307AA78EB8C7CAD409AB64B29E4115E45F5FADDCC80CA74B296C4265A40614
37F2ACD8386AC0202D6FDB6711E8CB06442F209D781E940ADDD6D881D4F8E874
357C533115923B90138FFE31D3577C6AAE60D768970FAAB682CD0DCA3E9A9A68
6393E4B772691C1013ADFFC90C508D51B02D2518ADCC7E79F7DE5DF9D18B8435
6129064DD1A3995E5A6F45D78287CC10A0EAFBF47223494C5EA934B1BC2F7C53
686C5880303F9E3ADC8B100D441D944686E1FD811C646C6DD0224F6CF55FA87F
D132EF50450879A25242A18683BD6D0266F8F333F3768D1952B0F32AA75106D8
EC0AB703F287E847CB91FFB88CD9DA174B49171822BDE34621CF41EA772230A6
3088F8D19CF2364A329162D39E166AC728B267758341630B00398D64538FCC4D
E3E6CF103794C29AEF7F7E56970F6B1ABA87DC8D23E280EDC77556593D02DFF3
154883CFE4EF04E07E7539A4750FA1CF1A994E99B656E728D140C83AE1F196AD
9F049188A4184C84556C0476BE46DDA8ED86888DDA3065C5091D99EEEAC43092
40B97AE327215024ACC0134CBE91FD761C26A48EDFF9028DA28222985FAED7B6
A1CC891D07185666E34BEFBBF77C6C32B88FF3F1046E4EB2CD942E70746DDCDE
002E74BA03A2B15E0529E61DCAC207A71F61C89D81B3C53C5B458EAC70ADFC54
810310CB04E1A21FFBC5DE2429EC0989A3F2B6AE4290A005FBE736750956765D
637B7CABF7F9A593D9FF6C322895835C044F5810B772FE37524027FB1807E2EB
B95CB995E15353819A4300A2FA85C197D0443B9CBE917B03B61BA2D014EE7C54
377780B0FD2EDB4649BEB43D754017369E176C4360A5B6E8368DBDE54A68C63A
8FFD29938CC6A31CE7DAE58468561AFB3D82294BA6100F29963B07DB9765F8E3
9BEE1EA02E8799E32D486FAB815278B495170E2105B9FCCF916F330AD060EADE
B5C8CCF923194431671F21DD5B6E3D45696FBFC992448144A211339AC09CED86
FD20CF4F73888F3BB192C96F69FD07C0C0135FFF0346CBB554605737C3AAF3E1
6A14195A377263935338725E49C4FB255609A9522DF2C90AF46370CA9B82BF12
E6095C00DCF9F0231AC00A381816570E7E46E47F99463EF3DCA94D464086912C
5FB24434965C42778C1FADA1386BA12E836FAA01D50CBB9B9203951DAE5949F6
52F4C7EFF25295F62E89B545CC8CE878091A026E8FCC827965200773DDB098E5
FA98D6C8B524E1211FFEEA0D5F97EB71EF7CE950AB97D1B6A13995F08ECEFC66
6421CFAF1F718E52EE7AE013DEEF2F3F609E625D1C22AF3B19DD8ED6BBAB187A
8EE00D1EE6C8BF8C6C6C6F2D85890A785C99AB3515D6828416A29EBB371C06A3
8A05F3C9C1660EA82C54564BD5C1808B7C4E1ED000046E800818BF6EEF9B7A59
7CD7AE3469395FE9859CE2224020402DA6F5559692B7327B679DE234D046601C
95186883C08889E02D151A02D47F5BE9951F57AFF3871C0122BC656FEEAD68D0
A32C4135B0536452682F3EE3E00C8EEAB34D040B863CA789F33736D1902D1959
0F996454DEA17C4886D022589EB0955E8B3B65525A15528ED3B8B3A00948456D
F44C4F6D44B6F8A1EC7903C30F8AE0316577CBCABC8E3E22358488014ED0D57D
F242B33024A42F1E453B2DC779D9412372212C5C36C90A0A4C0D967362A50B33
C54A1A9386D68CB23B32F8E1023F7125FF4FC06B9E7201047EBDCF02EFE1F018
0C7342FFBC763580BC9304670F7C2D077687542577D701BB012427803AF91040
581DB7C1F75E62B4DAC990ACAF2C6CF92CC0ED097B2262AB8B7584B243E4EB71
29998A3E7FE5E88DB65160A9E7EB1DE7ABA31635863BC42BF9634DFCECCAAF95
CA8FB8D7D64DFCF86414977428E199ABF7AD2415916886EB5A486A2DF372B575
E10F09AC4425C6C356CA9D2E0F4A930BED0B79AB853FA83B31AF2E5764F8329D
144F51D4F39118F689CA25673C7C7BE8C30978C95045F0B42EF4E935C7FCB34B
FFBD47078D9587F6765512FE1EE0282D4789061A33C0674754F0F95A14274C4C
04E81E3987B222DE50DC4204C5ABCE066A99F49B9A7EDFFFB487034DCD574410
0300813A190AFA06E5F6A5A9DB216ABD117E8C4475F8CCC12051A0AA4E95FDAC
59BBF90D9B4827A1558A3815ECA522EE67DEF59B17B8EBF351E9F6B9C921DF1E
7AB3C56B2BAF4878444F81DB855947788B8DDA69329F558D66215F8038C6EC5D
7DA42E0551A695874F89ED1838EDD5231E3F1D95E926E1B680B08750E62B5E8D
399281E034EBDC587306D5CFA3A36748620FED4CDF5EE095FF470176C295B723
435DC5095F10E5DBFA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (push_tree.dvi)
@start /Fa 141[33 2[42 8[25 37 16[60 84[{}5 83.022 /CMR10
rf /Fb 140[39 13[39 101[{}2 83.022 /CMMI10 rf /Fc 138[51
1[38 10[51 23[62 80[{}4 83.022 /CMCSC10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray 0 32 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 0 32 a 0
32 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 32 a 0 32 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 0 32 a 0 32 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 32 a 0 32 a
tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 32 a
0 223 470 223 v 470 32 a
currentpoint grestore moveto
 470 32 a 50 57 a
tx@Dict begin  tx@NodeDict begin {6.83331 0.0 24.26097 12.13048 3.01385
} false /N@T-0 16 {InitRnode } /NodeScale {} def NewNode end  end
 50 57 a Fc(Push)0
223 y
tx@Dict begin  tx@NodeDict begin {4.30554 0.0 4.65627 2.32813 3.01385
} false /N@T-0-0 16 {InitRnode } /NodeScale {} def NewNode end  end
 0 223 a Fb(e)19 198 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 2.0 2.0 0 0 /N@T-0 /N@T-0-0 InitNC
{ NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 19 198 a 122 223 a
tx@Dict begin  tx@NodeDict begin {6.94444 0.0 38.60419 19.3021 3.01385
} false /N@T-0-1 16 {InitRnode } /NodeScale {} def NewNode end  end
 122 223
a Fa(T)-7 b(ree)27 b(of)g Fb(s)282 198 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 2.0 2.0 0 0 /N@T-0 /N@T-0-1 InitNC
{ NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 282 198 a eop
end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 981 600 V 566 w(1)21 b(+)f(height)30 b(of)h(tree)g(of)1827
563 y FC(s)-458 763 y FK(No)m(w)g(w)m(e)h(can)e(think)g(the)h(\\size")g
(of)f(a)g(value)g(as)g(the)g FI(height)k(of)f(the)-458
876 y(co)m(rresp)s(onding)h(tree)p FK(.)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(39)9 b(/)h(95)p
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 40 40
TeXDict begin 40 39 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation40) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.40) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Stacks/Height)38 b(of)g(terms)h(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(Let)31 b(us)f(de\014ne)g(a)g(function,)h(called)f
FI(height)h FK(and)f(written)g FG(H)q FK(,)g(fo)m(r)h(each)g(term)-458
-137 y(denoting)g(a)f(stack)g(in)g(the)h(follo)m(wing)g(w)m(a)m(y:)657
59 y FG(H)q FK(\()p FH(Empty)o FK(\))26 b(=)f(0)255 197
y FG(8)321 194 y FC(e)367 197 y FA(;)407 194 y FC(s)532
197 y FG(H)q FK(\()p FH(Push)p FK(\()901 194 y FC(e)948
197 y FA(;)988 194 y FC(s)1030 197 y FK(\)\))h(=)f FG(H)q
FK(\()1335 194 y FC(s)1377 197 y FK(\))c(+)e(1)-458 394
y(where)31 b Fv(x)39 b FK(is)29 b(a)h(va)m(riable)g(denoting)h(an)f
(element)i(and)e Fv(s)37 b FK(a)30 b(va)m(riable)g(denoting)h(a)-458
507 y(stack.)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb
2221 1639 a FJ(40)9 b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 41 41
TeXDict begin 41 40 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation41) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.41) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Queues/Signature)p 0.2 0.2 0.7 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray -458 -250 a FK(There)31
b(is)f(another)g(common)i(and)e(useful)g(linea)m(r)h(data)e(structure)i
(call)f FI(queue)p FK(.)-458 -37 y(As)f(the)i(stack,)g(it)f(is)f
(fairly)h(intuitive,)f(since)i(w)m(e)g(exp)s(erience)h(the)e(concept)i
(when)-458 76 y(w)m(e)f(a)m(re)g(w)m(aiting)f(at)g(some)h(place)g(to)f
(get)h(some)h(go)s(o)s(ds)e(o)m(r)h(service.)-458 288
y(Let)g(us)f(call)f FH(Queue)o FK(\(item)q(\))h(the)h(sp)s
(eci\014cation)f(of)g(a)g(queue)h(over)g(elements)h(of)-458
401 y(the)e(item)h(t)m(yp)s(e.)p 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb -367 529 a FG(\017)p 0 TeXcolorgray
0 TeXcolorgray -276 539 a FI(P)m(a)m(rameter)i(t)m(yp)s(es)p
0 TeXcolorgray 0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb
-182 668 a FF(\017)p 0 TeXcolorgray 0 TeXcolorgray -95
680 a FE(The)27 b(t)n(yp)r(e)h(item)f(of)h(the)f(elements)g(in)h(the)f
(queue.)p 0 TeXcolorgray 0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb
-367 824 a FG(\017)p 0 TeXcolorgray 0 TeXcolorgray -276
834 a FI(De\014ned)34 b(t)m(yp)s(es)p 0 TeXcolorgray
0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb -182 963 a FF(\017)p
0 TeXcolorgray 0 TeXcolorgray -95 975 a FE(The)27 b(t)n(yp)r(e)h(of)g
(the)f(queue)g(is)h(t.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525
TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(41)9
b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 42 42
TeXDict begin 42 41 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation42) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.42) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Queues/Constructo)m(rs)37 b(and)j(other)e(functions)p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb
-367 -210 a FG(\017)p 0 TeXcolorgray 0 TeXcolorgray -276
-200 a FI(Constructo)m(rs)p 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb -182 -71 a FF(\017)p 0 TeXcolorgray
0 TeXcolorgray -95 -59 a FD(Empty)23 b FE(:)g(t)-95 41
y(Exp)n(ression)k FD(Empty)i FE(rep)n(resents)e(the)h(empt)n(y)f
(queue.)p 0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb -182
128 a FF(\017)p 0 TeXcolorgray 0 TeXcolorgray -95 140
a FD(Enqueue)c FE(:)g(item)18 b FF(\002)g FE(t)23 b FF(!)h
FE(t)-95 240 y(Exp)n(ression)j FD(Enqueue)o FE(\()686
238 y Fw(e)729 240 y Fy(;)766 230 y Fw(q)812 240 y FE(\))h(denotes)f
(the)g(queue)1531 230 y Fw(q)1605 240 y FE(with)g(element)2079
238 y Fw(e)-95 340 y FE(added)h(at)f(the)h(end.)p 0 TeXcolorgray
0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb -367 484 a FG(\017)p
0 TeXcolorgray 0 TeXcolorgray -276 494 a FI(Other)33
b(functions)p 0 TeXcolorgray 0 TeXcolorgray 0.2 0.2 0.7
TeXcolorrgb -182 623 a FF(\017)p 0 TeXcolorgray 0 TeXcolorgray
-95 635 a FD(Dequeue)24 b FE(:)f(t)g FF(!)g FE(t)18 b
FF(\002)g FE(item)-95 735 y(Exp)n(ression)27 b FD(Dequeue)p
FE(\()689 725 y Fw(q)736 735 y FE(\))h(denotes)e(the)i(pair)f(made)h
(of)f(the)h Fw(\014rst)f FE(element)-95 834 y(of)0 824
y Fw(q)74 834 y FE(and)g(the)h(remaining)f(queue.)36
b(The)27 b(queue)1387 824 y Fw(q)1461 834 y FE(must)g(not)h(b)r(e)f
(empt)n(y)-7 b(.)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(42)9 b(/)h(95)p
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 43 43
TeXDict begin 43 42 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation43) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.43) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Queues/Equations)p 0.2 0.2 0.7 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray -219 -46 a FH(Dequeue)o
FK(\()p FH(Enqueue)o FK(\()642 -49 y FC(e)689 -46 y FA(;)15
b FH(Empty)p FK(\)\))26 b(=)f(\()p FH(Empty)o FA(;)1587
-49 y FC(e)1634 -46 y FK(\))-36 92 y FH(Dequeue)o FK(\()p
FH(Enqueue)33 b FI(\()863 89 y FC(e)909 92 y FI(,)970
81 y FC(q)1021 92 y FI(\))p FK(\))26 b(=)f(\()p FH(Enqueue)o
FK(\()1681 89 y FC(e)1728 92 y FA(;)15 b FC(q)1815 106
y FB(1)1862 92 y FK(\))p FA(;)g FC(e)1983 55 y Fo(0)2007
92 y FK(\))509 230 y(where)92 b(\()p FC(q)903 244 y FB(1)950
230 y FA(;)15 b FC(e)1036 192 y Fo(0)1060 230 y FK(\))26
b(=)f FH(Dequeue)n FK(\()1648 219 y FC(q)1699 230 y FK(\))801
368 y(and)1045 357 y FC(q)1121 368 y FG(6)p FK(=)g FH(Empty)-458
572 y FK(They)30 b(a)m(re)h(easy)f(to)h(o)m(rient)g(since)667
561 y FC(q)748 572 y FK(is)f(a)g(p)m(rop)s(er)h(subterm)f(of)h
FH(Enqueue)o FK(\()2049 569 y FC(e)2096 572 y FA(;)2136
561 y FC(q)2187 572 y FK(\):)-306 776 y FH(Dequeue)o
FK(\()p FH(Enqueue)o FK(\()555 773 y FC(e)602 776 y FA(;)15
b FH(Empty)p FK(\)\))26 b FG(!)f FK(\()p FH(Empty)p FA(;)1521
773 y FC(e)1568 776 y FK(\))-61 914 y FH(Dequeue)o FK(\()p
FH(Enqueue)o FK(\()800 911 y FC(e)847 914 y FA(;)887
903 y FC(q)938 914 y FK(\)\))h FG(!)f FK(\()p FH(Enqueue)p
FK(\()1615 911 y FC(e)1662 914 y FA(;)15 b FC(q)1749
928 y FB(1)1796 914 y FK(\))p FA(;)g FC(e)1917 876 y
Fo(0)1941 914 y FK(\))-458 1118 y(where)-207 1107 y FC(q)-131
1118 y FG(6)p FK(=)25 b FH(Empty)30 b FK(and)g(where)h
FH(Dequeue)o FK(\()1142 1107 y FC(q)1193 1118 y FK(\))25
b FG(!)h FK(\()p FC(q)1452 1132 y FB(1)1499 1118 y FA(;)15
b FC(e)1585 1085 y Fo(0)1609 1118 y FK(\).)-458 1231
y(Note)31 b(that)f(w)m(e)h(can)f(remove)i(the)f(condition)f(b)m(y)h
(replacing)1550 1220 y FC(q)1631 1231 y FK(b)m(y)-458
1344 y FH(Enqueue)o FK(\()p FA(:)15 b(:)g(:)h FK(\).)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525
TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(43)9
b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 44 44
TeXDict begin 44 43 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation44) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.44) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(T)-10 b(rees)p 0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray
0 TeXcolorgray -458 -250 a FK(A)m(t)30 b(this)g(p)s(oint)f(it)h(is)g
(imp)s(o)m(rtant)g(to)h(understand)f(the)g(t)m(w)m(o)i(usages)e(of)h
(the)f(w)m(o)m(rd)-458 -137 y FC(tree)p FK(.)-458 76
y(W)m(e)h(intro)s(duced)f(a)g(map)h(b)s(et)m(w)m(een)g(terms)g(and)f
(trees,)h(b)s(ecause)g(this)e(new)i(p)s(oint)-458 188
y(of)e(view)g(gives)g(some)g(insights)f(\(e.g.)42 b(the)29
b FG(H)g FK(function\).)41 b(In)29 b(this)f(context,)i(a)e(tree)-458
301 y(is)h(another)i FI(rep)m(resentation)f FK(of)g(the)f(subject)h
(\(terms\))h(w)m(e)f(a)m(re)g(studying,)f(it)g(is)g(a)-458
414 y(to)s(ol.)-458 627 y(But)g(this)h(section)h(no)m(w)g(p)m(resents)g
(trees)g(as)f(a)g FI(data)j(structure)d FK(on)h(its)f(o)m(wn.)42
b(In)-458 740 y(this)29 b(context,)j(a)e(tree)h(is)f(the)g(subject)h
(of)g(our)f(study)-8 b(,)31 b(they)f(a)m(re)h(given.)41
b(This)30 b(is)-458 853 y(why)-8 b(,)31 b(when)f(studying)g(the)h
(stacks)f(\(the)h(subject\),)g(w)m(e)h(displa)m(y)m(ed)e(them)h(as)e
(trees)-458 965 y(\(an)h(intuitive)f(graphics)i(rep)m(resentation\).)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525
TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(44)9
b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 45 45
TeXDict begin 45 44 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation45) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.45) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(T)-10 b(ree)39 b(traversals)p 0.2 0.2 0.7 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray -458 -250 a FK(Given)30
b(a)g(tree,)h(w)m(e)g(can)g(traverse)f(it)g(in)g(many)g(w)m(a)m(ys,)h
(but)f(w)m(e)h(must)g(sta)m(rt)f(from)-458 -137 y(the)g(ro)s(ot)h
(since)g(w)m(e)g(do)g(not)f(have)g(any)g(other)h(no)s(de)g(at)f(this)f
(level.)41 b(There)31 b(a)m(re)-458 -24 y(t)m(w)m(o)g(main)f(kind)h(of)
f(traversals:)p 0 TeXcolorgray 0 TeXcolorgray 0.2 0.2 0.7
TeXcolorrgb -367 104 a FG(\017)p 0 TeXcolorgray 0 TeXcolorgray
-276 114 a FI(Breadth-\014rst)g FK(traversal)f(consists)i(in)f(w)m
(alking)g(the)h(tree)g(b)m(y)g(increasing)-276 227 y(levels:)40
b(\014rst)30 b(the)h(ro)s(ot)f(\(level)h(0\),)g(the)g(sons)f(of)h(the)f
(ro)s(ot)h(\(level)g(1\),)g(then)-276 340 y(the)f(sons)g(of)h(the)g
(sons)f(\(level)h(2\))g(etc.)p 0 TeXcolorgray 0.2 0.2 0.7
TeXcolorrgb -367 467 a FG(\017)p 0 TeXcolorgray 0 TeXcolorgray
-276 477 a FI(Depth-\014rst)g FK(traversal)e(consists)i(in)f(w)m
(alking)g(the)h(tree)g(b)m(y)g(reaching)g(the)-276 590
y(leaves)f(as)g(so)s(on)g(as)g(p)s(ossible.)p 0 TeXcolorgray
-458 728 a(In)g(b)s(oth)g(cases,)h(w)m(e)g(a)m(re)g(\014nished)f(when)h
(all)e(the)i(leaves)f(have)g(b)s(een)-458 841 y(encountered.)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525
TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(45)9
b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 46 46
TeXDict begin 46 45 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation46) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.46) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(T)-10 b(ree)39 b(traversals/Breadth-\014rst)p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -363 a
SDict begin H.S end
 -458 -363 a -458 -363 a
SDict begin H.R end
 -458 -363 a -458
-363 a
SDict begin [/View [/XYZ H.V]/Dest (breadth_first_pictures) cvn /DEST
pdfmark end
 -458 -363 a 113 x FK(Let)31 b(us)f(consider)h(t)m(w)m(o)g
(examples)g(of)f(b)m(readth-\014rst)h(traversals.)-458
-133 y


 gsave nulldevice


 -458 -133 a


 grestore


 -600 -37 a


 gsave nulldevice


 -600 -37 a


 grestore


 0 TeXcolorgray
0 TeXcolorgray -404 896 a @beginspecial 71 @llx 619 @lly
211 @urx 721 @ury 1400 @rwi @setspecial
%%BeginDocument: breadth-first_1.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: breadth-first_1.dvi
%%CreationDate: Mon Aug  6 13:13:48 2018
%%BoundingBox: 71 620 215 721
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o breadth-first_1.ps breadth-first_1.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2018.08.06:1513
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 698 2017-12-30 19:08:50Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.28, 2017/12/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin 40258437 52099154 1000 600 600 (breadth-first_1.dvi)
@start end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray 0 59 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 0 59 a 0
59 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 59 a 0 59 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 0 59 a 0 59 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 59 a 0 59 a
tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 59 a
0 827 1180 827 v 1180 59 a
currentpoint grestore moveto
 1180 59 a -678 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 502 59 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@root true /N@T-0
11 {InitCnode } /NodeScale {} def NewNode end  end
 502 59 a 207 295 a
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 207 295 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@s1 true /N@T-0-0
11 {InitCnode } /NodeScale {} def NewNode end  end
 207
295 a 207 295 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0 /N@T-0-0 InitNC
{ NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 207 295 a 59 531 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 59 531 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@s1s1 true /N@T-0-0-0
11 {InitCnode } /NodeScale {} def NewNode end  end
 59 531 a 59 531 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-0 /N@T-0-0-0
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 59 531 a 295
w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 354 531 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@s1s2 true /N@T-0-0-1
11 {InitCnode } /NodeScale {} def NewNode end  end
 354
531 a 354 531 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-0 /N@T-0-0-1
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 354 531 a 502 295 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 502 295 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@s2 true /N@T-0-1
11 {InitCnode } /NodeScale {} def NewNode end  end
 502 295 a 502 295 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0 /N@T-0-1 InitNC
{ NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 502 295 a
295 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 797 295
a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@s3 true /N@T-0-2
11 {InitCnode } /NodeScale {} def NewNode end  end
 797 295 a 797 295 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0 /N@T-0-2 InitNC
{ NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 797 295 a 236 x @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 797 531 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@s3s1 true /N@T-0-2-0
11 {InitCnode } /NodeScale {} def NewNode end  end
 797 531 a 797 531 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-2 /N@T-0-2-0
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 797 531 a
502 768 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 502
768 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@s3s1s1 true
/N@T-0-2-0-0 11 {InitCnode } /NodeScale {} def NewNode end  end
 502 768 a 502 768 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-2-0 /N@T-0-2-0-0
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 502 768 a 295 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 797 768 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@s3s1s2 true
/N@T-0-2-0-1 11 {InitCnode } /NodeScale {} def NewNode end  end
 797 768 a 797 768
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-2-0 /N@T-0-2-0-1
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 797 768 a 296 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
1093 768 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@s3s1s3 true
/N@T-0-2-0-2 11 {InitCnode } /NodeScale {} def NewNode end  end
 1093 768 a 1093 768 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-2-0 /N@T-0-2-0-2
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 1093 768 a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@root /N@s1 InitNC { yB yA sub xB xA sub Atan dup -35.
 add /AngleA exch def -35.  sub 180 add /AngleB exch def 0.67  0.67
 NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end

1180 59 a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@s1 /N@s2 InitNC { yB yA sub xB xA sub Atan dup -35.
 add /AngleA exch def -35.  sub 180 add /AngleB exch def 0.67  0.67
 NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180 59 a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@s2 /N@s3 InitNC { yB yA sub xB xA sub Atan dup 15. 
add /AngleA exch def 15.  sub 180 add /AngleB exch def 0.67  0.67 
NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180 59 a 1180
59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@s3 /N@s1s1 InitNC { yB yA sub xB xA sub Atan dup 0.
 add /AngleA exch def 0.  sub 180 add /AngleB exch def 0.67  0.67 
NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180 59 a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@s1s1 /N@s1s2 InitNC { yB yA sub xB xA sub Atan dup -35.
 add /AngleA exch def -35.  sub 180 add /AngleB exch def 0.67  0.67
 NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180 59 a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@s1s2 /N@s3s1 InitNC { yB yA sub xB xA sub Atan dup 35.
 add /AngleA exch def 35.  sub 180 add /AngleB exch def 0.67  0.67
 NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180 59
a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@s3s1 /N@s3s1s1 InitNC { yB yA sub xB xA sub Atan dup
-35.  add /AngleA exch def -35.  sub 180 add /AngleB exch def 0.67
 0.67  NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180 59 a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@s3s1s1 /N@s3s1s2 InitNC { yB yA sub xB xA sub Atan dup
-35.  add /AngleA exch def -35.  sub 180 add /AngleB exch def 0.67
 0.67  NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180 59 a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@s3s1s2 /N@s3s1s3 InitNC { yB yA sub xB xA sub Atan dup
-35.  add /AngleA exch def -35.  sub 180 add /AngleB exch def 0.67
 0.67  NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180
59 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial -506 1083 a FK(This)f(is)g(a)g FI(left)j(to)g(right)e
FK(traversal.)865 -37 y


 gsave nulldevice


 865 -37 a


 grestore


 865 -37 a


 gsave nulldevice


 865 -37 a


 grestore



865 -37 a


 gsave nulldevice


 865 -37 a


 grestore


 865 -37 a


 gsave nulldevice


 865 -37 a


 grestore


 0 TeXcolorgray
0 TeXcolorgray 1061 896 a @beginspecial 71 @llx 619 @lly
211 @urx 721 @ury 1400 @rwi @setspecial
%%BeginDocument: breadth-first_2.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: breadth-first_2.dvi
%%CreationDate: Mon Aug  6 13:13:48 2018
%%BoundingBox: 71 620 215 721
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o breadth-first_2.ps breadth-first_2.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2018.08.06:1513
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 698 2017-12-30 19:08:50Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.28, 2017/12/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin 40258437 52099154 1000 600 600 (breadth-first_2.dvi)
@start end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray 0 59 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 0 59 a 0
59 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 59 a 0 59 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 0 59 a 0 59 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 59 a 0 59 a
tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 59 a
0 827 1180 827 v 1180 59 a
currentpoint grestore moveto
 1180 59 a -678 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 502 59 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@Broot true /N@T-0
11 {InitCnode } /NodeScale {} def NewNode end  end
 502 59 a 207 295 a
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 207 295 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@Bs1 true /N@T-0-0
11 {InitCnode } /NodeScale {} def NewNode end  end
 207
295 a 207 295 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0 /N@T-0-0 InitNC
{ NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 207 295 a 59 531 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 59 531 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@Bs1s1 true /N@T-0-0-0
11 {InitCnode } /NodeScale {} def NewNode end  end
 59 531 a 59 531 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-0 /N@T-0-0-0
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 59 531 a 295
w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 354 531 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@Bs1s2 true /N@T-0-0-1
11 {InitCnode } /NodeScale {} def NewNode end  end
 354
531 a 354 531 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-0 /N@T-0-0-1
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 354 531 a 502 295 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 502 295 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@Bs2 true /N@T-0-1
11 {InitCnode } /NodeScale {} def NewNode end  end
 502 295 a 502 295 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0 /N@T-0-1 InitNC
{ NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 502 295 a
295 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 797 295
a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@Bs3 true /N@T-0-2
11 {InitCnode } /NodeScale {} def NewNode end  end
 797 295 a 797 295 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0 /N@T-0-2 InitNC
{ NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 797 295 a 236 x @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 797 531 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@Bs3s1 true /N@T-0-2-0
11 {InitCnode } /NodeScale {} def NewNode end  end
 797 531 a 797 531 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-2 /N@T-0-2-0
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 797 531 a
502 768 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 502
768 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@Bs3s1s1 true
/N@T-0-2-0-0 11 {InitCnode } /NodeScale {} def NewNode end  end
 502 768 a 502 768 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-2-0 /N@T-0-2-0-0
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 502 768 a 295 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 797 768 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@Bs3s1s2 true
/N@T-0-2-0-1 11 {InitCnode } /NodeScale {} def NewNode end  end
 797 768 a 797 768
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-2-0 /N@T-0-2-0-1
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 797 768 a 296 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
1093 768 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@Bs3s1s3 true
/N@T-0-2-0-2 11 {InitCnode } /NodeScale {} def NewNode end  end
 1093 768 a 1093 768 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-2-0 /N@T-0-2-0-2
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 1093 768 a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@Broot /N@Bs1 InitNC { yB yA sub xB xA sub Atan dup -35.
 add /AngleA exch def -35.  sub 180 add /AngleB exch def 0.67  0.67
 NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end

1180 59 a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@Bs1 /N@Bs2 InitNC { yB yA sub xB xA sub Atan dup -35.
 add /AngleA exch def -35.  sub 180 add /AngleB exch def 0.67  0.67
 NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180 59 a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@Bs2 /N@Bs3 InitNC { yB yA sub xB xA sub Atan dup -35.
 add /AngleA exch def -35.  sub 180 add /AngleB exch def 0.67  0.67
 NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180 59 a 1180
59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@Bs3 /N@Bs3s1 InitNC { yB yA sub xB xA sub Atan dup 35.
 add /AngleA exch def 35.  sub 180 add /AngleB exch def 0.67  0.67
 NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180 59 a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@Bs3s1 /N@Bs1s2 InitNC { yB yA sub xB xA sub Atan dup
-35.  add /AngleA exch def -35.  sub 180 add /AngleB exch def 0.67
 0.67  NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180 59 a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@Bs1s2 /N@Bs1s1 InitNC { yB yA sub xB xA sub Atan dup
35.  add /AngleA exch def 35.  sub 180 add /AngleB exch def 0.67  0.67
 NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180 59
a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@Bs1s1 /N@Bs3s1s1 InitNC { yB yA sub xB xA sub Atan dup
-35.  add /AngleA exch def -35.  sub 180 add /AngleB exch def 0.67
 0.67  NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180 59 a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@Bs3s1s1 /N@Bs3s1s2 InitNC { yB yA sub xB xA sub Atan
dup -35.  add /AngleA exch def -35.  sub 180 add /AngleB exch def 0.67
 0.67  NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180 59 a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@Bs3s1s2 /N@Bs3s1s3 InitNC { yB yA sub xB xA sub Atan
dup -35.  add /AngleA exch def -35.  sub 180 add /AngleB exch def 0.67
 0.67  NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180
59 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 2329 -37 a


 gsave nulldevice


 2329 -37 a


 grestore


 2329 -37 a


 gsave nulldevice


 2329 -37
a


 grestore


 2329 -37 a


 gsave nulldevice


 2329 -37 a


 grestore


 -458 1101 a


 gsave nulldevice


 -458 1101 a


 grestore


 -458
1101 a


 gsave nulldevice


 -458 1101 a


 grestore


 -458 1101 a


 gsave nulldevice


 -458 1101 a


 grestore


 -458 1272
a FK(Many)e(others)i(a)m(re)g(p)s(ossible,)f(lik)m(e)h(cho)s(osing)g
(randomly)f(the)h(next)f(no)s(de)h(of)g(the)-458 1385
y(follo)m(wing)g(level.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525
TeXcolorrgb 2221 1639 a FJ(46)9 b(/)h(95)p 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 47 47
TeXDict begin 47 46 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation47) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.47) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(T)-10 b(ree)39 b(traversals/Depth-\014rst)p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(Let)31 b(us)f(consider)h(t)m(w)m(o)g(examples)g(of)f
(depth-\014rst)h(traversals.)-458 -133 y


 gsave nulldevice


 -458 -133 a


 grestore



-600 -37 a


 gsave nulldevice


 -600 -37 a


 grestore


 0 TeXcolorgray 0 TeXcolorgray -404
896 a @beginspecial 71 @llx 619 @lly 211 @urx 721 @ury
1400 @rwi @setspecial
%%BeginDocument: depth-first_1.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: depth-first_1.dvi
%%CreationDate: Mon Aug  6 13:13:48 2018
%%BoundingBox: 71 620 215 721
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o depth-first_1.ps depth-first_1.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2018.08.06:1513
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 698 2017-12-30 19:08:50Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.28, 2017/12/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin 40258437 52099154 1000 600 600 (depth-first_1.dvi)
@start end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray 0 59 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 0 59 a 0
59 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 59 a 0 59 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 0 59 a 0 59 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 59 a 0 59 a
tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 59 a
0 827 1180 827 v 1180 59 a
currentpoint grestore moveto
 1180 59 a -678 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 502 59 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@root true /N@T-0
11 {InitCnode } /NodeScale {} def NewNode end  end
 502 59 a 207 295 a
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 207 295 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@s1 true /N@T-0-0
11 {InitCnode } /NodeScale {} def NewNode end  end
 207
295 a 207 295 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0 /N@T-0-0 InitNC
{ NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 207 295 a 59 531 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 59 531 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@s1s1 true /N@T-0-0-0
11 {InitCnode } /NodeScale {} def NewNode end  end
 59 531 a 59 531 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-0 /N@T-0-0-0
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 59 531 a 295
w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 354 531 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@s1s2 true /N@T-0-0-1
11 {InitCnode } /NodeScale {} def NewNode end  end
 354
531 a 354 531 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-0 /N@T-0-0-1
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 354 531 a 502 295 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 502 295 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@s2 true /N@T-0-1
11 {InitCnode } /NodeScale {} def NewNode end  end
 502 295 a 502 295 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0 /N@T-0-1 InitNC
{ NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 502 295 a
295 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 797 295
a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@s3 true /N@T-0-2
11 {InitCnode } /NodeScale {} def NewNode end  end
 797 295 a 797 295 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0 /N@T-0-2 InitNC
{ NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 797 295 a 236 x @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 797 531 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@s3s1 true /N@T-0-2-0
11 {InitCnode } /NodeScale {} def NewNode end  end
 797 531 a 797 531 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-2 /N@T-0-2-0
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 797 531 a
502 768 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 502
768 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@s3s1s1 true
/N@T-0-2-0-0 11 {InitCnode } /NodeScale {} def NewNode end  end
 502 768 a 502 768 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-2-0 /N@T-0-2-0-0
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 502 768 a 295 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 797 768 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@s3s1s2 true
/N@T-0-2-0-1 11 {InitCnode } /NodeScale {} def NewNode end  end
 797 768 a 797 768
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-2-0 /N@T-0-2-0-1
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 797 768 a 296 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
1093 768 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@s3s1s3 true
/N@T-0-2-0-2 11 {InitCnode } /NodeScale {} def NewNode end  end
 1093 768 a 1093 768 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-2-0 /N@T-0-2-0-2
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 1093 768 a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@root /N@s1 InitNC { yB yA sub xB xA sub Atan dup -35.
 add /AngleA exch def -35.  sub 180 add /AngleB exch def 0.67  0.67
 NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end

1180 59 a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@s1 /N@s1s1 InitNC { yB yA sub xB xA sub Atan dup -35.
 add /AngleA exch def -35.  sub 180 add /AngleB exch def 0.67  0.67
 NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180 59 a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@s1s1 /N@s1s2 InitNC { yB yA sub xB xA sub Atan dup -35.
 add /AngleA exch def -35.  sub 180 add /AngleB exch def 0.67  0.67
 NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180 59 a 1180
59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@s1s2 /N@s2 InitNC { yB yA sub xB xA sub Atan dup -35.
 add /AngleA exch def -35.  sub 180 add /AngleB exch def 0.67  0.67
 NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180 59 a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@s2 /N@s3 InitNC { yB yA sub xB xA sub Atan dup -35.
 add /AngleA exch def -35.  sub 180 add /AngleB exch def 0.67  0.67
 NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180 59 a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@s3 /N@s3s1 InitNC { yB yA sub xB xA sub Atan dup 35.
 add /AngleA exch def 35.  sub 180 add /AngleB exch def 0.67  0.67
 NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180 59
a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@s3s1 /N@s3s1s1 InitNC { yB yA sub xB xA sub Atan dup
-35.  add /AngleA exch def -35.  sub 180 add /AngleB exch def 0.67
 0.67  NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180 59 a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@s3s1s1 /N@s3s1s2 InitNC { yB yA sub xB xA sub Atan dup
-35.  add /AngleA exch def -35.  sub 180 add /AngleB exch def 0.67
 0.67  NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180 59 a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@s3s1s2 /N@s3s1s3 InitNC { yB yA sub xB xA sub Atan dup
-35.  add /AngleA exch def -35.  sub 180 add /AngleB exch def 0.67
 0.67  NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180
59 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial -506 1083 a FK(This)f(is)g(a)g FI(left)j(to)g(right)e
FK(traversal.)865 -37 y


 gsave nulldevice


 865 -37 a


 grestore


 865 -37 a


 gsave nulldevice


 865 -37 a


 grestore



865 -37 a


 gsave nulldevice


 865 -37 a


 grestore


 865 -37 a


 gsave nulldevice


 865 -37 a


 grestore


 0 TeXcolorgray
0 TeXcolorgray 1061 896 a @beginspecial 71 @llx 619 @lly
211 @urx 721 @ury 1400 @rwi @setspecial
%%BeginDocument: depth-first_2.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: depth-first_2.dvi
%%CreationDate: Mon Aug  6 13:13:49 2018
%%BoundingBox: 71 620 215 721
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o depth-first_2.ps depth-first_2.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2018.08.06:1513
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 698 2017-12-30 19:08:50Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.28, 2017/12/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin 40258437 52099154 1000 600 600 (depth-first_2.dvi)
@start end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray 0 59 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 0 59 a 0
59 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 59 a 0 59 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 0 59 a 0 59 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 59 a 0 59 a
tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 59 a
0 827 1180 827 v 1180 59 a
currentpoint grestore moveto
 1180 59 a -678 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 502 59 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@Broot true /N@T-0
11 {InitCnode } /NodeScale {} def NewNode end  end
 502 59 a 207 295 a
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 207 295 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@Bs1 true /N@T-0-0
11 {InitCnode } /NodeScale {} def NewNode end  end
 207
295 a 207 295 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0 /N@T-0-0 InitNC
{ NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 207 295 a 59 531 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 59 531 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@Bs1s1 true /N@T-0-0-0
11 {InitCnode } /NodeScale {} def NewNode end  end
 59 531 a 59 531 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-0 /N@T-0-0-0
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 59 531 a 295
w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 354 531 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@Bs1s2 true /N@T-0-0-1
11 {InitCnode } /NodeScale {} def NewNode end  end
 354
531 a 354 531 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-0 /N@T-0-0-1
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 354 531 a 502 295 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 502 295 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@Bs2 true /N@T-0-1
11 {InitCnode } /NodeScale {} def NewNode end  end
 502 295 a 502 295 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0 /N@T-0-1 InitNC
{ NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 502 295 a
295 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 797 295
a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@Bs3 true /N@T-0-2
11 {InitCnode } /NodeScale {} def NewNode end  end
 797 295 a 797 295 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0 /N@T-0-2 InitNC
{ NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 797 295 a 236 x @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 797 531 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@Bs3s1 true /N@T-0-2-0
11 {InitCnode } /NodeScale {} def NewNode end  end
 797 531 a 797 531 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-2 /N@T-0-2-0
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 797 531 a
502 768 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 502
768 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@Bs3s1s1 true
/N@T-0-2-0-0 11 {InitCnode } /NodeScale {} def NewNode end  end
 502 768 a 502 768 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-2-0 /N@T-0-2-0-0
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 502 768 a 295 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 797 768 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@Bs3s1s2 true
/N@T-0-2-0-1 11 {InitCnode } /NodeScale {} def NewNode end  end
 797 768 a 797 768
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-2-0 /N@T-0-2-0-1
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 797 768 a 296 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 7.11317 .5 CLW mul round
sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
1093 768 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 7.11317 } /N@Bs3s1s3 true
/N@T-0-2-0-2 11 {InitCnode } /NodeScale {} def NewNode end  end
 1093 768 a 1093 768 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-2-0 /N@T-0-2-0-2
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 1093 768 a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@Broot /N@Bs3 InitNC { yB yA sub xB xA sub Atan dup 35.
 add /AngleA exch def 35.  sub 180 add /AngleB exch def 0.67  0.67
 NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end

1180 59 a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@Bs3 /N@Bs3s1 InitNC { yB yA sub xB xA sub Atan dup 35.
 add /AngleA exch def 35.  sub 180 add /AngleB exch def 0.67  0.67
 NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180 59 a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@Bs3s1 /N@Bs3s1s3 InitNC { yB yA sub xB xA sub Atan dup
35.  add /AngleA exch def 35.  sub 180 add /AngleB exch def 0.67  0.67
 NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180 59 a 1180
59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@Bs3s1s3 /N@Bs3s1s2 InitNC { yB yA sub xB xA sub Atan
dup 35.  add /AngleA exch def 35.  sub 180 add /AngleB exch def 0.67
 0.67  NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180 59 a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@Bs3s1s2 /N@Bs3s1s1 InitNC { yB yA sub xB xA sub Atan
dup 35.  add /AngleA exch def 35.  sub 180 add /AngleB exch def 0.67
 0.67  NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180 59 a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@Bs3s1s1 /N@Bs2 InitNC { yB yA sub xB xA sub Atan dup
0.  add /AngleA exch def 0.  sub 180 add /AngleB exch def 0.67  0.67
 NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180 59
a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@Bs2 /N@Bs1 InitNC { yB yA sub xB xA sub Atan dup -20.
 add /AngleA exch def -20.  sub 180 add /AngleB exch def 0.67  0.67
 NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180 59 a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@Bs1 /N@Bs1s2 InitNC { yB yA sub xB xA sub Atan dup 35.
 add /AngleA exch def 35.  sub 180 add /AngleB exch def 0.67  0.67
 NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180 59 a 1180 59 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@Bs1s2 /N@Bs1s1 InitNC { yB yA sub xB xA sub Atan dup
35.  add /AngleA exch def 35.  sub 180 add /AngleB exch def 0.67  0.67
 NCCurve  } if end  gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1180
59 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 959 1083 a FK(This)f(is)g(a)g FI(right)j(to)g(left)d
FK(traversal.)2329 -37 y


 gsave nulldevice


 2329 -37 a


 grestore


 2329 -37 a


 gsave nulldevice


 2329 -37
a


 grestore


 2329 -37 a


 gsave nulldevice


 2329 -37 a


 grestore


 -458 1101 a


 gsave nulldevice


 -458 1101 a


 grestore


 -458
1101 a


 gsave nulldevice


 -458 1101 a


 grestore


 -458 1101 a


 gsave nulldevice


 -458 1101 a


 grestore


 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(47)9 b(/)h(95)p
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 48 48
TeXDict begin 48 47 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation48) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.48) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bina)m(ry)37 b(trees)p 0.2 0.2 0.7 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray -458 -250 a FK(In)30 b(o)m(rder)i(to)f
(simplify)-8 b(,)29 b(let)i(us)f(consider)h(here)g(trees)g(with)f(t)m
(w)m(o)i(direct)e(subtrees.)-458 -137 y(They)g(a)m(re)h(called)f
FI(bina)m(ry)k(trees)p FK(.)42 b(W)m(e)31 b(do)f(not)h(lose)g
(generalit)m(y)g(with)f(this)-458 -24 y(restriction:)41
b(it)30 b(is)f(alw)m(a)m(ys)i(p)s(ossible)e(to)i(map)f(any)g(tree)h(to)
g(a)f(bina)m(ry)g(tree)h(in)f(a)-458 89 y(unique)g(w)m(a)m(y:)41
b(the)31 b FI(left)i(son,)h(right)f(b)m(rother)f FK(technique:)p
0 TeXcolorgray 0 TeXcolorgray -113 1331 a @beginspecial
71 @llx 584 @lly 317 @urx 721 @ury 2460 @rwi @setspecial
%%BeginDocument: left_brother.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: left_brother.dvi
%%CreationDate: Mon Aug  6 13:13:49 2018
%%BoundingBox: 71 584 332 721
%%DocumentFonts: CMR10 CMSY10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o left_brother.ps left_brother.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2018.08.06:1513
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 698 2017-12-30 19:08:50Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.28, 2017/12/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 33 /arrowright put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
AF3863EE8A24A003F07FBF0DFBC12CF2625CE95B5F1C575C28144E1D3C8CF5D7
6D071DB7562414E228147876D452804B3142DCDCAB22773DE75726823F1BB198
1C1CA8D89B59FF008B054F0322A543DBCCABA518AB9945020DF8C049A6E112C5
3F67BB74E95B7EB282BEF7147BF40C5A3FD4BA839B17CD431691921679ADB9E1
D6EAD8E8C273099E6E5746323C92B16886E33009706CDBC81FF7B5D5BB611934
7A047DB498E7ACFA77102D761F64D98C3135AC26A5ACCEDE71455F41425652A2
826AA82257415492A460656D594FBACA8287CE1A05D465E3E56A04812DA0F2F9
4F98E3144143B33514889C255204901EEA0A8F480070082F18DA981E95E09E12
DC0073FCD7E6242C22B24827EF073C7957B719561D5B040B3840EE3404BC0F42
78313EE13A9F086DC6D26670F347DBEAC0517DA350EB73A1C5D869E144A15D7F
EB8D39EDD1190AF018AAA72EC88E86CE63B5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E70CD6C3A70E612D90472C3FE345B5EEC8BB0B9B743486E0A3C688F3AB16BC0F
31984C055AC823DF21A5EEBA2B0723A52F65CB925BDA5C182F657BFF483CFC9E
1D0D4D02C511580BA2788C932D6C9CDF821CE5A87CD929283CE90F64203BE13F
70E16F9FECB42418BEBA175470843F85B54768299853577796D136C5C3EB9E38
3F860567CD4729AAF9B80ECC6BFEBE25392DD3720C587796C7932CD4D6AC1263
C46953DAED7A0061A540F22CB81BC3816E6267EAF272ADCD6196E6FDF82F6D92
A3F11C7EA1FEE81E07AD6ED1D2D72D9F57A11CDC27CCFF840792065DE796F5C3
BA6E6CD5AA138B168C23814295B0BCA19AAC35524B5C1B8CFA5229C6CA9C8BB7
B082707B2B06C93037B06DD775397C844678989C902067EC814CCC3E5A5BA3EC
EE5920BBAFFF7CBB603DE772DED3D1ABF4E5EDAABB95B187A4643893395C4BB1
75F1BBD94774EB71799DADD1A6BE6D49998860482B626C62849BB0B056B9A633
9D5B4AFAE1B7D87F43426B6437127406DFBCA4B2CB226B7B79D0C98F360AA384
A8CDF19D5E0F6F21CC05DA1CE1392F29895BE53E4212079FB2A579A5038A6C4D
C8807DF5F6C137D67B87CB0EB1B57A12A01938185F1DEE52D5F739D1CFDD9459
D56F70F74EE43CD621EC0332FA04C6BE2BB3D65C4B163F6474C4EFE61F9F8E88
832737186037F9E5AB161B8A23395D3A6E168B7BC85A1F6D3F7CDA424750AF82
61DD0D6D0FACC20C8DEDDE1923AAFFB416FB3029ADCFE6F26BBCBCAB0832EF07
3E3505C3EBA20AC324DEB562336583AD867FDE092F721A2EE6D3DE9636A134F6
3E238F4033FE4B56D74AD399FE6C8B585758BFE6AFFB473C9A97C6FFE58460C8
F3EEB5DA8E4B3F9DA87979FA4F2C4F6A7635B85ECFF0EDC53F9BA05CCDC30EE7
35024EC60AB475EAE8B46CA1410D0816204A12944A21069ED4EB4830E59FBBCF
FA19B1E38BD1C2DCE2D5EDC292154DADB720531BABB5B624D8D3CEB7C2BFEBDE
0EA978F8FADAC13FEAF57217EC5D2C4770A8B1388B46CCD4C8D2B5A8AEEF6559
03067A93D659C3717828BD648CCDA44DB60FBDB1ED05D82BA5229E9F8D2355BD
D4CDC2A6113B52EE646AEC03D8E6C92E6E77728539C29DA1F2D33041FFA0E960
FED469EF4E794EF6D6327F1ED1D68B7B80E19E6AEE1FE8A40081B4B0676C7D75
D2C19E88CF11D2E7FBC549DC3387603AFB76B55C1042126505FBFDA3A475C00B
649A6C2FA176A52C29604D8FB9559C0599CAE7CA46CF48FC3EF31FEE063BF60E
C48EA9B1D5A152AAC15051734980ED71CA2EB6E3606CD3FDBB6EFEAED5C16287
F5EAF34410957434E3D15B0899D7284AF8F1FCCD4C369F352A2D1AB2DC654D61
B3CD3760AAE7D6885411FA073320908E23E6C11A20D39617FBEBFCD27897E296
0E90654BFB6FEF2564EC53FD3200E3E2CEA43586D0F26F36D5E1DE014DE7ED85
AB509440C4F793A19108FC8003FC80D50F7278EA5B19359EBAB21B31881461F1
1238EADD3C52B5C678237AA1DE5D9A44BE33E6068F1CFFD8AA1376F86BCDDE43
D201ABFAA1090D2AE9E9CA2B03FD2EA234E00566867ED392A4BEF58F8FDB28D7
5815EF56AEA5655396E2314C8557B079A52F49620B2A218A37BD6463CD1B6A1A
00F4AF9BBBA9729E09CF11A209D4628849545E82576A52D9FCB48F415D2B5762
72388C63D6DA726575AF61E46B6766232FFABAD9A3335AC654B197ED82B4592F
80217EFCCD5954FE7296B4EE1FDCB00C7CB6A3C3248E6D9AC4F9197408CD197C
964C69CAB93CF7CF0E9C2A44AB370767A9A571CA9CB3CA3899EAF2777E17F748
C2211C27B5800AD6DB3077F53440852466191B8843CD34F5201530DC2441FE49
3B126404F727691C40EFFE9DE182B74CD6FB090AB210BEBFD2F6B0235367EE05
11118935133FC4D9CF293B2A872B82D0B944B009E616F2E31213589679305D1E
C335DE1CEE0F4B7DE90C46629BB150E8432686704E644913513BCF183BF33AA9
CCD0155EE68D9882CCDF43AB28F47ECAB23639E2117C7CCF03DD873A17A1C957
E98D6CB3387EEA5CBC86B7C78C6526972C2009D0557254AED132571FF627A207
7B25F44038222B2C43D7BA63986E7CDE0DB2F2002DF4449B4754B0313DAF698B
540B09198B0B0BFA69F740DD8E51BCE8C4E033B2502F27741CECA6F2956B5CAA
85EAF84BD2C6A3AB31B67516448B2140C788484F9EEEF31956E5F400ED7A8C2E
A01187DAAF26827BDADA9615D2342C267DDA6B83E8358B0AB71C753ECE81A8C0
221B8135088298E4FA6967D4DAA8FC375F20E8B408842E5A6E30DD03E76D7AAC
3BF716C37D2FECA4FF61C7A1F6D8FE05996B7B1C91FBD27DA4F91F0FC5186B43
A5AC4EDAFE7D19370372822D4911B16F2F5AA2BC7C5343571022849F57E7EE25
E634F09FBB606BC4B915A7509D261E5615D32A169C52DD1460AF7C8E63492F89
990CDA6FCF3FA6455DA57DCAF45B3BB0491BDF5865177167953E1ED66E41F5F4
55825087C453E90143DF30906754F66E39DEAF8CDA90559184B042E1BE0AADC3
751CDCF94C7CED2168E132B6902C4B7DA1AC6EEAED555E736223F3A572EC5A5B
592C7A47CF3019A76E29317EA0DBFF8109886FBDBC787698B505E339A5DDA661
18952D478CCE65F43F7E8DE22E4FDA8147D3F6849F6925D82494D5D2B9C1ED81
910567878C588E2A6E9D553651627C19063298DE2F9D0CAC5052E5C0C993B948
FE773ACAD1148A25BD740437423455C0EDD739052B4793B4B794F254F2DFC2FB
00380D7E84A734283572B5EB572B55516D6547A509B8DBF897EE28FD2C6E14F5
C827C8BEC1447B51BC70CC6AEEDFC456AD12D12B8752F45E586E954AE9786A69
DC6679F78E37A5852FFCFD562ABDBB1A69F02ECB23EC761F5A2292B47AA03983
8D6763946166B35E8C66293092F4BBED6DFD802460849976EFBE228AC98ACEEE
FCA893AF7F867DEE83B5A6E6C58F01F7DD54B6338C53ECA5075FE98527102C21
1F954A1547C7BC8A3FD9F081750DBBD80800CF793EACF68754F9A2E353BACC1F
039561724C6FCCC12F6A85F09352C1C57D50B47E88DD52D0BD8B6121922F6927
087021E78DD06347F5129C45FE6FC0A72001CC8044C43EE9B28845B2F668E861
72DEA251E7E8C927EB17191C6D1AC71B3E78032D720C4AF6ACF1C89F07870452
C129481A6C100427FE9DC88DCDF0F92AF7A0AAE31DFE13A8880D9DFBF9D699A1
0CDB18BF22BF7C52BDC1BE9A2C8A2BF486AD6AD5AA62C94A3A1A1A593AC5C4DC
B2579011F94D5E42B8CA53FD7721F6C69C3BB29879056F17D887DBE264B45CAC
F5DB64744E371E2051F403E8A14B3F9B0BB4618C26570919559ED1C7CDC04532
276514615E3FFCA6315FF7AE937B3892258A054B69C0CB24EDA3918685B27415
170ABAFC74267324C0A954A3354D04526894D323BA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (left_brother.dvi)
@start /Fa 222[83 32[65{}2 83.022 /CMSY10 rf /Fb 199[42
42 42 42 42 42 42 42 49[{}8 83.022 /CMR10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray 0 66 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 0 66 a 0
66 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 66 a 0 66 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 0 66 a 0 66 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 66 a 0 66 a
tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 66 a
0 1124 2162 1124 v 2162 66 a
currentpoint grestore moveto
 2162 66 a 354 93 a
tx@Dict begin  tx@NodeDict begin { 5.00002  2 div 6.44444  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0 11
{InitCnode } /NodeScale {} def NewNode end  end
 354 93
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray    5.00002  2 div 6.44444  0.0  add 2 div 2 copy
0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360 arc closepath gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial Fb(1)45 258
y
tx@Dict begin  tx@NodeDict begin { 5.00002  2 div 6.44444  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0
11 {InitCnode } /NodeScale {} def NewNode end  end
 45 258 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0 0 1  setrgbcolor    5.00002  2 div 6.44444  0.0  add 2 div
2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360 arc closepath
gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fb(2)66
231 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0 /N@T-0-0 InitNC
{ NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 66 231 a 45 423 a
tx@Dict begin  tx@NodeDict begin { 5.00002  2 div 6.44444  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-0
11 {InitCnode } /NodeScale {} def NewNode end  end
 45 423 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray    5.00002  2 div 6.44444  0.0  add 2 div 2 copy
0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360 arc closepath gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial Fb(5)66 397 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-0 /N@T-0-0-0
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 66 397 a 354 258 a
tx@Dict begin  tx@NodeDict begin { 5.00002  2 div 6.44444  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-1
11 {InitCnode } /NodeScale {} def NewNode end  end
 354 258
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0 0 1  setrgbcolor    5.00002  2 div 6.44444  0.0  add 2 div
2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360 arc closepath
gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fb(3)375 231
y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0 /N@T-0-1 InitNC
{ NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 375 231 a 663 258 a
tx@Dict begin  tx@NodeDict begin { 5.00002  2 div 6.44444  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-2
11 {InitCnode } /NodeScale {} def NewNode end  end
 663 258 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0 0 1  setrgbcolor    5.00002  2 div 6.44444  0.0  add 2 div
2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360 arc closepath
gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial Fb(4)684 231 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0 /N@T-0-2 InitNC
{ NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 684 231 a 509 423 a
tx@Dict begin  tx@NodeDict begin { 5.00002  2 div 6.44444  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-2-0
11 {InitCnode } /NodeScale {} def NewNode end  end
 509 423
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0 1 0  setrgbcolor    5.00002  2 div 6.44444  0.0  add 2 div
2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360 arc closepath
gsave 0.8 SLW 0 1 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fb(6)529 397
y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-2 /N@T-0-2-0
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 529 397 a 818 423 a
tx@Dict begin  tx@NodeDict begin { 5.00002  2 div 6.44444  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-2-1
11 {InitCnode } /NodeScale {} def NewNode end  end
 818 423 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0 1 0  setrgbcolor    5.00002  2 div 6.44444  0.0  add 2 div
2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360 arc closepath
gsave 0.8 SLW 0 1 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial Fb(7)838 397 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-2 /N@T-0-2-1
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 838 397 a 817 589 a
tx@Dict begin  tx@NodeDict begin { 5.00002  2 div 6.44444  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-2-1-0
11 {InitCnode } /NodeScale {} def NewNode end  end
 817 589
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray    5.00002  2 div 6.44444  0.0  add 2 div 2 copy
0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360 arc closepath gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial Fb(8)838 562
y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-2-1 /N@T-0-2-1-0
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 838 562 a 1084 66 a Fa(\000)-14 b(!)1778 93 y
tx@Dict begin  tx@NodeDict begin { 5.00002  2 div 6.44444  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0 11
{InitCnode } /NodeScale {} def NewNode end  end
 1778
93 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray    5.00002  2 div 6.44444  0.0  add 2 div 2 copy
0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360 arc closepath gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial Fb(1)1627
258 y
tx@Dict begin  tx@NodeDict begin { 5.00002  2 div 6.44444  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0
11 {InitCnode } /NodeScale {} def NewNode end  end
 1627 258 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0 0 1  setrgbcolor    5.00002  2 div 6.44444  0.0  add 2 div
2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360 arc closepath
gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
Fb(2)1648 231 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0 /N@T-0-0 InitNC
{ NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 1648 231 a 1443 423 a
tx@Dict begin  tx@NodeDict begin { 5.00002  2 div 6.44444  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-0
11 {InitCnode } /NodeScale {} def NewNode end  end
 1443 423 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray    5.00002  2 div 6.44444  0.0  add 2 div 2 copy
0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360 arc closepath gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial Fb(5)1464 397 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-0 /N@T-0-0-0
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 1464 397 a 1811
423 a
tx@Dict begin  tx@NodeDict begin { 5.00002  2 div 6.44444  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-1
11 {InitCnode } /NodeScale {} def NewNode end  end
 1811 423 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0 0 1  setrgbcolor    5.00002  2 div 6.44444  0.0  add 2 div
2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360 arc closepath
gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
Fb(3)1832 397 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-0 /N@T-0-0-1
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 1832 397 a 1962 589 a
tx@Dict begin  tx@NodeDict begin { 5.00002  2 div 6.44444  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-1-1
11 {InitCnode } /NodeScale {} def NewNode end  end
 1962 589 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0 0 1  setrgbcolor    5.00002  2 div 6.44444  0.0  add 2 div
2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360 arc closepath
gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fb(4)1983 562 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-0-1 /N@T-0-0-1-1
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 1983 562 a 1811
754 a
tx@Dict begin  tx@NodeDict begin { 5.00002  2 div 6.44444  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-1-1-0
11 {InitCnode } /NodeScale {} def NewNode end  end
 1811 754 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0 1 0  setrgbcolor    5.00002  2 div 6.44444  0.0  add 2 div
2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360 arc closepath
gsave 0.8 SLW 0 1 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
Fb(6)1832 727 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-0-1-1 /N@T-0-0-1-1-0
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 1832 727 a 1962 919 a
tx@Dict begin  tx@NodeDict begin { 5.00002  2 div 6.44444  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-1-1-0-1
11 {InitCnode } /NodeScale {} def NewNode end  end
 1962 919 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0 1 0  setrgbcolor    5.00002  2 div 6.44444  0.0  add 2 div
2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360 arc closepath
gsave 0.8 SLW 0 1 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fb(7)1983 893 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-0-1-1-0 /N@T-0-0-1-1-0-1
InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 1983 893 a 1811
1085 a
tx@Dict begin  tx@NodeDict begin { 5.00002  2 div 6.44444  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0-0-1-1-0-1-0
11 {InitCnode } /NodeScale {} def NewNode end  end
 1811 1085 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray    5.00002  2 div 6.44444  0.0  add 2 div 2 copy
0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360 arc closepath gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
Fb(8)1832 1058 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-0-1-1-0-1
/N@T-0-0-1-1-0-1-0 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
 grestore end
 1832 1058 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb
2221 1639 a FJ(48)9 b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 49 49
TeXDict begin 49 48 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation49) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.49) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bina)m(ry)37 b(trees/Signature)p 0.2 0.2 0.7
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray -458 -250 a
FK(Let)31 b(us)f(fo)m(rmally)g(de\014ne)h(a)f(a)g(bina)m(ry)g(tree)h
(and)f(call)g(it)f FH(Bin-tree)p FK(\(no)s(de)q(\),)-458
-137 y(where)i(no)s(de)g(is)e(the)i(t)m(yp)s(e)f(of)h(the)f(no)s(des.)
41 b(Here)32 b(is)e(the)g FI(signature)p FK(:)p 0 TeXcolorgray
0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb -367 -9 a FG(\017)p
0 TeXcolorgray 0 TeXcolorgray -276 1 a FI(P)m(a)m(rameter)j(t)m(yp)s
(es)p 0 TeXcolorgray 0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb
-182 130 a FF(\017)p 0 TeXcolorgray 0 TeXcolorgray -95
142 a FE(The)27 b(t)n(yp)r(e)h(no)r(de)f(of)h(the)f(no)r(des.)p
0 TeXcolorgray 0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb
-367 286 a FG(\017)p 0 TeXcolorgray 0 TeXcolorgray -276
296 a FI(De\014ned)34 b(t)m(yp)s(es)p 0 TeXcolorgray
0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb -182 425 a FF(\017)p
0 TeXcolorgray 0 TeXcolorgray -95 437 a FE(The)27 b(t)n(yp)r(e)h(of)g
(the)f(bina)n(ry)h(trees)f(is)h(t.)p 0 TeXcolorgray 0
TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb -367 582 a FG(\017)p
0 TeXcolorgray 0 TeXcolorgray -276 592 a FI(Constructo)m(rs)p
0 TeXcolorgray 0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb
-182 721 a FF(\017)p 0 TeXcolorgray 0 TeXcolorgray -95
733 a FD(Empty)23 b FE(:)g(t)-95 833 y(The)k(constant)g
FD(Empty)i FE(is)e(the)h(empt)n(y)f(tree)h(\(it)g(is)f(a)h(constant)e
(function\).)p 0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb
-182 920 a FF(\017)p 0 TeXcolorgray 0 TeXcolorgray -95
932 a FD(Make)e FE(:)f(no)r(de)18 b FF(\002)g FE(t)g
FF(\002)g FE(t)23 b FF(!)g FE(t)-95 1032 y(The)k(tree)h
FD(Make)p FE(\()493 1030 y Fw(n)538 1032 y Fy(;)14 b
Fw(t)605 1044 y Fn(1)646 1032 y Fy(;)g Fw(t)713 1044
y Fn(2)754 1032 y FE(\))28 b(as)g(ro)r(ot)1085 1030 y
Fw(n)1157 1032 y FE(and)g(subtrees)f Fw(t)1650 1044 y
Fn(1)1719 1032 y FE(and)g Fw(t)1902 1044 y Fn(2)1944
1032 y FE(.)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(49)9 b(/)h(95)p
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 50 50
TeXDict begin 50 49 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation50) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.50) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bina)m(ry)37 b(trees/Signature)h(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(Let)31 b(us)f(sho)m(w)h(some)g(examples)g(of)f(tree)h
(construction:)558 -77 y Fj(Empty)p 1702 -54 4 79 v 1149
w Fi(?)p -371 -50 2566 4 v 262 116 a Fj(Make)p Fx(\()p
FB(n)511 126 y Fh(1)548 116 y Fg(;)11 b Fj(Empty)p Fg(;)h
Fj(Empty)o Fx(\))p 1702 140 4 191 v 797 w @beginspecial
71 @llx 701 @lly 91 @urx 721 @ury 200 @rwi @setspecial
%%BeginDocument: n1.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: n1.dvi
%%CreationDate: Mon Aug  6 13:13:50 2018
%%BoundingBox: 71 699 93 721
%%DocumentFonts: CMMI10 CMR7
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o n1.ps n1.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2018.08.06:1513
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 698 2017-12-30 19:08:50Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.28, 2017/12/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMR7
%!PS-AdobeFont-1.0: CMR7 003.002
%%Title: CMR7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR7 known{/CMR7 findfont dup/UniqueID known{dup
/UniqueID get 5000790 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR7 def
/FontBBox {-27 -250 1122 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR7.) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB981ABA2ACC9A23A5
3E152596AF52983541F86D859FC064A0E3D5FC6647C3CAB83AD4F31DDA35019C
CDB9E3DD3FEBD4C2B36BA3CF6E6C7DA85E25D8A31A9BAD39BDF31FD0D1790707
9DE6A078E8A409D8295F642DF492AC4F86AC84383B0F4C6BAA7C22AD5A898A71
D6CB34D2CD12266C486B75E75A69C14819DD9BB8159088E04D4717E576B8482D
BDA52110AC8B8A80E4E9D58F470EEBD3CF44A1E1EE8DA318FFF3611B02534FC9
F4018C7C57E80570D2F634D98BE5D5EC6D95051157F0EA94A3D12BE0B4B79939
F82F8D73136D3337C44E314B0B16CB030D9A12E01FB667105F334C3EE965E5A3
D410D2F1531547A4497C355AEEB295CD3C5334BEE5232992960B757594B89F3E
52095042DBE6B4DA3C3AD50CA95EA9EBADA10630B500CF1FCCA7D60306743681
7E428D33B7F7C40B425CD58E4CD8AB474BCE6A307BC6C6EBC15A8A96E0E2977E
A33389154536F5C5D8CF036D07F24094E779E5ACBE5502C92892F10F4C6DB627
C7EC4C7BF20B39418A8A85D7FD9B0EAAFD871DDD41F93BDE5FE619AFB8711824
DE890E62C1969A6FE28DD3578AF43D58A728FAFF0B9FAA640962C8F35A26F76C
67F3548D6DB54A25CEB368B47F97EA2B0C4D7C0E7894A4F0C823C6C1922CF9DC
10E05600556F1C7C9AFB33A2DB6F8730F70D6BF94B1FB0887451F2FFEEF3584F
DFADCFA9A2D4846B8F0E51620E1327D994CDF973B837D10C90FF76DE22B47CD5
EE3183898D156861AB4DFAD34A1E3FA260B8164E6680BF58413A553E88F6100B
C4F4E8E972C81A5F88A7DBCDC308B4C3581BCDE13877B976B1F84330839FE5CF
C78551620EB803DF94A5C921F8EE24F7EF8FC4C3E1653514212631F54F90E3DC
E9EAF96E998F340C4F729ECF7AB430FDB7C0BE3DF2C0D23015820E28B743CAD7
7F0AE95413C3EEABBC69E852F53EE1DC260D7F1E712BECEF2F18437DB23D8E74
2902AAFBC733AC5BAA452DD6F3671859AD836C8564E99CDC4183D8495AFD99D6
1F0D65B6588CE7546717911E25BDCA6C2649E3A7466A3E2DA7C7994A30AB4449
672EFD00632EFA8629C1AFB7D53D801028F77C864869FE636213A69173003EA6
BE1ABA95EB07B13D1594BEFCC95ECB0A9CFA9892EE0677D6B6C250855762B7A7
8E4E022640F93169DFA0303A0D5E73BF3E0F4D4AAD10FD7E4EB20532BA30371F
E9F480F9513432946F9828AFB5D4AEAFA5829B2CB544E5EB634C4537EF7DF08A
A1CFD94A52DCF0E7CE4C5EFFB01E6D50558B75DB4C8D5512B06080F27BE62E01
2EEA6A0357441401458C842D3DD4C35B8F561D816B336216CE0C14BF77648AF5
E33912CF95872A1E1AB9A18980A0B29A881D13397C15E1CBA5D3E0B27943EBE2
F3003D15EB446BCFC1C231832475D5B7AA19E4CFDE119D6CD62D053C6D29C333
5F729791D17B3F7108074EEF4D1BD101CB33E01004532CB0D716D2E54D169C6E
80163E70C0E9081F31A1ECBAE079D2A518B790B0CB2CD03DFD034A0F4788E800
B0CD2DC1FAFDD487C2F381EBAB2A2F3F3AF82021B211DC9CD2FBA6A1BB3D4AEA
4C7F3D9A5C21DFF284CCB827D205A69638E98D5DD8E36AFC1A4481B5CB2A2E8F
D6C838DA6F81990F5ED928DC7457501B5C979FF4CD20A830896A460C5DB13D56
A3B2B5D9B292374A9BF392894DD99FCD6A1E655AB395E839F074D1596488700C
4E2891C8AEEF66568E82A8B826F9A28FF84D4D9BDA21F638EAF96880B4EBE0D8
081982F34831A03BEE81FC177700C2360D2A48915EC40D5FE85B400E175D5AF1
067FA0097904FB647757BB44B4042D30D1557BD0F7922D731142FD682139CEB7
58CA4C8C240A0B86B1888CACC507E24E04020BF1882BD9B4CAECFA97DB24D7F5
AD64C69454027F198BA35881B94EE9159A2D73E450C3BDAED66B886D6DEBC84B
653E165176228F88993F12A170775A8D7038BDF2FE8DC1F7B98BDC02D1E6686E
9B834F6C0AD90780B17DFE25F0A4E470CBA84E73F2D22BEE09A040F14CFA2C14
0FDA5A5149B5FAFFE49F55EEFC43831BC43A8326FEE9C7F469C0FC3B000884FA
41DA7318EB57262CB96FC4EC7F16CA07FE1C3BE8C2DBC8A8135953D6DDF20BDF
75A2B6D26074FCE752BD32FB9F5CA797775E8DB9BB9786B469A3CD65A0D9DDDA
C2A166E454A94860EEF5B5C12172DDFC576A03F6E6F8A735FF21A3E9CCB4CAA1
3064893487697986A42CB5888B2B0A79FA3C74E8187BDDF7BEAB884B70B8D4AA
AC6615745AEB906E08BF831CFDE222F58D02B428D55E9D5A3CDE74E42D8A2CB7
E1A3A9439B678AD438793ABBEB72B21C58981DAF3EDCE4BB93D95F4A1E943BBC
B3A012DE92FED4F232A3A7D60CE60B605151F9C7C18A5C653E5D6D15E5B49A63
73E7A339504D0ACC74B8B116EA88C3EBA2CC631AAB29F761E5F062966AD2FD28
7FFE52FA8A115DBE23E471094FFB3CBAFBDF11B7E9058313F2D069B2CE98A962
64645738F02A31E2F2AC11628724034ADBCEE012721EBF0A567893411F950410
B20754A7510D041FFA6144AC9CC46D846B82581F20BBD001D34D9764010824BE
61C30D05E5C5D100A24F1917F01799CF5BC4E50FCECFEA732CB50196825F0E08
8A1EC868C6D4357857EE2957E081A0E4372E31A8ABEF23C3F2EA0FEE57DE4D08
61C570175C41AA0C7A3A579ADF593F18B4AE3782D2552E4E0759C32E059EE741
2D8191E381731769F6648B3581CAF11DAE46471896666F18F02918B0860BDA3C
BD5DE777672447C23C62ACFC2611ED5239D6A266FDA6031EBC5A530C1A2FF7A6
B4380B9A4C877267854AD1F1677CB5433F28894ADF93D39EAB94541A8D232E08
22D082D0951A60F62B87DC028714EC74133A4D65F7D0D1296C0E189C4A42AA98
28E8AE7ECBB9FC8DFABCC6EEB1E9FB06227F90808EF31331CCC5D4C9A6182181
047902DC9FD0444FB94B60FC74F3B677758088CE6A159D940C5CF682335E756A
8BACF06AD7225D49B0002392C889B0FE2C71311D2596F4903D12FA20BA2FFE25
A0804B4BC282929BE31E0F46B34532CB5795A65218CFAE21F390792DA67775C7
B91A2BF4C16DE4F6551DAE3A5827F616BE9040EE6B1008DA2F99A01EF66D697A
6CD1A44E0A15D1F39EA8025E886A68A1E9C334327C7703EE721E497CA924AC90
7723106D913C5ED4BA4FC743CEA8D0F5172526107DA65775C0B1B77179D336C2
9B09B608D80B1A1E87CA1A84A833A00D980D919BFF56F6390E9D5B45E9935CF5
E69D003564462F750F7DCE02DC23CC215A0696B74D8BD3156A392A94F557655E
00BFAA035647568ED66157FACC585E411F7F428569C147DC43F6E4FDE693D0F3
9917BEFEDF61FB980B85515FF6424824E2D995B05CA1E5D3E8BD8D3281DB7CE4
E54923E84058FFC0A8A2C491327D0F87CE4C352B724167CEE224DABA3B95757E
4A419594BE4F92E78BA6D35D4C93D31ECC3134B24A45DC32445725BB044F09A3
AA8C31EFC0A2944ACE2F2CE054CF24DB350FB3C71115518C24BDC0F7E54250AF
9D3378D38480E1CB9029F31570C619A28F065CA4FED5665EDB96712ABEB33B9B
4232C00C1B0215F08D53F7E430887035AC25BEAF06942FD1B6C442253C887AB7
D694C1A6115C8990B4CAF1E81DD1FDDD6B03C00055BE956BE7FD8A4E1049AE69
EDA8593CBA8C4A41E046C689FBBF9F1B64E5856A7FB1C61EC815A56DE2A8ED33
41F370B8203D4E5B19C63AE9E6E0D26F4F3814B5AF48AD30EC9B8402C941FDD9
722FCAFC638FBB835F83DC77F93D367266FA7DFFFCB567EF82B1695AB4D94D09
B18AC041811027229DF431F5CB2BBF6ACCE9D500C8F075A74590641C1A607C56
D2B8624797BCD9C91C3177818691FBB4744EDB6056464A0B95B8D63F7C22309B
82D6126E2057BCC9FE5566D96B7A9B201A09B0D3252A5494C8CA2C8BA8A13C29
37EF2A882D61DA708C279F663D88A8E2999A0F3B6F98C49901A7631BF7708B67
54D0B4C52BF4BE0DA0439E6763A7C9D639AD4092E77B13D3510DAE1475C978AC
796F9B2AAD3BFF35C5A3E19B5E2BF704B3BBDF68CE48BA4FA2496D60E58888EA
28AE12D00E9F0816FAC190590A865BB58569A91BF0345D01230ABA361442006D
BA2C90EC2036BBAB79EBAFC3F217DBD5854C519235F9627A1C3C71D21ED38AEF
0BB40F3B86BB9F09A3F309473D8757AB7E638DC1C59A7F9BCD49DE4107A2E54F
422767FB94048987847205584309397F554744690ACFFDF5902FE5DB355930B8
71863217830DD7A563B0B3A4025ACE75B0E777B4414B62A13B50C54E0E6D47E9
D43BF769B9411B74E1069BF71BA873B4B8973EC9BA492A5DEA58D267872BB246
10AA67B143D0E2223FFB4991E583E629413CC894C3FA4869B72D19CE1A0CEC8C
0FF5E5A3EC1FCB7D3C4289813F0D249A11B55104BD60B2A89BEF44CC77CCDA9A
065B8B83B4F4253AA1D535290DCFAA4773452D110D2B3370F9E2FE5432B54A9E
644EB3BA9BFF62347F376839024CD5EF3C5DFD30F412DD5474B7933E6A1AB63B
4B12F2417C72D0543C26A263AEA53E5BAEBD67E23553A72E949DEC556BEB5D09
C4D7A89B14FE4EC68D0E3E9D65A64B285E53590F418EDA8175113CA375A29930
DDCF4C71ABB26CEB800C2C2B253AC1F53651C88A56ABE5A74F3B54CB4FFDDB92
60AD7272BA25EC2F6FB759AA6E1E7964FB55AD09F4EB25DE45FD01833947BD05
6266AA8ABB7DD792941C7A070FCF3A4636FBF8921C70298D42FE92F079DBA2AD
6149D9CF9EF7264DE6DFCD4429949B15EA90B596340713BD61926DDB2BB23BE8
F9DE38A31620A817420A245946E551463960A8C5C7295E3B3D6A59BCDF5E472A
40B7A2CDDAA43CD8AAFC411D037142579D11054A903E102DF0D0C7B5BB854DBA
F3F086AF991F7F5D5C730F8F9AF213F25786F3EC0E54530FF912F4876FDE16B6
A07D0DC4FC46EC6363BCB68B83ACC448B801EC43FDD2F8BE0E93D809FF81E38E
176AE17C67C85FEA58EC95435434C49A950AA955D8B20989C550AB1F1C31B7FF
99422E1F48FB7D6F327C6DBC4695A03903DB275B94CB39386E46579271870A25
21823E75C377E9D5B46655E8CD8F986372CF8BA846423E26582315A9D19E0BF5
305C32B2A0EAC3ECB275B1D8BE11A37ADF524944219D94EA2C5DBDA768828B6D
775DA8CDB09E0570E4ADDF462EFD8D3FA3F86B1DEECDFFB699AF6507257C1879
16FC615868C2D51F03CD57BA38D42995D9164B257441210084DC409B6EE4C119
0B2E17B0A8D5326DD0010E4A325D5F77BF935693BC90A00A28C7B5F74817DA39
F47A41E32F4F92AA04D30D810F7B1484EB53AD8CFC8CE8928B570314E0F713F8
AF127227190F9C16BB73D2A217FF801C391A29095DA5E4974D137A0CAA7DE702
E20DD4755B1D78739756A5E7EC3542B96AD6844199FFA2F5F2E9C64E2DA4FB2A
ED79869F745C59D235438251BC2E6D26112AAED20E06021D1AB896EE1F1DD2EB
437FBD4A25E42245C5A647493FCC9922E6DD7AF57D5D482921D1CBD6F0F02949
C27777144751C1E72F4EE2BC343D4AE7A8A8758123B54FB1A026144C643651EF
0907A376945E19A8FC7F98A034832A5820A481B0823F980F59623E0511593FEA
BDE6EFBCC0383242CBD4954027B075B21F10472059A480D6E5ED01C3B07461CE
9810251A5C5643EC7403130C2246E8616CEA25EAC7A0076731FEA8CC43BCE3BE
933FCE61067F5FD402E67E2B9DAD954AA77C5BC86BC5E4BCE2ED676D8D8EC7D0
ABC5C86D82180B9D5D7451C71B5149B6B67883578DE9909317928C0A92E3205E
F23015400A1763A6FBF67FDE3318AD2696685A1832FC31CF38589EBC7CA1C818
60D2B2211E04EFCCEA88D9A9082E82951EEB123924A267CB03C48889032F2892
4227E217FA28F87E01CBF27BF1EA60641A4238258CB7AA355908FE36D90F5CAD
FE992D03A33E47CA9AEBEFDA57793F39DC6A9E85D5B289F6B862B35DBCF82E43
5CD6A862F6FFAC36478C384C3BDB0148CB1FEDF55969C776E77917635B5A65EB
F2AD351D21CD3822D43289FE8EB0FED58182997097C7E9F4373553AE1CA92083
EDE3BBE6C3BC7009D15AB5FEC6A59E9FD1BCC7B2099CA15FEF083B9CBF7B890E
CDDDE6BA0AFF306C76500C945DC91BD533FF9A585CEEDEF79238C54E6168001E
26FEB29E523EE501BFA4F60B782B1499B07084C35A2434B4D29D3D8E2C8F945F
A9922443B68D07DF7EAA1F4CDEFFC438B597D8943E231B5216808A85F30EDC81
9DF5DD22F54A45335B4C2203887475F39D247F0E7347BACFEAF220ED82F9263A
6488E73C1910023E505FDEB143006C1A351D441AC57F9D52D2C6D63D78C75605
999885676BBBAD56074298E0BFDACBA1830BA58E87F436CC670EE8EB1870154D
72DDBBF3794F8CAAA3F1E11DE29752DD99EAC695838A19BB67A1FA3829B6E0BC
5301610A0351AAA749F456AE31ADD87D6ABADCDD1FB3CE81C3713F48780DF407
530CB284B2AC709F52EE7AD647DEF9FA4D2A867CCEF728F3D40CF34C28D21527
10160B3DAFB5FE16AFC9D36C6EC4021FC189005862082BEA60AC72B63AD27D72
FAF3C2D89DA2648FC4C65104A069212D87144E8533CD86A6D73DC7CD9DBA25CE
7DA53B000266F3871B24663C77723703315C5E4A89DFCDBAB384AE7EB2F455AE
AB191FED406F7F6EC9E5B8276EF5C4CBA041AC7E8BCEC7CAE840154BDCA3232F
15711ABD1E867A434E9787CA0A6D1F197597DA27ED2402CB2D84ED082E8D3A39
81E6EB270DCA4E7A90E2BEBD3CBB3A2BE3CAB926192D7292CC16845B6399A543
BCFD224BB52F21352732DB5154FA3442733066CDC3E186D8AA97CD801DFBE43A
116C86889BE198DA88CA978B8C40ACB67E8F7BA499DE68A6FF0DC72C3D00BA1A
B378B39610F15CA026F95ED8155CE3FFFFA2E2FEB352DBE14CEE1669F2387B70
55B91185FBBED764266215D518716EDA3DFC9E5DB6B148A553E75AE5E38E1CFC
6EF47B314D54CF24BC13856F4F7C976BB91D143DE32FF49BFFC87E17885A1893
BA1B8E441B08EFC04F7D103C1FFBB665194B3D0920473740C55FB1C50EBCF717
A2359B687FCEAD65616EE89A68F8D91AFACAA0B238EE4AF0279AF5BE5294C3DE
A7E1F5E6248C0210E7D40683F04B12A933C746ECB517CF94BBCC6E4CF49AC715
D8005AFECBDFB7A6B417DB8A28F8E9EAF39CEC1CA64DF37A5E66A76C26F721F8
A63B003A040A62F87DCF61B298F960D510BEFA453F118E59E7DE8CA3DD002EF0
127EAF733D5C61B5132348D280F84D159809CC71A3C6F7373BBFD8D6EF715D34
0016DEFF14AA5F960BF1BB9AC304A1823722843547BB4CA5EA4C41C6C2701C8F
7BDC810443F9DF34BA469A3260009B799871BAF8523C8763544DCD0B382D44C5
F75046AFF85F0B5A3188C2EE786CEEE5496A5AF4BCB0B429CAFC403FB983EFE3
61FD9F52ADFC38E07A0FD7BACBA530D2E4DAB2592AA9564843E7E2305047F060
C5FE4243FA8FDF1B5D4F61ACA7850A604FBC6D6970959752695C90F78961B4E2
C8CFA41082B1A37405AABCEE5BA3DC2B9EA76F486117B84728EC6D8AE6379CCB
402C2AA89078EC992C00D53151E9D82C65643F549A572A20F05107A41BE5AC57
8EDE92AE20B05E2D0C98151CC92D5389A675DFE39DF546A33A84A4C534337ADE
B17C34E09145B37CE1EB1D10D42CC8D6E6B127A3809F7202381FDB88D42084CD
0AEAEB8A8288CB56870EA2BE9D0B9DC8291021CA561E2BA388DA3494E433E0EE
5E69DA51D0AC505C9F71562D3E9750F23CF14D2C8ECF0692FBBCB4A92B48B4B0
AA2163A447D5FBE86D961AE4D4251149F11C4BC269E10B48E8C42DC2484EDE87
6540CB8A5EA2494148D09CC9D5014EB73C29368A3945AAA1BA4C17BF640D2A0D
414293480FD600A77D37471828C4645C5A4AC4729F4EA76FC946810B4968EB0A
719D8F3E61D2B740AE9A33E9F02982A13ED4B6ED0C6C4A93A9E9EC045D0CDADF
DC01ABAD0BD95692907C04F06F06F1BF6259C8E71099FB64B4FE263D06C5854B
070C8B864D8ACA6EBF440DE14DA34A2A548C9F1557C70A4D718F4F881707851A
6DCC39BD8791D806F5DE551CDF8612C7EE6707D554CD826CF352CA634FCFAFC7
232F32B3F0EE3D2577915BEB212005E06625FFC9F49383C9C64F51B6541F6AC6
12D2359547103898D05E52CE54B46835
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 110 /n put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D916672480464F7E22
CA6E431FE38D3FC019BDD229E064B72C545C61C6EA55984565CCA88ACB01F744
3B4593CC895A7F8629CAFAAF3113D089D7C8FD6738869572556FCE0E856E1596
D5BC11C6B1236B5E32BD4D91A436E0FCC50950423E0E144F09A1E39FCACDF9C0
E6B4B2F92D812D1E60545566E65178A0F4901E675A6A7BC8B2203E682FB8D792
589F59236E1FB48970B7B7F7FB324A6FAEF708544D05C94B6690FF1F6F453998
3C81D4F19055A44DB457D4320497D7BF4D9B2A4D0EAC0E9FBF401A4EFA8A7D87
AB27297DF783A2CBFCA7E376DB6DCC6C0E2A06D605AA18C458300C8326A0D2E0
1809EB0CB825FD645ACBECAED0CF1CB57CD8142BAF9B0ED752D0C79A56774141
6A211FB7CC2BB4F3637D795646C518DA0A0314D3EB6ECD2B7BC2903546BBBE6F
E358CEB8DC6F8C9C4CD2ECEBCDE2BD8C6292E6E0E6B0B263E8C72E3201513E3F
3F69A023426C4EBF4ADC208D6F34ADE8193CB628567D0E1C0E49258F6B8F13
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (n1.dvi)
@start /Fa 206[33 49[{}1 58.1154 /CMR7 rf /Fb 145[50
110[{}1 83.022 /CMMI10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray 0 82 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 0 82 a 0
82 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 82 a 0 82 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 0 82 a 0 82 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 82 a 0 82 a
tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 82 a
0 164 164 164 v 164 82 a
currentpoint grestore moveto
 164 82 a 38 94 a
tx@Dict begin  tx@NodeDict begin { 10.48848  2 div 4.30554  1.49998
 add 2 div 2 copy 1.49998  sub 4 2 roll Pyth 3.0 add 0.8 add} false
/N@T-0 11 {InitCnode } /NodeScale {} def NewNode end  end
 38 94 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray    10.48848  2 div 4.30554  1.49998  add 2 div
2 copy 1.49998  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fb(n)88 106 y Fa(1)p eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial -371 143 2566 4 v -34 502 a Fj(Make)p Fx(\()p
FB(n)215 512 y Fh(1)252 502 y Fg(;)f Fj(Empty)p Fg(;)h
Fj(Make)o Fx(\()p FB(n)779 512 y Fh(2)816 502 y Fg(;)g
Fj(Empty)p Fg(;)f Fj(Empty)p Fx(\)\))p 1702 525 4 382
v 438 w @beginspecial 77 @llx 678 @lly 112 @urx 721 @ury
350 @rwi @setspecial
%%BeginDocument: n1_n2.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: n1_n2.dvi
%%CreationDate: Mon Aug  6 13:13:49 2018
%%BoundingBox: 71 677 117 721
%%DocumentFonts: CMMI10 CMR7
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o n1_n2.ps n1_n2.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2018.08.06:1513
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 698 2017-12-30 19:08:50Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.28, 2017/12/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMR7
%!PS-AdobeFont-1.0: CMR7 003.002
%%Title: CMR7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR7 known{/CMR7 findfont dup/UniqueID known{dup
/UniqueID get 5000790 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR7 def
/FontBBox {-27 -250 1122 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR7.) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB981ABA2ACC9A23A5
3E152596AF52983541F86D859FC064A0E3D5FC6647C3CAB83AD4F31DDA35019C
CDB9E3DD3FEBD4C2B36BA3CF6E6C7DA85E25D8A31A9BAD39BDF31FD0D1790707
9DE6A078E8A409D8295F642DF492AC4F86AC84383B0F4C6BAA7C22AD5A898A71
D6CB34D2CD12266C486B75E75A69C14819DD9BB8159088E04D4717E576B8482D
BDA52110AC8B8A80E4E9D58F470EEBD3CF44A1E1EE8DA318FFF3611B02534FC9
F4018C7C57E80570D2F634D98BE5D5EC6D95051157F0EA94A3D12BE0B4B79939
F82F8D73136D3337C44E314B0B16CB030D9A12E01FB667105F334C3EE965E5A3
D410D2F1531547A4497C355AEEB295CD3C5334BEE5232992960B757594B89F3E
52095042DBE6B4DA3C3AD50CA95EA9EBADA10630B500CF1FCCA7D60306743681
7E428D33B7F7C40B425CD58E4CD8AB474BCE6A307BC6C6EBC15A8A96E0E2977E
A33389154536F5C5D8CF036D07F24094E779E5ACBE5502C92892F10F4C6DB627
C7EC4C7BF20B39418A8A85D7FD9B0EAAFD871DDD41F93BDE5FE619AFB8711824
DE890E62C1969A6FE28DD3578AF43D58A728FAFF0B9FAA640962C8F35A26F76C
67F3548D6DB54A25CEB368B47F97EA2B0C4D7C0E7894A4F0C823C6C1922CF9DC
10E05600556F1C7C9AFB33A2DB6F8730F70D6BF94B1FB0887451F2FFEEF3584F
DFADCFA9A2D4846B8F0E51620E1327D994CDF973B837D10C90FF76DE22B47CD5
EE3183898D156861AB4DFAD34A1E3FA260B8164E6680BF58413A553E88F6100B
C4F4E8E972C81A5F88A7DBCDC308B4C3581BCDE13877B976B1F84330839FE5CF
C78551620EB803DF94A5C921F8EE24F7EF8FC4C3E1653514212631F54F90E3DC
E9EAF96E998F340C4F729ECF7AB430FDB7C0BE3DF2C0D23015820E28B743CAD7
7F0AE95413C3EEABBC69E852F53EE1DC260D7F1E712BECEF2F18437DB23D8E74
2902AAFBC733AC5BAA452DD6F3671859AD836C8564E99CDC4183D8495AFD99D6
1F0D65B6588CE7546717911E25BDCA6C2649E3A7466A3E2DA7C7994A30AB4449
672EFD00632EFA8629C1AFB7D53D801028F77C864869FE636213A69173003EA6
BE1ABA95EB07B13D1594BEFCC95ECB0A9CFA9892EE0677D6B6C250855762B7A7
8E4E022640F93169DFA0303A0D5E73BF3E0F4D4AAD10FD7E4EB20532BA30371F
E9F480F9513432946F9828AFB5D4AEAFA5829B2CB544E5EB634C4537EF7DF08A
A1CFD94A52DCF0E7CE4C5EFFB01E6D50558B75DB4C8D5512B06080F27BE62E01
2EEA6A0357441401458C842D3DD4C35B8F561D816B336216CE0C14BF77648AF5
E33912CF95872A1E1AB9A18980A0B29A881D13397C15E1CBA5D3E0B27943EBE2
F3003D15EB446BCFC1C231832475D5B7AA19E4CFDE119D6CD62D053C6D29C333
5F729791D17B3F7108074EEF4D1BD101CB33E01004532CB0D716D2E54D169C6E
80163E70C0E9081F31A1ECBAE079D2A518B790B0CB2CD03DFD034A0F4788E800
B0CD2DC1FAFDD487C2F381EBAB2A2F3F3AF82021B211DC9CD2FBA6A1BB3D4AEA
4C7F3D9A5C21DFF284CCB827D205A69638E98D5DD8E36AFC1A4481B5CB2A2E8F
D6C838DA6F81990F5ED928DC7457501B5C979FF4CD20A830896A460C5DB13D56
A3B2B5D9B292374A9BF392894DD99FCD6A1E655AB395E839F074D1596488700C
4E2891C8AEEF66568E82A8B826F9A28FF84D4D9BDA21F638EAF96880B4EBE0D8
081982F34831A03BEE81FC177700C2360D2A48915EC40D5FE85B400E175D5AF1
067FA0097904FB647757BB44B4042D30D1557BD0F7922D731142FD682139CEB7
58CA4C8C240A0B86B1888CACC507E24E04020BF1882BD9B4CAECFA97DB24D7F5
AD64C69454027F198BA35881B94EE9159A2D73E450C3BDAED66B886D6DEBC84B
653E165176228F88993F12A170775A8D7038BDF2FE8DC1F7B98BDC02D1E6686E
9B834F6C0AD90780B17DFE25F0A4E470CBA84E73F2D22BEE09A040F14CFA2C14
0FDA5A5149B5FAFFE49F55EEFC43831BC43A8326FEE9C7F469C0FC3B000884FA
41DA7318EB57262CB96FC4EC7F16CA07FE1C3BE8C2DBC8A8135953D6DDF20BDF
75A2B6D26074FCE752BD32FB9F5CA797775E8DB9BB9786B469A3CD65A0D9DDDA
C2A166E454A94860EEF5B5C12172DDFC576A03F6E6F8A735FF21A3E9CCB4CAA1
3064893487697986A42CB5888B2B0A79FA3C74E8187BDDF7BEAB884B70B8D4AA
AC6615745AEB906E08BF831CFDE222F58D02B428D55E9D5A3CDE74E42D8A2CB7
E1A3A9439B678AD438793ABBEB72B21C58981DAF3EDCE4BB93D95F4A1E943BBC
B3A012DE92FED4F232A3A7D60CE60B605151F9C7C18A5C653E5D6D15E5B49A63
73E7A339504D0ACC74B8B116EA88C3EBA2CC631AAB29F761E5F062966AD2FD28
7FFE52FA8A115DBE23E471094FFB3CBAFBDF11B7E9058313F2D069B2CE98A962
64645738F02A31E2F2AC11628724034ADBCEE012721EBF0A567893411F950410
B20754A7510D041FFA6144AC9CC46D846B82581F20BBD001D34D9764010824BE
61C30D05E5C5D100A24F1917F01799CF5BC4E50FCECFEA732CB50196825F0E08
8A1EC868C6D4357857EE2957E081A0E4372E31A8ABEF23C3F2EA0FEE57DE4D08
61C570175C41AA0C7A3A579ADF593F18B4AE3782D2552E4E0759C32E059EE741
2D8191E381731769F6648B3581CAF11DAE46471896666F18F02918B0860BDA3C
BD5DE777672447C23C62ACFC2611ED5239D6A266FDA6031EBC5A530C1A2FF7A6
B4380B9A4C877267854AD1F1677CB5433F28894ADF93D39EAB94541A8D232E08
22D082D0951A60F62B87DC028714EC74133A4D65F7D0D1296C0E189C4A42AA98
28E8AE7ECBB9FC8DFABCC6EEB1E9FB06227F90808EF31331CCC5D4C9A6182181
047902DC9FD0444FB94B60FC74F3B677758088CE6A159D940C5CF682335E756A
8BACF06AD7225D49B0002392C889B0FE2C71311D2596F4903D12FA20BA2FFE25
A0804B4BC282929BE31E0F46B34532CB5795A65218CFAE21F390792DA67775C7
B91A2BF4C16DE4F6551DAE3A5827F616BE9040EE6B1008DA2F99A01EF66D697A
6CD1A44E0A15D1F39EA8025E886A68A1E9C334327C7703EE721E497CA924AC90
7723106D913C5ED4BA4FC743CEA8D0F5172526107DA65775C0B1B77179D336C2
9B09B608D80B1A1E87CA1A84A833A00D980D919BFF56F6390E9D5B45E9935CF5
E69D003564462F750F7DCE02DC23CC215A0696B74D8BD3156A392A94F557655E
00BFAA035647568ED66157FACC585E411F7F428569C147DC43F6E4FDE693D0F3
9917BEFEDF61FB980B85515FF6424824E2D995B05CA1E5D3E8BD8D3281DB7CE4
E54923E84058FFC0A8A2C491327D0F87CE4C352B724167CEE224DABA3B95757E
4A419594BE4F92E78BA6D35D4C93D31ECC3134B24A45DC32445725BB044F09A3
AA8C31EFC0A2944ACE2F2CE054CF24DB350FB3C71115518C24BDC0F7E54250AF
9D3378D38480E1CB9029F31570C619A28F065CA4FED5665EDB96712ABEB33B9B
4232C00C1B0215F08D53F7E430887035AC25BEAF06942FD1B6C442253C887AB7
D694C1A6115C8990B4CAF1E81DD1FDDD6B03C00055BE956BE7FD8A4E1049AE69
EDA8593CBA8C4A41E046C689FBBF9F1B64E5856A7FB1C61EC815A56DE2A8ED33
41F370B8203D4E5B19C63AE9E6E0D26F4F3814B5AF48AD30EC9B8402C941FDD9
722FCAFC638FBB835F83DC77F93D367266FA7DFFFCB567EF82B1695AB4D94D09
B18AC041811027229DF431F5CB2BBF6ACCE9D500C8F075A74590641C1A607C56
D2B8624797BCD9C91C3177818691FBB4744EDB6056464A0B95B8D63F7C22309B
82D6126E2057BCC9FE5566D96B7A9B201A09B0D3252A5494C8CA2C8BA8A13C29
37EF2A882D61DA708C279F663D88A8E2999A0F3B6F98C49901A7631BF7708B67
54D0B4C52BF4BE0DA0439E6763A7C9D639AD4092E77B13D3510DAE1475C978AC
796F9B2AAD3BFF35C5A3E19B5E2BF704B3BBDF68CE48BA4FA2496D60E58888EA
28AE12D00E9F0816FAC190590A865BB58569A91BF0345D01230ABA361442006D
BA2C90EC2036BBAB79EBAFC3F217DBD5854C519235F9627A1C3C71D21ED38AEF
0BB40F3B86BB9F09A3F309473D8757AB7E638DC1C59A7F9BCD49DE4107A2E54F
422767FB94048987847205584309397F554744690ACFFDF5902FE5DB355930B8
71863217830DD7A563B0B3A4025ACE75B0E777B4414B62A13B50C54E0E6D47E9
D43BF769B9411B74E1069BF71BA873B4B8973EC9BA492A5DEA58D267872BB246
10AA67B143D0E2223FFB4991E583E629413CC894C3FA4869B72D19CE1A0CEC8C
0FF5E5A3EC1FCB7D3C4289813F0D249A11B55104BD60B2A89BEF44CC77CCDA9A
065B8B83B4F4253AA1D535290DCFAA4773452D110D2B3370F9E2FE5432B54A9E
644EB3BA9BFF62347F376839024CD5EF3C5DFD30F412DD5474B7933E6A1AB63B
4B12F2417C72D0543C26A263AEA53E5BAEBD67E23553A72E949DEC556BEB5D09
C4D7A89B14FE4EC68D0E3E9D65A64B285E53590F418EDA8175113CA375A29930
DDCF4C71ABB26CEB800C2C2B253AC1F53651C88A56ABE5A74F3B54CB4FFDDB92
60AD7272BA25EC2F6FB759AA6E1E7964FB55AD09F4EB25DE45FD01833947BD05
6266AA8ABB7DD792941C7A070FCF3A4636FBF8921C70298D42FE92F079DBA2AD
6149D9CF9EF7264DE6DFCD4429949B15EA90B596340713BD61926DDB2BB23BE8
F9DE38A31620A817420A245946E551463960A8C5C7295E3B3D6A59BCDF5E472A
40B7A2CDDAA43CD8AAFC411D037142579D11054A903E102DF0D0C7B5BB854DBA
F3F086AF991F7F5D5C730F8F9AF213F25786F3EC0E54530FF912F4876FDE16B6
A07D0DC4FC46EC6363BCB68B83ACC448B801EC43FDD2F8BE0E93D809FF81E38E
176AE17C67C85FEA58EC95435434C49A950AA955D8B20989C550AB1F1C31B7FF
99422E1F48FB7D6F327C6DBC4695A03903DB275B94CB39386E46579271870A25
21823E75C377E9D5B46655E8CD8F986372CF8BA846423E26582315A9D19E0BF5
305C32B2A0EAC3ECB275B1D8BE11A37ADF524944219D94EA2C5DBDA768828B6D
775DA8CDB09E0570E4ADDF462EFD8D3FA3F86B1DEECDFFB699AF6507257C1879
16FC615868C2D51F03CD57BA38D42995D9164B257441210084DC409B6EE4C119
0B2E17B0A8D5326DD0010E4A325D5F77BF935693BC90A00A28C7B5F74817DA39
F47A41E32F4F92AA04D30D810F7B1484EB53AD8CFC8CE8928B570314E0F713F8
AF127227190F9C16BB73D2A217FF801C391A29095DA5E4974D137A0CAA7DE702
E20DD4755B1D78739756A5E7EC3542B96AD6844199FFA2F5F2E9C64E2DA4FB2A
ED79869F745C59D235438251BC2E6D26112AAED20E06021D1AB896EE1F1DD2EB
437FBD4A25E42245C5A647493FCC9922E6DD7AF57D5D482921D1CBD6F0F02949
C27777144751C1E72F4EE2BC343D4AE7A8A8758123B54FB1A026144C643651EF
0907A376945E19A8FC7F98A034832A5820A481B0823F980F59623E0511593FEA
BDE6EFBCC0383242CBD4954027B075B21F10472059A480D6E5ED01C3B07461CE
9810251A5C5643EC7403130C2246E8616CEA25EAC7A0076731FEA8CC43BCE3BE
933FCE61067F5FD402E67E2B9DAD954AA77C5BC86BC5E4BCE2ED676D8D8EC7D0
ABC5C86D82180B9D5D7451C71B5149B6B67883578DE9909317928C0A92E3205E
F23015400A1763A6FBF67FDE3318AD2696685A1832FC31CF38589EBC7CA1C818
60D2B2211E04EFCCEA88D9A9082E82951EEB123924A267CB03C48889032F2892
4227E217FA28F87E01CBF27BF1EA60641A4238258CB7AA355908FE36D90F5CAD
FE992D03A33E47CA9AEBEFDA57793F39DC6A9E85D5B289F6B862B35DBCF82E43
5CD6A862F6FFAC36478C384C3BDB0148CB1FEDF55969C776E77917635B5A65EB
F2AD351D21CD3822D43289FE8EB0FED58182997097C7E9F4373553AE1CA92083
EDE3BBE6C3BC7009D15AB5FEC6A59E9FD1BCC7B2099CA15FEF083B9CBF7B890E
CDDDE6BA0AFF306C76500C945DC91BD533FF9A585CEEDEF79238C54E6168001E
26FEB29E523EE501BFA4F60B782B1499B07084C35A2434B4D29D3D8E2C8F945F
A9922443B68D07DF7EAA1F4CDEFFC438B597D8943E231B5216808A85F30EDC81
9DF5DD22F54A45335B4C2203887475F39D247F0E7347BACFEAF220ED82F9263A
6488E73C1910023E505FDEB143006C1A351D441AC57F9D52D2C6D63D78C75605
999885676BBBAD56074298E0BFDACBA1830BA58E87F436CC670EE8EB1870154D
72DDBBF3794F8CAAA3F1E11DE29752DD99EAC695838A19BB67A1FA3829B6E0BC
5301610A0351AAA749F456AE31ADD87D6ABADCDD1FB3CE81C3713F48780DF407
530CB284B2AC709F52EE7AD647DEF9FA4D2A867CCEF728F3D40CF34C28D21527
10160B3DAFB5FE16AFC9D36C6EC4021FC189005862082BEA60AC72B63AD27D72
FAF3C2D89DA2648FC4C65104A069212D87144E8533CD86A6D73DC7CD9DBA25CE
7DA53B000266F3871B24663C77723703315C5E4A89DFCDBAB384AE7EB2F455AE
AB191FED406F7F6EC9E5B8276EF5C4CBA041AC7E8BCEC7CAE840154BDCA3232F
15711ABD1E867A434E9787CA0A6D1F197597DA27ED2402CB2D84ED082E8D3A39
81E6EB270DCA4E7A90E2BEBD3CBB3A2BE3CAB926192D7292CC16845B6399A543
BCFD224BB52F21352732DB5154FA3442733066CDC3E186D8AA97CD801DFBE43A
116C86889BE198DA88CA978B8C40ACB67E8F7BA499DE68A6FF0DC72C3D00BA1A
B378B39610F15CA026F95ED8155CE3FFFFA2E2FEB352DBE14CEE1669F2387B70
55B91185FBBED764266215D518716EDA3DFC9E5DB6B148A553E75AE5E38E1CFC
6EF47B314D54CF24BC13856F4F7C976BB91D143DE32FF49BFFC87E17885A1893
BA1B8E441B08EFC04F7D103C1FFBB665194B3D0920473740C55FB1C50EBCF717
A2359B687FCEAD65616EE89A68F8D91AFACAA0B238EE4AF0279AF5BE5294C3DE
A7E1F5E6248C0210E7D40683F04B12A933C746ECB517CF94BBCC6E4CF49AC715
D8005AFECBDFB7A6B417DB8A28F8E9EAF39CEC1CA64DF37A5E66A76C26F721F8
A63B003A040A62F87DCF61B298F960D510BEFA453F118E59E7DE8CA3DD002EF0
127EAF733D5C61B5132348D280F84D159809CC71A3C6F7373BBFD8D6EF715D34
0016DEFF14AA5F960BF1BB9AC304A1823722843547BB4CA5EA4C41C6C2701C8F
7BDC810443F9DF34BA469A3260009B799871BAF8523C8763544DCD0B382D44C5
F75046AFF85F0B5A3188C2EE786CEEE5496A5AF4BCB0B429CAFC403FB983EFE3
61FD9F52ADFC38E07A0FD7BACBA530D2E4DAB2592AA9564843E7E2305047F060
C5FE4243FA8FDF1B5D4F61ACA7850A604FBC6D6970959752695C90F78961B4E2
C8CFA41082B1A37405AABCEE5BA3DC2B9EA76F486117B84728EC6D8AE6379CCB
402C2AA89078EC992C00D53151E9D82C65643F549A572A20F05107A41BE5AC57
8EDE92AE20B05E2D0C98151CC92D5389A675DFE39DF546A33A84A4C534337ADE
B17C34E09145B37CE1EB1D10D42CC8D6E6B127A3809F7202381FDB88D42084CD
0AEAEB8A8288CB56870EA2BE9D0B9DC8291021CA561E2BA388DA3494E433E0EE
5E69DA51D0AC505C9F71562D3E9750F23CF14D2C8ECF0692FBBCB4A92B48B4B0
AA2163A516AD96B9354BCDBEBB351B643BF3CB00446AFFC4A137CB928E99D626
4824385F1E9CEAE6E317451B4ED21EF01ACC5ABA985FB14EE70247FA3B66ECEE
431352ED45182614EA3D57BDC22E5A04D5AAB27C8ADCD7BC07BBAB21A1901F39
4C9C008D353F0EED437BC00D2E65A3652361D50E16C785B66DC1D551961F641B
032E133A31A61A335EA302469363987224158BBCAC91357E79DC8F409A928EB1
8E1FFCDC81E7B443ECF0A6D728FAB96395460B33F57CA9B88C746B9B7B453D4C
0755B802DD31E854C52DA0804B611B6014BDF91BF76B6E491F4BD5C46574FDCE
673B03F3D6FD5F8B860A2556FCE98FDCAFA81B35DAA07BEDB39ADAA041BE5ED0
02EE5663F1C139979D11BBB51693C13514CF00CC7F9E9AA38726D6B1AEDAAA46
FEFE290831071E035F68E9FB2AB771DFD9E7EB3E255BD3FD51F325AF0AAB03F3
C001351BCC357E49F8A94A7481991B6239C7D48C5D55D3FED290DF6AFB2E23EF
1FB63022D8230A40B34546705D09709C2A02F219434E951DFA82A1339C095723
10190C4CA5F9B9F98179382216FE74381A001AB228066DC706493D1267F2263B

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 110 /n put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D916672480464F7E22
CA6E431FE38D3FC019BDD229E064B72C545C61C6EA55984565CCA88ACB01F744
3B4593CC895A7F8629CAFAAF3113D089D7C8FD6738869572556FCE0E856E1596
D5BC11C6B1236B5E32BD4D91A436E0FCC50950423E0E144F09A1E39FCACDF9C0
E6B4B2F92D812D1E60545566E65178A0F4901E675A6A7BC8B2203E682FB8D792
589F59236E1FB48970B7B7F7FB324A6FAEF708544D05C94B6690FF1F6F453998
3C81D4F19055A44DB457D4320497D7BF4D9B2A4D0EAC0E9FBF401A4EFA8A7D87
AB27297DF783A2CBFCA7E376DB6DCC6C0E2A06D605AA18C458300C8326A0D2E0
1809EB0CB825FD645ACBECAED0CF1CB57CD8142BAF9B0ED752D0C79A56774141
6A211FB7CC2BB4F3637D795646C518DA0A0314D3EB6ECD2B7BC2903546BBBE6F
E358CEB8DC6F8C9C4CD2ECEBCDE2BD8C6292E6E0E6B0B263E8C72E3201513E3F
3F69A023426C4EBF4ADC208D6F34ADE8193CB628567D0E1C0E49258F6B8F13
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (n1_n2.dvi)
@start /Fa 205[33 33 49[{}2 58.1154 /CMR7 rf /Fb 145[50
110[{}1 83.022 /CMMI10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray 0 82 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 0 82 a 0
82 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 82 a 0 82 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 0 82 a 0 82 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 82 a 0 82 a
tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 82 a
0 353 369 353 v 369 82 a
currentpoint grestore moveto
 369 82 a 86 94 a
tx@Dict begin  tx@NodeDict begin { 10.48848  2 div 4.30554  1.49998
 add 2 div 2 copy 1.49998  sub 4 2 roll Pyth 3.0 add 0.8 add} false
/N@T-0 11 {InitCnode } /NodeScale {} def NewNode end  end
 86 94 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray    10.48848  2 div 4.30554  1.49998  add 2 div
2 copy 1.49998  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fb(n)136 106 y Fa(1)216 283
y
tx@Dict begin  tx@NodeDict begin { 10.48848  2 div 4.30554  1.49998
 add 2 div 2 copy 1.49998  sub 4 2 roll Pyth 3.0 add 0.8 add} false
/N@T-0-1 11 {InitCnode } /NodeScale {} def NewNode end  end
 216 283 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray    10.48848  2 div 4.30554  1.49998  add 2 div
2 copy 1.49998  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fb(n)266
295 y Fa(2)259 271 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0 /N@T-0-1 InitNC
{ NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 259 271 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial -371 529 2566 4 v -329 887 a Fj(Make)o Fx(\()p
FB(n)-81 897 y Fh(1)-44 887 y Fg(;)h Fj(Make)o Fx(\()p
FB(n)236 897 y Fh(3)273 887 y Fg(;)g Fj(Empty)p Fg(;)f
Fj(Empty)p Fx(\))p Fg(;)h Fj(Make)o Fx(\()p FB(n)1075
897 y Fh(2)1112 887 y Fg(;)g Fj(Empty)p Fg(;)f Fj(Empty)p
Fx(\)\))p 1702 911 4 382 v 84 w @beginspecial 71 @llx
678 @lly 120 @urx 721 @ury 490 @rwi @setspecial
%%BeginDocument: n1_n2_n3.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: n1_n2_n3.dvi
%%CreationDate: Mon Aug  6 13:13:49 2018
%%BoundingBox: 71 677 126 721
%%DocumentFonts: CMMI10 CMR7
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o n1_n2_n3.ps n1_n2_n3.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2018.08.06:1513
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 698 2017-12-30 19:08:50Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.28, 2017/12/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMR7
%!PS-AdobeFont-1.0: CMR7 003.002
%%Title: CMR7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR7 known{/CMR7 findfont dup/UniqueID known{dup
/UniqueID get 5000790 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR7 def
/FontBBox {-27 -250 1122 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR7.) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 51 /three put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB981ABA2ACC9A23A5
3E152596AF52983541F86D859FC064A0E3D5FC6647C3CAB83AD4F31DDA35019C
CDB9E3DD3FEBD4C2B36BA3CF6E6C7DA85E25D8A31A9BAD39BDF31FD0D1790707
9DE6A078E8A409D8295F642DF492AC4F86AC84383B0F4C6BAA7C22AD5A898A71
D6CB34D2CD12266C486B75E75A69C14819DD9BB8159088E04D4717E576B8482D
BDA52110AC8B8A80E4E9D58F470EEBD3CF44A1E1EE8DA318FFF3611B02534FC9
F4018C7C57E80570D2F634D98BE5D5EC6D95051157F0EA94A3D12BE0B4B79939
F82F8D73136D3337C44E314B0B16CB030D9A12E01FB667105F334C3EE965E5A3
D410D2F1531547A4497C355AEEB295CD3C5334BEE5232992960B757594B89F3E
52095042DBE6B4DA3C3AD50CA95EA9EBADA10630B500CF1FCCA7D60306743681
7E428D33B7F7C40B425CD58E4CD8AB474BCE6A307BC6C6EBC15A8A96E0E2977E
A33389154536F5C5D8CF036D07F24094E779E5ACBE5502C92892F10F4C6DB627
C7EC4C7BF20B39418A8A85D7FD9B0EAAFD871DDD41F93BDE5FE619AFB8711824
DE890E62C1969A6FE28DD3578AF43D58A728FAFF0B9FAA640962C8F35A26F76C
67F3548D6DB54A25CEB368B47F97EA2B0C4D7C0E7894A4F0C823C6C1922CF9DC
10E05600556F1C7C9AFB33A2DB6F8730F70D6BF94B1FB0887451F2FFEEF3584F
DFADCFA9A2D4846B8F0E51620E1327D994CDF973B837D10C90FF76DE22B47CD5
EE3183898D156861AB4DFAD34A1E3FA260B8164E6680BF58413A553E88F6100B
C4F4E8E972C81A5F88A7DBCDC308B4C3581BCDE13877B976B1F84330839FE5CF
C78551620EB803DF94A5C921F8EE24F7EF8FC4C3E1653514212631F54F90E3DC
E9EAF96E998F340C4F729ECF7AB430FDB7C0BE3DF2C0D23015820E28B743CAD7
7F0AE95413C3EEABBC69E852F53EE1DC260D7F1E712BECEF2F18437DB23D8E74
2902AAFBC733AC5BAA452DD6F3671859AD836C8564E99CDC4183D8495AFD99D6
1F0D65B6588CE7546717911E25BDCA6C2649E3A7466A3E2DA7C7994A30AB4449
672EFD00632EFA8629C1AFB7D53D801028F77C864869FE636213A69173003EA6
BE1ABA95EB07B13D1594BEFCC95ECB0A9CFA9892EE0677D6B6C250855762B7A7
8E4E022640F93169DFA0303A0D5E73BF3E0F4D4AAD10FD7E4EB20532BA30371F
E9F480F9513432946F9828AFB5D4AEAFA5829B2CB544E5EB634C4537EF7DF08A
A1CFD94A52DCF0E7CE4C5EFFB01E6D50558B75DB4C8D5512B06080F27BE62E01
2EEA6A0357441401458C842D3DD4C35B8F561D816B336216CE0C14BF77648AF5
E33912CF95872A1E1AB9A18980A0B29A881D13397C15E1CBA5D3E0B27943EBE2
F3003D15EB446BCFC1C231832475D5B7AA19E4CFDE119D6CD62D053C6D29C333
5F729791D17B3F7108074EEF4D1BD101CB33E01004532CB0D716D2E54D169C6E
80163E70C0E9081F31A1ECBAE079D2A518B790B0CB2CD03DFD034A0F4788E800
B0CD2DC1FAFDD487C2F381EBAB2A2F3F3AF82021B211DC9CD2FBA6A1BB3D4AEA
4C7F3D9A5C21DFF284CCB827D205A69638E98D5DD8E36AFC1A4481B5CB2A2E8F
D6C838DA6F81990F5ED928DC7457501B5C979FF4CD20A830896A460C5DB13D56
A3B2B5D9B292374A9BF392894DD99FCD6A1E655AB395E839F074D1596488700C
4E2891C8AEEF66568E82A8B826F9A28FF84D4D9BDA21F638EAF96880B4EBE0D8
081982F34831A03BEE81FC177700C2360D2A48915EC40D5FE85B400E175D5AF1
067FA0097904FB647757BB44B4042D30D1557BD0F7922D731142FD682139CEB7
58CA4C8C240A0B86B1888CACC507E24E04020BF1882BD9B4CAECFA97DB24D7F5
AD64C69454027F198BA35881B94EE9159A2D73E450C3BDAED66B886D6DEBC84B
653E165176228F88993F12A170775A8D7038BDF2FE8DC1F7B98BDC02D1E6686E
9B834F6C0AD90780B17DFE25F0A4E470CBA84E73F2D22BEE09A040F14CFA2C14
0FDA5A5149B5FAFFE49F55EEFC43831BC43A8326FEE9C7F469C0FC3B000884FA
41DA7318EB57262CB96FC4EC7F16CA07FE1C3BE8C2DBC8A8135953D6DDF20BDF
75A2B6D26074FCE752BD32FB9F5CA797775E8DB9BB9786B469A3CD65A0D9DDDA
C2A166E454A94860EEF5B5C12172DDFC576A03F6E6F8A735FF21A3E9CCB4CAA1
3064893487697986A42CB5888B2B0A79FA3C74E8187BDDF7BEAB884B70B8D4AA
AC6615745AEB906E08BF831CFDE222F58D02B428D55E9D5A3CDE74E42D8A2CB7
E1A3A9439B678AD438793ABBEB72B21C58981DAF3EDCE4BB93D95F4A1E943BBC
B3A012DE92FED4F232A3A7D60CE60B605151F9C7C18A5C653E5D6D15E5B49A63
73E7A339504D0ACC74B8B116EA88C3EBA2CC631AAB29F761E5F062966AD2FD28
7FFE52FA8A115DBE23E471094FFB3CBAFBDF11B7E9058313F2D069B2CE98A962
64645738F02A31E2F2AC11628724034ADBCEE012721EBF0A567893411F950410
B20754A7510D041FFA6144AC9CC46D846B82581F20BBD001D34D9764010824BE
61C30D05E5C5D100A24F1917F01799CF5BC4E50FCECFEA732CB50196825F0E08
8A1EC868C6D4357857EE2957E081A0E4372E31A8ABEF23C3F2EA0FEE57DE4D08
61C570175C41AA0C7A3A579ADF593F18B4AE3782D2552E4E0759C32E059EE741
2D8191E381731769F6648B3581CAF11DAE46471896666F18F02918B0860BDA3C
BD5DE777672447C23C62ACFC2611ED5239D6A266FDA6031EBC5A530C1A2FF7A6
B4380B9A4C877267854AD1F1677CB5433F28894ADF93D39EAB94541A8D232E08
22D082D0951A60F62B87DC028714EC74133A4D65F7D0D1296C0E189C4A42AA98
28E8AE7ECBB9FC8DFABCC6EEB1E9FB06227F90808EF31331CCC5D4C9A6182181
047902DC9FD0444FB94B60FC74F3B677758088CE6A159D940C5CF682335E756A
8BACF06AD7225D49B0002392C889B0FE2C71311D2596F4903D12FA20BA2FFE25
A0804B4BC282929BE31E0F46B34532CB5795A65218CFAE21F390792DA67775C7
B91A2BF4C16DE4F6551DAE3A5827F616BE9040EE6B1008DA2F99A01EF66D697A
6CD1A44E0A15D1F39EA8025E886A68A1E9C334327C7703EE721E497CA924AC90
7723106D913C5ED4BA4FC743CEA8D0F5172526107DA65775C0B1B77179D336C2
9B09B608D80B1A1E87CA1A84A833A00D980D919BFF56F6390E9D5B45E9935CF5
E69D003564462F750F7DCE02DC23CC215A0696B74D8BD3156A392A94F557655E
00BFAA035647568ED66157FACC585E411F7F428569C147DC43F6E4FDE693D0F3
9917BEFEDF61FB980B85515FF6424824E2D995B05CA1E5D3E8BD8D3281DB7CE4
E54923E84058FFC0A8A2C491327D0F87CE4C352B724167CEE224DABA3B95757E
4A419594BE4F92E78BA6D35D4C93D31ECC3134B24A45DC32445725BB044F09A3
AA8C31EFC0A2944ACE2F2CE054CF24DB350FB3C71115518C24BDC0F7E54250AF
9D3378D38480E1CB9029F31570C619A28F065CA4FED5665EDB96712ABEB33B9B
4232C00C1B0215F08D53F7E430887035AC25BEAF06942FD1B6C442253C887AB7
D694C1A6115C8990B4CAF1E81DD1FDDD6B03C00055BE956BE7FD8A4E1049AE69
EDA8593CBA8C4A41E046C689FBBF9F1B64E5856A7FB1C61EC815A56DE2A8ED33
41F370B8203D4E5B19C63AE9E6E0D26F4F3814B5AF48AD30EC9B8402C941FDD9
722FCAFC638FBB835F83DC77F93D367266FA7DFFFCB567EF82B1695AB4D94D09
B18AC041811027229DF431F5CB2BBF6ACCE9D500C8F075A74590641C1A607C56
D2B8624797BCD9C91C3177818691FBB4744EDB6056464A0B95B8D63F7C22309B
82D6126E2057BCC9FE5566D96B7A9B201A09B0D3252A5494C8CA2C8BA8A13C29
37EF2A882D61DA708C279F663D88A8E2999A0F3B6F98C49901A7631BF7708B67
54D0B4C52BF4BE0DA0439E6763A7C9D639AD4092E77B13D3510DAE1475C978AC
796F9B2AAD3BFF35C5A3E19B5E2BF704B3BBDF68CE48BA4FA2496D60E58888EA
28AE12D00E9F0816FAC190590A865BB58569A91BF0345D01230ABA361442006D
BA2C90EC2036BBAB79EBAFC3F217DBD5854C519235F9627A1C3C71D21ED38AEF
0BB40F3B86BB9F09A3F309473D8757AB7E638DC1C59A7F9BCD49DE4107A2E54F
422767FB94048987847205584309397F554744690ACFFDF5902FE5DB355930B8
71863217830DD7A563B0B3A4025ACE75B0E777B4414B62A13B50C54E0E6D47E9
D43BF769B9411B74E1069BF71BA873B4B8973EC9BA492A5DEA58D267872BB246
10AA67B143D0E2223FFB4991E583E629413CC894C3FA4869B72D19CE1A0CEC8C
0FF5E5A3EC1FCB7D3C4289813F0D249A11B55104BD60B2A89BEF44CC77CCDA9A
065B8B83B4F4253AA1D535290DCFAA4773452D110D2B3370F9E2FE5432B54A9E
644EB3BA9BFF62347F376839024CD5EF3C5DFD30F412DD5474B7933E6A1AB63B
4B12F2417C72D0543C26A263AEA53E5BAEBD67E23553A72E949DEC556BEB5D09
C4D7A89B14FE4EC68D0E3E9D65A64B285E53590F418EDA8175113CA375A29930
DDCF4C71ABB26CEB800C2C2B253AC1F53651C88A56ABE5A74F3B54CB4FFDDB92
60AD7272BA25EC2F6FB759AA6E1E7964FB55AD09F4EB25DE45FD01833947BD05
6266AA8ABB7DD792941C7A070FCF3A4636FBF8921C70298D42FE92F079DBA2AD
6149D9CF9EF7264DE6DFCD4429949B15EA90B596340713BD61926DDB2BB23BE8
F9DE38A31620A817420A245946E551463960A8C5C7295E3B3D6A59BCDF5E472A
40B7A2CDDAA43CD8AAFC411D037142579D11054A903E102DF0D0C7B5BB854DBA
F3F086AF991F7F5D5C730F8F9AF213F25786F3EC0E54530FF912F4876FDE16B6
A07D0DC4FC46EC6363BCB68B83ACC448B801EC43FDD2F8BE0E93D809FF81E38E
176AE17C67C85FEA58EC95435434C49A950AA955D8B20989C550AB1F1C31B7FF
99422E1F48FB7D6F327C6DBC4695A03903DB275B94CB39386E46579271870A25
21823E75C377E9D5B46655E8CD8F986372CF8BA846423E26582315A9D19E0BF5
305C32B2A0EAC3ECB275B1D8BE11A37ADF524944219D94EA2C5DBDA768828B6D
775DA8CDB09E0570E4ADDF462EFD8D3FA3F86B1DEECDFFB699AF6507257C1879
16FC615868C2D51F03CD57BA38D42995D9164B257441210084DC409B6EE4C119
0B2E17B0A8D5326DD0010E4A325D5F77BF935693BC90A00A28C7B5F74817DA39
F47A41E32F4F92AA04D30D810F7B1484EB53AD8CFC8CE8928B570314E0F713F8
AF127227190F9C16BB73D2A217FF801C391A29095DA5E4974D137A0CAA7DE702
E20DD4755B1D78739756A5E7EC3542B96AD6844199FFA2F5F2E9C64E2DA4FB2A
ED79869F745C59D235438251BC2E6D26112AAED20E06021D1AB896EE1F1DD2EB
437FBD4A25E42245C5A647493FCC9922E6DD7AF57D5D482921D1CBD6F0F02949
C27777144751C1E72F4EE2BC343D4AE7A8A8758123B54FB1A026144C643651EF
0907A376945E19A8FC7F98A034832A5820A481B0823F980F59623E0511593FEA
BDE6EFBCC0383242CBD4954027B075B21F10472059A480D6E5ED01C3B07461CE
9810251A5C5643EC7403130C2246E8616CEA25EAC7A0076731FEA8CC43BCE3BE
933FCE61067F5FD402E67E2B9DAD954AA77C5BC86BC5E4BCE2ED676D8D8EC7D0
ABC5C86D82180B9D5D7451C71B5149B6B67883578DE9909317928C0A92E3205E
F23015400A1763A6FBF67FDE3318AD2696685A1832FC31CF38589EBC7CA1C818
60D2B2211E04EFCCEA88D9A9082E82951EEB123924A267CB03C48889032F2892
4227E217FA28F87E01CBF27BF1EA60641A4238258CB7AA355908FE36D90F5CAD
FE992D03A33E47CA9AEBEFDA57793F39DC6A9E85D5B289F6B862B35DBCF82E43
5CD6A862F6FFAC36478C384C3BDB0148CB1FEDF55969C776E77917635B5A65EB
F2AD351D21CD3822D43289FE8EB0FED58182997097C7E9F4373553AE1CA92083
EDE3BBE6C3BC7009D15AB5FEC6A59E9FD1BCC7B2099CA15FEF083B9CBF7B890E
CDDDE6BA0AFF306C76500C945DC91BD533FF9A585CEEDEF79238C54E6168001E
26FEB29E523EE501BFA4F60B782B1499B07084C35A2434B4D29D3D8E2C8F945F
A9922443B68D07DF7EAA1F4CDEFFC438B597D8943E231B5216808A85F30EDC81
9DF5DD22F54A45335B4C2203887475F39D247F0E7347BACFEAF220ED82F9263A
6488E73C1910023E505FDEB143006C1A351D441AC57F9D52D2C6D63D78C75605
999885676BBBAD56074298E0BFDACBA1830BA58E87F436CC670EE8EB1870154D
72DDBBF3794F8CAAA3F1E11DE29752DD99EAC695838A19BB67A1FA3829B6E0BC
5301610A0351AAA749F456AE31ADD87D6ABADCDD1FB3CE81C3713F48780DF407
530CB284B2AC709F52EE7AD647DEF9FA4D2A867CCEF728F3D40CF34C28D21527
10160B3DAFB5FE16AFC9D36C6EC4021FC189005862082BEA60AC72B63AD27D72
FAF3C2D89DA2648FC4C65104A069212D87144E8533CD86A6D73DC7CD9DBA25CE
7DA53B000266F3871B24663C77723703315C5E4A89DFCDBAB384AE7EB2F455AE
AB191FED406F7F6EC9E5B8276EF5C4CBA041AC7E8BCEC7CAE840154BDCA3232F
15711ABD1E867A434E9787CA0A6D1F197597DA27ED2402CB2D84ED082E8D3A39
81E6EB270DCA4E7A90E2BEBD3CBB3A2BE3CAB926192D7292CC16845B6399A543
BCFD224BB52F21352732DB5154FA3442733066CDC3E186D8AA97CD801DFBE43A
116C86889BE198DA88CA978B8C40ACB67E8F7BA499DE68A6FF0DC72C3D00BA1A
B378B39610F15CA026F95ED8155CE3FFFFA2E2FEB352DBE14CEE1669F2387B70
55B91185FBBED764266215D518716EDA3DFC9E5DB6B148A553E75AE5E38E1CFC
6EF47B314D54CF24BC13856F4F7C976BB91D143DE32FF49BFFC87E17885A1893
BA1B8E441B08EFC04F7D103C1FFBB665194B3D0920473740C55FB1C50EBCF717
A2359B687FCEAD65616EE89A68F8D91AFACAA0B238EE4AF0279AF5BE5294C3DE
A7E1F5E6248C0210E7D40683F04B12A933C746ECB517CF94BBCC6E4CF49AC715
D8005AFECBDFB7A6B417DB8A28F8E9EAF39CEC1CA64DF37A5E66A76C26F721F8
A63B003A040A62F87DCF61B298F960D510BEFA453F118E59E7DE8CA3DD002EF0
127EAF733D5C61B5132348D280F84D159809CC71A3C6F7373BBFD8D6EF715D34
0016DEFF14AA5F960BF1BB9AC304A1823722843547BB4CA5EA4C41C6C2701C8F
7BDC810443F9DF34BA469A3260009B799871BAF8523C8763544DCD0B382D44C5
F75046AFF85F0B5A3188C2EE786CEEE5496A5AF4BCB0B429CAFC403FB983EFE3
61FD9F52ADFC38E07A0FD7BACBA530D2E4DAB2592AA9564843E7E2305047F060
C5FE4243FA8FDF1B5D4F61ACA7850A604FBC6D6970959752695C90F78961B4E2
C8CFA41082B1A37405AABCEE5BA3DC2B9EA76F486117B84728EC6D8AE6379CCB
402C2AA89078EC992C00D53151E9D82C65643F549A572A20F05107A41BE5AC57
8EDE92AE20B05E2D0C98151CC92D5389A675DFE39DF546A33A84A4C534337ADE
B17C34E09145B37CE1EB1D10D42CC8D6E6B127A3809F7202381FDB88D42084CD
0AEAEB8A8288CB56870EA2BE9D0B9DC8291021CA561E2BA388DA3494E433E0EE
5E69DA51D0AC505C9F71562D3E9750F23CF14D2C8ECF0692FBBCB4A92B48B4B0
AA2163A2EA883B9272CE7F3630C6CD3865D78C49FB54B677E4E09581B1991D83
972DECD70AA818D27095A01A1645ADBCC2BF657267F237B718ABC713CD49809E
3C3F75BDF94A49445BBF509788689AAEEED658C856DAB86688A1AC36E11E7F0F
8FF51940C039F5F430FCE4AC620DB19E2DC437EC386BBC44FEBDB6CB98A763D5
6EA93ED2D7783729F2C366312C3CB0FFE43F6E3071085B4DBC075AEF38DF6E8B
18817661D82499F0F8572D78516D110561BFDC2140B873C16873583BB9B7B8EF
3EB9270EDD6CAA75B36CE74EC92E8C32336D52CDEF15AC88AE230B1327AC49DB
AF77270D898561823471F0BAD78A82D83207F1DEBC633FEBDCB95DBA361DAE14
935CD01DB78F0DAEC7F2746AD3C8CA6F7AEE7BA9F80D1BB700025B9E6C6E1FE2
984134A6AB68DFFBE2EE6B575BF9FAB17E69B90FDAD6DD56DDC85D08BB65388E
8A1DC100DD311D6C6F4995A6421757ECB5FAD6BC8BEDDD96599743009F88A94E
A999DA7C87967F3810D1501F8781205C740E995BF772D5A5D9DB5FF146379548
BE81674B2FB458FCEF993787D26EBFBE327E2E91F97E91230F830F3194F8DE45
AAABD1F10C1BC28C4FC58D39D4C20589824DA0F0FF32C89E834B6814D99BE267
529B3634F26AAC131D6870590C12C28FF686C67BD7E8BD94EF5B9A87D2C9A990
CF2E98FE1E10609EFAA31E0A27FA0355D0E1108C04557BF897A669EDC0666194
7D7FCDC47D714E3BFC840A9035187AFD2E1718DE10A41DF87F0D2771A2C28C23
C948A926F4A3661311794681456EF93111F4EE7592F57BAC2CB225AF8A11CCE5
CFE0D3263A4E2AA73CE01C3E2827F1FE5B6879684D02B39CCF12054875F5AF34
44
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 110 /n put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D916672480464F7E22
CA6E431FE38D3FC019BDD229E064B72C545C61C6EA55984565CCA88ACB01F744
3B4593CC895A7F8629CAFAAF3113D089D7C8FD6738869572556FCE0E856E1596
D5BC11C6B1236B5E32BD4D91A436E0FCC50950423E0E144F09A1E39FCACDF9C0
E6B4B2F92D812D1E60545566E65178A0F4901E675A6A7BC8B2203E682FB8D792
589F59236E1FB48970B7B7F7FB324A6FAEF708544D05C94B6690FF1F6F453998
3C81D4F19055A44DB457D4320497D7BF4D9B2A4D0EAC0E9FBF401A4EFA8A7D87
AB27297DF783A2CBFCA7E376DB6DCC6C0E2A06D605AA18C458300C8326A0D2E0
1809EB0CB825FD645ACBECAED0CF1CB57CD8142BAF9B0ED752D0C79A56774141
6A211FB7CC2BB4F3637D795646C518DA0A0314D3EB6ECD2B7BC2903546BBBE6F
E358CEB8DC6F8C9C4CD2ECEBCDE2BD8C6292E6E0E6B0B263E8C72E3201513E3F
3F69A023426C4EBF4ADC208D6F34ADE8193CB628567D0E1C0E49258F6B8F13
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (n1_n2_n3.dvi)
@start /Fa 204[33 33 33 49[{}3 58.1154 /CMR7 rf /Fb 145[50
110[{}1 83.022 /CMMI10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray 0 82 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 0 82 a 0
82 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 82 a 0 82 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 0 82 a 0 82 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 82 a 0 82 a
tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 82 a
0 353 439 353 v 439 82 a
currentpoint grestore moveto
 439 82 a 162 94 a
tx@Dict begin  tx@NodeDict begin { 10.48848  2 div 4.30554  1.49998
 add 2 div 2 copy 1.49998  sub 4 2 roll Pyth 3.0 add 0.8 add} false
/N@T-0 11 {InitCnode } /NodeScale {} def NewNode end  end
 162 94 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray    10.48848  2 div 4.30554  1.49998  add 2 div
2 copy 1.49998  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fb(n)212 106 y Fa(1)38 283 y
tx@Dict begin  tx@NodeDict begin { 10.48848  2 div 4.30554  1.49998
 add 2 div 2 copy 1.49998  sub 4 2 roll Pyth 3.0 add 0.8 add} false
/N@T-0-0 11 {InitCnode } /NodeScale {} def NewNode end  end

38 283 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray    10.48848  2 div 4.30554  1.49998  add 2 div
2 copy 1.49998  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fb(n)88
295 y Fa(3)82 271 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0 /N@T-0-0 InitNC
{ NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 82 271 a 285 283 a
tx@Dict begin  tx@NodeDict begin { 10.48848  2 div 4.30554  1.49998
 add 2 div 2 copy 1.49998  sub 4 2 roll Pyth 3.0 add 0.8 add} false
/N@T-0-1 11 {InitCnode } /NodeScale {} def NewNode end  end
 285 283 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray    10.48848  2 div 4.30554  1.49998  add 2 div
2 copy 1.49998  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fb(n)335 295 y Fa(2)329 271
y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0 /N@T-0-1 InitNC
{ NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 329 271 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb
2221 1639 a FJ(50)e(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 51 51
TeXDict begin 51 50 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation51) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.51) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bina)m(ry)37 b(trees/Signature)h(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(The)30 b(only)h(p)m(rojection)h(fo)m(r)f(bina)m(ry)f
(trees)h(is)f(the)g(reverse)i(function)e(fo)m(r)i FH(Make)p
FK(:)468 -46 y FH(Make)722 -83 y Fo(\000)p Fx(1)837 -46
y FG(\016)21 b FH(Make)j FK(=)h FC(id)-458 159 y FK(where)31
b FC(id)39 b FK(is)29 b(the)i(identit)m(y)f(function.)41
b(In)30 b(other)h(w)m(o)m(rds)-75 363 y FG(8)-9 360 y
FC(n)39 363 y FA(;)15 b FC(t)112 377 y FB(1)159 363 y
FA(;)g FC(t)232 377 y FB(2)385 363 y FH(Make)640 325
y Fo(\000)p Fx(1)734 363 y FK(\()p FH(Make)o FK(\()1058
360 y FC(n)1107 363 y FA(;)g FC(t)1180 377 y FB(1)1227
363 y FA(;)g FC(t)1300 377 y FB(2)1347 363 y FK(\)\))26
b(=)f(\()1574 360 y FC(n)1623 363 y FA(;)15 b FC(t)1696
377 y FB(1)1743 363 y FA(;)g FC(t)1816 377 y FB(2)1863
363 y FK(\))-458 567 y(W)m(e)31 b(gave)g(no)f(name)h(to)f(the)h
(reverse)g(of)37 b FH(Make)30 b FK(b)s(ecause)g(\()1559
564 y FC(n)1608 567 y FA(;)15 b FC(t)1681 581 y FB(1)1728
567 y FA(;)g FC(t)1801 581 y FB(2)1848 567 y FK(\))31
b(do)s(es)f(not)-458 680 y(co)m(rresp)s(ond)i(to)e(a)g(w)m
(ell-identi\014ed)h(concept.)42 b(Then)31 b(let)f(us)g(cho)s(ose)h(mo)m
(re)-458 793 y(intuitive)e(p)m(rojections.)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(51)9 b(/)h(95)p
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 52 52
TeXDict begin 52 51 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation52) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.52) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bina)m(ry)37 b(trees/Signature)h(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb
-367 -210 a FG(\017)p 0 TeXcolorgray 0 TeXcolorgray -276
-200 a FI(Projections)p 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb -182 -71 a FF(\017)p 0 TeXcolorgray
0 TeXcolorgray -95 -59 a FD(Make)137 -95 y Ff(\000)p
Fl(1)247 -59 y FE(:)24 b(t)f FF(!)g FE(no)r(de)18 b FF(\002)g
FE(t)g FF(\002)g FE(t)-95 41 y(This)27 b(is)g(the)h(inverse)g(function)
e(of)i(constructo)n(r)g FD(Make)p FE(.)p 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb -182 128 a FF(\017)p 0 TeXcolorgray
0 TeXcolorgray -95 140 a FD(R)n(oot)23 b FE(:)g(t)g FF(!)g
FE(no)r(de)-95 240 y(Exp)n(ression)k FD(R)n(oot)o FE(\()545
243 y Fw(t)582 240 y FE(\))g(rep)n(resents)h(the)f(ro)r(ot)g(of)h(tree)
1577 243 y Fw(t)1613 240 y FE(.)p 0 TeXcolorgray 0.2 0.2 0.7
TeXcolorrgb -182 328 a FF(\017)p 0 TeXcolorgray 0 TeXcolorgray
-95 340 a FD(Left)c FE(:)f(t)g FF(!)g FE(t)-95 439 y(Exp)n(ression)k
FD(Left)p FE(\()523 442 y Fw(t)559 439 y FE(\))h(denotes)f(the)g(left)h
(subtree)g(of)f(tree)1719 442 y Fw(t)1755 439 y FE(.)p
0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb -182 527 a FF(\017)p
0 TeXcolorgray 0 TeXcolorgray -95 539 a FD(Right)d FE(:)f(t)g
FF(!)g FE(t)-95 638 y(Exp)n(ression)k FD(Right)p FE(\()571
641 y Fw(t)608 638 y FE(\))h(denotes)e(the)i(right)f(subtree)g(of)h
(tree)1818 641 y Fw(t)1854 638 y FE(.)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb
2221 1639 a FJ(52)9 b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 53 53
TeXDict begin 53 52 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation53) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.53) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bina)m(ry)37 b(trees/Equations)p 0.2 0.2 0.7
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray -458 -250 a
FK(As)29 b(w)m(e)j(guessed)f(with)f(the)g(case)h(of)g
FH(Make)1010 -286 y Fo(\000)p Fx(1)1104 -250 y FK(,)g(w)m(e)g(can)f
(complement)i(our)-458 -137 y(signature)e(using)i FI(equations)e
FK(\(o)m(r)j FI(axioms)p FK(\):)117 64 y FG(8)183 61
y FC(n)231 64 y FA(;)15 b FC(t)304 78 y FB(1)351 64 y
FA(;)g FC(t)424 78 y FB(2)583 64 y FH(R)m(oot)o FK(\()p
FH(Make)o FK(\()1146 61 y FC(n)1195 64 y FA(;)g FC(t)1268
78 y FB(1)1315 64 y FA(;)g FC(t)1388 78 y FB(2)1435 64
y FK(\)\))26 b(=)1627 61 y FC(n)117 202 y FG(8)183 199
y FC(n)231 202 y FA(;)15 b FC(t)304 216 y FB(1)351 202
y FA(;)g FC(t)424 216 y FB(2)607 202 y FH(Left)o FK(\()p
FH(Make)o FK(\()1146 199 y FC(n)1195 202 y FA(;)g FC(t)1268
216 y FB(1)1315 202 y FA(;)g FC(t)1388 216 y FB(2)1435
202 y FK(\)\))26 b(=)f FC(t)1660 216 y FB(1)117 340 y
FG(8)183 337 y FC(n)231 340 y FA(;)15 b FC(t)304 354
y FB(1)351 340 y FA(;)g FC(t)424 354 y FB(2)554 340 y
FH(Right)p FK(\()p FH(Make)o FK(\()1146 337 y FC(n)1195
340 y FA(;)g FC(t)1268 354 y FB(1)1315 340 y FA(;)g FC(t)1388
354 y FB(2)1435 340 y FK(\)\))26 b(=)f FC(t)1660 354
y FB(2)-458 537 y FK(The)30 b(signature)h(and)e(the)i(equations)f(mak)m
(e)i(a)e FI(sp)s(eci\014cation)p FK(.)-458 749 y(This)f(abstract)h
(de\014nition)g(allo)m(ws)g(y)m(ou)i(to)e(use)h(the)f
FI(p)m(rogramming)j(language)-458 862 y FK(y)m(ou)e(p)m(refer)g(to)g
(implement)g(the)f(sp)s(eci\014cation)g FH(Bin-tree)p
FK(\(no)s(de\),)h(where)h(the)-458 975 y(t)m(yp)s(e)e(no)s(de)h(is)f(a)
g FI(pa)m(rameter)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb
2221 1639 a FJ(53)9 b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 54 54
TeXDict begin 54 53 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation54) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.54) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bina)m(ry)37 b(trees/Equations)h(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(As)29 b(a)h(rema)m(rk,)i(let)f(us)f(sho)m(w)h(ho)m(w)i
FH(R)m(oot)p FK(,)c FH(Left)h FK(and)g FH(Right)g FK(can)h(actually)e
(b)s(e)-458 -137 y(de\014ned)h(b)m(y)h(comp)s(osing)g(p)m(rojections)i
(|)d(hence)h(they)g(a)m(re)g(p)m(rojections)-458 -24
y(themselves.)-458 76 y


 gsave nulldevice


 -458 76 a


 grestore


 -600 188 a


 gsave nulldevice


 -600 188
a


 grestore


 -506 188 a FK(The)g(only)f(thing)h(w)m(e)g(need)g(is)f(the)-506
301 y(p)m(rojections)j Fv(p)-20 315 y Fx(1)19 301 y FK(,)e
Fv(p)122 315 y Fx(2)191 301 y FK(and)f Fv(p)406 315 y
Fx(3)476 301 y FK(on)-506 414 y(3-tuples:)-96 618 y Fv(p)-49
632 y Fx(1)-10 618 y FK(\()p Fv(a)q FA(;)15 b Fv(b)s
FA(;)g Fv(c)8 b FK(\))26 b(=)f Fv(a)-96 756 y(p)-49 770
y Fx(2)-10 756 y FK(\()p Fv(a)q FA(;)15 b Fv(b)s FA(;)g
Fv(c)8 b FK(\))26 b(=)f Fv(b)-96 894 y(p)-49 908 y Fx(3)-10
894 y FK(\()p Fv(a)q FA(;)15 b Fv(b)s FA(;)g Fv(c)8 b
FK(\))26 b(=)f Fv(c)865 188 y


 gsave nulldevice


 865 188 a


 grestore


 865 188 a


 gsave nulldevice


 865
188 a


 grestore


 865 188 a


 gsave nulldevice


 865 188 a


 grestore


 865 188 a


 gsave nulldevice


 865 188 a


 grestore


 959 188
a FK(Then)31 b(it)e(is)h(obvious)h(that)f(w)m(e)h(could)959
301 y(have)f(de\014ned)h FH(R)m(oot)p FK(,)f FH(Left)g
FK(and)959 414 y FH(Right)g FK(only)h(with)f(basic)g(p)m(rojections:)
1218 618 y FH(R)m(oot)24 b FK(=)h Fv(p)1625 632 y Fx(1)1685
618 y FG(\016)c FH(Make)2005 581 y Fo(\000)p Fx(1)1242
767 y FH(Left)j FK(=)h Fv(p)1625 781 y Fx(2)1685 767
y FG(\016)c FH(Make)2005 729 y Fo(\000)p Fx(1)1189 915
y FH(Right)k FK(=)g Fv(p)1625 929 y Fx(3)1685 915 y FG(\016)c
FH(Make)2005 877 y Fo(\000)p Fx(1)2329 188 y


 gsave nulldevice


 2329 188
a


 grestore


 2329 188 a


 gsave nulldevice


 2329 188 a


 grestore


 2329 188 a


 gsave nulldevice


 2329 188 a


 grestore


 -458 949
a


 gsave nulldevice


 -458 949 a


 grestore


 -458 949 a


 gsave nulldevice


 -458 949 a


 grestore


 -458 949 a


 gsave nulldevice


 -458 949
a


 grestore


 -458 1125 a FK(Let)31 b(us)f(de\014ne)g FH(Fst)p FK(\()256
1122 y FC(x)306 1125 y FA(;)346 1114 y FC(y)398 1125
y FK(\))c(=)555 1122 y FC(x)635 1125 y FK(and)k FH(Snd)o
FK(\()1006 1122 y FC(x)1057 1125 y FA(;)1097 1114 y FC(y)1149
1125 y FK(\))c(=)1306 1114 y FC(y)1358 1125 y FK(.)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525
TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(54)9
b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 55 55
TeXDict begin 55 54 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation55) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.55) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bina)m(ry)37 b(trees/Equations)h(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(Note)31 b(that)f(our)h(de\014nition)f(of)36
b FH(Bin-tree)30 b FK(is)g(incomplete)i(on)e(purp)s(ose:)41
b(taking)-458 -137 y(the)30 b(ro)s(ot)h(of)f(an)g(empt)m(y)h(tree)g(is)
f(unde\014ned)h(\(i.e.)41 b(there)31 b(is)f(no)h(equation)f(ab)s(out)
-458 -24 y(this\).)-458 188 y(The)g(reason)h(is)f(that)f(w)m(e)j(w)m
(ant)e(the)h(implementation,)f(i.e.)41 b(the)31 b(p)m(rogram,)h(to)-458
301 y(re\014ne)f(and)f(handle)g(such)g(kind)g(of)h(situations.)-458
514 y(F)m(o)m(r)g(instance,)g(if)e(y)m(our)j(p)m(rogramming)g(language)
e(features)h FI(exceptions)p FK(,)h(y)m(ou)-458 627 y(ma)m(y)e(use)h
(them)g(and)f(raise)g(an)g(exception)h(when)g(taking)f(the)h(ro)s(ot)f
(of)h(an)f(empt)m(y)-458 740 y(tree.)41 b(So,)31 b(it)e(is)h(up)h(to)f
(the)h(p)m(rogrammer)h(to)f(mak)m(e)g(the)g(required)g(tests)f(p)m(rio)
m(r)h(to)-458 853 y(call)f(a)g(pa)m(rtially)f(de\014ned)h(function.)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525
TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(55)9
b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 56 56
TeXDict begin 56 55 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation56) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.56) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bina)m(ry)37 b(trees/Equations)h(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(The)30 b(ca)m(reful)h(reader)g(ma)m(y)g(have)f(noticed)h
(that)f(some)h(fundamental)e(and)-458 -137 y(necessa)m(ry)i(equations)f
(w)m(ere)i(missing:)p 0 TeXcolorgray 0 TeXcolorgray 0.2 0.2 0.7
TeXcolorrgb -367 -9 a FG(\017)p 0 TeXcolorgray 0 TeXcolorgray
-276 1 a(8)-210 -2 y FC(n)-162 1 y FA(;)15 b FC(t)-89
15 y FB(1)-42 1 y FA(;)g FC(t)31 15 y FB(2)184 1 y FH(Make)o
FK(\()473 -2 y FC(n)522 1 y FA(;)g FC(t)595 15 y FB(1)642
1 y FA(;)g FC(t)715 15 y FB(2)762 1 y FK(\))25 b FG(6)p
FK(=)g FH(Empty)-276 114 y FK(This)k(equation)i(states)e(that)h(the)g
FI(constructo)m(rs)i FK(of)e(trees)h(\(i.e.)41 b FH(Empty)-276
227 y FK(and)29 b FH(Make)p FK(\))h(a)m(re)h(unique.)p
0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb -367 354 a FG(\017)p
0 TeXcolorgray 0 TeXcolorgray -276 364 a(8)-210 361 y
FC(n)-162 364 y FA(;)15 b FC(t)-89 378 y FB(1)-42 364
y FA(;)g FC(t)31 378 y FB(2)78 364 y FA(;)g FC(n)167
331 y Fo(0)190 364 y FA(;)g FC(t)270 331 y Fo(0)263 390
y FB(1)310 364 y FA(;)g FC(t)390 331 y Fo(0)383 390 y
FB(2)536 364 y FH(Make)o FK(\()825 361 y FC(n)874 364
y FA(;)g FC(t)947 378 y FB(1)994 364 y FA(;)g FC(t)1067
378 y FB(2)1114 364 y FK(\))26 b(=)f FH(Make)o FK(\()p
FC(n)1609 331 y Fo(0)1632 364 y FA(;)15 b FC(t)1712 331
y Fo(0)1705 390 y FB(1)1752 364 y FA(;)g FC(t)1832 331
y Fo(0)1825 390 y FB(2)1872 364 y FK(\))26 b(=)-15 b
FG(\))-276 477 y FK(\()-241 474 y FC(n)-193 477 y FA(;)15
b FC(t)-120 491 y FB(1)-73 477 y FA(;)g FC(t)0 491 y
FB(2)47 477 y FK(\))26 b(=)f(\()p FC(n)288 444 y Fo(0)311
477 y FA(;)15 b FC(t)391 444 y Fo(0)384 502 y FB(1)431
477 y FA(;)g FC(t)511 444 y Fo(0)504 502 y FB(2)551 477
y FK(\))-276 590 y(This)29 b(equation)i(states)e(that)h(the)g
(constructo)m(rs)i(with)e(pa)m(rameters)h(\(here)-276
703 y FH(Make)p FK(\))e(a)m(re)i FI(injective)36 b(functions)p
FK(.)p 0 TeXcolorgray -458 841 a(These)31 b(kind)f(of)g(equations)h
(\(i.e.)41 b(uniqueness)30 b(and)g(injection)h(of)g(constructo)m(rs\))
-458 954 y(a)m(re)g(in)f(fact)g(alw)m(a)m(ys)g(desirable,)g(that)g(is)g
(why)g(they)g(a)m(re)h(usually)f(assumed)-458 1067 y(without)g
(explicit)g(statement.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525
TeXcolorrgb 2221 1639 a FJ(56)9 b(/)h(95)p 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 57 57
TeXDict begin 57 56 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation57) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.57) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bina)m(ry)37 b(trees/Left)i(to)g(right)f(traversals)p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -363 a


 gsave nulldevice


 -458 -363 a


 grestore


 -600 -250 a


 gsave nulldevice


 -600 -250 a


 grestore


 -506
-250 a FK(Consider)31 b(a)f(non-empt)m(y)i(bina)m(ry)e(tree:)p
0 TeXcolorgray 0 TeXcolorgray -141 292 a @beginspecial
71 @llx 668 @lly 148 @urx 721 @ury 770 @rwi @setspecial
%%BeginDocument: non-empty_tree.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: non-empty_tree.dvi
%%CreationDate: Mon Aug  6 13:13:50 2018
%%BoundingBox: 71 666 157 721
%%DocumentFonts: CMMI10 CMR7
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o non-empty_tree.ps non-empty_tree.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2018.08.06:1513
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 698 2017-12-30 19:08:50Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.28, 2017/12/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMR7
%!PS-AdobeFont-1.0: CMR7 003.002
%%Title: CMR7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR7 known{/CMR7 findfont dup/UniqueID known{dup
/UniqueID get 5000790 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR7 def
/FontBBox {-27 -250 1122 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR7.) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB981ABA2ACC9A23A5
3E152596AF52983541F86D859FC064A0E3D5FC6647C3CAB83AD4F31DDA35019C
CDB9E3DD3FEBD4C2B36BA3CF6E6C7DA85E25D8A31A9BAD39BDF31FD0D1790707
9DE6A078E8A409D8295F642DF492AC4F86AC84383B0F4C6BAA7C22AD5A898A71
D6CB34D2CD12266C486B75E75A69C14819DD9BB8159088E04D4717E576B8482D
BDA52110AC8B8A80E4E9D58F470EEBD3CF44A1E1EE8DA318FFF3611B02534FC9
F4018C7C57E80570D2F634D98BE5D5EC6D95051157F0EA94A3D12BE0B4B79939
F82F8D73136D3337C44E314B0B16CB030D9A12E01FB667105F334C3EE965E5A3
D410D2F1531547A4497C355AEEB295CD3C5334BEE5232992960B757594B89F3E
52095042DBE6B4DA3C3AD50CA95EA9EBADA10630B500CF1FCCA7D60306743681
7E428D33B7F7C40B425CD58E4CD8AB474BCE6A307BC6C6EBC15A8A96E0E2977E
A33389154536F5C5D8CF036D07F24094E779E5ACBE5502C92892F10F4C6DB627
C7EC4C7BF20B39418A8A85D7FD9B0EAAFD871DDD41F93BDE5FE619AFB8711824
DE890E62C1969A6FE28DD3578AF43D58A728FAFF0B9FAA640962C8F35A26F76C
67F3548D6DB54A25CEB368B47F97EA2B0C4D7C0E7894A4F0C823C6C1922CF9DC
10E05600556F1C7C9AFB33A2DB6F8730F70D6BF94B1FB0887451F2FFEEF3584F
DFADCFA9A2D4846B8F0E51620E1327D994CDF973B837D10C90FF76DE22B47CD5
EE3183898D156861AB4DFAD34A1E3FA260B8164E6680BF58413A553E88F6100B
C4F4E8E972C81A5F88A7DBCDC308B4C3581BCDE13877B976B1F84330839FE5CF
C78551620EB803DF94A5C921F8EE24F7EF8FC4C3E1653514212631F54F90E3DC
E9EAF96E998F340C4F729ECF7AB430FDB7C0BE3DF2C0D23015820E28B743CAD7
7F0AE95413C3EEABBC69E852F53EE1DC260D7F1E712BECEF2F18437DB23D8E74
2902AAFBC733AC5BAA452DD6F3671859AD836C8564E99CDC4183D8495AFD99D6
1F0D65B6588CE7546717911E25BDCA6C2649E3A7466A3E2DA7C7994A30AB4449
672EFD00632EFA8629C1AFB7D53D801028F77C864869FE636213A69173003EA6
BE1ABA95EB07B13D1594BEFCC95ECB0A9CFA9892EE0677D6B6C250855762B7A7
8E4E022640F93169DFA0303A0D5E73BF3E0F4D4AAD10FD7E4EB20532BA30371F
E9F480F9513432946F9828AFB5D4AEAFA5829B2CB544E5EB634C4537EF7DF08A
A1CFD94A52DCF0E7CE4C5EFFB01E6D50558B75DB4C8D5512B06080F27BE62E01
2EEA6A0357441401458C842D3DD4C35B8F561D816B336216CE0C14BF77648AF5
E33912CF95872A1E1AB9A18980A0B29A881D13397C15E1CBA5D3E0B27943EBE2
F3003D15EB446BCFC1C231832475D5B7AA19E4CFDE119D6CD62D053C6D29C333
5F729791D17B3F7108074EEF4D1BD101CB33E01004532CB0D716D2E54D169C6E
80163E70C0E9081F31A1ECBAE079D2A518B790B0CB2CD03DFD034A0F4788E800
B0CD2DC1FAFDD487C2F381EBAB2A2F3F3AF82021B211DC9CD2FBA6A1BB3D4AEA
4C7F3D9A5C21DFF284CCB827D205A69638E98D5DD8E36AFC1A4481B5CB2A2E8F
D6C838DA6F81990F5ED928DC7457501B5C979FF4CD20A830896A460C5DB13D56
A3B2B5D9B292374A9BF392894DD99FCD6A1E655AB395E839F074D1596488700C
4E2891C8AEEF66568E82A8B826F9A28FF84D4D9BDA21F638EAF96880B4EBE0D8
081982F34831A03BEE81FC177700C2360D2A48915EC40D5FE85B400E175D5AF1
067FA0097904FB647757BB44B4042D30D1557BD0F7922D731142FD682139CEB7
58CA4C8C240A0B86B1888CACC507E24E04020BF1882BD9B4CAECFA97DB24D7F5
AD64C69454027F198BA35881B94EE9159A2D73E450C3BDAED66B886D6DEBC84B
653E165176228F88993F12A170775A8D7038BDF2FE8DC1F7B98BDC02D1E6686E
9B834F6C0AD90780B17DFE25F0A4E470CBA84E73F2D22BEE09A040F14CFA2C14
0FDA5A5149B5FAFFE49F55EEFC43831BC43A8326FEE9C7F469C0FC3B000884FA
41DA7318EB57262CB96FC4EC7F16CA07FE1C3BE8C2DBC8A8135953D6DDF20BDF
75A2B6D26074FCE752BD32FB9F5CA797775E8DB9BB9786B469A3CD65A0D9DDDA
C2A166E454A94860EEF5B5C12172DDFC576A03F6E6F8A735FF21A3E9CCB4CAA1
3064893487697986A42CB5888B2B0A79FA3C74E8187BDDF7BEAB884B70B8D4AA
AC6615745AEB906E08BF831CFDE222F58D02B428D55E9D5A3CDE74E42D8A2CB7
E1A3A9439B678AD438793ABBEB72B21C58981DAF3EDCE4BB93D95F4A1E943BBC
B3A012DE92FED4F232A3A7D60CE60B605151F9C7C18A5C653E5D6D15E5B49A63
73E7A339504D0ACC74B8B116EA88C3EBA2CC631AAB29F761E5F062966AD2FD28
7FFE52FA8A115DBE23E471094FFB3CBAFBDF11B7E9058313F2D069B2CE98A962
64645738F02A31E2F2AC11628724034ADBCEE012721EBF0A567893411F950410
B20754A7510D041FFA6144AC9CC46D846B82581F20BBD001D34D9764010824BE
61C30D05E5C5D100A24F1917F01799CF5BC4E50FCECFEA732CB50196825F0E08
8A1EC868C6D4357857EE2957E081A0E4372E31A8ABEF23C3F2EA0FEE57DE4D08
61C570175C41AA0C7A3A579ADF593F18B4AE3782D2552E4E0759C32E059EE741
2D8191E381731769F6648B3581CAF11DAE46471896666F18F02918B0860BDA3C
BD5DE777672447C23C62ACFC2611ED5239D6A266FDA6031EBC5A530C1A2FF7A6
B4380B9A4C877267854AD1F1677CB5433F28894ADF93D39EAB94541A8D232E08
22D082D0951A60F62B87DC028714EC74133A4D65F7D0D1296C0E189C4A42AA98
28E8AE7ECBB9FC8DFABCC6EEB1E9FB06227F90808EF31331CCC5D4C9A6182181
047902DC9FD0444FB94B60FC74F3B677758088CE6A159D940C5CF682335E756A
8BACF06AD7225D49B0002392C889B0FE2C71311D2596F4903D12FA20BA2FFE25
A0804B4BC282929BE31E0F46B34532CB5795A65218CFAE21F390792DA67775C7
B91A2BF4C16DE4F6551DAE3A5827F616BE9040EE6B1008DA2F99A01EF66D697A
6CD1A44E0A15D1F39EA8025E886A68A1E9C334327C7703EE721E497CA924AC90
7723106D913C5ED4BA4FC743CEA8D0F5172526107DA65775C0B1B77179D336C2
9B09B608D80B1A1E87CA1A84A833A00D980D919BFF56F6390E9D5B45E9935CF5
E69D003564462F750F7DCE02DC23CC215A0696B74D8BD3156A392A94F557655E
00BFAA035647568ED66157FACC585E411F7F428569C147DC43F6E4FDE693D0F3
9917BEFEDF61FB980B85515FF6424824E2D995B05CA1E5D3E8BD8D3281DB7CE4
E54923E84058FFC0A8A2C491327D0F87CE4C352B724167CEE224DABA3B95757E
4A419594BE4F92E78BA6D35D4C93D31ECC3134B24A45DC32445725BB044F09A3
AA8C31EFC0A2944ACE2F2CE054CF24DB350FB3C71115518C24BDC0F7E54250AF
9D3378D38480E1CB9029F31570C619A28F065CA4FED5665EDB96712ABEB33B9B
4232C00C1B0215F08D53F7E430887035AC25BEAF06942FD1B6C442253C887AB7
D694C1A6115C8990B4CAF1E81DD1FDDD6B03C00055BE956BE7FD8A4E1049AE69
EDA8593CBA8C4A41E046C689FBBF9F1B64E5856A7FB1C61EC815A56DE2A8ED33
41F370B8203D4E5B19C63AE9E6E0D26F4F3814B5AF48AD30EC9B8402C941FDD9
722FCAFC638FBB835F83DC77F93D367266FA7DFFFCB567EF82B1695AB4D94D09
B18AC041811027229DF431F5CB2BBF6ACCE9D500C8F075A74590641C1A607C56
D2B8624797BCD9C91C3177818691FBB4744EDB6056464A0B95B8D63F7C22309B
82D6126E2057BCC9FE5566D96B7A9B201A09B0D3252A5494C8CA2C8BA8A13C29
37EF2A882D61DA708C279F663D88A8E2999A0F3B6F98C49901A7631BF7708B67
54D0B4C52BF4BE0DA0439E6763A7C9D639AD4092E77B13D3510DAE1475C978AC
796F9B2AAD3BFF35C5A3E19B5E2BF704B3BBDF68CE48BA4FA2496D60E58888EA
28AE12D00E9F0816FAC190590A865BB58569A91BF0345D01230ABA361442006D
BA2C90EC2036BBAB79EBAFC3F217DBD5854C519235F9627A1C3C71D21ED38AEF
0BB40F3B86BB9F09A3F309473D8757AB7E638DC1C59A7F9BCD49DE4107A2E54F
422767FB94048987847205584309397F554744690ACFFDF5902FE5DB355930B8
71863217830DD7A563B0B3A4025ACE75B0E777B4414B62A13B50C54E0E6D47E9
D43BF769B9411B74E1069BF71BA873B4B8973EC9BA492A5DEA58D267872BB246
10AA67B143D0E2223FFB4991E583E629413CC894C3FA4869B72D19CE1A0CEC8C
0FF5E5A3EC1FCB7D3C4289813F0D249A11B55104BD60B2A89BEF44CC77CCDA9A
065B8B83B4F4253AA1D535290DCFAA4773452D110D2B3370F9E2FE5432B54A9E
644EB3BA9BFF62347F376839024CD5EF3C5DFD30F412DD5474B7933E6A1AB63B
4B12F2417C72D0543C26A263AEA53E5BAEBD67E23553A72E949DEC556BEB5D09
C4D7A89B14FE4EC68D0E3E9D65A64B285E53590F418EDA8175113CA375A29930
DDCF4C71ABB26CEB800C2C2B253AC1F53651C88A56ABE5A74F3B54CB4FFDDB92
60AD7272BA25EC2F6FB759AA6E1E7964FB55AD09F4EB25DE45FD01833947BD05
6266AA8ABB7DD792941C7A070FCF3A4636FBF8921C70298D42FE92F079DBA2AD
6149D9CF9EF7264DE6DFCD4429949B15EA90B596340713BD61926DDB2BB23BE8
F9DE38A31620A817420A245946E551463960A8C5C7295E3B3D6A59BCDF5E472A
40B7A2CDDAA43CD8AAFC411D037142579D11054A903E102DF0D0C7B5BB854DBA
F3F086AF991F7F5D5C730F8F9AF213F25786F3EC0E54530FF912F4876FDE16B6
A07D0DC4FC46EC6363BCB68B83ACC448B801EC43FDD2F8BE0E93D809FF81E38E
176AE17C67C85FEA58EC95435434C49A950AA955D8B20989C550AB1F1C31B7FF
99422E1F48FB7D6F327C6DBC4695A03903DB275B94CB39386E46579271870A25
21823E75C377E9D5B46655E8CD8F986372CF8BA846423E26582315A9D19E0BF5
305C32B2A0EAC3ECB275B1D8BE11A37ADF524944219D94EA2C5DBDA768828B6D
775DA8CDB09E0570E4ADDF462EFD8D3FA3F86B1DEECDFFB699AF6507257C1879
16FC615868C2D51F03CD57BA38D42995D9164B257441210084DC409B6EE4C119
0B2E17B0A8D5326DD0010E4A325D5F77BF935693BC90A00A28C7B5F74817DA39
F47A41E32F4F92AA04D30D810F7B1484EB53AD8CFC8CE8928B570314E0F713F8
AF127227190F9C16BB73D2A217FF801C391A29095DA5E4974D137A0CAA7DE702
E20DD4755B1D78739756A5E7EC3542B96AD6844199FFA2F5F2E9C64E2DA4FB2A
ED79869F745C59D235438251BC2E6D26112AAED20E06021D1AB896EE1F1DD2EB
437FBD4A25E42245C5A647493FCC9922E6DD7AF57D5D482921D1CBD6F0F02949
C27777144751C1E72F4EE2BC343D4AE7A8A8758123B54FB1A026144C643651EF
0907A376945E19A8FC7F98A034832A5820A481B0823F980F59623E0511593FEA
BDE6EFBCC0383242CBD4954027B075B21F10472059A480D6E5ED01C3B07461CE
9810251A5C5643EC7403130C2246E8616CEA25EAC7A0076731FEA8CC43BCE3BE
933FCE61067F5FD402E67E2B9DAD954AA77C5BC86BC5E4BCE2ED676D8D8EC7D0
ABC5C86D82180B9D5D7451C71B5149B6B67883578DE9909317928C0A92E3205E
F23015400A1763A6FBF67FDE3318AD2696685A1832FC31CF38589EBC7CA1C818
60D2B2211E04EFCCEA88D9A9082E82951EEB123924A267CB03C48889032F2892
4227E217FA28F87E01CBF27BF1EA60641A4238258CB7AA355908FE36D90F5CAD
FE992D03A33E47CA9AEBEFDA57793F39DC6A9E85D5B289F6B862B35DBCF82E43
5CD6A862F6FFAC36478C384C3BDB0148CB1FEDF55969C776E77917635B5A65EB
F2AD351D21CD3822D43289FE8EB0FED58182997097C7E9F4373553AE1CA92083
EDE3BBE6C3BC7009D15AB5FEC6A59E9FD1BCC7B2099CA15FEF083B9CBF7B890E
CDDDE6BA0AFF306C76500C945DC91BD533FF9A585CEEDEF79238C54E6168001E
26FEB29E523EE501BFA4F60B782B1499B07084C35A2434B4D29D3D8E2C8F945F
A9922443B68D07DF7EAA1F4CDEFFC438B597D8943E231B5216808A85F30EDC81
9DF5DD22F54A45335B4C2203887475F39D247F0E7347BACFEAF220ED82F9263A
6488E73C1910023E505FDEB143006C1A351D441AC57F9D52D2C6D63D78C75605
999885676BBBAD56074298E0BFDACBA1830BA58E87F436CC670EE8EB1870154D
72DDBBF3794F8CAAA3F1E11DE29752DD99EAC695838A19BB67A1FA3829B6E0BC
5301610A0351AAA749F456AE31ADD87D6ABADCDD1FB3CE81C3713F48780DF407
530CB284B2AC709F52EE7AD647DEF9FA4D2A867CCEF728F3D40CF34C28D21527
10160B3DAFB5FE16AFC9D36C6EC4021FC189005862082BEA60AC72B63AD27D72
FAF3C2D89DA2648FC4C65104A069212D87144E8533CD86A6D73DC7CD9DBA25CE
7DA53B000266F3871B24663C77723703315C5E4A89DFCDBAB384AE7EB2F455AE
AB191FED406F7F6EC9E5B8276EF5C4CBA041AC7E8BCEC7CAE840154BDCA3232F
15711ABD1E867A434E9787CA0A6D1F197597DA27ED2402CB2D84ED082E8D3A39
81E6EB270DCA4E7A90E2BEBD3CBB3A2BE3CAB926192D7292CC16845B6399A543
BCFD224BB52F21352732DB5154FA3442733066CDC3E186D8AA97CD801DFBE43A
116C86889BE198DA88CA978B8C40ACB67E8F7BA499DE68A6FF0DC72C3D00BA1A
B378B39610F15CA026F95ED8155CE3FFFFA2E2FEB352DBE14CEE1669F2387B70
55B91185FBBED764266215D518716EDA3DFC9E5DB6B148A553E75AE5E38E1CFC
6EF47B314D54CF24BC13856F4F7C976BB91D143DE32FF49BFFC87E17885A1893
BA1B8E441B08EFC04F7D103C1FFBB665194B3D0920473740C55FB1C50EBCF717
A2359B687FCEAD65616EE89A68F8D91AFACAA0B238EE4AF0279AF5BE5294C3DE
A7E1F5E6248C0210E7D40683F04B12A933C746ECB517CF94BBCC6E4CF49AC715
D8005AFECBDFB7A6B417DB8A28F8E9EAF39CEC1CA64DF37A5E66A76C26F721F8
A63B003A040A62F87DCF61B298F960D510BEFA453F118E59E7DE8CA3DD002EF0
127EAF733D5C61B5132348D280F84D159809CC71A3C6F7373BBFD8D6EF715D34
0016DEFF14AA5F960BF1BB9AC304A1823722843547BB4CA5EA4C41C6C2701C8F
7BDC810443F9DF34BA469A3260009B799871BAF8523C8763544DCD0B382D44C5
F75046AFF85F0B5A3188C2EE786CEEE5496A5AF4BCB0B429CAFC403FB983EFE3
61FD9F52ADFC38E07A0FD7BACBA530D2E4DAB2592AA9564843E7E2305047F060
C5FE4243FA8FDF1B5D4F61ACA7850A604FBC6D6970959752695C90F78961B4E2
C8CFA41082B1A37405AABCEE5BA3DC2B9EA76F486117B84728EC6D8AE6379CCB
402C2AA89078EC992C00D53151E9D82C65643F549A572A20F05107A41BE5AC57
8EDE92AE20B05E2D0C98151CC92D5389A675DFE39DF546A33A84A4C534337ADE
B17C34E09145B37CE1EB1D10D42CC8D6E6B127A3809F7202381FDB88D42084CD
0AEAEB8A8288CB56870EA2BE9D0B9DC8291021CA561E2BA388DA3494E433E0EE
5E69DA51D0AC505C9F71562D3E9750F23CF14D2C8ECF0692FBBCB4A92B48B4B0
AA2163A516AD96B9354BCDBEBB351B643BF3CB00446AFFC4A137CB928E99D626
4824385F1E9CEAE6E317451B4ED21EF01ACC5ABA985FB14EE70247FA3B66ECEE
431352ED45182614EA3D57BDC22E5A04D5AAB27C8ADCD7BC07BBAB21A1901F39
4C9C008D353F0EED437BC00D2E65A3652361D50E16C785B66DC1D551961F641B
032E133A31A61A335EA302469363987224158BBCAC91357E79DC8F409A928EB1
8E1FFCDC81E7B443ECF0A6D728FAB96395460B33F57CA9B88C746B9B7B453D4C
0755B802DD31E854C52DA0804B611B6014BDF91BF76B6E491F4BD5C46574FDCE
673B03F3D6FD5F8B860A2556FCE98FDCAFA81B35DAA07BEDB39ADAA041BE5ED0
02EE5663F1C139979D11BBB51693C13514CF00CC7F9E9AA38726D6B1AEDAAA46
FEFE290831071E035F68E9FB2AB771DFD9E7EB3E255BD3FD51F325AF0AAB03F3
C001351BCC357E49F8A94A7481991B6239C7D48C5D55D3FED290DF6AFB2E23EF
1FB63022D8230A40B34546705D09709C2A02F219434E951DFA82A1339C095723
10190C4CA5F9B9F98179382216FE74381A001AB228066DC706493D1267F2263B

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 114 /r put
dup 116 /t put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D9173633D9B50449E0
F9026E7A4CC1A3694D6C030E5AE53C0DAAF90B0046E22E14FF2787AC8194C42A
4B8846856AE0D8AD9B38FC12D3BDAF7171A4F8143E23A42B10DD9935FBE74486
9ED3A1A42FC9CC8AEB8600594E0691F6700E93C9B70B8A244E8EEAD2A814BF36
C21ABCD2BEEF3B0E3D5C4FC850861A7DC923B0A7A2F59ACF12823DAEE3A1B2A6
1BC26547ABE593A765692488A70A241D75113322DDCF3C917A36E4927B659F46
4DCD7FACA9873C4E8954592A4B314395254931633A5FC241530B399E71FAF4CC
659F7D2753A9ECAD02636528327B5A7F9C46ACE41DB514D8EC4BDBC7E3E10889
2F23FEFB89120A8C322010657CA487D8662C5F6D1097616C1B5885CCE33B1EC0
6636BB2D72D2EF6146B7C7CA1AF62A28FE672FB25B87D1C52928E7EDBCD3407E
8583024A7D218FE475985A41192885E69B56795259D7272CA0DEF5D76FC1F85F
234E93D98A13E33935AFADA14D32210C339778215D9BF708B1712BF6012131F9
C4B1E60DAE9B22D924661405CF61DCD5172287C374C76DBD97FDE3E0EE21BF28
B56B22A49E77FE0F59C0E83C2A55B81ED29D54283DC7B1931DE84A6FA1394DB2
E6329B52551190BFF024C979E68A0D32034138C535E82F1FB10DA347BA626384

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (non-empty_tree.dvi)
@start /Fa 205[33 33 49[{}2 58.1154 /CMR7 rf /Fb 139[30
1[37 114[{}2 83.022 /CMMI10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray 0 59 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 0 59 a 0
59 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 59 a 0 59 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 0 59 a 0 59 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 59 a 0 59 a
tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 59 a
0 443 700 443 v 700 59 a
currentpoint grestore moveto
 700 59 a 316 76 a
tx@Dict begin  tx@NodeDict begin { 4.78937  2 div 4.30554  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@T-0 11
{InitCnode } /NodeScale {} def NewNode end  end
 316 76 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray    4.78937  2 div 4.30554  0.0  add 2 div 2 copy
0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360 arc closepath gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial Fb(r)0 399 y
tx@Dict begin  tx@NodeDict begin {20.99881 5.29999 29.7909 14.89545
20.99881 } false /N@T-0-0 16 {InitRnode } /NodeScale {} def NewNode
end  end
 0 399 a 90 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   /Lineto /lineto load def 0  setlinejoin false
pop 0.5 29.7909 26.2988 0 -90 mul 4.04861 -5.29999 Triangle  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial Fb(t)120 411 y Fa(1)124 225
y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0 /N@T-0-0 InitNC
{ NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 124 225 a 424 399 a
tx@Dict begin  tx@NodeDict begin {20.99881 5.29999 29.7909 14.89545
20.99881 } false /N@T-0-1 16 {InitRnode } /NodeScale {} def NewNode
end  end
 424 399 a 91 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   /Lineto /lineto load def 0  setlinejoin false
pop 0.5 29.7909 26.2988 0 -90 mul 4.04861 -5.29999 Triangle  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial Fb(t)545 411 y Fa(2)548 225 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@T-0 /N@T-0-1 InitNC
{ NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 548 225 a
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 865 -250 a


 gsave nulldevice


 865 -250 a


 grestore


 865 -250 a


 gsave nulldevice


 865 -250
a


 grestore


 865 -250 a


 gsave nulldevice


 865 -250 a


 grestore


 865 -250 a


 gsave nulldevice


 865 -250 a


 grestore


 959 -250
a FK(A)g(depth-\014rst)g(traversal)g(from)h(left)f(to)959
-137 y(right)g(visits)g(\014rst)f(no)s(de)1776 -140 y
FC(r)1817 -137 y FK(,)h(then)h(the)959 -24 y(left)f(subtree)h
FC(t)1449 -10 y FB(1)1526 -24 y FK(and)f(\014nally)f(the)h(right)959
89 y(subtree)h FC(t)1296 103 y FB(2)1342 89 y FK(.)41
b(But)30 b(if)g(w)m(e)h(w)m(ant)f(to)h(k)m(eep)959 202
y(track)g(of)f(the)h(visited)f(no)s(des,)g(w)m(e)i(have)959
315 y(several)e(w)m(a)m(ys.)2329 -250 y


 gsave nulldevice


 2329 -250 a


 grestore


 2329
-250 a


 gsave nulldevice


 2329 -250 a


 grestore


 2329 -250 a


 gsave nulldevice


 2329 -250 a


 grestore


 -458 332 a


 gsave nulldevice



-458 332 a


 grestore


 -458 332 a


 gsave nulldevice


 -458 332 a


 grestore


 -458 332 a


 gsave nulldevice


 -458 332
a


 grestore


 0 TeXcolorgray 0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb
-367 543 a FG(\017)p 0 TeXcolorgray 0 TeXcolorgray -276
553 a FK(W)m(e)h(can)f(reco)m(rd)302 550 y FC(r)343 553
y FK(,)h(then)f(no)s(des)h(of)f FC(t)980 567 y FB(1)1057
553 y FK(and)g(\014nally)f(no)s(des)h(of)h FC(t)1864
567 y FB(2)1910 553 y FK(:)41 b(this)30 b(is)-276 666
y FI(left)j(p)m(re\014x)h(traversal)p FK(;)p 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb -367 794 a FG(\017)p 0 TeXcolorgray
0 TeXcolorgray -276 804 a FK(w)m(e)d(can)f(reco)m(rd)i(no)s(des)f(of)f
FC(t)662 818 y FB(1)709 804 y FK(,)g(then)962 801 y FC(r)1033
804 y FK(and)g(no)s(des)h(of)f FC(t)1585 818 y FB(2)1632
804 y FK(:)40 b(this)30 b(is)g(a)g FI(left)-276 917 y(in\014x)k
(traversal)p FK(;)p 0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb
-367 1045 a FG(\017)p 0 TeXcolorgray 0 TeXcolorgray -276
1055 a FK(w)m(e)d(can)f(reco)m(rd)i(no)s(des)f(of)f FC(t)662
1069 y FB(1)709 1055 y FK(,)g(then)h(no)s(des)f(of)h
FC(t)1346 1069 y FB(2)1423 1055 y FK(and)f(\014nally)1846
1052 y FC(r)1887 1055 y FK(:)40 b(this)30 b(is)g(a)-276
1168 y FI(left)j(p)s(ost\014x)h(traversal)p FK(.)p 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb
2221 1639 a FJ(57)9 b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 58 58
TeXDict begin 58 57 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation58) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.58) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bina)m(ry)37 b(trees/Left)i(p)m(re\014x)f(traversal)p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(Let)31 b(us)f(augment)g(the)h(sp)s(eci\014cation)f
FH(Bin-tree)o FK(\(no)s(de)q(\))h(with)f(a)g(new)h(function)-458
-137 y(realising)f(a)g FI(left)j(p)m(re\014x)i(traversal)p
FK(.)41 b(In)30 b(o)m(rder)i(to)e(reco)m(rd)j(the)d(traversed)h(no)s
(des,)-458 -24 y(w)m(e)g(need)g(an)f(additional)f(structure.)41
b(Let)31 b(us)f(tak)m(e)h(a)f(stack)h(and)f(call)f(our)-458
89 y(traversal)g FH(Lpref)p FK(.)-458 301 y(The)h(additional)f
(signature)i(is)e(straightfo)m(rw)m(a)m(rd:)17 506 y
FH(Lpref)24 b FK(:)h FH(Bin-Tree)q FK(\(no)s(de\))p FA(:)p
FK(t)h FG(!)f FH(St)-6 b(a)n(ck)o FK(\(no)s(de\))p FA(:)p
FK(t)-458 697 y(The)30 b(co)m(rresp)s(onding)i(equations)e(a)m(re)-10
879 y FD(Lpref)q FE(\()p FD(Empty)p FE(\))23 b(=)g FD(Empty)-371
1004 y(Lpref)q FE(\()p FD(Make)31 b Fe(\()204 1002 y
Fw(e)246 1004 y Fe(,)g Fw(t)332 1016 y Fn(1)373 1004
y Fe(,)g Fw(t)459 1016 y Fn(2)500 1004 y Fe(\))p FE(\))23
b(=)g FD(Push)o FE(\()912 1002 y Fw(e)955 1004 y Fy(;)14
b FD(Append)p FE(\()p FD(Lpref)q FE(\()p Fw(t)1639 1016
y Fn(1)1681 1004 y FE(\))p Fy(;)g FD(Lpref)q FE(\()p
Fw(t)2056 1016 y Fn(2)2098 1004 y FE(\)\)\))-428 1200
y FK(where)31 b(w)m(e)h(omitted)e(the)h(p)m(re\014xes)g(\\)p
FH(Bin-Tree)p FK(\(no)s(de\)")h(and)-458 1313 y(\\)p
FH(St)-6 b(a)n(ck)p FK(\(no)s(de\)".)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(58)9 b(/)h(95)p
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 59 59
TeXDict begin 59 58 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation59) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.59) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bina)m(ry)37 b(trees/Left)i(p)m(re\014x)f(traversal)g
(\(cont\))p 0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0
TeXcolorgray -458 -263 a FK(These)31 b(equations)f(must)g(obviously)g
(b)s(e)g(o)m(riented)i(from)f(left)f(to)g(right:)-57
-81 y FD(Lpref)q FE(\()p FD(Empty)p FE(\))24 b FF(!)f
FD(Empty)-343 44 y(Lpref)q FE(\()p FD(Make)p FE(\()197
42 y Fw(e)240 44 y Fy(;)14 b Fw(t)307 56 y Fn(1)349 44
y Fy(;)g Fw(t)416 56 y Fn(2)457 44 y FE(\)\))24 b FF(!)f
FD(Push)o FE(\()884 42 y Fw(e)927 44 y Fy(;)14 b FD(Append)p
FE(\()p FD(Lpref)q FE(\()p Fw(t)1611 56 y Fn(1)1653 44
y FE(\))p Fy(;)g FD(Lpref)q FE(\()p Fw(t)2028 56 y Fn(2)2069
44 y FE(\)\)\))-428 240 y FK(where)31 b(w)m(e)h(omitted)e(the)h(sp)s
(eci\014cation)f(p)m(re\014xes.)-458 452 y(This)f(is)h(a)g(left)g(to)h
(right)f(traversal)g(if)g(the)g(evaluation)g(strategy)g(computes)h(the)
-458 565 y(value)f(of)g(a)m(rguments)h FC(from)g(left)f(to)h(right)p
FK(.)-458 778 y FC(It)f(is)g(imp)s(o)m(rtant)g(to)h(distinguish)e(b)s
(et)m(w)m(een)j(the)e(moment)i(when)e(a)g(no)s(de)h(is)-458
891 y(encountered)h(and)e(when)h(it)e(is)h(added)h(in)f(the)g
(resulting)g(stack.)41 b FK(Therefo)m(re,)33 b(if)-458
1004 y(the)d(a)m(rguments)h(of)37 b FH(Lpref)30 b FK(a)m(re)h(computed)
g(from)g(right)f(to)h(left,)f(the)h(traversal)-458 1117
y(is)f(from)g(right)h(to)f(left,)h(but)f(the)g(no)s(des)h(in)f(the)g
(\014nal)g(stack)g(will)g(b)s(e)g(o)m(rdered)-458 1230
y(from)h(left)f(to)g(right)h(\(as)f(sp)s(eci\014ed\).)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525
TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(59)9
b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 60 60
TeXDict begin 60 59 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation60) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.60) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bina)m(ry)37 b(trees/Left)i(p)s(ost\014x)f(traversal)p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(The)30 b(additional)f(signature)i(fo)m(r)g(left)f(p)s
(ost\014x)f(traversal)h(is:)17 -46 y FH(Lpost)24 b FK(:)i
FH(Bin-Tree)p FK(\(no)s(de)q(\))p FA(:)p FK(t)g FG(!)f
FH(St)-6 b(a)n(ck)n FK(\(no)s(de)q(\))p FA(:)p FK(t)-458
145 y(The)30 b(co)m(rresp)s(onding)i(equations)e(a)m(re)1241
328 y FD(Lpost)p FE(\()p FD(Empty)p FE(\))24 b(=)e FD(Empty)881
452 y(Lpost)p FE(\()p FD(Make)30 b Fe(\()1454 450 y Fw(e)1497
452 y Fe(,)g Fw(t)1582 464 y Fn(1)1624 452 y Fe(,)h Fw(t)1710
464 y Fn(2)1751 452 y Fe(\))o FE(\))24 b(=)-376 577 y
FD(Append)q FE(\()p FD(Lpost)p FE(\()p Fw(t)271 589 y
Fn(1)312 577 y FE(\))p Fy(;)14 b FD(Append)q FE(\()p
FD(Lpost)p FE(\()p Fw(t)1028 589 y Fn(2)1070 577 y FE(\))p
Fy(;)g FD(Push)o FE(\()1372 575 y Fw(e)1415 577 y Fy(;)g
FD(Empty)p FE(\)\)\))-428 773 y FK(where)31 b(w)m(e)h(omitted)e(the)h
(sp)s(eci\014cation)f(p)m(re\014xes.)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(60)9 b(/)h(95)p
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 61 61
TeXDict begin 61 60 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation61) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.61) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bina)m(ry)37 b(trees/Left)i(p)s(ost\014x)f(traversal)g
(\(cont\))p 0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0
TeXcolorgray -458 -263 a FK(W)m(e)31 b(o)m(rient)g(these)g(equations)f
(from)h(left)f(to)g(right:)1232 -81 y FD(Lpost)p FE(\()p
FD(Empty)p FE(\))24 b FF(!)f FD(Empty)946 44 y(Lpost)p
FE(\()p FD(Make)q FE(\()1486 42 y Fw(e)1528 44 y Fy(;)14
b Fw(t)1595 56 y Fn(1)1637 44 y Fy(;)g Fw(t)1704 56 y
Fn(2)1745 44 y FE(\)\))24 b FF(!)-385 168 y FD(Append)p
FE(\()p FD(Lpost)q FE(\()p Fw(t)262 180 y Fn(1)303 168
y FE(\))p Fy(;)14 b FD(Append)q FE(\()p FD(Lpost)p FE(\()p
Fw(t)1019 180 y Fn(2)1060 168 y FE(\))p Fy(;)g FD(Push)p
FE(\()1363 166 y Fw(e)1406 168 y Fy(;)g FD(Empty)p FE(\)\)\))-428
364 y FK(where)31 b(w)m(e)h(omitted)e(the)h(sp)s(eci\014cation)f(p)m
(re\014xes.)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb
2221 1639 a FJ(61)9 b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 62 62
TeXDict begin 62 61 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation62) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.62) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bina)m(ry)37 b(trees/Left)i(in\014x)f(traversal)p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(The)30 b(additional)f(signature)i(fo)m(r)g(left)f
(in\014x)f(traversal)h(is)g(simply:)53 -46 y FH(Linf)c
FK(:)f FH(Bin-Tree)p FK(\(no)s(de)q(\))p FA(:)p FK(t)h
FG(!)f FH(St)-6 b(a)n(ck)n FK(\(no)s(de)q(\))p FA(:)p
FK(t)-458 159 y(The)30 b(co)m(rresp)s(onding)i(equations)e(a)m(re)12
363 y FH(Linf)p FK(\()p FH(Empty)p FK(\))25 b(=)g FH(Empty)-386
501 y(Linf)p FK(\()p FH(Make)33 b FI(\()170 498 y FC(e)216
501 y FI(,)g FC(t)310 515 y FB(1)357 501 y FI(,)g FC(t)451
515 y FB(2)498 501 y FI(\))p FK(\))25 b(=)g FH(Append)o
FK(\()p FH(Linf)p FK(\()p FC(t)1329 515 y FB(1)1376 501
y FK(\))p FA(;)15 b FH(Push)p FK(\()1707 498 y FC(e)1754
501 y FA(;)g FH(Linf)q FK(\()p FC(t)2057 515 y FB(2)2104
501 y FK(\)\)\))-458 705 y(where)31 b(w)m(e)g(omitted)g(the)g(sp)s
(eci\014cation)f(p)m(re\014xes.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525
TeXcolorrgb 2221 1639 a FJ(62)9 b(/)h(95)p 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 63 63
TeXDict begin 63 62 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation63) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.63) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bina)m(ry)37 b(trees/Left)i(in\014x)f(traversal)g(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(W)m(e)31 b(must)f(o)m(rient)h(these)g(equations)f(from)h
(left)f(to)h(right:)-39 -46 y FH(Linf)p FK(\()p FH(Empty)o
FK(\))26 b FG(!)f FH(Empty)-355 92 y(Linf)p FK(\()p FH(Make)o
FK(\()163 89 y FC(e)210 92 y FA(;)15 b FC(t)283 106 y
FB(1)330 92 y FA(;)g FC(t)403 106 y FB(2)450 92 y FK(\)\))26
b FG(!)f FH(Append)o FK(\()p FH(Linf)p FK(\()p FC(t)1298
106 y FB(1)1345 92 y FK(\))p FA(;)15 b FH(Push)q FK(\()1677
89 y FC(e)1723 92 y FA(;)g FH(Linf)q FK(\()p FC(t)2026
106 y FB(2)2073 92 y FK(\)\)\))-458 296 y(where)31 b(w)m(e)g(omitted)g
(the)g(sp)s(eci\014cation)f(p)m(re\014xes.)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(63)9 b(/)h(95)p
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 64 64
TeXDict begin 64 63 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation64) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.64) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bina)m(ry)37 b(trees/Breadth-\014rst)h(traversal)p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(Let)31 b(us)f(consider)h(the)f(pictures)h(of)f(page)h
(46.)-458 -37 y(The)f(idea)g(it)g(that)g(w)m(e)h(need)g(to)g(\014nd)f
(at)g(each)g(level)h(the)f(no)s(des)h(b)s(elonging)g(to)-458
76 y(the)e(next)f(level,)i(adding)e(them)h(to)g(the)g(p)m(revious)g(no)
s(des)g(and)f(rep)s(eat)h(the)g(sea)m(rch.)-458 188 y(So)h(w)m(e)h
(need)g(to)g(handle)f(at)g(each)h(level)f(a)g FI(fo)m(rest)p
FK(,)h(i.e.)41 b(a)30 b(set)g(\(o)m(r)i(stack\))f(of)-458
301 y(trees,)g(not)f(just)h(no)s(des)f(b)s(ecause)h(no)s(des)f(do)h
(not)f(contain)h(the)f(subtrees)h(\(thus)-458 414 y(the)f(next)h(level)
f(no)s(des\).)-458 627 y(Therefo)m(re)i(let)e(us)g(add)g(\014rst)g(a)g
(function)g(to)h(the)f(signature)h(of)-458 740 y FH(Bin-tree)o
FK(\(no)s(de)q(\):)-71 944 y FG(B)d FK(:)d FH(St)-6 b(a)n(ck)o
FK(\()p FH(Bin-tree)p FK(\(no)s(de)q(\))p FA(:)p FK(t\))p
FA(:)p FK(t)26 b FG(!)f FH(St)-6 b(a)n(ck)n FK(\(no)s(de)q(\))p
FA(:)p FK(t)-458 1148 y(such)30 b(that)g(exp)m(ression)h
FG(B)s FK(\()453 1157 y FC(f)501 1148 y FK(\))f(is)g(a)g(stack)h(of)f
(the)h(no)s(des)f(of)h(fo)m(rest)1799 1157 y FC(f)1877
1148 y FK(traversed)-458 1261 y(in)f(a)g(b)m(readth-\014rst)g(w)m(a)m
(y)h(from)g(left)f(to)h(right.)-458 1474 y(Let)g(sp)s(ecify)e
FH(F)m(orest)o FK(\(no)s(de)q(\))c(=)g FH(St)-6 b(a)n(ck)o
FK(\()p FH(Bin-tree)p FK(\(no)s(de\))p FA(:)p FK(t)q(\))p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525
TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(64)9
b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 65 65
TeXDict begin 65 64 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation65) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.65) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bina)m(ry)37 b(trees/Breadth-\014rst)h(traversal)g(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -363 a
SDict begin H.S end
 -458 -363 a -458 -363 a
SDict begin H.R end
 -458 -363 a -458
-363 a
SDict begin [/View [/XYZ H.V]/Dest (bfs) cvn /DEST pdfmark end
 -458 -363 a 113 x FK(Then)30 b(w)m(e)i(de\014ne)e(a)g(function)
64 -46 y FH(BFS)25 b FK(:)g FH(Bin-tree)p FK(\(no)s(de\))p
FA(:)p FK(t)h FG(!)f FH(St)-6 b(a)n(ck)o FK(\(no)s(de\))p
FA(:)p FK(t)-458 159 y(such)30 b(that)g(exp)m(ression)h
FH(BFS)p FK(\()566 162 y FC(t)605 159 y FK(\))g(is)f(a)g(stack)g(of)h
(the)f(no)s(des)h(of)f(the)h(tree)1989 162 y FC(t)-458
271 y FK(traversed)f(in)g(a)g(b)m(readth-\014rst)h(w)m(a)m(y)g(from)f
(left)g(to)h(right.)41 b(The)30 b(co)m(rresp)s(onding)-458
384 y(equation)g(is)g(simply)28 589 y FH(BFS)o FK(\()253
592 y FC(t)293 589 y FK(\))25 b(=)g FG(B)s FK(\()p FH(St)-6
b(a)n(ck)o FK(\(no)s(de\))p FA(:)p FH(Push)q FK(\()1350
592 y FC(t)1389 589 y FA(;)15 b FH(Empty)p FK(\)\))-458
793 y(No)m(w,)32 b(in)e(o)m(rder)h(to)g(de\014ne)g FG(B)s
FK(\()564 802 y FC(f)611 793 y FK(\))g(w)m(e)g(need)g(to)g(get)p
0 TeXcolorgray 0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb
-367 921 a FG(\017)p 0 TeXcolorgray 0 TeXcolorgray -276
931 a FK(the)f(ro)s(ots)h(of)f(the)h(fo)m(rest)606 940
y FC(f)653 931 y FK(,)p 0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb
-367 1058 a FG(\017)p 0 TeXcolorgray 0 TeXcolorgray -276
1068 a FK(the)f(fo)m(rest)h(ro)s(oted)g(at)f(level)g(1)h(of)g(the)f(fo)
m(rest)1278 1077 y FC(f)1325 1068 y FK(.)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525
TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(65)9
b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 66 66
TeXDict begin 66 65 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation66) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.66) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bina)m(ry)37 b(trees/Breadth-\014rst)h(traversal)g(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -363 a
SDict begin H.S end
 -458 -363 a -458 -363 a
SDict begin H.R end
 -458 -363 a -458
-363 a
SDict begin [/View [/XYZ H.V]/Dest (roots) cvn /DEST pdfmark end
 -458 -363 a 113 x FK(Let)31 b FH(R)m(oots)e FK(have)h(the)h
(signature)57 -46 y FH(R)m(oots)24 b FK(:)i FH(F)m(orest)n
FK(\(no)s(de)q(\))p FA(:)p FK(t)g FG(!)f FH(St)-6 b(a)n(ck)n
FK(\(no)s(de)q(\))p FA(:)p FK(t)-458 159 y(The)30 b(co)m(rresp)s
(onding)i(equations)e(a)m(re)h(not)g(di\016cult)f(to)g(guess:)-140
363 y FH(R)m(oots)o FK(\()p FH(F)m(orest)o FK(\(no)s(de\))p
FA(:)p FH(Empty)q FK(\))25 b(=)g FH(St)-6 b(a)n(ck)o
FK(\(no)s(de\))p FA(:)p FH(Empty)64 501 y(R)m(oots)o
FK(\()p FH(Push)p FK(\()p FH(Empty)p FA(;)988 510 y FC(f)1035
501 y FK(\)\))26 b(=)f FH(R)m(oots)o FK(\()1558 510 y
FC(f)1606 501 y FK(\))-246 638 y FH(R)m(oots)o FK(\()p
FH(Push)p FK(\()p FH(Make)p FK(\()616 635 y FC(r)657
638 y FA(;)15 b FC(t)730 652 y FB(1)777 638 y FA(;)g
FC(t)850 652 y FB(2)897 638 y FK(\))p FA(;)988 647 y
FC(f)1035 638 y FK(\)\))26 b(=)f FH(Push)p FK(\()1483
635 y FC(r)1524 638 y FA(;)15 b FH(R)m(oots)o FK(\()1895
647 y FC(f)1943 638 y FK(\)\))-458 843 y(These)31 b(equations)f(must)g
(b)s(e)g(o)m(riented)i(from)e(left)g(to)h(right)f(\(do)h(y)m(ou)h(see)f
(why?\).)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb
2221 1639 a FJ(66)9 b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 67 67
TeXDict begin 67 66 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation67) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.67) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bina)m(ry)37 b(trees/Breadth-\014rst)h(traversal)g(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -363 a
SDict begin H.S end
 -458 -363 a -458 -363 a
SDict begin H.R end
 -458 -363 a -458
-363 a
SDict begin [/View [/XYZ H.V]/Dest (next_level) cvn /DEST pdfmark end
 -458 -363 a 113 x FK(W)m(e)31 b(have)f(to)h(de\014ne)f(no)m(w)i
(a)e(function)g(which,)h(given)g(a)f(fo)m(rest,)h(returns)f(the)-458
-137 y(fo)m(rest)h(at)f(level)g(1,)h(i.e.)41 b(all)30
b(the)g(subtrees)h(ro)s(oted)g(at)f(level)g(1)h(fo)m(r)g(each)g(tree)g
(in)-458 -24 y(the)f(initial)f(fo)m(rest.)41 b(Let)31
b(us)f(call)g(it)54 180 y FH(Next)25 b FK(:)g FH(F)m(orest)o
FK(\(no)s(de)q(\))p FA(:)p FK(t)g FG(!)g FH(F)m(orest)o
FK(\(no)s(de)q(\))p FA(:)p FK(t)-458 384 y(The)30 b(equations)g(a)m(re)
-291 589 y FH(Next)o FK(\()p FH(F)m(orest)p FK(\(no)s(de\))p
FA(:)p FH(Empty)p FK(\))c(=)f FH(F)m(orest)o FK(\(no)s(de\))p
FA(:)p FH(Empty)-86 726 y(Next)o FK(\()p FH(Push)p FK(\()p
FH(Empty)p FA(;)790 735 y FC(f)838 726 y FK(\)\))h(=)f
FH(Next)o FK(\()1314 735 y FC(f)1362 726 y FK(\))-396
864 y FH(Next)o FK(\()p FH(Push)p FK(\()p FH(Make)o FK(\()418
861 y FC(r)460 864 y FA(;)15 b FC(t)533 878 y FB(1)580
864 y FA(;)g FC(t)653 878 y FB(2)700 864 y FK(\))p FA(;)790
873 y FC(f)838 864 y FK(\)\))26 b(=)f FH(Push)o FK(\()p
FC(t)1318 878 y FB(1)1365 864 y FA(;)15 b FH(Push)p FK(\()p
FC(t)1694 878 y FB(2)1741 864 y FA(;)g FH(Next)p FK(\()2066
873 y FC(f)2114 864 y FK(\)\)\))-458 1068 y(Note)31 b(the)g(simila)m
(rities)e(b)s(et)m(w)m(een)j FH(Next)d FK(and)h FH(R)m(oots)p
FK(.)40 b(Note)31 b(also)f(that)g FC(t)2058 1082 y FB(1)2135
1068 y FK(and)-458 1181 y FC(t)-425 1195 y FB(2)-348
1181 y FK(ma)m(y)g(b)s(e)g FH(Empty)p FK(,)g(fo)m(r)i(the)e(sak)m(e)h
(of)g(simplicit)m(y)-8 b(.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525
TeXcolorrgb 2221 1639 a FJ(67)9 b(/)h(95)p 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 68 68
TeXDict begin 68 67 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation68) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.68) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bina)m(ry)37 b(trees/Breadth-\014rst)h(traversal)g(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -363 a
SDict begin H.S end
 -458 -363 a -458 -363 a
SDict begin H.R end
 -458 -363 a -458
-363 a
SDict begin [/View [/XYZ H.V]/Dest (forest_bfs) cvn /DEST pdfmark end
 -458 -363 a 113 x FK(No)m(w)31 b(w)m(e)h(can)e(write)h(the)f
(equations)g(of)h FG(B)s FK(,)f(using)h FH(R)m(oots)f
FK(and)g FH(Next)p FK(:)-167 -46 y FG(B)s FK(\()p FH(F)m(orest)o
FK(\(no)s(de\))p FA(:)p FH(Empty)q FK(\))25 b(=)g FH(St)-6
b(a)n(ck)o FK(\(no)s(de\))p FA(:)p FH(Empty)101 92 y
FG(B)s FK(\()214 101 y FC(f)261 92 y FK(\))26 b(=)f FH(Append)n
FK(\()p FH(R)m(oots)p FK(\()1123 101 y FC(f)1171 92 y
FK(\))p FA(;)15 b FG(B)s FK(\()p FH(Next)33 b FI(\()1667
101 y FC(f)1715 92 y FI(\))p FK(\)\))-458 296 y(where)-207
305 y FC(f)-134 296 y FG(6)p FK(=)25 b FH(Empty)o FK(.)-458
509 y(Match)k(the)i(traversal)e(as)h(de\014ned)h(fo)m(rmally)f(here)i
(against)d(a)h(\014gure)h(page)g(46.)-458 721 y(Let)g(us)f(o)m(rient)h
(these)g(equations)f(from)h(left)f(to)g(right.)-458 934
y(In)g(o)m(rder)h(to)f(sho)m(w)g(that)f(the)h(resulting)g(rewriting)g
(system)f(terminates,)h(w)m(e)h(have)-458 1047 y(to)f(compa)m(re)i(the)
f(height)f(of)h(the)f FC(values)g FK(of)1046 1056 y FC(f)1124
1047 y FK(and)g FH(Next)o FK(\()1576 1056 y FC(f)1624
1047 y FK(\).)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb
2221 1639 a FJ(68)9 b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 69 69
TeXDict begin 69 68 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation69) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.69) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Bina)m(ry)37 b(trees/Breadth-\014rst)h(traversal)g(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(The)30 b(intuition)g(is)g(that)f(exp)m(ression)j
FH(Next)o FK(\()1039 -241 y FC(f)1087 -250 y FK(\))e(denotes)i(a)e
FC(la)m(rger)h FK(fo)m(rest)g(than)-458 -128 y FC(f)-411
-137 y FK(,)g(b)s(ecause)f(it)g(is)g(made)h(of)f(the)h(direct)f
(subtrees)h(of)1332 -128 y FC(f)1409 -137 y FK(\(if)g(they)f(a)m(re)h
(all)-458 -24 y(non-empt)m(y)-8 b(,)32 b(then)f(w)m(e)g(get)g(t)m(wice)
g(as)f(mo)m(re)i(trees)f(than)f(in)1544 -15 y FC(f)1591
-24 y FK(\),)h(but)f(the)h(trees)-458 89 y(a)m(re)g(strictly)e
FC(smaller)p FK(.)-458 301 y(Since)h(w)m(e)h(traverse)g(the)f(levels)h
(in)f(increasing)g(o)m(rder,)i(theses)f(trees)g(will)e(\014nally)-458
414 y(b)s(e)h(empt)m(y)-8 b(.)42 b(But)30 b(the)g(second)h(equation)g
(disca)m(rds)f(empt)m(y)h(trees,)g(so)g(in)f(the)g(end,)-458
527 y(w)m(e)h(really)f(get)h(an)f(empt)m(y)h(fo)m(rest.)-458
740 y(With)e(this)h(reasoning)h(w)m(e)g(sho)m(w)g(that)f(the)h
(terminating)f(o)m(rientation)h(is)-301 944 y FH(Next)o
FK(\()p FH(F)m(orest)o FK(\(no)s(de)q(\))p FA(:)p FH(Empty)p
FK(\))26 b FG(!)f FH(F)m(orest)o FK(\(no)s(de\))p FA(:)p
FH(Empty)-96 1082 y(Next)o FK(\()p FH(Push)p FK(\()p
FH(Empty)p FA(;)780 1091 y FC(f)828 1082 y FK(\)\))h
FG(!)f FH(Next)o FK(\()1324 1091 y FC(f)1372 1082 y FK(\))-406
1220 y FH(Next)o FK(\()p FH(Push)p FK(\()p FH(Make)o
FK(\()408 1217 y FC(r)449 1220 y FA(;)15 b FC(t)522 1234
y FB(1)569 1220 y FA(;)g FC(t)642 1234 y FB(2)689 1220
y FK(\))p FA(;)780 1229 y FC(f)828 1220 y FK(\)\))26
b FG(!)f FH(Push)p FK(\()p FC(t)1329 1234 y FB(1)1375
1220 y FA(;)15 b FH(Push)p FK(\()p FC(t)1704 1234 y FB(2)1751
1220 y FA(;)g FH(Next)p FK(\()2076 1229 y FC(f)2124 1220
y FK(\)\)\))p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb
2221 1639 a FJ(69)9 b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 70 70
TeXDict begin 70 69 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation70) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.70) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Sea)m(rch)39 b(algo)m(rithms)p 0.2 0.2 0.7
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray -458 -250 a
FK(Algo)m(rithms)30 b(a)m(re)h(a)f(constrained)h(fo)m(rm)g(of)g
(rewriting)f(systems.)-458 -59 y(Y)-8 b(ou)30 b(ma)m(y)h(rememb)s(er)h
(that,)e(sometimes,)h(several)f(rewriting)h(rules)f(can)h(b)s(e)-458
32 y(applied)e(to)i(the)g(same)f(term.)41 b(This)30 b(is)g(a)g(kind)g
(of)37 b FI(non-determinism)p FK(,)32 b(i.e.,)f(the)-458
124 y(p)m(ro)s(cess)g(requires)g(an)f(a)m(rbitra)m(ry)g(choice.)42
b(Lik)m(e)-343 281 y Fr(Not)q Fs(\()p Fr(And)o Fs(\()p
Fr(Not)p Fs(\()p Fr(Tr)n(ue)p Fs(\))p 23 313 402 4 v
Fq(;)13 b Fr(Not)p Fs(\()p Fr(F)-9 b(alse)q Fs(\)\)\))21
b Fp(!)1034 289 y FJ(1)1085 281 y Fr(Not)q Fs(\()p Fr(And)o
Fs(\()p Fr(F)-9 b(alse)p 1451 294 205 4 v 1 w Fq(;)13
b Fr(Not)p Fs(\()p Fr(F)-9 b(alse)q Fs(\)\)\))-145 413
y Fr(Not)p Fs(\()p Fr(And)o Fs(\()p Fr(F)g(alse)q Fq(;)13
b Fr(Not)p Fs(\()p Fr(F)-9 b(alse)q Fs(\))p 459 444 417
4 v(\)\))21 b Fp(!)1034 421 y FJ(2)1085 413 y Fr(Not)q
Fs(\()p Fr(And)o Fs(\()p Fr(F)-9 b(alse)q Fq(;)13 b Fr(Tr)n(ue)p
1690 426 190 4 v -1 w Fs(\)\))-428 571 y FK(o)m(r)-328
728 y Fr(Not)q Fs(\()p Fr(And)o Fs(\()p Fr(Not)p Fs(\()p
Fr(Tr)n(ue)p Fs(\))p Fq(;)g Fr(Not)p Fs(\()p Fr(F)-9
b(alse)q Fs(\))p 474 760 417 4 v(\)\))21 b Fp(!)1049
736 y FJ(2)1100 728 y Fr(Not)q Fs(\()p Fr(And)o Fs(\()p
Fr(Not)p Fs(\()p Fr(Tr)n(ue)p Fs(\))p Fq(;)13 b Fr(Tr)n(ue)p
1902 741 190 4 v -1 w Fs(\)\))-100 860 y Fr(Not)p Fs(\()p
Fr(And)o Fs(\()p Fr(Not)q Fs(\()p Fr(Tr)n(ue)o Fs(\))p
265 891 402 4 v Fq(;)g Fr(Tr)n(ue)p Fs(\)\))21 b Fp(!)1049
868 y FJ(1)1100 860 y Fr(Not)q Fs(\()p Fr(And)o Fs(\()p
Fr(F)-9 b(alse)p 1466 873 205 4 v 1 w Fq(;)13 b Fr(Tr)n(ue)o
Fs(\)\))p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb
2221 1639 a FJ(70)c(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 71 71
TeXDict begin 71 70 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation71) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.71) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Sea)m(rch)39 b(algo)m(rithms)d(\(cont\))p 0.2 0.2 0.7
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray -458 -250 a
FK(It)30 b(is)g(p)s(ossible)f(to)i(constrain)f(the)h(situation)e(where)
i(the)f(rules)h(a)m(re)f(applied.)40 b(This)-458 -137
y(is)30 b(called)g(a)g FI(strategy)p FK(.)-458 76 y(F)m(o)m(r)h
(instance,)g(one)g(common)h(strategy)-8 b(,)31 b(called)f
FI(call)k(b)m(y)g(value)p FK(,)d(consists)g(in)-458 188
y(rewriting)f(the)h(a)m(rguments)g(of)g(a)f(function)g(call)g(into)g
(values)g(b)s(efo)m(re)h(rewriting)-458 301 y(the)f(function)h(call)e
(itself.)-458 514 y(Some)i(further)f(constraints)g(can)g(imp)s(ose)h
(an)f(o)m(rder)h(on)g(the)g(rewritings)f(of)h(the)-458
627 y(a)m(rguments,)g(lik)m(e)g(rewriting)g(them)g(from)f(left)g(to)h
(right)f(o)m(r)i(from)f(right)f(to)g(left.)-458 740 y(Algo)m(rithms)g
(rely)h(on)g(rewriting)f(systems)g(with)g(strategies,)h(but)f(use)h(a)f
(di\013erent)-458 853 y(language,)h(easier)f(to)h(read)f(and)g(write.)
41 b(The)30 b(imp)s(o)m(rtant)g(thing)h(is)e(that)-458
965 y(algo)m(rithms)h(can)h(alw)m(a)m(ys)f(b)s(e)g(exp)m(ressed)i(in)e
(terms)h(of)f(rewriting)h(systems,)f(if)g(w)m(e)-458
1078 y(w)m(ant.)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb
2221 1639 a FJ(71)9 b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 72 72
TeXDict begin 72 71 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation72) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.72) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Sea)m(rch)39 b(algo)m(rithms)d(\(cont\))p 0.2 0.2 0.7
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray -458 -250 a
FK(The)30 b(language)h(w)m(e)g(intro)s(duce)g(no)m(w)g(fo)m(r)g(exp)m
(ressing)h(algo)m(rithms)e(is)g(di\013erent)-458 -137
y(from)h(a)f(p)m(rogramming)i(language,)e(in)g(the)h(sense)g(that)e(it)
h(is)g(less)g(detailed.)-458 76 y(Since)g(y)m(ou)h(already)f(have)g(a)g
(w)m(o)m(rking)j(kno)m(wledge)f(of)f(p)m(rogramming,)h(y)m(ou)f(will)
-458 188 y(understand)f(the)g(language)h(itself)e(through)i(examples.)
-458 401 y(If)f(w)m(e)h(sta)m(rt)f(from)h(a)f(rewriting)h(system,)f
(the)h(idea)f(consists)g(to)h(gather)g(all)e(the)-458
514 y(rules)h(that)g(de\014ne)g(the)h(computation)g(of)f(a)g(given)h
(function)f(and)g(create)h(its)-458 627 y(algo)m(rithmic)g
(de\014nition.)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb
2221 1639 a FJ(72)9 b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 73 73
TeXDict begin 73 72 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation73) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.73) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Sea)m(rch/Bo)s(oleans)p 0.2 0.2 0.7 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray -458 -250 a FK(Let)31 b(us)f(sta)m(rt)g
(with)g(a)g(very)g(simple)g(function)h(of)f(the)h FH(Bool)e
FK(sp)s(eci\014cation:)482 -46 y FH(Not)p FK(\()p FH(Tr)n(ue)p
FK(\))c FG(!)h FH(F)-11 b(alse)464 92 y(Not)p FK(\()p
FH(F)g(alse)o FK(\))25 b FG(!)h FH(Tr)n(ue)-458 296 y
FK(Let)31 b(us)f(write)g(the)h(co)m(rresp)s(onding)h(algo)m(rithm)f(in)
e(the)i(follo)m(wing)g(w)m(a)m(y:)1901 296 y


 gsave nulldevice


 1901 296
a


 grestore


 -600 409 a


 gsave nulldevice


 -600 409 a


 grestore


 0 TeXcolorgray 0 TeXcolorgray
-506 617 a FH(Not)p FK(\()-285 626 y FC(b)-235 617 y
FK(\))p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-369 755 a FI(if)-278 764 y FC(b)-203 755 y FK(=)25 b
FH(Tr)n(ue)-248 868 y FI(then)31 b(result)26 b FG( )f
FH(F)-11 b(alse)-248 981 y FI(else)63 b(result)26 b FG( )f
FH(Tr)n(ue)p 0 TeXcolorgray -506 1294 a FK(The)31 b(va)m(riable)-7
1303 y FC(b)73 1294 y FK(is)f(called)g(a)-506 1407 y
FI(pa)m(rameter)p FK(.)865 409 y


 gsave nulldevice


 865 409 a


 grestore


 865 409 a


 gsave nulldevice



865 409 a


 grestore


 865 409 a


 gsave nulldevice


 865 409 a


 grestore


 865 409 a


 gsave nulldevice


 865 409 a


 grestore


 959
409 a FK(W)m(riting)1272 406 y FC(x)1348 409 y FG( )25
b Fv(A)30 b FK(means)g(that)g(w)m(e)959 522 y FI(assign)h
FK(the)g(value)f(of)g(exp)m(ression)h Fv(A)f FK(to)959
635 y(the)h(va)m(riable)1429 632 y FC(x)1479 635 y FK(.)40
b(Then)31 b(the)f(value)g(of)2250 632 y FC(x)959 748
y FK(is)g(the)g(value)g(of)h Fv(A)p FK(.)40 b(Keyw)m(o)m(rd)33
b FI(result)d FK(is)959 861 y(a)g(sp)s(ecial)g(va)m(riable)g(whose)h
(value)959 974 y(b)s(ecomes)h(the)e(result)g(of)h(the)f(function)959
1087 y(when)h(it)f(\014nishes.)2329 409 y


 gsave nulldevice


 2329 409 a


 grestore



2329 409 a


 gsave nulldevice


 2329 409 a


 grestore


 2329 409 a


 gsave nulldevice


 2329 409 a


 grestore


 -458 1424
a


 gsave nulldevice


 -458 1424 a


 grestore


 -458 1424 a


 gsave nulldevice


 -458 1424 a


 grestore


 -458 1424 a


 gsave nulldevice


 -458
1424 a


 grestore


 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525
TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(73)9
b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 74 74
TeXDict begin 74 73 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation74) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.74) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Sea)m(rch/Bo)s(oleans)37 b(\(cont\))p 0.2 0.2 0.7
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray -458 -250 a
FK(Y)-8 b(ou)30 b(ma)m(y)h(ask:)41 b(\\Since)30 b(w)m(e)i(a)m(re)f
(de\014ning)f(the)h(b)s(o)s(oleans,)f(what)g(is)g(the)g(meaning)-458
-137 y(of)g(a)g(conditional)g FI(if)15 b FA(:)g(:)g(:)37
b FI(then)e FA(:)15 b(:)g(:)i FI(else)f FA(:)f(:)g(:)q
FK(?")-458 76 y(W)m(e)31 b(assume)f(built-in)g(b)s(o)s(oleans)f
FI(true)i FK(and)f FI(false)g FK(in)g(our)h(algo)m(rithmic)-458
188 y(language.)41 b(So,)30 b(the)h(exp)m(ression)656
197 y FC(b)731 188 y FK(=)25 b FH(Tr)n(ue)30 b FK(ma)m(y)h(have)f
(value)g FI(true)g FK(o)m(r)j FI(false)p FK(.)-458 401
y(The)d FH(Bool)g FK(sp)s(eci\014cation)g(is)g FC(not)g
FK(the)h(built-in)e(b)s(o)s(oleans.)-458 613 y(Exp)m(ression)-32
622 y FC(b)43 613 y FK(=)c FH(Tr)n(ue)30 b FK(is)g(not)642
622 y FC(b)717 613 y FK(=)25 b FI(true)31 b FK(o)m(r)g(even)1316
622 y FC(b)1366 613 y FK(.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525
TeXcolorrgb 2221 1639 a FJ(74)9 b(/)h(95)p 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 75 75
TeXDict begin 75 74 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation75) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.75) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Sea)m(rch/Bo)s(oleans)37 b(\(cont\))p 0.2 0.2 0.7
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray -458 -250 a
FK(Let)31 b(us)f(tak)m(e)h(the)f FH(Bool)p FK(.)p FH(And)g
FK(function:)-458 -250 y


 gsave nulldevice


 -458 -250 a


 grestore


 -600 -137 a


 gsave nulldevice


 -600
-137 a


 grestore


 -395 67 a FH(And)o FK(\()p FH(Tr)n(ue)p FA(;)15
b FH(Tr)n(ue)p FK(\))26 b FG(!)f FH(Tr)n(ue)-233 205
y(And)p FK(\()-11 202 y FC(x)39 205 y FA(;)15 b FH(F)-11
b(alse)o FK(\))26 b FG(!)f FH(F)-11 b(alse)-233 343 y(And)p
FK(\()p FH(F)g(alse)o FA(;)278 340 y FC(x)328 343 y FK(\))26
b FG(!)f FH(F)-11 b(alse)865 -137 y


 gsave nulldevice


 865 -137 a


 grestore


 865 -137
a


 gsave nulldevice


 865 -137 a


 grestore


 865 -137 a


 gsave nulldevice


 865 -137 a


 grestore


 865 -137 a


 gsave nulldevice


 865 -137
a


 grestore


 0 TeXcolorgray 0 TeXcolorgray 959 71 a FH(And)p FK(\()p
FC(b)1228 85 y FB(1)1275 71 y FA(;)15 b FC(b)1362 85
y FB(2)1409 71 y FK(\))p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 1095 209 a FI(if)37 b FC(b)1233 223 y
FB(1)1310 209 y FK(=)30 b FH(F)-11 b(alse)30 b FI(o)m(r)h
FC(b)1850 223 y FB(2)1927 209 y FK(=)f FH(F)-11 b(alse)1217
322 y FI(then)30 b(result)c FG( )f FH(F)-11 b(alse)1217
434 y FI(else)62 b(result)26 b FG( )f FH(Tr)n(ue)p 0
TeXcolorgray 2329 -137 a


 gsave nulldevice


 2329 -137 a


 grestore


 2329 -137 a


 gsave nulldevice


 2329
-137 a


 grestore


 2329 -137 a


 gsave nulldevice


 2329 -137 a


 grestore


 -458 581 a


 gsave nulldevice


 -458 581 a


 grestore



-458 581 a


 gsave nulldevice


 -458 581 a


 grestore


 -458 581 a


 gsave nulldevice


 -458 581 a


 grestore


 -458 702
a FK(Because)30 b(there)h(is)f(an)g FC(o)m(rder)i FK(on)f(the)f(op)s
(erations,)h(w)m(e)g(have)f(b)s(een)h(able)f(to)-458
815 y(gather)g(the)h(three)g(rules)f(into)g(one)i(conditional.)40
b(Note)32 b(that)d FI(o)m(r)j FK(is)e FI(sequential)p
FK(:)-458 928 y(if)g(the)g(\014rst)g(a)m(rgument)h(evaluates)f(to)h
FH(Tr)n(ue)e FK(the)i(second)g(a)m(rgument)h(is)e(not)-458
1041 y(computed)h(\(this)f(can)h(save)f(time)g(and)g(memo)m(ry\).)43
b(Hence)32 b(this)e(test)g(is)g(b)s(etter)-458 1154 y(than)f
FI(if)i FK(\()p FC(s)-103 1168 y FB(1)-56 1154 y FA(;)15
b FC(s)19 1168 y FB(2)66 1154 y FK(\))25 b(=)g(\()p FH(Tr)n(ue)p
FA(;)15 b FH(Tr)n(ue)p FK(\))g FA(:)g(:)g(:)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(75)9 b(/)h(95)p
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 76 76
TeXDict begin 76 75 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation76) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.76) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Sea)m(rch/Bo)s(oleans)37 b(\(cont\))p 0.2 0.2 0.7
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray -458 -250 a
FK(The)30 b FH(Or)g FK(function,)h(as)f(w)m(e)h(de\014ned)g(it)e(is)h
(easy)h(to)f(write)h(as)e(an)h(algo)m(rithm:)-1 -46 y
FH(Or)p FK(\()p FC(b)213 -32 y FB(1)260 -46 y FA(;)15
b FC(b)347 -32 y FB(2)394 -46 y FK(\))26 b FG(!)f FH(Not)o
FK(\()p FH(And)p FK(\()p FH(Not)p FK(\()p FC(b)1281 -32
y FB(1)1328 -46 y FK(\))p FA(;)15 b FH(Not)p FK(\()p
FC(b)1671 -32 y FB(2)1718 -46 y FK(\)\)\))-458 159 y(b)s(ecomes)31
b(simply)p 0 TeXcolorgray 0 TeXcolorgray -458 366 a FH(Or)o
FK(\()p FC(b)-245 380 y FB(1)-198 366 y FA(;)15 b FC(b)-111
380 y FB(2)-64 366 y FK(\))p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -322 504 a FI(result)26 b FG( )f FH(Not)p
FK(\()p FH(And)p FK(\()p FH(Not)o FK(\()p FC(b)759 518
y FB(1)806 504 y FK(\))p FA(;)15 b FH(Not)q FK(\()p FC(b)1150
518 y FB(2)1197 504 y FK(\)\)\))p 0 TeXcolorgray -458
712 a(Rememb)s(er)31 b(that)f FG( )g FK(in)g(an)g(algo)m(rithm)h(is)e
(not)i(a)f(rewriting)h(step)f(but)g(an)-458 825 y(assignment.)40
b(This)30 b(function)g(is)g(de\014ned)h(in)f(terms)h(of)f(other)h
(functions)g(\()p FH(Not)-458 938 y FK(and)f FH(Or)p
FK(\))g(which)g(a)m(re)h(called)f(using)h(an)f(underlying)h
FI(call-b)m(y-value)37 b(strategy)p FK(,)-458 1051 y(i.e.,)31
b(the)f FI(a)m(rguments)h FK(a)m(re)g(computed)g(\014rst,)f(then)h
(passed)f(asso)s(ciated)g(to)g(the)-458 1164 y(pa)m(rameters)h(in)f(o)m
(rder)h(to)g(compute)h(the)e FI(b)s(o)s(dy)i FK(of)e(the)h(\(called\))g
(function.)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb
2221 1639 a FJ(76)9 b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 77 77
TeXDict begin 77 76 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation77) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.77) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Sea)m(rch/Stacks)p 0.2 0.2 0.7 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray -458 -363 a


 gsave nulldevice


 -458 -363 a


 grestore



-600 -250 a


 gsave nulldevice


 -600 -250 a


 grestore


 -506 -250 a FK(Let)31 b(us)f(consider)i(again)d
(the)i(stacks:)-506 -137 y FH(Pop)p FK(\()p FH(Push)p
FK(\()-39 -140 y FC(x)12 -137 y FK(\)\))26 b FG(!)224
-140 y FC(x)395 -137 y FK(b)s(ecomes)p 0 TeXcolorgray
0 TeXcolorgray -506 71 a FH(Pop)p FK(\()-295 68 y FC(s)-252
71 y FK(\))p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-369 209 a FI(if)-278 206 y FC(s)-206 209 y FK(=)k FH(Empty)-248
322 y FI(then)h(erro)m(r)-248 434 y(else)63 b(result)26
b FG( )f FI(???)p 0 TeXcolorgray -506 748 a FK(What)30
b(is)g(the)h(p)m(roblem)g(here?)-506 960 y(W)m(e)h(w)m(ant)e(to)g
(de\014ne)h(a)f(p)m(rojection)-506 1073 y(\(here)i FH(Pop)p
FK(\))f(without)f(kno)m(wing)i(the)-506 1186 y(de\014nition)f(of)f(the)
h(co)m(rresp)s(onding)-506 1299 y(constructo)m(r)i(\()p
FH(Push)p FK(\).)865 -250 y


 gsave nulldevice


 865 -250 a


 grestore


 865 -250 a


 gsave nulldevice


 865
-250 a


 grestore


 865 -250 a


 gsave nulldevice


 865 -250 a


 grestore


 865 -250 a


 gsave nulldevice


 865 -250 a


 grestore


 959
-250 a FK(The)e(reason)f(why)h(w)m(e)g(do)g(not)f(de\014ne)959
-137 y(constructo)m(rs)i(with)e(an)g(algo)m(rithm)h(is)959
-24 y(that)f(w)m(e)h(do)g(not)f(w)m(ant)h(to)f(give)h(to)s(o)959
89 y(much)g(details)e(ab)s(out)h(the)h(data)959 202 y(structure,)g(and)
f(so)h(leave)f(these)h(details)959 315 y(to)g(the)f(implementation)h
(\(i.e.,)g(the)959 428 y(p)m(rogram\).)959 640 y(Because)g(a)f(p)m
(rojection)i(is,)e(b)m(y)959 753 y(de\014nition,)g(the)h(inverse)g(of)f
(a)959 866 y(constructo)m(r,)i(w)m(e)g(cannot)e(de\014ne)h(them)959
979 y(explicitly)f(with)g(an)g(algo)m(rithm.)2329 -250
y


 gsave nulldevice


 2329 -250 a


 grestore


 2329 -250 a


 gsave nulldevice


 2329 -250 a


 grestore


 2329 -250 a


 gsave nulldevice


 2329
-250 a


 grestore


 -458 1322 a


 gsave nulldevice


 -458 1322 a


 grestore


 -458 1322 a


 gsave nulldevice


 -458 1322
a


 grestore


 -458 1322 a


 gsave nulldevice


 -458 1322 a


 grestore


 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525
TeXcolorrgb 2221 1639 a FJ(77)9 b(/)h(95)p 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 78 78
TeXDict begin 78 77 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation78) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.78) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Sea)m(rch/Stacks)38 b(\(cont\))p 0.2 0.2 0.7
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray -458 -250 a
FK(With)29 b(the)i(example)g(of)f(this)g(ab)s(o)m(rted)g(algo)m
(rithmic)h(de\014nition)g(of)f(p)m(rojection)-458 -137
y FH(Pop)p FK(,)g(w)m(e)g(realise)g(that)f(such)h(de\014nitions)f(must)
h(b)s(e)f FI(complete)p FK(,)j(i.e.,)e(they)g(must)-458
-24 y(handle)g(all)f(values)h(satisfying)f(the)i(t)m(yp)s(e)f(of)h
(their)f(a)m(rguments.)-458 188 y(In)g(the)h(p)m(revious)g(example,)g
(the)f(t)m(yp)s(e)h(of)f(the)h(a)m(rgument)g(w)m(as)g
FH(St)-6 b(a)n(ck)p FK(\(no)s(de\).t,)-458 301 y(so)30
b(the)h(case)f FH(Empty)i FK(had)e(to)h(b)s(e)f(considered)h(fo)m(r)g
(pa)m(rameter)1685 298 y FC(s)1726 301 y FK(.)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(78)9 b(/)h(95)p
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 79 79
TeXDict begin 79 78 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation79) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.79) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Sea)m(rch/Stacks)38 b(\(cont\))p 0.2 0.2 0.7
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray -458 -250 a
FK(In)30 b(the)h(rewriting)f(rules,)h(the)f(erroneous)i(cases)f(a)m(re)
g(not)f(rep)m(resented)i(b)s(ecause)-458 -137 y(w)m(e)f(don't)g(w)m
(ant)f(to)h(give)g(to)s(o)f(much)h(details)e(at)h(this)g(stage.)41
b(It)30 b(is)g(left)g(to)h(the)-458 -24 y(algo)m(rithm)g(to)f(p)m
(rovide)h(erro)m(r)h(detection)g(and)e(basic)f(handling.)-458
188 y(Note)i(that)f(in)g(algo)m(rithms,)h(w)m(e)g(do)g(not)f(p)m
(rovide)i(a)e(sophisticated)g(erro)m(r)-458 301 y(handling:)40
b(w)m(e)31 b(just)f(use)h(a)f(magic)h(k)m(eyw)m(o)m(rd)i
FI(erro)m(r)p FK(.)41 b(This)29 b(is)h(b)s(ecause)h(w)m(e)g(leave)-458
414 y(fo)m(r)g(the)f(p)m(rogram)i(to)f(detail)e(what)h(to)h(do)f(and)g
(ma)m(yb)s(e)h(use)f(some)i(sp)s(eci\014c)-458 527 y(features)e(of)h
(its)e(language,)i(lik)m(e)g(exceptions.)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(79)9 b(/)h(95)p
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 80 80
TeXDict begin 80 79 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation80) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.80) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Sea)m(rch/Stacks)38 b(\(cont\))p 0.2 0.2 0.7
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray -458 -250 a
FK(So)30 b(let)g(us)g(consider)i(the)e(remaining)h(function)f
FH(Append)p FK(:)34 -46 y FH(Append)o FK(\()p FH(Empty)p
FA(;)744 -49 y FC(s)786 -46 y FK(\))c FG(!)938 -32 y
Fx(1)1002 -49 y FC(s)-170 92 y FH(Append)o FK(\()p FH(Push)p
FK(\()460 89 y FC(e)507 92 y FA(;)15 b FC(s)582 106 y
FB(1)629 92 y FK(\))p FA(;)g FC(s)739 106 y FB(2)786
92 y FK(\))26 b FG(!)938 106 y Fx(2)1002 92 y FH(Push)p
FK(\()1258 89 y FC(e)1305 92 y FA(;)15 b FH(Append)o
FK(\()p FC(s)1754 106 y FB(1)1801 92 y FA(;)g FC(s)1876
106 y FB(2)1923 92 y FK(\)\))-458 283 y(W)m(e)31 b(gather)f(all)g(the)g
(rules)h(into)f(one)h(function)g(and)e(cho)s(ose)j(a)e(p)m(rop)s(er)h
(o)m(rder:)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray -330 476 a FD(Append)p
FE(\()p Fw(s)43 488 y Fn(3)85 476 y Fy(;)14 b Fw(s)154
488 y Fn(2)195 476 y FE(\))-330 575 y Fe(if)34 b Fw(s)-215
587 y Fn(3)-146 575 y FE(=)28 b FD(Empty)-219 675 y Fe(then)f(result)c
FF( )g Fw(s)349 687 y Fn(2)1423 675 y Fd(\003)28 b FE(This)e(is)i(rule)
f FF(!)2012 687 y Fl(1)-219 775 y Fe(else)57 b FE(\()10
773 y Fw(e)53 775 y Fy(;)14 b Fw(s)122 787 y Fn(1)163
775 y FE(\))23 b FF( )g FD(Pop)p FE(\()p Fw(s)549 787
y Fn(3)590 775 y FE(\))307 b Fd(\003)27 b FE(This)g(means)g
FD(Push)o FE(\()1678 773 y Fw(e)1721 775 y Fy(;)14 b
Fw(s)1790 787 y Fn(1)1831 775 y FE(\))24 b(=)e Fw(s)2006
787 y Fn(3)-22 874 y Fe(result)h FF( )g FD(Push)o FE(\()550
872 y Fw(e)593 874 y Fy(;)14 b FD(Append)p FE(\()p Fw(s)1003
886 y Fn(1)1045 874 y Fy(;)g Fw(s)1114 886 y Fn(2)1155
874 y FE(\)\))204 b Fd(\003)28 b FE(This)e(is)i(rule)f
FF(!)2012 886 y Fl(2)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(80)9 b(/)h(95)p
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 81 81
TeXDict begin 81 80 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation81) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.81) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Sea)m(rch/Queues)p 0.2 0.2 0.7 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray -458 -250 a FK(Let)31 b(us)f(come)h(back)
g(to)g(the)f FH(Queue)f FK(sp)s(eci\014cation:)-325 -46
y FH(Dequeue)o FK(\()p FH(Enqueue)p FK(\()537 -49 y FC(e)583
-46 y FA(;)15 b FH(Empty)p FK(\)\))26 b FG(!)1106 -32
y Fx(1)1171 -46 y FK(\()p FH(Empty)p FA(;)1542 -49 y
FC(e)1589 -46 y FK(\))-80 92 y FH(Dequeue)o FK(\()p FH(Enqueue)o
FK(\()781 89 y FC(e)828 92 y FA(;)868 81 y FC(q)919 92
y FK(\)\))g FG(!)1106 106 y Fx(2)1171 92 y FK(\()p FH(Enqueue)o
FK(\()1635 89 y FC(e)1682 92 y FA(;)15 b FC(q)1769 106
y FB(1)1816 92 y FK(\))p FA(;)g FC(e)1931 106 y FB(1)1979
92 y FK(\))-458 321 y(where)-207 310 y FC(q)-131 321
y FG(6)p FK(=)25 b FH(Empty)30 b FK(and)g(where)472 550
y FH(Dequeue)o FK(\()904 539 y FC(q)955 550 y FK(\))25
b FG(!)1106 564 y Fx(3)1171 550 y FK(\()p FC(q)1253 564
y FB(1)1300 550 y FA(;)15 b FC(e)1380 564 y FB(1)1427
550 y FK(\))p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb
2221 1639 a FJ(81)9 b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 82 82
TeXDict begin 82 81 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation82) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.82) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Sea)m(rch/Queues/Dequeuing)p 0.2 0.2 0.7 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray -458 -250 a FK(W)m(e)31
b(can)f(write)h(the)f(co)m(rresp)s(onding)i(algo)m(rithmic)f(function)g
(as)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray -322 -42 a FH(Dequeue)o FK(\()p
FC(q)157 -28 y FB(2)204 -42 y FK(\))-322 71 y FI(if)37
b FC(q)-184 85 y FB(2)-107 71 y FK(=)30 b FH(Empty)-201
184 y FI(then)h(erro)m(r)-201 297 y(else)63 b FK(\()50
294 y FC(e)97 297 y FA(;)137 286 y FC(q)188 297 y FK(\))26
b FG( )f FH(Enqueue)759 261 y Fo(\000)p Fx(1)853 297
y FK(\()p FC(q)935 311 y FB(2)982 297 y FK(\))15 410
y FI(if)106 399 y FC(q)182 410 y FK(=)g FH(Empty)106
523 y FI(then)31 b(result)25 b FG( )h FK(\()728 512 y
FC(q)779 523 y FA(;)819 520 y FC(e)866 523 y FK(\))717
b Fc(\003)30 b FK(Rule)g FG(!)2008 537 y Fx(1)106 636
y FI(else)63 b FK(\()p FC(q)404 650 y FB(1)451 636 y
FA(;)15 b FC(e)531 650 y FB(1)578 636 y FK(\))26 b FG( )f
FH(Dequeue)o FK(\()1187 625 y FC(q)1238 636 y FK(\))345
b Fc(\003)30 b FK(Rule)g FG(!)2008 650 y Fx(3)322 749
y FI(result)25 b FG( )h FK(\()p FH(Enqueue)o FK(\()1157
746 y FC(e)1204 749 y FA(;)15 b FC(q)1291 763 y FB(1)1338
749 y FK(\))p FA(;)g FC(e)1453 763 y FB(1)1501 749 y
FK(\))51 b Fc(\003)30 b FK(Rrule)g FG(!)2008 763 y Fx(2)p
0 TeXcolorgray -458 1175 a FK(T)-8 b(ermination)30 b(is)g(due)h(to)-458
1288 y(\()-423 1285 y FC(e)-376 1288 y FA(;)-336 1277
y FC(q)-285 1288 y FK(\))25 b(=)g FH(Enqueue)265 1252
y Fo(\000)p Fx(1)360 1288 y FK(\()p FC(q)442 1302 y FB(2)489
1288 y FK(\))g FG(\))g(H)q FK(\()p FC(q)825 1302 y FB(2)872
1288 y FK(\))h(=)f FG(H)q FK(\()1142 1277 y FC(q)1192
1288 y FK(\))c(+)f(1)26 b FA(>)f FG(H)q FK(\()1619 1277
y FC(q)1669 1288 y FK(\).)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525
TeXcolorrgb 2221 1639 a FJ(82)9 b(/)h(95)p 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 83 83
TeXDict begin 83 82 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation83) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.83) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Sea)m(rch/Bina)m(ry)37 b(trees/Left)h(p)m(re\014x)p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -263 a FK(Let)31 b(us)f(come)h(back)g(to)g(the)f
FH(Bin-tree)g FK(sp)s(eci\014cation)g(and)g(the)h(left)f(p)m(re\014x)
-458 -164 y(traversal:)-57 19 y FD(Lpref)q FE(\()p FD(Empty)p
FE(\))24 b FF(!)f FD(St)-6 b(a)n(ck)p FE(\(no)r(de\))p
Fy(:)p FD(Empty)-343 144 y(Lpref)q FE(\()p FD(Make)p
FE(\()197 142 y Fw(e)240 144 y Fy(;)14 b Fw(t)307 156
y Fn(1)349 144 y Fy(;)g Fw(t)416 156 y Fn(2)457 144 y
FE(\)\))24 b FF(!)f FD(Push)o FE(\()884 142 y Fw(e)927
144 y Fy(;)14 b FD(Append)p FE(\()p FD(Lpref)q FE(\()p
Fw(t)1611 156 y Fn(1)1653 144 y FE(\))p Fy(;)g FD(Lpref)q
FE(\()p Fw(t)2028 156 y Fn(2)2069 144 y FE(\)\)\))-428
340 y FK(W)m(e)31 b(get)g(the)g(co)m(rresp)s(onding)h(algo)m(rithmic)f
(function)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray -322 547 a FH(Lpref)o FK(\()-20
550 y FC(t)20 547 y FK(\))-322 660 y FI(if)-231 663 y
FC(t)-161 660 y FK(=)f FH(Empty)-201 773 y FI(then)h(result)26
b FG( )f FH(St)-6 b(a)n(ck)n FK(\(no)s(de)q(\))p FA(:)p
FH(Empty)-201 886 y FI(else)63 b FK(\()50 883 y FC(e)97
886 y FA(;)15 b FC(t)170 900 y FB(1)217 886 y FA(;)g
FC(t)290 900 y FB(2)337 886 y FK(\))25 b FG( )h FH(Make)768
851 y Fo(\000)p Fx(1)862 886 y FK(\()897 889 y FC(t)937
886 y FK(\))15 999 y FI(result)g FG( )f FH(Push)p FK(\()642
996 y FC(e)688 999 y FA(;)15 b FH(Append)p FK(\()p FH(Lpref)o
FK(\()p FC(t)1438 1013 y FB(1)1485 999 y FK(\))p FA(;)g
FH(Lpref)o FK(\()p FC(t)1895 1013 y FB(2)1942 999 y FK(\)\)\))p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb
2221 1639 a FJ(83)9 b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 84 84
TeXDict begin 84 83 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation84) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.84) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Sea)m(rch/Bina)m(ry)37 b(trees/Left)h(in\014x)p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(Simila)m(rly)-8 b(,)29 b(w)m(e)j(can)e(consider)h(again)
f(the)h(left)f(in\014x)f(traversal:)-39 -46 y FH(Linf)p
FK(\()p FH(Empty)o FK(\))d FG(!)f FH(St)-6 b(a)n(ck)o
FK(\(no)s(de\))p FA(:)p FH(Empty)-355 92 y(Linf)p FK(\()p
FH(Make)o FK(\()163 89 y FC(e)210 92 y FA(;)15 b FC(t)283
106 y FB(1)330 92 y FA(;)g FC(t)403 106 y FB(2)450 92
y FK(\)\))26 b FG(!)f FH(Append)o FK(\()p FH(Linf)p FK(\()p
FC(t)1298 106 y FB(1)1345 92 y FK(\))p FA(;)15 b FH(Push)q
FK(\()1677 89 y FC(e)1723 92 y FA(;)g FH(Linf)q FK(\()p
FC(t)2026 106 y FB(2)2073 92 y FK(\)\)\))-458 296 y(Hence)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -322 504 a FH(Linf)p FK(\()-93 507 y FC(t)-53
504 y FK(\))-322 617 y FI(if)-231 620 y FC(t)-161 617
y FK(=)30 b FH(Empty)-201 730 y FI(then)h(result)26 b
FG( )f FH(St)-6 b(a)n(ck)n FK(\(no)s(de)q(\))p FA(:)p
FH(Empty)-201 843 y FI(else)63 b FK(\()50 840 y FC(e)97
843 y FA(;)15 b FC(t)170 857 y FB(1)217 843 y FA(;)g
FC(t)290 857 y FB(2)337 843 y FK(\))25 b FG( )h FH(Make)768
807 y Fo(\000)p Fx(1)862 843 y FK(\()897 846 y FC(t)937
843 y FK(\))15 956 y FI(result)g FG( )f FH(Append)o FK(\()p
FH(Linf)p FK(\()p FC(t)1022 970 y FB(1)1069 956 y FK(\))p
FA(;)15 b FH(Push)p FK(\()1400 953 y FC(e)1447 956 y
FA(;)g FH(Linf)q FK(\()p FC(t)1750 970 y FB(2)1797 956
y FK(\)\)\))p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525
TeXcolorrgb 2221 1639 a FJ(84)9 b(/)h(95)p 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 85 85
TeXDict begin 85 84 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation85) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.85) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Sea)m(rch/Bina)m(ry)37 b(trees/Left)h(p)s(ost\014x)p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -263 a FK(Simila)m(rly)-8 b(,)29 b(w)m(e)j(can)e(consider)h(again)
f(the)h(left)f(p)s(ost\014x)f(traversal:)317 -81 y FD(Lpost)p
FE(\()p FD(Empty)p FE(\))23 b FF(!)g FD(St)-6 b(a)n(ck)q
FE(\(no)r(de)o(\))p Fy(:)p FD(Empty)31 44 y(Lpost)p FE(\()p
FD(Make)p FE(\()570 42 y Fw(e)613 44 y Fy(;)14 b Fw(t)680
56 y Fn(1)721 44 y Fy(;)g Fw(t)788 56 y Fn(2)830 44 y
FE(\)\))23 b FF(!)-458 252 y FD(Append)p FE(\()p FD(Lpost)p
FE(\()p Fw(t)188 264 y Fn(1)230 252 y FE(\))p Fy(;)14
b FD(Append)p FE(\()p FD(Lpost)p FE(\()p Fw(t)945 264
y Fn(2)987 252 y FE(\))p Fy(;)g FD(Push)p FE(\()1290
250 y Fw(e)1333 252 y Fy(;)g FD(Empty)o FE(\)\)\))p 0
TeXcolorgray 0 TeXcolorgray -458 667 a FH(Lpost)o FK(\()-157
670 y FC(t)-118 667 y FK(\))p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -322 805 a FI(if)-231 808 y FC(t)-161
805 y FK(=)30 b FH(Empty)-201 918 y FI(then)h(result)26
b FG( )f FH(St)-6 b(a)n(ck)n FK(\(no)s(de)q(\))p FA(:)p
FH(Empty)-201 1031 y FI(else)63 b FK(\()50 1028 y FC(e)97
1031 y FA(;)15 b FC(t)170 1045 y FB(1)217 1031 y FA(;)g
FC(t)290 1045 y FB(2)337 1031 y FK(\))25 b FG( )h FH(Make)768
995 y Fo(\000)p Fx(1)862 1031 y FK(\()897 1034 y FC(t)937
1031 y FK(\))15 1144 y Fv(n)h FG( )e FH(Append)o FK(\()p
FH(Lpost)o FK(\()p FC(t)913 1158 y FB(2)960 1144 y FK(\))p
FA(;)15 b FH(Push)p FK(\()1291 1141 y FC(e)1338 1144
y FA(;)g FH(Empty)p FK(\)\))15 1257 y FI(result)26 b
FG( )f FH(Append)o FK(\()p FH(Lpost)o FK(\()p FC(t)1094
1271 y FB(1)1141 1257 y FK(\))p FA(;)15 b Fv(n)r FK(\))p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb
2221 1639 a FJ(85)9 b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 86 86
TeXDict begin 86 85 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation86) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.86) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Sea)m(rch/Bina)m(ry)37 b(trees/Breadth-\014rst)p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(Let)31 b(us)f(recall)g(the)g(rewrite)h(system)g(of)37
b FH(R)m(oots)29 b FK(\(see)i(page)g(66\):)-170 -46 y
FH(R)m(oots)o FK(\()p FH(F)m(orest)o FK(\(no)s(de)q(\))p
FA(:)p FH(Empty)p FK(\))25 b FG(!)1192 -32 y Fx(1)1257
-46 y FH(St)-6 b(a)n(ck)n FK(\(no)s(de)q(\))p FA(:)p
FH(Empty)35 92 y(R)m(oots)o FK(\()p FH(Push)o FK(\()p
FH(Empty)p FA(;)958 101 y FC(f)1005 92 y FK(\)\))26 b
FG(!)1192 106 y Fx(2)1257 92 y FH(R)m(oots)o FK(\()1588
101 y FC(f)1636 92 y FK(\))-276 230 y FH(R)m(oots)o FK(\()p
FH(Push)p FK(\()p FH(Make)p FK(\()586 227 y FC(r)627
230 y FA(;)15 b FC(t)700 244 y FB(1)747 230 y FA(;)g
FC(t)820 244 y FB(2)867 230 y FK(\))p FA(;)958 239 y
FC(f)1005 230 y FK(\)\))26 b FG(!)1192 244 y Fx(3)1257
230 y FH(Push)p FK(\()1513 227 y FC(r)1554 230 y FA(;)15
b FH(R)m(oots)o FK(\()1925 239 y FC(f)1973 230 y FK(\)\))-458
434 y(Rule)30 b FG(!)-169 448 y Fx(2)-100 434 y FK(skips)h(any)e(empt)m
(y)j(tree)f(in)f(the)g(fo)m(rest.)p 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(86)9 b(/)h(95)p
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 87 87
TeXDict begin 87 86 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation87) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.87) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Sea)m(rch/Bina)m(ry)37 b(trees/Breadth-\014rst)g(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -263 a FK(The)30 b(co)m(rresp)s(onding)i(algo)m(rithmic)f
(de\014nition)f(is)p 0 TeXcolorgray 0 TeXcolorgray -458
-70 a FD(R)n(oots)o FE(\()14 b Fw(f)-131 -58 y Fn(1)-89
-70 y FE(\))p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-330 54 a Fe(if)48 b Fw(f)-208 66 y Fn(1)-138 54 y FE(=)27
b FD(F)n(orest)p FE(\(no)r(de\).)p FD(Empty)-219 153
y Fe(then)g(result)c FF( )g FD(St)-6 b(a)n(ck)p FE(\(no)r(de\))p
Fy(:)p FD(Empty)570 b Fd(\003)27 b FE(Rule)g FF(!)2012
165 y Fl(1)-219 253 y Fe(else)57 b FE(\()10 256 y Fw(t)46
253 y Fy(;)97 261 y Fw(f)140 253 y FE(\))24 b FF( )f
FD(Pop)o FE(\()14 b Fw(f)533 265 y Fn(1)575 253 y FE(\))775
b Fd(\003)27 b FD(Push)o FE(\()1707 256 y Fw(t)1744 253
y Fy(;)1794 261 y Fw(f)1838 253 y FE(\))c(=)g Fw(f)2006
265 y Fn(1)-22 353 y Fe(if)61 356 y Fw(t)125 353 y FE(=)k
FD(Empty)61 452 y Fe(then)g(result)c FF( )g FD(R)n(oots)o
FE(\()899 460 y Fw(f)943 452 y FE(\))681 b Fd(\003)27
b FE(Rule)g FF(!)2012 464 y Fl(2)61 552 y Fe(else)57
b(result)23 b FF( )g FD(Push)o FE(\()p FD(R)n(oot)p FE(\()1081
555 y Fw(t)1117 552 y FE(\))p Fy(;)14 b FD(R)n(oots)p
FE(\()1489 560 y Fw(f)1533 552 y FE(\)\))101 b Fd(\003)-14
b FE(Rule)26 b FF(!)2012 564 y Fl(3)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525
TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(87)9
b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 88 88
TeXDict begin 88 87 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation88) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.88) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Sea)m(rch/Bina)m(ry)37 b(trees/Breadth-\014rst)g(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(Let)31 b(us)f(recall)g(the)g(rewrite)h(system)g(of)37
b FH(Next)29 b FK(\(see)i(page)g(67\):)-321 -46 y FH(Next)p
FK(\()p FH(F)m(orest)o FK(\(no)s(de\))p FA(:)p FH(Empty)p
FK(\))26 b FG(!)995 -32 y Fx(1)1060 -46 y FH(F)m(orest)n
FK(\(no)s(de)q(\))p FA(:)p FH(Empty)-116 92 y(Next)o
FK(\()p FH(Push)p FK(\()p FH(Empty)p FA(;)761 101 y FC(f)808
92 y FK(\)\))g FG(!)995 106 y Fx(2)1060 92 y FH(Next)o
FK(\()1344 101 y FC(f)1392 92 y FK(\))-426 230 y FH(Next)o
FK(\()p FH(Push)p FK(\()p FH(Make)p FK(\()389 227 y FC(r)430
230 y FA(;)15 b FC(t)503 244 y FB(1)550 230 y FA(;)g
FC(t)623 244 y FB(2)670 230 y FK(\))p FA(;)761 239 y
FC(f)808 230 y FK(\)\))26 b FG(!)995 244 y Fx(3)1060
230 y FH(Push)o FK(\()p FC(t)1348 244 y FB(1)1395 230
y FA(;)15 b FH(Push)p FK(\()p FC(t)1724 244 y FB(2)1771
230 y FA(;)g FH(Next)p FK(\()2096 239 y FC(f)2144 230
y FK(\)\)\))p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb
2221 1639 a FJ(88)9 b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 89 89
TeXDict begin 89 88 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation89) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.89) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Sea)m(rch/Bina)m(ry)37 b(trees/Breadth-\014rst)g(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -263 a FK(The)30 b(co)m(rresp)s(onding)i(algo)m(rithmic)f
(de\014nition)f(is)p 0 TeXcolorgray 0 TeXcolorgray -458
-70 a FD(Next)p FE(\()14 b Fw(f)-173 -58 y Fn(1)-131
-70 y FE(\))p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-330 54 a Fe(if)48 b Fw(f)-208 66 y Fn(1)-138 54 y FE(=)27
b FD(F)n(orest)p FE(\(no)r(de\).)p FD(Empty)-219 153
y Fe(then)g(result)c FF( )g FD(St)-6 b(a)n(ck)p FE(\(no)r(de\))p
Fy(:)p FD(Empty)337 b Fd(\003)28 b FE(This)e(is)i(rule)f
FF(!)2012 165 y Fl(1)-219 253 y Fe(else)57 b FE(\()10
256 y Fw(t)46 253 y Fy(;)97 261 y Fw(f)140 253 y FE(\))24
b FF( )f FD(Pop)o FE(\()14 b Fw(f)533 265 y Fn(1)575
253 y FE(\))351 b Fd(\003)27 b FE(This)g(means)g FD(Push)o
FE(\()1707 256 y Fw(t)1744 253 y Fy(;)1794 261 y Fw(f)1838
253 y FE(\))c(=)g Fw(f)2006 265 y Fn(1)-22 353 y Fe(if)61
356 y Fw(t)125 353 y FE(=)k FD(Empty)61 452 y Fe(then)g(result)c
FF( )g FD(Next)p FE(\()857 460 y Fw(f)900 452 y FE(\))491
b Fd(\003)28 b FE(This)e(is)i(rule)f FF(!)2012 464 y
Fl(2)61 552 y Fe(else)1222 b Fd(\003)28 b FE(This)e(is)i(rule)f
FF(!)2012 564 y Fl(3)258 651 y Fe(result)c FF( )g FD(Push)o
FE(\()p FD(Left)q FE(\()1059 654 y Fw(t)1095 651 y FE(\))p
Fy(;)14 b FE(\()p FD(Push)p FE(\()p FD(Right)q FE(\()1707
654 y Fw(t)1743 651 y FE(\))p Fy(;)g FD(Next)p FE(\()2072
659 y Fw(f)2116 651 y FE(\)\)\)\))p 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525
TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(89)9
b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 90 90
TeXDict begin 90 89 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation90) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.90) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Sea)m(rch/Bina)m(ry)37 b(trees/Breadth-\014rst)g(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(Let)31 b(us)f(recall)g(\014nally)f(the)h(rules)h(fo)m(r)
g(function)f FG(B)s FK(:)-177 -46 y FG(B)s FK(\()p FH(F)m(orest)o
FK(\(no)s(de\))p FA(:)p FH(Empty)p FK(\))c FG(!)f FH(St)-6
b(a)n(ck)o FK(\(no)s(de\))p FA(:)p FH(Empty)132 92 y
FG(B)s FK(\()245 101 y FC(f)293 92 y FK(\))25 b FG(!)h
FH(Append)n FK(\()p FH(R)m(oots)p FK(\()1175 101 y FC(f)1223
92 y FK(\))p FA(;)15 b FG(B)s FK(\()p FH(Next)o FK(\()1680
101 y FC(f)1728 92 y FK(\)\)\))-458 296 y(where)-207
305 y FC(f)-134 296 y FG(6)p FK(=)25 b FH(Empty)o FK(.)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525
TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(90)9
b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 91 91
TeXDict begin 91 90 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation91) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.91) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Sea)m(rch/Bina)m(ry)37 b(trees/Breadth-\014rst)g(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(The)30 b(co)m(rresp)s(onding)i(algo)m(rithmic)f
(de\014nition)f(is)p 0 TeXcolorgray 0 TeXcolorgray -458
-42 a FG(B)s FK(\()-345 -33 y FC(f)-298 -42 y FK(\))p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray -322 96
a FI(if)-216 105 y FC(f)-138 96 y FK(=)g FH(Empty)-201
209 y FI(then)h(result)26 b FG( )f FH(St)-6 b(a)n(ck)n
FK(\(no)s(de)q(\))p FA(:)p FH(Empty)-201 322 y FI(else)63
b(result)26 b FG( )f FH(Append)o FK(\()p FH(R)m(oots)o
FK(\()1091 331 y FC(f)1139 322 y FK(\))p FA(;)15 b FG(B)s
FK(\()p FH(Next)p FK(\()1597 331 y FC(f)1645 322 y FK(\)\)\))p
0 TeXcolorgray -458 635 a(And)p 0 TeXcolorgray 0 TeXcolorgray
-458 843 a FH(BFS)o FK(\()-233 846 y FC(t)-193 843 y
FK(\))p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-292 980 a FI(result)26 b FG( )f(B)s FK(\()p FH(St)-6
b(a)n(ck)o FK(\(no)s(de\))p FA(:)p FH(Push)q FK(\()980
983 y FC(t)1019 980 y FA(;)15 b FH(Empty)p FK(\)\))p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb
2221 1639 a FJ(91)9 b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 92 92
TeXDict begin 92 91 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation92) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.92) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Sea)m(rch/Bina)m(ry)37 b(trees/Breadth-\014rst)g(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(Let)31 b(us)f(imagine)g(w)m(e)h(w)m(ant)g(to)f(realise)h
(a)f(b)m(readth-\014rst)g(sea)m(rch)h(on)g(tree)1977
-247 y FC(t)2047 -250 y(up)f(to)-458 -137 y(a)g(given)g(depth)87
-128 y(d)173 -137 y FK(and)g(return)g(the)h(encountered)h(no)s(des.)41
b(Let)31 b(us)f(reuse)h(the)-458 -24 y(name)f FH(BFS)g
FK(to)h(call)e(such)i(a)f(function)g(whose)h(signature)g(is)f(then)-56
180 y FH(BFS)25 b FK(:)g FH(Bin-Tree)p FK(\(no)s(de)q(\))p
FA(:)p FK(t)c FG(\002)f FI(int)25 b FG(!)g FH(St)-6 b(a)n(ck)o
FK(\(no)s(de\))p FA(:)p FK(t)-458 384 y(where)31 b(int)f(denotes)h(the)
g(p)s(ositive)e(integers.)-458 597 y(A)h(p)s(ossible)f(de\014ning)i
(equation)f(can)h(b)s(e:)-3 801 y FH(BFS)187 821 y FB(d)234
801 y FK(\()269 804 y FC(t)309 801 y FK(\))26 b(=)f FG(B)526
821 y FB(d)572 801 y FK(\()p FH(Push)p FK(\()863 804
y FC(t)903 801 y FA(;)15 b FH(Empty)p FK(\)\))91 b(with)1604
810 y FC(d)1685 801 y Fb(>)25 b FK(0)-458 1005 y(where)31
b FG(B)-147 1025 y FB(d)-100 1005 y FK(\()-50 1014 y
FC(f)-2 1005 y FK(\))f(is)g(the)h(stack)f(of)h(traversed)f(no)s(des)h
(in)f(the)g(fo)m(rest)1756 1014 y FC(f)1834 1005 y FK(up)g(to)h(depth)
-458 1127 y FC(d)-377 1118 y Fb(>)25 b FK(0)30 b(in)g(a)g
(left-to-right)h(b)m(readth-\014rst)g(w)m(a)m(y)-8 b(.)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525
TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(92)9
b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 93 93
TeXDict begin 93 92 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation93) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.93) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Sea)m(rch/Bina)m(ry)37 b(trees/Breadth-\014rst)g(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(Here)31 b(a)m(re)g(some)g(p)s(ossible)f(equations)g
(de\014ning)h FG(B)1218 -230 y FB(d)1264 -250 y FK(:)-351
-46 y FG(B)-291 -26 y FB(d)-244 -46 y FK(\()p FH(Empty)p
FK(\))25 b(=)g FH(Empty)-110 92 y FG(B)-50 106 y Fx(0)-11
92 y FK(\()39 101 y FC(f)87 92 y FK(\))g(=)g FH(R)m(oots)o
FK(\()574 101 y FC(f)622 92 y FK(\))-118 230 y FG(B)-58
250 y FB(d)-11 230 y FK(\()39 239 y FC(f)87 230 y FK(\))g(=)g
FH(Append)o FK(\()p FH(R)m(oots)o FK(\()948 239 y FC(f)996
230 y FK(\))p FA(;)15 b FG(B)1131 250 y FB(d)1186 244
y Fo(\000)p Fx(1)1281 230 y FK(\()p FH(Next)o FK(\()1600
239 y FC(f)1648 230 y FK(\)\)\))109 b(if)1952 239 y FC(d)2033
230 y FA(>)25 b FK(0)-458 434 y(The)30 b(di\013erence)i(b)s(et)m(w)m
(een)g FG(B)511 454 y FB(d)588 434 y FK(and)e FG(B)i
FK(is)e(the)h(depth)f(limit)1531 443 y FC(d)1586 434
y FK(.)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525 TeXcolorrgb
2221 1639 a FJ(93)9 b(/)h(95)p 0.15 0.15 0.525 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 94 94
TeXDict begin 94 93 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation94) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.94) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Sea)m(rch/Bina)m(ry)37 b(trees/Breadth-\014rst)g(\(cont\))p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(In)30 b(o)m(rder)i(to)f(write)f(the)h(algo)m(rithm)f(co)
m(rresp)s(onding)i(to)f FG(B)1456 -230 y FB(d)1503 -250
y FK(,)f(it)g(is)g(go)s(o)s(d)h(p)m(ractice)-458 -137
y(not)f(to)h(use)f(subscripts,)g(lik)m(e)541 -128 y FC(d)597
-137 y FK(,)h(and)f(use)g(a)g(regula)m(r)h(pa)m(rameter)g(instead:)p
0 TeXcolorgray 0 TeXcolorgray -458 71 a FG(B)s FK(\()-360
80 y FC(d)-305 71 y FA(;)-249 80 y FC(f)-202 71 y FK(\))p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray -322 209
a FI(if)-231 218 y FC(f)-153 209 y FK(=)f FH(F)m(orest)p
FK(\(no)s(de\).)p FH(Empty)-201 322 y FI(then)h(result)26
b FG( )f FH(St)-6 b(a)n(ck)n FK(\(no)s(de)q(\))p FA(:)p
FH(Empty)-322 434 y FI(elseif)-76 443 y FC(d)10 434 y
FK(=)30 b(0)-201 547 y FI(then)h(result)26 b FG( )f FH(R)m(oots)o
FK(\()717 556 y FC(f)765 547 y FK(\))-322 660 y FI(elseif)-76
669 y FC(d)4 660 y FA(>)g FK(0)-201 773 y FI(then)31
b(result)26 b FG( )f FH(Append)o FK(\()p FH(R)m(oots)o
FK(\()1091 782 y FC(f)1139 773 y FK(\))p FA(;)15 b FG(B)s
FK(\()1312 782 y FC(d)1383 773 y FG(\000)p FK(1)p FA(;)g
FH(Next)p FK(\()1824 782 y FC(f)1872 773 y FK(\)\)\))-201
886 y FI(else)63 b(erro)m(r)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 2221 1639 a FJ(94)9 b(/)h(95)p
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 95 95
TeXDict begin 95 94 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -467
-608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467 -608 a -467 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation95) cvn /DEST pdfmark
end
 -467 -608 a -467 -608 a
SDict begin H.S end
 -467 -608 a -467 -608 a
SDict begin H.R end
 -467
-608 a -467 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.95) cvn /DEST pdfmark end
 -467 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.15 0.15 0.525 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -529
-425 a FL(Sea)m(rch/Bina)m(ry)37 b(trees/Depth-\014rst)p
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
-458 -250 a FK(W)m(e)31 b(gave)g(several)f(algo)m(rithms)h(fo)m(r)g
(left-to-right)g(depth-\014rst)f(traversals:)40 b(p)m(re\014x)-458
-137 y(\()p FH(Lpref)p FK(\),)30 b(p)s(ost\014x)g(\()p
FH(Lpost)p FK(\))g(and)f(in\014x)h(\()p FH(Linf)p FK(\).)-458
54 y(What)f(if)h(w)m(e)h(w)m(ant)g(to)f(limit)g(the)g(depth)h(of)f
(such)h(traversals,)f(lik)m(e)h FH(Lpref)p FK(?)-95 212
y Fr(Lpref)124 225 y Fh(d)160 212 y Fs(\()p Fr(Empty)p
Fs(\))21 b(=)g Fr(Empty)-345 328 y(Lpref)-126 336 y FJ(0)-95
328 y Fs(\()p Fr(Make)o Fs(\()173 326 y Fk(e)213 328
y Fq(;)13 b Fk(t)275 336 y Fh(1)310 328 y Fq(;)345 331
y Fk(t)372 336 y FJ(2)403 328 y Fs(\)\))21 b(=)g Fr(Push)p
Fs(\()776 326 y Fk(e)816 328 y Fq(;)13 b Fr(Empty)p Fs(\))-356
444 y Fr(Lpref)-137 457 y Fh(d)-101 444 y Fs(\()p Fr(Make)p
Fs(\()168 442 y Fk(e)207 444 y Fq(;)g Fk(t)269 452 y
Fh(1)305 444 y Fq(;)g Fk(t)367 452 y Fh(2)403 444 y Fs(\)\))21
b(=)g Fr(Push)p Fs(\()776 442 y Fk(e)816 444 y Fq(;)13
b Fr(Append)n Fs(\()p Fr(Lpref)1377 457 y Fh(d)1420 452
y Fa(\000)p FJ(1)1498 444 y Fs(\()p Fk(t)1556 452 y Fh(1)1592
444 y Fs(\))p Fq(;)g Fr(Lpref)1876 457 y Fh(d)1918 452
y Fa(\000)p FJ(1)1997 444 y Fs(\()p Fk(t)2055 452 y Fh(2)2090
444 y Fs(\)\)\))-428 623 y FK(where)-177 632 y FC(d)-96
623 y FA(>)25 b FK(0.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb 0.15 0.15 0.525
TeXcolorrgb 2221 1639 a FJ(95)9 b(/)h(95)p 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
